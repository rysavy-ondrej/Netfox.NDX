// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConversationModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from ConversationModel.proto</summary>
  public static partial class ConversationModelReflection {

    #region Descriptor
    /// <summary>File descriptor for ConversationModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConversationModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdDb252ZXJzYXRpb25Nb2RlbC5wcm90bxIJbmR4Lm1vZGVsGg9GbG93TW9k",
            "ZWwucHJvdG8iOAoPU21iQ29udmVyc2F0aW9uEgsKA1RpZBgEIAEoAxILCgNQ",
            "aWQYBSABKAMSCwoDTWlkGAYgASgDIh8KEEh0dHBDb252ZXJzYXRpb24SCwoD",
            "VXJpGAQgASgJIoABChdBcHBsaWNhdGlvbkNvbnZlcnNhdGlvbhIpCgNTbWIY",
            "CCABKAsyGi5uZHgubW9kZWwuU21iQ29udmVyc2F0aW9uSAASKwoESHR0cBgJ",
            "IAEoCzIbLm5keC5tb2RlbC5IdHRwQ29udmVyc2F0aW9uSABCDQoLQXBwbGlj",
            "YXRpb24iwAIKDkZsb3dBdHRyaWJ1dGVzEhEKCUZpcnN0U2VlbhgBIAEoAxIQ",
            "CghMYXN0U2VlbhgCIAEoAxIPCgdQYWNrZXRzGAMgASgFEg4KBk9jdGV0cxgE",
            "IAEoAxIaChJNaW5pbXVtUGF5bG9hZFNpemUYCCABKAUSFwoPTWVhblBheWxv",
            "YWRTaXplGAkgASgFEhoKEk1heGltdW1QYXlsb2FkU2l6ZRgKIAEoBRIYChBT",
            "dGRldlBheWxvYWRTaXplGAsgASgFEh8KF01pbmltdW1JbnRlcmFycml2YWxU",
            "aW1lGBAgASgDEhwKFE1lYW5JbnRlcmFycml2YWxUaW1lGBEgASgDEh8KF01h",
            "eGltdW1JbnRlcmFycml2YWxUaW1lGBIgASgDEh0KFVN0ZGV2SW50ZXJhcnJp",
            "dmFsVGltZRgTIAEoAyIxCg9QYWNrZXRSZWZlcmVuY2USDwoHQmxvY2tJZBgB",
            "IAEoBRINCgVJbmRleBgCIAEoBSLtAQoMQ29udmVyc2F0aW9uEhYKDkNvbnZl",
            "cnNhdGlvbklkGAEgASgFEhAKCFBhcmVudElkGAIgASgFEisKD0NvbnZlcnNh",
            "dGlvbktleRgEIAEoCzISLm5keC5tb2RlbC5GbG93S2V5EikKBlVwZmxvdxgQ",
            "IAEoCzIZLm5keC5tb2RlbC5GbG93QXR0cmlidXRlcxIrCghEb3duZmxvdxgR",
            "IAEoCzIZLm5keC5tb2RlbC5GbG93QXR0cmlidXRlcxIVCg1VcGZsb3dQYWNr",
            "ZXRzGCAgAygDEhcKD0Rvd25mbG93UGFja2V0cxghIAMoA0IPCg1vcmcubmR4",
            "Lm1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.FlowModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.SmbConversation), global::Ndx.Model.SmbConversation.Parser, new[]{ "Tid", "Pid", "Mid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.HttpConversation), global::Ndx.Model.HttpConversation.Parser, new[]{ "Uri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.ApplicationConversation), global::Ndx.Model.ApplicationConversation.Parser, new[]{ "Smb", "Http" }, new[]{ "Application" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.FlowAttributes), global::Ndx.Model.FlowAttributes.Parser, new[]{ "FirstSeen", "LastSeen", "Packets", "Octets", "MinimumPayloadSize", "MeanPayloadSize", "MaximumPayloadSize", "StdevPayloadSize", "MinimumInterarrivalTime", "MeanInterarrivalTime", "MaximumInterarrivalTime", "StdevInterarrivalTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PacketReference), global::Ndx.Model.PacketReference.Parser, new[]{ "BlockId", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Conversation), global::Ndx.Model.Conversation.Parser, new[]{ "ConversationId", "ParentId", "ConversationKey", "Upflow", "Downflow", "UpflowPackets", "DownflowPackets" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SmbConversation : pb::IMessage<SmbConversation> {
    private static readonly pb::MessageParser<SmbConversation> _parser = new pb::MessageParser<SmbConversation>(() => new SmbConversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmbConversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmbConversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmbConversation(SmbConversation other) : this() {
      tid_ = other.tid_;
      pid_ = other.pid_;
      mid_ = other.mid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmbConversation Clone() {
      return new SmbConversation(this);
    }

    /// <summary>Field number for the "Tid" field.</summary>
    public const int TidFieldNumber = 4;
    private long tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 5;
    private long pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "Mid" field.</summary>
    public const int MidFieldNumber = 6;
    private long mid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Mid {
      get { return mid_; }
      set {
        mid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmbConversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmbConversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (Pid != other.Pid) return false;
      if (Mid != other.Mid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tid != 0L) hash ^= Tid.GetHashCode();
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (Mid != 0L) hash ^= Mid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Tid);
      }
      if (Pid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Pid);
      }
      if (Mid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Mid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tid);
      }
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pid);
      }
      if (Mid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmbConversation other) {
      if (other == null) {
        return;
      }
      if (other.Tid != 0L) {
        Tid = other.Tid;
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.Mid != 0L) {
        Mid = other.Mid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            Tid = input.ReadInt64();
            break;
          }
          case 40: {
            Pid = input.ReadInt64();
            break;
          }
          case 48: {
            Mid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HttpConversation : pb::IMessage<HttpConversation> {
    private static readonly pb::MessageParser<HttpConversation> _parser = new pb::MessageParser<HttpConversation>(() => new HttpConversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HttpConversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpConversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpConversation(HttpConversation other) : this() {
      uri_ = other.uri_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HttpConversation Clone() {
      return new HttpConversation(this);
    }

    /// <summary>Field number for the "Uri" field.</summary>
    public const int UriFieldNumber = 4;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HttpConversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HttpConversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uri != other.Uri) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Uri);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HttpConversation other) {
      if (other == null) {
        return;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34: {
            Uri = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationConversation : pb::IMessage<ApplicationConversation> {
    private static readonly pb::MessageParser<ApplicationConversation> _parser = new pb::MessageParser<ApplicationConversation>(() => new ApplicationConversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationConversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConversation(ApplicationConversation other) : this() {
      switch (other.ApplicationCase) {
        case ApplicationOneofCase.Smb:
          Smb = other.Smb.Clone();
          break;
        case ApplicationOneofCase.Http:
          Http = other.Http.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationConversation Clone() {
      return new ApplicationConversation(this);
    }

    /// <summary>Field number for the "Smb" field.</summary>
    public const int SmbFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.SmbConversation Smb {
      get { return applicationCase_ == ApplicationOneofCase.Smb ? (global::Ndx.Model.SmbConversation) application_ : null; }
      set {
        application_ = value;
        applicationCase_ = value == null ? ApplicationOneofCase.None : ApplicationOneofCase.Smb;
      }
    }

    /// <summary>Field number for the "Http" field.</summary>
    public const int HttpFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.HttpConversation Http {
      get { return applicationCase_ == ApplicationOneofCase.Http ? (global::Ndx.Model.HttpConversation) application_ : null; }
      set {
        application_ = value;
        applicationCase_ = value == null ? ApplicationOneofCase.None : ApplicationOneofCase.Http;
      }
    }

    private object application_;
    /// <summary>Enum of possible cases for the "Application" oneof.</summary>
    public enum ApplicationOneofCase {
      None = 0,
      Smb = 8,
      Http = 9,
    }
    private ApplicationOneofCase applicationCase_ = ApplicationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationOneofCase ApplicationCase {
      get { return applicationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApplication() {
      applicationCase_ = ApplicationOneofCase.None;
      application_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationConversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationConversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Smb, other.Smb)) return false;
      if (!object.Equals(Http, other.Http)) return false;
      if (ApplicationCase != other.ApplicationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (applicationCase_ == ApplicationOneofCase.Smb) hash ^= Smb.GetHashCode();
      if (applicationCase_ == ApplicationOneofCase.Http) hash ^= Http.GetHashCode();
      hash ^= (int) applicationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (applicationCase_ == ApplicationOneofCase.Smb) {
        output.WriteRawTag(66);
        output.WriteMessage(Smb);
      }
      if (applicationCase_ == ApplicationOneofCase.Http) {
        output.WriteRawTag(74);
        output.WriteMessage(Http);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (applicationCase_ == ApplicationOneofCase.Smb) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Smb);
      }
      if (applicationCase_ == ApplicationOneofCase.Http) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationConversation other) {
      if (other == null) {
        return;
      }
      switch (other.ApplicationCase) {
        case ApplicationOneofCase.Smb:
          Smb = other.Smb;
          break;
        case ApplicationOneofCase.Http:
          Http = other.Http;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 66: {
            global::Ndx.Model.SmbConversation subBuilder = new global::Ndx.Model.SmbConversation();
            if (applicationCase_ == ApplicationOneofCase.Smb) {
              subBuilder.MergeFrom(Smb);
            }
            input.ReadMessage(subBuilder);
            Smb = subBuilder;
            break;
          }
          case 74: {
            global::Ndx.Model.HttpConversation subBuilder = new global::Ndx.Model.HttpConversation();
            if (applicationCase_ == ApplicationOneofCase.Http) {
              subBuilder.MergeFrom(Http);
            }
            input.ReadMessage(subBuilder);
            Http = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FlowAttributes : pb::IMessage<FlowAttributes> {
    private static readonly pb::MessageParser<FlowAttributes> _parser = new pb::MessageParser<FlowAttributes>(() => new FlowAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlowAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowAttributes(FlowAttributes other) : this() {
      firstSeen_ = other.firstSeen_;
      lastSeen_ = other.lastSeen_;
      packets_ = other.packets_;
      octets_ = other.octets_;
      minimumPayloadSize_ = other.minimumPayloadSize_;
      meanPayloadSize_ = other.meanPayloadSize_;
      maximumPayloadSize_ = other.maximumPayloadSize_;
      stdevPayloadSize_ = other.stdevPayloadSize_;
      minimumInterarrivalTime_ = other.minimumInterarrivalTime_;
      meanInterarrivalTime_ = other.meanInterarrivalTime_;
      maximumInterarrivalTime_ = other.maximumInterarrivalTime_;
      stdevInterarrivalTime_ = other.stdevInterarrivalTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowAttributes Clone() {
      return new FlowAttributes(this);
    }

    /// <summary>Field number for the "FirstSeen" field.</summary>
    public const int FirstSeenFieldNumber = 1;
    private long firstSeen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstSeen {
      get { return firstSeen_; }
      set {
        firstSeen_ = value;
      }
    }

    /// <summary>Field number for the "LastSeen" field.</summary>
    public const int LastSeenFieldNumber = 2;
    private long lastSeen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSeen {
      get { return lastSeen_; }
      set {
        lastSeen_ = value;
      }
    }

    /// <summary>Field number for the "Packets" field.</summary>
    public const int PacketsFieldNumber = 3;
    private int packets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Packets {
      get { return packets_; }
      set {
        packets_ = value;
      }
    }

    /// <summary>Field number for the "Octets" field.</summary>
    public const int OctetsFieldNumber = 4;
    private long octets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Octets {
      get { return octets_; }
      set {
        octets_ = value;
      }
    }

    /// <summary>Field number for the "MinimumPayloadSize" field.</summary>
    public const int MinimumPayloadSizeFieldNumber = 8;
    private int minimumPayloadSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumPayloadSize {
      get { return minimumPayloadSize_; }
      set {
        minimumPayloadSize_ = value;
      }
    }

    /// <summary>Field number for the "MeanPayloadSize" field.</summary>
    public const int MeanPayloadSizeFieldNumber = 9;
    private int meanPayloadSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MeanPayloadSize {
      get { return meanPayloadSize_; }
      set {
        meanPayloadSize_ = value;
      }
    }

    /// <summary>Field number for the "MaximumPayloadSize" field.</summary>
    public const int MaximumPayloadSizeFieldNumber = 10;
    private int maximumPayloadSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumPayloadSize {
      get { return maximumPayloadSize_; }
      set {
        maximumPayloadSize_ = value;
      }
    }

    /// <summary>Field number for the "StdevPayloadSize" field.</summary>
    public const int StdevPayloadSizeFieldNumber = 11;
    private int stdevPayloadSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StdevPayloadSize {
      get { return stdevPayloadSize_; }
      set {
        stdevPayloadSize_ = value;
      }
    }

    /// <summary>Field number for the "MinimumInterarrivalTime" field.</summary>
    public const int MinimumInterarrivalTimeFieldNumber = 16;
    private long minimumInterarrivalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinimumInterarrivalTime {
      get { return minimumInterarrivalTime_; }
      set {
        minimumInterarrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "MeanInterarrivalTime" field.</summary>
    public const int MeanInterarrivalTimeFieldNumber = 17;
    private long meanInterarrivalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MeanInterarrivalTime {
      get { return meanInterarrivalTime_; }
      set {
        meanInterarrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "MaximumInterarrivalTime" field.</summary>
    public const int MaximumInterarrivalTimeFieldNumber = 18;
    private long maximumInterarrivalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaximumInterarrivalTime {
      get { return maximumInterarrivalTime_; }
      set {
        maximumInterarrivalTime_ = value;
      }
    }

    /// <summary>Field number for the "StdevInterarrivalTime" field.</summary>
    public const int StdevInterarrivalTimeFieldNumber = 19;
    private long stdevInterarrivalTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StdevInterarrivalTime {
      get { return stdevInterarrivalTime_; }
      set {
        stdevInterarrivalTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlowAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlowAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstSeen != other.FirstSeen) return false;
      if (LastSeen != other.LastSeen) return false;
      if (Packets != other.Packets) return false;
      if (Octets != other.Octets) return false;
      if (MinimumPayloadSize != other.MinimumPayloadSize) return false;
      if (MeanPayloadSize != other.MeanPayloadSize) return false;
      if (MaximumPayloadSize != other.MaximumPayloadSize) return false;
      if (StdevPayloadSize != other.StdevPayloadSize) return false;
      if (MinimumInterarrivalTime != other.MinimumInterarrivalTime) return false;
      if (MeanInterarrivalTime != other.MeanInterarrivalTime) return false;
      if (MaximumInterarrivalTime != other.MaximumInterarrivalTime) return false;
      if (StdevInterarrivalTime != other.StdevInterarrivalTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstSeen != 0L) hash ^= FirstSeen.GetHashCode();
      if (LastSeen != 0L) hash ^= LastSeen.GetHashCode();
      if (Packets != 0) hash ^= Packets.GetHashCode();
      if (Octets != 0L) hash ^= Octets.GetHashCode();
      if (MinimumPayloadSize != 0) hash ^= MinimumPayloadSize.GetHashCode();
      if (MeanPayloadSize != 0) hash ^= MeanPayloadSize.GetHashCode();
      if (MaximumPayloadSize != 0) hash ^= MaximumPayloadSize.GetHashCode();
      if (StdevPayloadSize != 0) hash ^= StdevPayloadSize.GetHashCode();
      if (MinimumInterarrivalTime != 0L) hash ^= MinimumInterarrivalTime.GetHashCode();
      if (MeanInterarrivalTime != 0L) hash ^= MeanInterarrivalTime.GetHashCode();
      if (MaximumInterarrivalTime != 0L) hash ^= MaximumInterarrivalTime.GetHashCode();
      if (StdevInterarrivalTime != 0L) hash ^= StdevInterarrivalTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstSeen != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FirstSeen);
      }
      if (LastSeen != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastSeen);
      }
      if (Packets != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Packets);
      }
      if (Octets != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Octets);
      }
      if (MinimumPayloadSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MinimumPayloadSize);
      }
      if (MeanPayloadSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MeanPayloadSize);
      }
      if (MaximumPayloadSize != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumPayloadSize);
      }
      if (StdevPayloadSize != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StdevPayloadSize);
      }
      if (MinimumInterarrivalTime != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MinimumInterarrivalTime);
      }
      if (MeanInterarrivalTime != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(MeanInterarrivalTime);
      }
      if (MaximumInterarrivalTime != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(MaximumInterarrivalTime);
      }
      if (StdevInterarrivalTime != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(StdevInterarrivalTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstSeen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstSeen);
      }
      if (LastSeen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSeen);
      }
      if (Packets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Packets);
      }
      if (Octets != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Octets);
      }
      if (MinimumPayloadSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumPayloadSize);
      }
      if (MeanPayloadSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeanPayloadSize);
      }
      if (MaximumPayloadSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumPayloadSize);
      }
      if (StdevPayloadSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StdevPayloadSize);
      }
      if (MinimumInterarrivalTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinimumInterarrivalTime);
      }
      if (MeanInterarrivalTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MeanInterarrivalTime);
      }
      if (MaximumInterarrivalTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaximumInterarrivalTime);
      }
      if (StdevInterarrivalTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StdevInterarrivalTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlowAttributes other) {
      if (other == null) {
        return;
      }
      if (other.FirstSeen != 0L) {
        FirstSeen = other.FirstSeen;
      }
      if (other.LastSeen != 0L) {
        LastSeen = other.LastSeen;
      }
      if (other.Packets != 0) {
        Packets = other.Packets;
      }
      if (other.Octets != 0L) {
        Octets = other.Octets;
      }
      if (other.MinimumPayloadSize != 0) {
        MinimumPayloadSize = other.MinimumPayloadSize;
      }
      if (other.MeanPayloadSize != 0) {
        MeanPayloadSize = other.MeanPayloadSize;
      }
      if (other.MaximumPayloadSize != 0) {
        MaximumPayloadSize = other.MaximumPayloadSize;
      }
      if (other.StdevPayloadSize != 0) {
        StdevPayloadSize = other.StdevPayloadSize;
      }
      if (other.MinimumInterarrivalTime != 0L) {
        MinimumInterarrivalTime = other.MinimumInterarrivalTime;
      }
      if (other.MeanInterarrivalTime != 0L) {
        MeanInterarrivalTime = other.MeanInterarrivalTime;
      }
      if (other.MaximumInterarrivalTime != 0L) {
        MaximumInterarrivalTime = other.MaximumInterarrivalTime;
      }
      if (other.StdevInterarrivalTime != 0L) {
        StdevInterarrivalTime = other.StdevInterarrivalTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FirstSeen = input.ReadInt64();
            break;
          }
          case 16: {
            LastSeen = input.ReadInt64();
            break;
          }
          case 24: {
            Packets = input.ReadInt32();
            break;
          }
          case 32: {
            Octets = input.ReadInt64();
            break;
          }
          case 64: {
            MinimumPayloadSize = input.ReadInt32();
            break;
          }
          case 72: {
            MeanPayloadSize = input.ReadInt32();
            break;
          }
          case 80: {
            MaximumPayloadSize = input.ReadInt32();
            break;
          }
          case 88: {
            StdevPayloadSize = input.ReadInt32();
            break;
          }
          case 128: {
            MinimumInterarrivalTime = input.ReadInt64();
            break;
          }
          case 136: {
            MeanInterarrivalTime = input.ReadInt64();
            break;
          }
          case 144: {
            MaximumInterarrivalTime = input.ReadInt64();
            break;
          }
          case 152: {
            StdevInterarrivalTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	This class is used to reference packets within conversations.
  ////	&lt;/summary>
  /// </summary>
  public sealed partial class PacketReference : pb::IMessage<PacketReference> {
    private static readonly pb::MessageParser<PacketReference> _parser = new pb::MessageParser<PacketReference>(() => new PacketReference());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketReference(PacketReference other) : this() {
      blockId_ = other.blockId_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketReference Clone() {
      return new PacketReference(this);
    }

    /// <summary>Field number for the "BlockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private int blockId_;
    /// <summary>
    //// &lt;summary>
    ////	The id of block in which the packet is located.
    ////	&lt;summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    //// &lt;summary>
    ////	The index within the block of packets.
    ////	&lt;summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketReference other) {
      if (other == null) {
        return;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Stores the properties of a single conversation.
  //// &lt;/summary>
  /// </summary>
  public sealed partial class Conversation : pb::IMessage<Conversation> {
    private static readonly pb::MessageParser<Conversation> _parser = new pb::MessageParser<Conversation>(() => new Conversation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Conversation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ConversationModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conversation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conversation(Conversation other) : this() {
      conversationId_ = other.conversationId_;
      parentId_ = other.parentId_;
      ConversationKey = other.conversationKey_ != null ? other.ConversationKey.Clone() : null;
      Upflow = other.upflow_ != null ? other.Upflow.Clone() : null;
      Downflow = other.downflow_ != null ? other.Downflow.Clone() : null;
      upflowPackets_ = other.upflowPackets_.Clone();
      downflowPackets_ = other.downflowPackets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conversation Clone() {
      return new Conversation(this);
    }

    /// <summary>Field number for the "ConversationId" field.</summary>
    public const int ConversationIdFieldNumber = 1;
    private int conversationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = value;
      }
    }

    /// <summary>Field number for the "ParentId" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private int parentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentId {
      get { return parentId_; }
      set {
        parentId_ = value;
      }
    }

    /// <summary>Field number for the "ConversationKey" field.</summary>
    public const int ConversationKeyFieldNumber = 4;
    private global::Ndx.Model.FlowKey conversationKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.FlowKey ConversationKey {
      get { return conversationKey_; }
      set {
        conversationKey_ = value;
      }
    }

    /// <summary>Field number for the "Upflow" field.</summary>
    public const int UpflowFieldNumber = 16;
    private global::Ndx.Model.FlowAttributes upflow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.FlowAttributes Upflow {
      get { return upflow_; }
      set {
        upflow_ = value;
      }
    }

    /// <summary>Field number for the "Downflow" field.</summary>
    public const int DownflowFieldNumber = 17;
    private global::Ndx.Model.FlowAttributes downflow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.FlowAttributes Downflow {
      get { return downflow_; }
      set {
        downflow_ = value;
      }
    }

    /// <summary>Field number for the "UpflowPackets" field.</summary>
    public const int UpflowPacketsFieldNumber = 32;
    private static readonly pb::FieldCodec<long> _repeated_upflowPackets_codec
        = pb::FieldCodec.ForInt64(258);
    private readonly pbc::RepeatedField<long> upflowPackets_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UpflowPackets {
      get { return upflowPackets_; }
    }

    /// <summary>Field number for the "DownflowPackets" field.</summary>
    public const int DownflowPacketsFieldNumber = 33;
    private static readonly pb::FieldCodec<long> _repeated_downflowPackets_codec
        = pb::FieldCodec.ForInt64(266);
    private readonly pbc::RepeatedField<long> downflowPackets_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DownflowPackets {
      get { return downflowPackets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Conversation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Conversation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversationId != other.ConversationId) return false;
      if (ParentId != other.ParentId) return false;
      if (!object.Equals(ConversationKey, other.ConversationKey)) return false;
      if (!object.Equals(Upflow, other.Upflow)) return false;
      if (!object.Equals(Downflow, other.Downflow)) return false;
      if(!upflowPackets_.Equals(other.upflowPackets_)) return false;
      if(!downflowPackets_.Equals(other.downflowPackets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConversationId != 0) hash ^= ConversationId.GetHashCode();
      if (ParentId != 0) hash ^= ParentId.GetHashCode();
      if (conversationKey_ != null) hash ^= ConversationKey.GetHashCode();
      if (upflow_ != null) hash ^= Upflow.GetHashCode();
      if (downflow_ != null) hash ^= Downflow.GetHashCode();
      hash ^= upflowPackets_.GetHashCode();
      hash ^= downflowPackets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConversationId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConversationId);
      }
      if (ParentId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentId);
      }
      if (conversationKey_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConversationKey);
      }
      if (upflow_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Upflow);
      }
      if (downflow_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Downflow);
      }
      upflowPackets_.WriteTo(output, _repeated_upflowPackets_codec);
      downflowPackets_.WriteTo(output, _repeated_downflowPackets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConversationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConversationId);
      }
      if (ParentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentId);
      }
      if (conversationKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationKey);
      }
      if (upflow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Upflow);
      }
      if (downflow_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Downflow);
      }
      size += upflowPackets_.CalculateSize(_repeated_upflowPackets_codec);
      size += downflowPackets_.CalculateSize(_repeated_downflowPackets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Conversation other) {
      if (other == null) {
        return;
      }
      if (other.ConversationId != 0) {
        ConversationId = other.ConversationId;
      }
      if (other.ParentId != 0) {
        ParentId = other.ParentId;
      }
      if (other.conversationKey_ != null) {
        if (conversationKey_ == null) {
          conversationKey_ = new global::Ndx.Model.FlowKey();
        }
        ConversationKey.MergeFrom(other.ConversationKey);
      }
      if (other.upflow_ != null) {
        if (upflow_ == null) {
          upflow_ = new global::Ndx.Model.FlowAttributes();
        }
        Upflow.MergeFrom(other.Upflow);
      }
      if (other.downflow_ != null) {
        if (downflow_ == null) {
          downflow_ = new global::Ndx.Model.FlowAttributes();
        }
        Downflow.MergeFrom(other.Downflow);
      }
      upflowPackets_.Add(other.upflowPackets_);
      downflowPackets_.Add(other.downflowPackets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConversationId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentId = input.ReadInt32();
            break;
          }
          case 34: {
            if (conversationKey_ == null) {
              conversationKey_ = new global::Ndx.Model.FlowKey();
            }
            input.ReadMessage(conversationKey_);
            break;
          }
          case 130: {
            if (upflow_ == null) {
              upflow_ = new global::Ndx.Model.FlowAttributes();
            }
            input.ReadMessage(upflow_);
            break;
          }
          case 138: {
            if (downflow_ == null) {
              downflow_ = new global::Ndx.Model.FlowAttributes();
            }
            input.ReadMessage(downflow_);
            break;
          }
          case 258:
          case 256: {
            upflowPackets_.AddEntriesFrom(input, _repeated_upflowPackets_codec);
            break;
          }
          case 266:
          case 264: {
            downflowPackets_.AddEntriesFrom(input, _repeated_downflowPackets_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
