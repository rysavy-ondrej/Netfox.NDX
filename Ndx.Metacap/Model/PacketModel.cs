// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from PacketModel.proto</summary>
  public static partial class PacketModelReflection {

    #region Descriptor
    /// <summary>File descriptor for PacketModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYWNrZXRNb2RlbC5wcm90bxIJbmR4Lm1vZGVsGg9Db25zdGFudHMucHJv",
            "dG8ivQEKCFJhd0ZyYW1lEikKCExpbmtUeXBlGAEgASgOMhcubmR4Lm1vZGVs",
            "LkRhdGFMaW5rVHlwZRITCgtGcmFtZU51bWJlchgCIAEoBRITCgtGcmFtZUxl",
            "bmd0aBgDIAEoBRITCgtGcmFtZU9mZnNldBgEIAEoAxIRCglUaW1lU3RhbXAY",
            "BSABKAMSEQoJUHJvY2Vzc0lkGAYgASgDEhMKC1Byb2Nlc3NOYW1lGAcgASgJ",
            "EgwKBERhdGEYCiABKAwiKwoJQnl0ZVJhbmdlEg4KBk9mZnNldBgBIAEoBRIO",
            "CgZMZW5ndGgYAiABKAUiOQoSRGF0YWxpbmtQYWNrZXRVbml0EiMKBUJ5dGVz",
            "GAEgASgLMhQubmR4Lm1vZGVsLkJ5dGVSYW5nZSI4ChFOZXR3b3JrUGFja2V0",
            "VW5pdBIjCgVCeXRlcxgBIAEoCzIULm5keC5tb2RlbC5CeXRlUmFuZ2UiOgoT",
            "VHJhbnNwb3J0UGFja2V0VW5pdBIjCgVCeXRlcxgBIAEoCzIULm5keC5tb2Rl",
            "bC5CeXRlUmFuZ2UiPAoVQXBwbGljYXRpb25QYWNrZXRVbml0EiMKBUJ5dGVz",
            "GAEgASgLMhQubmR4Lm1vZGVsLkJ5dGVSYW5nZSKnAgoJTWV0YUZyYW1lEhMK",
            "C0ZyYW1lTnVtYmVyGAEgASgFEhMKC0ZyYW1lTGVuZ3RoGAIgASgFEhMKC0Zy",
            "YW1lT2Zmc2V0GAMgASgDEhEKCVRpbWVTdGFtcBgEIAEoAxIvCghEYXRhbGlu",
            "axgKIAEoCzIdLm5keC5tb2RlbC5EYXRhbGlua1BhY2tldFVuaXQSLQoHTmV0",
            "d29yaxgUIAEoCzIcLm5keC5tb2RlbC5OZXR3b3JrUGFja2V0VW5pdBIxCglU",
            "cmFuc3BvcnQYHiABKAsyHi5uZHgubW9kZWwuVHJhbnNwb3J0UGFja2V0VW5p",
            "dBI1CgtBcHBsaWNhdGlvbhgoIAEoCzIgLm5keC5tb2RlbC5BcHBsaWNhdGlv",
            "blBhY2tldFVuaXQiWQoLUGFja2V0QmxvY2sSDwoHQmxvY2tJZBgBIAEoBRIO",
            "CgZGaWxlSWQYAiABKAUSKQoITGlua1R5cGUYBCABKA4yFy5uZHgubW9kZWwu",
            "RGF0YUxpbmtUeXBlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.ConstantsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.RawFrame), global::Ndx.Model.RawFrame.Parser, new[]{ "LinkType", "FrameNumber", "FrameLength", "FrameOffset", "TimeStamp", "ProcessId", "ProcessName", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.ByteRange), global::Ndx.Model.ByteRange.Parser, new[]{ "Offset", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.DatalinkPacketUnit), global::Ndx.Model.DatalinkPacketUnit.Parser, new[]{ "Bytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.NetworkPacketUnit), global::Ndx.Model.NetworkPacketUnit.Parser, new[]{ "Bytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.TransportPacketUnit), global::Ndx.Model.TransportPacketUnit.Parser, new[]{ "Bytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.ApplicationPacketUnit), global::Ndx.Model.ApplicationPacketUnit.Parser, new[]{ "Bytes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.MetaFrame), global::Ndx.Model.MetaFrame.Parser, new[]{ "FrameNumber", "FrameLength", "FrameOffset", "TimeStamp", "Datalink", "Network", "Transport", "Application" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PacketBlock), global::Ndx.Model.PacketBlock.Parser, new[]{ "BlockId", "FileId", "LinkType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  //// &lt;summary>
  //// Represents a single captured packet and its metadata
  //// &lt;/summary>
  /// </summary>
  public sealed partial class RawFrame : pb::IMessage<RawFrame> {
    private static readonly pb::MessageParser<RawFrame> _parser = new pb::MessageParser<RawFrame>(() => new RawFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawFrame(RawFrame other) : this() {
      linkType_ = other.linkType_;
      frameNumber_ = other.frameNumber_;
      frameLength_ = other.frameLength_;
      frameOffset_ = other.frameOffset_;
      timeStamp_ = other.timeStamp_;
      processId_ = other.processId_;
      processName_ = other.processName_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawFrame Clone() {
      return new RawFrame(this);
    }

    /// <summary>Field number for the "LinkType" field.</summary>
    public const int LinkTypeFieldNumber = 1;
    private global::Ndx.Model.DataLinkType linkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DataLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private int frameNumber_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets frame number.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLength" field.</summary>
    public const int FrameLengthFieldNumber = 3;
    private int frameLength_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the total lenght of the frame.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameLength {
      get { return frameLength_; }
      set {
        frameLength_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 4;
    private long frameOffset_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the offset of the frame in the source file/stream.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the timestamp when the packet was captured.
    //// &lt;/summary>		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "ProcessId" field.</summary>
    public const int ProcessIdFieldNumber = 6;
    private long processId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process id.
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "ProcessName" field.</summary>
    public const int ProcessNameFieldNumber = 7;
    private string processName_ = "";
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process name.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the raw frame content.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LinkType != other.LinkType) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLength != other.FrameLength) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (ProcessId != other.ProcessId) return false;
      if (ProcessName != other.ProcessName) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LinkType != 0) hash ^= LinkType.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLength != 0) hash ^= FrameLength.GetHashCode();
      if (FrameOffset != 0L) hash ^= FrameOffset.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (ProcessId != 0L) hash ^= ProcessId.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LinkType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LinkType);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameNumber);
      }
      if (FrameLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameLength);
      }
      if (FrameOffset != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameOffset);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (ProcessId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ProcessId);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LinkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (FrameLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameLength);
      }
      if (FrameOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffset);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (ProcessId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessId);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawFrame other) {
      if (other == null) {
        return;
      }
      if (other.LinkType != 0) {
        LinkType = other.LinkType;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLength != 0) {
        FrameLength = other.FrameLength;
      }
      if (other.FrameOffset != 0L) {
        FrameOffset = other.FrameOffset;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.ProcessId != 0L) {
        ProcessId = other.ProcessId;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            linkType_ = (global::Ndx.Model.DataLinkType) input.ReadEnum();
            break;
          }
          case 16: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            FrameLength = input.ReadInt32();
            break;
          }
          case 32: {
            FrameOffset = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 48: {
            ProcessId = input.ReadInt64();
            break;
          }
          case 58: {
            ProcessName = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  //// Represents a byte range as the pair of offset and length values.
  //// &lt;/summary>
  /// </summary>
  public sealed partial class ByteRange : pb::IMessage<ByteRange> {
    private static readonly pb::MessageParser<ByteRange> _parser = new pb::MessageParser<ByteRange>(() => new ByteRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ByteRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ByteRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ByteRange(ByteRange other) : this() {
      offset_ = other.offset_;
      length_ = other.length_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ByteRange Clone() {
      return new ByteRange(this);
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 2;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ByteRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ByteRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      if (Length != other.Length) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Offset != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Offset);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Length);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ByteRange other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Offset = input.ReadInt32();
            break;
          }
          case 16: {
            Length = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DatalinkPacketUnit : pb::IMessage<DatalinkPacketUnit> {
    private static readonly pb::MessageParser<DatalinkPacketUnit> _parser = new pb::MessageParser<DatalinkPacketUnit>(() => new DatalinkPacketUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatalinkPacketUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatalinkPacketUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatalinkPacketUnit(DatalinkPacketUnit other) : this() {
      Bytes = other.bytes_ != null ? other.Bytes.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatalinkPacketUnit Clone() {
      return new DatalinkPacketUnit(this);
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private global::Ndx.Model.ByteRange bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ByteRange Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatalinkPacketUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatalinkPacketUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bytes, other.Bytes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bytes_ != null) hash ^= Bytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bytes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatalinkPacketUnit other) {
      if (other == null) {
        return;
      }
      if (other.bytes_ != null) {
        if (bytes_ == null) {
          bytes_ = new global::Ndx.Model.ByteRange();
        }
        Bytes.MergeFrom(other.Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bytes_ == null) {
              bytes_ = new global::Ndx.Model.ByteRange();
            }
            input.ReadMessage(bytes_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkPacketUnit : pb::IMessage<NetworkPacketUnit> {
    private static readonly pb::MessageParser<NetworkPacketUnit> _parser = new pb::MessageParser<NetworkPacketUnit>(() => new NetworkPacketUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkPacketUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacketUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacketUnit(NetworkPacketUnit other) : this() {
      Bytes = other.bytes_ != null ? other.Bytes.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPacketUnit Clone() {
      return new NetworkPacketUnit(this);
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private global::Ndx.Model.ByteRange bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ByteRange Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkPacketUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkPacketUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bytes, other.Bytes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bytes_ != null) hash ^= Bytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bytes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkPacketUnit other) {
      if (other == null) {
        return;
      }
      if (other.bytes_ != null) {
        if (bytes_ == null) {
          bytes_ = new global::Ndx.Model.ByteRange();
        }
        Bytes.MergeFrom(other.Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bytes_ == null) {
              bytes_ = new global::Ndx.Model.ByteRange();
            }
            input.ReadMessage(bytes_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransportPacketUnit : pb::IMessage<TransportPacketUnit> {
    private static readonly pb::MessageParser<TransportPacketUnit> _parser = new pb::MessageParser<TransportPacketUnit>(() => new TransportPacketUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportPacketUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacketUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacketUnit(TransportPacketUnit other) : this() {
      Bytes = other.bytes_ != null ? other.Bytes.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacketUnit Clone() {
      return new TransportPacketUnit(this);
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private global::Ndx.Model.ByteRange bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ByteRange Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportPacketUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportPacketUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bytes, other.Bytes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bytes_ != null) hash ^= Bytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bytes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportPacketUnit other) {
      if (other == null) {
        return;
      }
      if (other.bytes_ != null) {
        if (bytes_ == null) {
          bytes_ = new global::Ndx.Model.ByteRange();
        }
        Bytes.MergeFrom(other.Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bytes_ == null) {
              bytes_ = new global::Ndx.Model.ByteRange();
            }
            input.ReadMessage(bytes_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationPacketUnit : pb::IMessage<ApplicationPacketUnit> {
    private static readonly pb::MessageParser<ApplicationPacketUnit> _parser = new pb::MessageParser<ApplicationPacketUnit>(() => new ApplicationPacketUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationPacketUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacketUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacketUnit(ApplicationPacketUnit other) : this() {
      Bytes = other.bytes_ != null ? other.Bytes.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacketUnit Clone() {
      return new ApplicationPacketUnit(this);
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 1;
    private global::Ndx.Model.ByteRange bytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ByteRange Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationPacketUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationPacketUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bytes, other.Bytes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bytes_ != null) hash ^= Bytes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bytes_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bytes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bytes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationPacketUnit other) {
      if (other == null) {
        return;
      }
      if (other.bytes_ != null) {
        if (bytes_ == null) {
          bytes_ = new global::Ndx.Model.ByteRange();
        }
        Bytes.MergeFrom(other.Bytes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bytes_ == null) {
              bytes_ = new global::Ndx.Model.ByteRange();
            }
            input.ReadMessage(bytes_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Stores the metadata of a single captured frame.
  ////	&lt;/summary>
  /// </summary>
  public sealed partial class MetaFrame : pb::IMessage<MetaFrame> {
    private static readonly pb::MessageParser<MetaFrame> _parser = new pb::MessageParser<MetaFrame>(() => new MetaFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaFrame(MetaFrame other) : this() {
      frameNumber_ = other.frameNumber_;
      frameLength_ = other.frameLength_;
      frameOffset_ = other.frameOffset_;
      timeStamp_ = other.timeStamp_;
      Datalink = other.datalink_ != null ? other.Datalink.Clone() : null;
      Network = other.network_ != null ? other.Network.Clone() : null;
      Transport = other.transport_ != null ? other.Transport.Clone() : null;
      Application = other.application_ != null ? other.Application.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaFrame Clone() {
      return new MetaFrame(this);
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 1;
    private int frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLength" field.</summary>
    public const int FrameLengthFieldNumber = 2;
    private int frameLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameLength {
      get { return frameLength_; }
      set {
        frameLength_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 3;
    private long frameOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "Datalink" field.</summary>
    public const int DatalinkFieldNumber = 10;
    private global::Ndx.Model.DatalinkPacketUnit datalink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DatalinkPacketUnit Datalink {
      get { return datalink_; }
      set {
        datalink_ = value;
      }
    }

    /// <summary>Field number for the "Network" field.</summary>
    public const int NetworkFieldNumber = 20;
    private global::Ndx.Model.NetworkPacketUnit network_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.NetworkPacketUnit Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "Transport" field.</summary>
    public const int TransportFieldNumber = 30;
    private global::Ndx.Model.TransportPacketUnit transport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.TransportPacketUnit Transport {
      get { return transport_; }
      set {
        transport_ = value;
      }
    }

    /// <summary>Field number for the "Application" field.</summary>
    public const int ApplicationFieldNumber = 40;
    private global::Ndx.Model.ApplicationPacketUnit application_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ApplicationPacketUnit Application {
      get { return application_; }
      set {
        application_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLength != other.FrameLength) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (!object.Equals(Datalink, other.Datalink)) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (!object.Equals(Transport, other.Transport)) return false;
      if (!object.Equals(Application, other.Application)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLength != 0) hash ^= FrameLength.GetHashCode();
      if (FrameOffset != 0L) hash ^= FrameOffset.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (datalink_ != null) hash ^= Datalink.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (transport_ != null) hash ^= Transport.GetHashCode();
      if (application_ != null) hash ^= Application.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameNumber);
      }
      if (FrameLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameLength);
      }
      if (FrameOffset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FrameOffset);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TimeStamp);
      }
      if (datalink_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Datalink);
      }
      if (network_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Network);
      }
      if (transport_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Transport);
      }
      if (application_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Application);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (FrameLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameLength);
      }
      if (FrameOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffset);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (datalink_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datalink);
      }
      if (network_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (transport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Transport);
      }
      if (application_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Application);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaFrame other) {
      if (other == null) {
        return;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLength != 0) {
        FrameLength = other.FrameLength;
      }
      if (other.FrameOffset != 0L) {
        FrameOffset = other.FrameOffset;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.datalink_ != null) {
        if (datalink_ == null) {
          datalink_ = new global::Ndx.Model.DatalinkPacketUnit();
        }
        Datalink.MergeFrom(other.Datalink);
      }
      if (other.network_ != null) {
        if (network_ == null) {
          network_ = new global::Ndx.Model.NetworkPacketUnit();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.transport_ != null) {
        if (transport_ == null) {
          transport_ = new global::Ndx.Model.TransportPacketUnit();
        }
        Transport.MergeFrom(other.Transport);
      }
      if (other.application_ != null) {
        if (application_ == null) {
          application_ = new global::Ndx.Model.ApplicationPacketUnit();
        }
        Application.MergeFrom(other.Application);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 16: {
            FrameLength = input.ReadInt32();
            break;
          }
          case 24: {
            FrameOffset = input.ReadInt64();
            break;
          }
          case 32: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 82: {
            if (datalink_ == null) {
              datalink_ = new global::Ndx.Model.DatalinkPacketUnit();
            }
            input.ReadMessage(datalink_);
            break;
          }
          case 162: {
            if (network_ == null) {
              network_ = new global::Ndx.Model.NetworkPacketUnit();
            }
            input.ReadMessage(network_);
            break;
          }
          case 242: {
            if (transport_ == null) {
              transport_ = new global::Ndx.Model.TransportPacketUnit();
            }
            input.ReadMessage(transport_);
            break;
          }
          case 322: {
            if (application_ == null) {
              application_ = new global::Ndx.Model.ApplicationPacketUnit();
            }
            input.ReadMessage(application_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Represents a block of packets.
  //// &lt;/summary>
  /// </summary>
  public sealed partial class PacketBlock : pb::IMessage<PacketBlock> {
    private static readonly pb::MessageParser<PacketBlock> _parser = new pb::MessageParser<PacketBlock>(() => new PacketBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBlock(PacketBlock other) : this() {
      blockId_ = other.blockId_;
      fileId_ = other.fileId_;
      linkType_ = other.linkType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketBlock Clone() {
      return new PacketBlock(this);
    }

    /// <summary>Field number for the "BlockId" field.</summary>
    public const int BlockIdFieldNumber = 1;
    private int blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "FileId" field.</summary>
    public const int FileIdFieldNumber = 2;
    private int fileId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FileId {
      get { return fileId_; }
      set {
        fileId_ = value;
      }
    }

    /// <summary>Field number for the "LinkType" field.</summary>
    public const int LinkTypeFieldNumber = 4;
    private global::Ndx.Model.DataLinkType linkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DataLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId != other.BlockId) return false;
      if (FileId != other.FileId) return false;
      if (LinkType != other.LinkType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (FileId != 0) hash ^= FileId.GetHashCode();
      if (LinkType != 0) hash ^= LinkType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockId);
      }
      if (FileId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FileId);
      }
      if (LinkType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LinkType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockId);
      }
      if (FileId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FileId);
      }
      if (LinkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketBlock other) {
      if (other == null) {
        return;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      if (other.FileId != 0) {
        FileId = other.FileId;
      }
      if (other.LinkType != 0) {
        LinkType = other.LinkType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockId = input.ReadInt32();
            break;
          }
          case 16: {
            FileId = input.ReadInt32();
            break;
          }
          case 32: {
            linkType_ = (global::Ndx.Model.DataLinkType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
