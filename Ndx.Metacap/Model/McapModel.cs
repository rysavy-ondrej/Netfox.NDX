// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: McapModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from McapModel.proto</summary>
  public static partial class McapModelReflection {

    #region Descriptor
    /// <summary>File descriptor for McapModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static McapModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9NY2FwTW9kZWwucHJvdG8SCW5keC5tb2RlbBoRUGFja2V0TW9kZWwucHJv",
            "dG8aF0NvbnZlcnNhdGlvbk1vZGVsLnByb3RvImsKCFBjYXBGaWxlEi0KCkZp",
            "bGVGb3JtYXQYASABKA4yGS5uZHgubW9kZWwuUGNhcEZpbGVGb3JtYXQSCwoD",
            "VXJpGAIgASgJEg8KB01kNWhhc2gYAyABKAwSEgoKSW5nZXN0ZWRPbhgEIAEo",
            "AyJ+CglQY2FwVGFibGUSLgoFSXRlbXMYCiADKAsyHy5uZHgubW9kZWwuUGNh",
            "cFRhYmxlLkl0ZW1zRW50cnkaQQoKSXRlbXNFbnRyeRILCgNrZXkYASABKAUS",
            "IgoFdmFsdWUYAiABKAsyEy5uZHgubW9kZWwuUGNhcEZpbGU6AjgBIpIBChFD",
            "b252ZXJzYXRpb25UYWJsZRI2CgVJdGVtcxgKIAMoCzInLm5keC5tb2RlbC5D",
            "b252ZXJzYXRpb25UYWJsZS5JdGVtc0VudHJ5GkUKCkl0ZW1zRW50cnkSCwoD",
            "a2V5GAEgASgFEiYKBXZhbHVlGAIgASgLMhcubmR4Lm1vZGVsLkNvbnZlcnNh",
            "dGlvbjoCOAEigQEKCkZyYW1lVGFibGUSLwoFSXRlbXMYCiADKAsyIC5uZHgu",
            "bW9kZWwuRnJhbWVUYWJsZS5JdGVtc0VudHJ5GkIKCkl0ZW1zRW50cnkSCwoD",
            "a2V5GAEgASgFEiMKBXZhbHVlGAIgASgLMhQubmR4Lm1vZGVsLk1ldGFGcmFt",
            "ZToCOAEi+gEKDE1ldGFjYXBJbmRleBInCglQY2FwVGFibGUYAiABKAsyFC5u",
            "ZHgubW9kZWwuUGNhcFRhYmxlEj0KC0ZyYW1lVGFibGVzGAMgAygLMigubmR4",
            "Lm1vZGVsLk1ldGFjYXBJbmRleC5GcmFtZVRhYmxlc0VudHJ5EjcKEUNvbnZl",
            "cnNhdGlvblRhYmxlGAQgASgLMhwubmR4Lm1vZGVsLkNvbnZlcnNhdGlvblRh",
            "YmxlGkkKEEZyYW1lVGFibGVzRW50cnkSCwoDa2V5GAEgASgFEiQKBXZhbHVl",
            "GAIgASgLMhUubmR4Lm1vZGVsLkZyYW1lVGFibGU6AjgBKlgKDlBjYXBGaWxl",
            "Rm9ybWF0Eg0KCVJhd0Zvcm1hdBAAEgsKB0xpYnBjYXAQARIKCgZQY2FwbmcQ",
            "AhIKCgZOZXRtb24QAxISCg1Vbmtub3duRm9ybWF0EP8BYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.PacketModelReflection.Descriptor, global::Ndx.Model.ConversationModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ndx.Model.PcapFileFormat), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PcapFile), global::Ndx.Model.PcapFile.Parser, new[]{ "FileFormat", "Uri", "Md5Hash", "IngestedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PcapTable), global::Ndx.Model.PcapTable.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.ConversationTable), global::Ndx.Model.ConversationTable.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.FrameTable), global::Ndx.Model.FrameTable.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.MetacapIndex), global::Ndx.Model.MetacapIndex.Parser, new[]{ "PcapTable", "FrameTables", "ConversationTable" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// &lt;summary>
  ////	Enumerates all supported packet capture file format.
  ////	&lt;/summary>
  /// </summary>
  public enum PcapFileFormat {
    [pbr::OriginalName("RawFormat")] RawFormat = 0,
    [pbr::OriginalName("Libpcap")] Libpcap = 1,
    [pbr::OriginalName("Pcapng")] Pcapng = 2,
    [pbr::OriginalName("Netmon")] Netmon = 3,
    [pbr::OriginalName("UnknownFormat")] UnknownFormat = 255,
  }

  #endregion

  #region Messages
  public sealed partial class PcapFile : pb::IMessage<PcapFile> {
    private static readonly pb::MessageParser<PcapFile> _parser = new pb::MessageParser<PcapFile>(() => new PcapFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PcapFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile(PcapFile other) : this() {
      fileFormat_ = other.fileFormat_;
      uri_ = other.uri_;
      md5Hash_ = other.md5Hash_;
      ingestedOn_ = other.ingestedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile Clone() {
      return new PcapFile(this);
    }

    /// <summary>Field number for the "FileFormat" field.</summary>
    public const int FileFormatFieldNumber = 1;
    private global::Ndx.Model.PcapFileFormat fileFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.PcapFileFormat FileFormat {
      get { return fileFormat_; }
      set {
        fileFormat_ = value;
      }
    }

    /// <summary>Field number for the "Uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Md5hash" field.</summary>
    public const int Md5HashFieldNumber = 3;
    private pb::ByteString md5Hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Md5Hash {
      get { return md5Hash_; }
      set {
        md5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IngestedOn" field.</summary>
    public const int IngestedOnFieldNumber = 4;
    private long ingestedOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IngestedOn {
      get { return ingestedOn_; }
      set {
        ingestedOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PcapFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PcapFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileFormat != other.FileFormat) return false;
      if (Uri != other.Uri) return false;
      if (Md5Hash != other.Md5Hash) return false;
      if (IngestedOn != other.IngestedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileFormat != 0) hash ^= FileFormat.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Md5Hash.Length != 0) hash ^= Md5Hash.GetHashCode();
      if (IngestedOn != 0L) hash ^= IngestedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileFormat != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileFormat);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Md5Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Md5Hash);
      }
      if (IngestedOn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(IngestedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileFormat);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Md5Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Md5Hash);
      }
      if (IngestedOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IngestedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PcapFile other) {
      if (other == null) {
        return;
      }
      if (other.FileFormat != 0) {
        FileFormat = other.FileFormat;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Md5Hash.Length != 0) {
        Md5Hash = other.Md5Hash;
      }
      if (other.IngestedOn != 0L) {
        IngestedOn = other.IngestedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fileFormat_ = (global::Ndx.Model.PcapFileFormat) input.ReadEnum();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            Md5Hash = input.ReadBytes();
            break;
          }
          case 32: {
            IngestedOn = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PcapTable : pb::IMessage<PcapTable> {
    private static readonly pb::MessageParser<PcapTable> _parser = new pb::MessageParser<PcapTable>(() => new PcapTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PcapTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapTable(PcapTable other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapTable Clone() {
      return new PcapTable(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 10;
    private static readonly pbc::MapField<int, global::Ndx.Model.PcapFile>.Codec _map_items_codec
        = new pbc::MapField<int, global::Ndx.Model.PcapFile>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Ndx.Model.PcapFile.Parser), 82);
    private readonly pbc::MapField<int, global::Ndx.Model.PcapFile> items_ = new pbc::MapField<int, global::Ndx.Model.PcapFile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Ndx.Model.PcapFile> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PcapTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PcapTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PcapTable other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Represents a single conversation table.
  ////	&lt;/summary>
  /// </summary>
  public sealed partial class ConversationTable : pb::IMessage<ConversationTable> {
    private static readonly pb::MessageParser<ConversationTable> _parser = new pb::MessageParser<ConversationTable>(() => new ConversationTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTable(ConversationTable other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTable Clone() {
      return new ConversationTable(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 10;
    private static readonly pbc::MapField<int, global::Ndx.Model.Conversation>.Codec _map_items_codec
        = new pbc::MapField<int, global::Ndx.Model.Conversation>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Conversation.Parser), 82);
    private readonly pbc::MapField<int, global::Ndx.Model.Conversation> items_ = new pbc::MapField<int, global::Ndx.Model.Conversation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Ndx.Model.Conversation> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationTable other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Represents a table of meta information about frames.
  ////	&lt;summary>
  /// </summary>
  public sealed partial class FrameTable : pb::IMessage<FrameTable> {
    private static readonly pb::MessageParser<FrameTable> _parser = new pb::MessageParser<FrameTable>(() => new FrameTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable(FrameTable other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable Clone() {
      return new FrameTable(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 10;
    private static readonly pbc::MapField<int, global::Ndx.Model.MetaFrame>.Codec _map_items_codec
        = new pbc::MapField<int, global::Ndx.Model.MetaFrame>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Ndx.Model.MetaFrame.Parser), 82);
    private readonly pbc::MapField<int, global::Ndx.Model.MetaFrame> items_ = new pbc::MapField<int, global::Ndx.Model.MetaFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Ndx.Model.MetaFrame> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameTable other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 82: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetacapIndex : pb::IMessage<MetacapIndex> {
    private static readonly pb::MessageParser<MetacapIndex> _parser = new pb::MessageParser<MetacapIndex>(() => new MetacapIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetacapIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex(MetacapIndex other) : this() {
      PcapTable = other.pcapTable_ != null ? other.PcapTable.Clone() : null;
      frameTables_ = other.frameTables_.Clone();
      ConversationTable = other.conversationTable_ != null ? other.ConversationTable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex Clone() {
      return new MetacapIndex(this);
    }

    /// <summary>Field number for the "PcapTable" field.</summary>
    public const int PcapTableFieldNumber = 2;
    private global::Ndx.Model.PcapTable pcapTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.PcapTable PcapTable {
      get { return pcapTable_; }
      set {
        pcapTable_ = value;
      }
    }

    /// <summary>Field number for the "FrameTables" field.</summary>
    public const int FrameTablesFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Ndx.Model.FrameTable>.Codec _map_frameTables_codec
        = new pbc::MapField<int, global::Ndx.Model.FrameTable>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Ndx.Model.FrameTable.Parser), 26);
    private readonly pbc::MapField<int, global::Ndx.Model.FrameTable> frameTables_ = new pbc::MapField<int, global::Ndx.Model.FrameTable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Ndx.Model.FrameTable> FrameTables {
      get { return frameTables_; }
    }

    /// <summary>Field number for the "ConversationTable" field.</summary>
    public const int ConversationTableFieldNumber = 4;
    private global::Ndx.Model.ConversationTable conversationTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.ConversationTable ConversationTable {
      get { return conversationTable_; }
      set {
        conversationTable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetacapIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetacapIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PcapTable, other.PcapTable)) return false;
      if (!FrameTables.Equals(other.FrameTables)) return false;
      if (!object.Equals(ConversationTable, other.ConversationTable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pcapTable_ != null) hash ^= PcapTable.GetHashCode();
      hash ^= FrameTables.GetHashCode();
      if (conversationTable_ != null) hash ^= ConversationTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pcapTable_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PcapTable);
      }
      frameTables_.WriteTo(output, _map_frameTables_codec);
      if (conversationTable_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConversationTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pcapTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PcapTable);
      }
      size += frameTables_.CalculateSize(_map_frameTables_codec);
      if (conversationTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetacapIndex other) {
      if (other == null) {
        return;
      }
      if (other.pcapTable_ != null) {
        if (pcapTable_ == null) {
          pcapTable_ = new global::Ndx.Model.PcapTable();
        }
        PcapTable.MergeFrom(other.PcapTable);
      }
      frameTables_.Add(other.frameTables_);
      if (other.conversationTable_ != null) {
        if (conversationTable_ == null) {
          conversationTable_ = new global::Ndx.Model.ConversationTable();
        }
        ConversationTable.MergeFrom(other.ConversationTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (pcapTable_ == null) {
              pcapTable_ = new global::Ndx.Model.PcapTable();
            }
            input.ReadMessage(pcapTable_);
            break;
          }
          case 26: {
            frameTables_.AddEntriesFrom(input, _map_frameTables_codec);
            break;
          }
          case 34: {
            if (conversationTable_ == null) {
              conversationTable_ = new global::Ndx.Model.ConversationTable();
            }
            input.ReadMessage(conversationTable_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
