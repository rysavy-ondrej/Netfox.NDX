// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: McapModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from McapModel.proto</summary>
  public static partial class McapModelReflection {

    #region Descriptor
    /// <summary>File descriptor for McapModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static McapModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9NY2FwTW9kZWwucHJvdG8SCW5keC5tb2RlbBoPRmxvd01vZGVsLnByb3Rv",
            "GhdDb252ZXJzYXRpb25Nb2RlbC5wcm90bxoRUGFja2V0TW9kZWwucHJvdG8i",
            "awoIUGNhcEZpbGUSLQoKRmlsZUZvcm1hdBgBIAEoDjIZLm5keC5tb2RlbC5Q",
            "Y2FwRmlsZUZvcm1hdBILCgNVcmkYAiABKAkSDwoHTWQ1aGFzaBgDIAEoDBIS",
            "CgpJbmdlc3RlZE9uGAQgASgDItwBCgxNZXRhY2FwSW5kZXgSQQoNQ29udmVy",
            "c2F0aW9ucxgBIAMoCzIqLm5keC5tb2RlbC5NZXRhY2FwSW5kZXguQ29udmVy",
            "c2F0aW9uc0VudHJ5GikKEENvbnZlcnNhdGlvbkxpc3QSFQoNQ29udmVyc2F0",
            "aW9ucxgBIAMoBRpeChJDb252ZXJzYXRpb25zRW50cnkSCwoDa2V5GAEgASgJ",
            "EjcKBXZhbHVlGAIgASgLMigubmR4Lm1vZGVsLk1ldGFjYXBJbmRleC5Db252",
            "ZXJzYXRpb25MaXN0OgI4ASpYCg5QY2FwRmlsZUZvcm1hdBINCglSYXdGb3Jt",
            "YXQQABILCgdMaWJwY2FwEAESCgoGUGNhcG5nEAISCgoGTmV0bW9uEAMSEgoN",
            "VW5rbm93bkZvcm1hdBD/AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.FlowModelReflection.Descriptor, global::Ndx.Model.ConversationModelReflection.Descriptor, global::Ndx.Model.PacketModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ndx.Model.PcapFileFormat), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PcapFile), global::Ndx.Model.PcapFile.Parser, new[]{ "FileFormat", "Uri", "Md5Hash", "IngestedOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.MetacapIndex), global::Ndx.Model.MetacapIndex.Parser, new[]{ "Conversations" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.MetacapIndex.Types.ConversationList), global::Ndx.Model.MetacapIndex.Types.ConversationList.Parser, new[]{ "Conversations" }, null, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// &lt;summary>
  ////	Enumerates all supported packet capture file format.
  ////	&lt;/summary>
  /// </summary>
  public enum PcapFileFormat {
    [pbr::OriginalName("RawFormat")] RawFormat = 0,
    [pbr::OriginalName("Libpcap")] Libpcap = 1,
    [pbr::OriginalName("Pcapng")] Pcapng = 2,
    [pbr::OriginalName("Netmon")] Netmon = 3,
    [pbr::OriginalName("UnknownFormat")] UnknownFormat = 255,
  }

  #endregion

  #region Messages
  public sealed partial class PcapFile : pb::IMessage<PcapFile> {
    private static readonly pb::MessageParser<PcapFile> _parser = new pb::MessageParser<PcapFile>(() => new PcapFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PcapFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile(PcapFile other) : this() {
      fileFormat_ = other.fileFormat_;
      uri_ = other.uri_;
      md5Hash_ = other.md5Hash_;
      ingestedOn_ = other.ingestedOn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PcapFile Clone() {
      return new PcapFile(this);
    }

    /// <summary>Field number for the "FileFormat" field.</summary>
    public const int FileFormatFieldNumber = 1;
    private global::Ndx.Model.PcapFileFormat fileFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.PcapFileFormat FileFormat {
      get { return fileFormat_; }
      set {
        fileFormat_ = value;
      }
    }

    /// <summary>Field number for the "Uri" field.</summary>
    public const int UriFieldNumber = 2;
    private string uri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uri {
      get { return uri_; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Md5hash" field.</summary>
    public const int Md5HashFieldNumber = 3;
    private pb::ByteString md5Hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Md5Hash {
      get { return md5Hash_; }
      set {
        md5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IngestedOn" field.</summary>
    public const int IngestedOnFieldNumber = 4;
    private long ingestedOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IngestedOn {
      get { return ingestedOn_; }
      set {
        ingestedOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PcapFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PcapFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileFormat != other.FileFormat) return false;
      if (Uri != other.Uri) return false;
      if (Md5Hash != other.Md5Hash) return false;
      if (IngestedOn != other.IngestedOn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileFormat != 0) hash ^= FileFormat.GetHashCode();
      if (Uri.Length != 0) hash ^= Uri.GetHashCode();
      if (Md5Hash.Length != 0) hash ^= Md5Hash.GetHashCode();
      if (IngestedOn != 0L) hash ^= IngestedOn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileFormat != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FileFormat);
      }
      if (Uri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uri);
      }
      if (Md5Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Md5Hash);
      }
      if (IngestedOn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(IngestedOn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileFormat);
      }
      if (Uri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uri);
      }
      if (Md5Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Md5Hash);
      }
      if (IngestedOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IngestedOn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PcapFile other) {
      if (other == null) {
        return;
      }
      if (other.FileFormat != 0) {
        FileFormat = other.FileFormat;
      }
      if (other.Uri.Length != 0) {
        Uri = other.Uri;
      }
      if (other.Md5Hash.Length != 0) {
        Md5Hash = other.Md5Hash;
      }
      if (other.IngestedOn != 0L) {
        IngestedOn = other.IngestedOn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            fileFormat_ = (global::Ndx.Model.PcapFileFormat) input.ReadEnum();
            break;
          }
          case 18: {
            Uri = input.ReadString();
            break;
          }
          case 26: {
            Md5Hash = input.ReadBytes();
            break;
          }
          case 32: {
            IngestedOn = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// &lt;summary>
  ////	Index file is the main entry point to each metacap file.
  ////	&lt;summary>
  /// </summary>
  public sealed partial class MetacapIndex : pb::IMessage<MetacapIndex> {
    private static readonly pb::MessageParser<MetacapIndex> _parser = new pb::MessageParser<MetacapIndex>(() => new MetacapIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetacapIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.McapModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex(MetacapIndex other) : this() {
      conversations_ = other.conversations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetacapIndex Clone() {
      return new MetacapIndex(this);
    }

    /// <summary>Field number for the "Conversations" field.</summary>
    public const int ConversationsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Ndx.Model.MetacapIndex.Types.ConversationList>.Codec _map_conversations_codec
        = new pbc::MapField<string, global::Ndx.Model.MetacapIndex.Types.ConversationList>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.MetacapIndex.Types.ConversationList.Parser), 10);
    private readonly pbc::MapField<string, global::Ndx.Model.MetacapIndex.Types.ConversationList> conversations_ = new pbc::MapField<string, global::Ndx.Model.MetacapIndex.Types.ConversationList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.MetacapIndex.Types.ConversationList> Conversations {
      get { return conversations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetacapIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetacapIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Conversations.Equals(other.Conversations)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Conversations.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conversations_.WriteTo(output, _map_conversations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conversations_.CalculateSize(_map_conversations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetacapIndex other) {
      if (other == null) {
        return;
      }
      conversations_.Add(other.conversations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            conversations_.AddEntriesFrom(input, _map_conversations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MetacapIndex message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ConversationList : pb::IMessage<ConversationList> {
        private static readonly pb::MessageParser<ConversationList> _parser = new pb::MessageParser<ConversationList>(() => new ConversationList());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConversationList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Model.MetacapIndex.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConversationList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConversationList(ConversationList other) : this() {
          conversations_ = other.conversations_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConversationList Clone() {
          return new ConversationList(this);
        }

        /// <summary>Field number for the "Conversations" field.</summary>
        public const int ConversationsFieldNumber = 1;
        private static readonly pb::FieldCodec<int> _repeated_conversations_codec
            = pb::FieldCodec.ForInt32(10);
        private readonly pbc::RepeatedField<int> conversations_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Conversations {
          get { return conversations_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConversationList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConversationList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!conversations_.Equals(other.conversations_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= conversations_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          conversations_.WriteTo(output, _repeated_conversations_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += conversations_.CalculateSize(_repeated_conversations_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConversationList other) {
          if (other == null) {
            return;
          }
          conversations_.Add(other.conversations_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                conversations_.AddEntriesFrom(input, _repeated_conversations_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
