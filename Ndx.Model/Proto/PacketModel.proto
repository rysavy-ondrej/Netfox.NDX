//  
// Copyright (c) BRNO UNIVERSITY OF TECHNOLOGY. All rights reserved.  
// Licensed under the MIT License. See LICENSE file in the solution root for full license information.  
//
syntax = "proto3";
package ndx.model;
option java_package = "org.ndx.model";
import "Constants.proto";

/// <summary>
/// Represents a single captured packet and its metadata
/// </summary>
message Frame {
    DataLinkType LinkType = 1;
	/// <summary>
    /// Gets or sets frame number.
    /// </summary>	
	int32 FrameNumber = 2;
    /// <summary>
    /// Gets or sets the total lenght of the frame.
    /// </summary>	
	int32 FrameLength = 3;
    /// <summary>
    /// Gets or sets the offset of the frame in the source file/stream.
    /// </summary>	
	int64 FrameOffset = 4;
    /// <summary>
    /// Gets or sets the timestamp when the packet was captured.
    /// </summary>		
	int64 TimeStamp = 5;	
	/// <summary>
	///	Gets or sets process id.
	/// </summary>
	int64 ProcessId = 6;
	/// <summary>
	///	Gets or sets process name.
	///	</summary>
	string ProcessName = 7;
	/// <summary>
    /// Gets or sets the raw frame content.
    /// </summary>	
	bytes Data = 10;
	/// <summary>
	///	Gets or sets the conversation ID of this frame.
	///	</summary>
	int32 ConversationId = 11;
}

message Variant {
	oneof Value {
		bool BoolValue = 1;
	    sint32 Int32Value = 2;
		sint64 Int64Value = 3;
	    uint32 UInt32Value = 4;
		uint64 UInt64Value = 5;
		float FloatValue = 6;
		double DoubleValue = 7;
		string StringValue = 8;
		bytes BytesValue = 9;
		string IpAddressValue = 10;
		int64 DateTimeValue = 11;
	}
}

message DecodedFrame {

	int64 FrameNumber = 1;
	string FrameProtocols = 2;
	int64 Timestamp = 3;
	map<string, Variant> Fields = 10;
}


message Parameter {
	string Name = 1;
	map<string,Variant> Properties = 2;
}

message Event {
	message EventValue {
		oneof ValueType {
			Variant VariantValue = 1;
			DecodedFrame PacketValue = 2;
			Parameter ParameterValue = 4;
		}
	}

	string Name = 1;
	int64 Timestamp = 2;
	map<string,EventValue> Items = 3; 
}
