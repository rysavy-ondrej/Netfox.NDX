//  
// Copyright (c) BRNO UNIVERSITY OF TECHNOLOGY. All rights reserved.  
// Licensed under the MIT License. See LICENSE file in the solution root for full license information.  
//
syntax = "proto3";
package ndx.model;
option java_package = "org.ndx.model";
import "Constants.proto";
import "VariantModel.proto";

/// <summary>
/// Represents a single captured packet and its metadata
/// </summary>
message Frame {
    DataLinkType LinkType = 1;
	/// <summary>
    /// Gets or sets frame number.
    /// </summary>	
	int32 FrameNumber = 2;
    /// <summary>
    /// Gets or sets the total lenght of the frame.
    /// </summary>	
	int32 FrameLength = 3;
    /// <summary>
    /// Gets or sets the offset of the frame in the source file/stream.
    /// </summary>	
	int64 FrameOffset = 4;
    /// <summary>
    /// Gets or sets the timestamp when the packet was captured.
    /// </summary>		
	int64 TimeStamp = 5;	
	/// <summary>
	///	Gets or sets process id.
	/// </summary>
	int64 ProcessId = 6;
	/// <summary>
	///	Gets or sets process name.
	///	</summary>
	string ProcessName = 7;
	/// <summary>
    /// Gets or sets the raw frame content.
    /// </summary>	
	bytes Data = 10;
	/// <summary>
	///	Gets or sets the conversation ID of this frame.
	///	</summary>
	int32 ConversationId = 11;
}

/// Represents a decoded frame. Decoded frame is a collection of fields and their values. Value are represented as Variant.
message DecodedFrame {

	int64 FrameNumber = 1;
	string FrameProtocols = 2;
	int64 Timestamp = 3;
	map<string, Variant> Fields = 10;
}


/// Frame table contains information that helps to access data in the referenced PCAP file. It consists of fixed 
/// fields for easy access to individual records.
message FrameTable {
    fixed32 FrameNumber = 1;
    fixed64 FrameOffset = 2;
    fixed32 ConversationNumber = 3;
}
