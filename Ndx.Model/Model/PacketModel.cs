// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from PacketModel.proto</summary>
  public static partial class PacketModelReflection {

    #region Descriptor
    /// <summary>File descriptor for PacketModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYWNrZXRNb2RlbC5wcm90bxIJbmR4Lm1vZGVsGg9Db25zdGFudHMucHJv",
            "dG8aElZhcmlhbnRNb2RlbC5wcm90byLSAQoFRnJhbWUSKQoITGlua1R5cGUY",
            "ASABKA4yFy5uZHgubW9kZWwuRGF0YUxpbmtUeXBlEhMKC0ZyYW1lTnVtYmVy",
            "GAIgASgFEhMKC0ZyYW1lTGVuZ3RoGAMgASgFEhMKC0ZyYW1lT2Zmc2V0GAQg",
            "ASgDEhEKCVRpbWVTdGFtcBgFIAEoAxIRCglQcm9jZXNzSWQYBiABKAMSEwoL",
            "UHJvY2Vzc05hbWUYByABKAkSDAoERGF0YRgKIAEoDBIWCg5Db252ZXJzYXRp",
            "b25JZBgLIAEoBSLGAQoMRGVjb2RlZEZyYW1lEhMKC0ZyYW1lTnVtYmVyGAEg",
            "ASgDEhYKDkZyYW1lUHJvdG9jb2xzGAIgASgJEhEKCVRpbWVzdGFtcBgDIAEo",
            "AxIzCgZGaWVsZHMYCiADKAsyIy5uZHgubW9kZWwuRGVjb2RlZEZyYW1lLkZp",
            "ZWxkc0VudHJ5GkEKC0ZpZWxkc0VudHJ5EgsKA2tleRgBIAEoCRIhCgV2YWx1",
            "ZRgCIAEoCzISLm5keC5tb2RlbC5WYXJpYW50OgI4ASJSCgpGcmFtZVRhYmxl",
            "EhMKC0ZyYW1lTnVtYmVyGAEgASgHEhMKC0ZyYW1lT2Zmc2V0GAIgASgGEhoK",
            "EkNvbnZlcnNhdGlvbk51bWJlchgDIAEoB0IPCg1vcmcubmR4Lm1vZGVsYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.ConstantsReflection.Descriptor, global::Ndx.Model.VariantModelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Frame), global::Ndx.Model.Frame.Parser, new[]{ "LinkType", "FrameNumber", "FrameLength", "FrameOffset", "TimeStamp", "ProcessId", "ProcessName", "Data", "ConversationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.DecodedFrame), global::Ndx.Model.DecodedFrame.Parser, new[]{ "FrameNumber", "FrameProtocols", "Timestamp", "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.FrameTable), global::Ndx.Model.FrameTable.Parser, new[]{ "FrameNumber", "FrameOffset", "ConversationNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  //// &lt;summary>
  //// Represents a single captured packet and its metadata
  //// &lt;/summary>
  /// </summary>
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      linkType_ = other.linkType_;
      frameNumber_ = other.frameNumber_;
      frameLength_ = other.frameLength_;
      frameOffset_ = other.frameOffset_;
      timeStamp_ = other.timeStamp_;
      processId_ = other.processId_;
      processName_ = other.processName_;
      data_ = other.data_;
      conversationId_ = other.conversationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "LinkType" field.</summary>
    public const int LinkTypeFieldNumber = 1;
    private global::Ndx.Model.DataLinkType linkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DataLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private int frameNumber_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets frame number.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLength" field.</summary>
    public const int FrameLengthFieldNumber = 3;
    private int frameLength_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the total lenght of the frame.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameLength {
      get { return frameLength_; }
      set {
        frameLength_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 4;
    private long frameOffset_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the offset of the frame in the source file/stream.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the timestamp when the packet was captured.
    //// &lt;/summary>		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "ProcessId" field.</summary>
    public const int ProcessIdFieldNumber = 6;
    private long processId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process id.
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "ProcessName" field.</summary>
    public const int ProcessNameFieldNumber = 7;
    private string processName_ = "";
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process name.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the raw frame content.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConversationId" field.</summary>
    public const int ConversationIdFieldNumber = 11;
    private int conversationId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets the conversation ID of this frame.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LinkType != other.LinkType) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLength != other.FrameLength) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (ProcessId != other.ProcessId) return false;
      if (ProcessName != other.ProcessName) return false;
      if (Data != other.Data) return false;
      if (ConversationId != other.ConversationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LinkType != 0) hash ^= LinkType.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLength != 0) hash ^= FrameLength.GetHashCode();
      if (FrameOffset != 0L) hash ^= FrameOffset.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (ProcessId != 0L) hash ^= ProcessId.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ConversationId != 0) hash ^= ConversationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LinkType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LinkType);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameNumber);
      }
      if (FrameLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameLength);
      }
      if (FrameOffset != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameOffset);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (ProcessId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ProcessId);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
      if (ConversationId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConversationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LinkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (FrameLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameLength);
      }
      if (FrameOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffset);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (ProcessId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessId);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ConversationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConversationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.LinkType != 0) {
        LinkType = other.LinkType;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLength != 0) {
        FrameLength = other.FrameLength;
      }
      if (other.FrameOffset != 0L) {
        FrameOffset = other.FrameOffset;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.ProcessId != 0L) {
        ProcessId = other.ProcessId;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ConversationId != 0) {
        ConversationId = other.ConversationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            linkType_ = (global::Ndx.Model.DataLinkType) input.ReadEnum();
            break;
          }
          case 16: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            FrameLength = input.ReadInt32();
            break;
          }
          case 32: {
            FrameOffset = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 48: {
            ProcessId = input.ReadInt64();
            break;
          }
          case 58: {
            ProcessName = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadBytes();
            break;
          }
          case 88: {
            ConversationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Represents a decoded frame. Decoded frame is a collection of fields and their values. Value are represented as Variant.
  /// </summary>
  public sealed partial class DecodedFrame : pb::IMessage<DecodedFrame> {
    private static readonly pb::MessageParser<DecodedFrame> _parser = new pb::MessageParser<DecodedFrame>(() => new DecodedFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodedFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame(DecodedFrame other) : this() {
      frameNumber_ = other.frameNumber_;
      frameProtocols_ = other.frameProtocols_;
      timestamp_ = other.timestamp_;
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame Clone() {
      return new DecodedFrame(this);
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 1;
    private long frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameProtocols" field.</summary>
    public const int FrameProtocolsFieldNumber = 2;
    private string frameProtocols_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameProtocols {
      get { return frameProtocols_; }
      set {
        frameProtocols_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Fields" field.</summary>
    public const int FieldsFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Ndx.Model.Variant>.Codec _map_fields_codec
        = new pbc::MapField<string, global::Ndx.Model.Variant>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Variant.Parser), 82);
    private readonly pbc::MapField<string, global::Ndx.Model.Variant> fields_ = new pbc::MapField<string, global::Ndx.Model.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.Variant> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodedFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodedFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameProtocols != other.FrameProtocols) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!Fields.Equals(other.Fields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNumber != 0L) hash ^= FrameNumber.GetHashCode();
      if (FrameProtocols.Length != 0) hash ^= FrameProtocols.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= Fields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameProtocols);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      fields_.WriteTo(output, _map_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameProtocols);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += fields_.CalculateSize(_map_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodedFrame other) {
      if (other == null) {
        return;
      }
      if (other.FrameNumber != 0L) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameProtocols.Length != 0) {
        FrameProtocols = other.FrameProtocols;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameNumber = input.ReadInt64();
            break;
          }
          case 18: {
            FrameProtocols = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 82: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Frame table contains information that helps to access data in the referenced PCAP file. It consists of fixed 
  //// fields for easy access to individual records.
  /// </summary>
  public sealed partial class FrameTable : pb::IMessage<FrameTable> {
    private static readonly pb::MessageParser<FrameTable> _parser = new pb::MessageParser<FrameTable>(() => new FrameTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable(FrameTable other) : this() {
      frameNumber_ = other.frameNumber_;
      frameOffset_ = other.frameOffset_;
      conversationNumber_ = other.conversationNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameTable Clone() {
      return new FrameTable(this);
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 1;
    private uint frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 2;
    private ulong frameOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "ConversationNumber" field.</summary>
    public const int ConversationNumberFieldNumber = 3;
    private uint conversationNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConversationNumber {
      get { return conversationNumber_; }
      set {
        conversationNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (ConversationNumber != other.ConversationNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameOffset != 0UL) hash ^= FrameOffset.GetHashCode();
      if (ConversationNumber != 0) hash ^= ConversationNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(FrameNumber);
      }
      if (FrameOffset != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(FrameOffset);
      }
      if (ConversationNumber != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(ConversationNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNumber != 0) {
        size += 1 + 4;
      }
      if (FrameOffset != 0UL) {
        size += 1 + 8;
      }
      if (ConversationNumber != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameTable other) {
      if (other == null) {
        return;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameOffset != 0UL) {
        FrameOffset = other.FrameOffset;
      }
      if (other.ConversationNumber != 0) {
        ConversationNumber = other.ConversationNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            FrameNumber = input.ReadFixed32();
            break;
          }
          case 17: {
            FrameOffset = input.ReadFixed64();
            break;
          }
          case 29: {
            ConversationNumber = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
