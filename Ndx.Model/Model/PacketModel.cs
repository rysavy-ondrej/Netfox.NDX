// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from PacketModel.proto</summary>
  public static partial class PacketModelReflection {

    #region Descriptor
    /// <summary>File descriptor for PacketModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYWNrZXRNb2RlbC5wcm90bxIJbmR4Lm1vZGVsGg9Db25zdGFudHMucHJv",
            "dG8i0gEKBUZyYW1lEikKCExpbmtUeXBlGAEgASgOMhcubmR4Lm1vZGVsLkRh",
            "dGFMaW5rVHlwZRITCgtGcmFtZU51bWJlchgCIAEoBRITCgtGcmFtZUxlbmd0",
            "aBgDIAEoBRITCgtGcmFtZU9mZnNldBgEIAEoAxIRCglUaW1lU3RhbXAYBSAB",
            "KAMSEQoJUHJvY2Vzc0lkGAYgASgDEhMKC1Byb2Nlc3NOYW1lGAcgASgJEgwK",
            "BERhdGEYCiABKAwSFgoOQ29udmVyc2F0aW9uSWQYCyABKAUijgIKB1Zhcmlh",
            "bnQSEwoJQm9vbFZhbHVlGAEgASgISAASFAoKSW50MzJWYWx1ZRgCIAEoEUgA",
            "EhQKCkludDY0VmFsdWUYAyABKBJIABIVCgtVSW50MzJWYWx1ZRgEIAEoDUgA",
            "EhUKC1VJbnQ2NFZhbHVlGAUgASgESAASFAoKRmxvYXRWYWx1ZRgGIAEoAkgA",
            "EhUKC0RvdWJsZVZhbHVlGAcgASgBSAASFQoLU3RyaW5nVmFsdWUYCCABKAlI",
            "ABIUCgpCeXRlc1ZhbHVlGAkgASgMSAASGAoOSXBBZGRyZXNzVmFsdWUYCiAB",
            "KAlIABIXCg1EYXRlVGltZVZhbHVlGAsgASgDSABCBwoFVmFsdWUixgEKDERl",
            "Y29kZWRGcmFtZRITCgtGcmFtZU51bWJlchgBIAEoAxIWCg5GcmFtZVByb3Rv",
            "Y29scxgCIAEoCRIRCglUaW1lc3RhbXAYAyABKAMSMwoGRmllbGRzGAogAygL",
            "MiMubmR4Lm1vZGVsLkRlY29kZWRGcmFtZS5GaWVsZHNFbnRyeRpBCgtGaWVs",
            "ZHNFbnRyeRILCgNrZXkYASABKAkSIQoFdmFsdWUYAiABKAsyEi5uZHgubW9k",
            "ZWwuVmFyaWFudDoCOAEimgEKCVBhcmFtZXRlchIMCgROYW1lGAEgASgJEjgK",
            "ClByb3BlcnRpZXMYAiADKAsyJC5uZHgubW9kZWwuUGFyYW1ldGVyLlByb3Bl",
            "cnRpZXNFbnRyeRpFCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEiEK",
            "BXZhbHVlGAIgASgLMhIubmR4Lm1vZGVsLlZhcmlhbnQ6AjgBIscCCgVFdmVu",
            "dBIMCgROYW1lGAEgASgJEhEKCVRpbWVzdGFtcBgCIAEoAxIqCgVJdGVtcxgD",
            "IAMoCzIbLm5keC5tb2RlbC5FdmVudC5JdGVtc0VudHJ5GqUBCgpFdmVudFZh",
            "bHVlEioKDFZhcmlhbnRWYWx1ZRgBIAEoCzISLm5keC5tb2RlbC5WYXJpYW50",
            "SAASLgoLUGFja2V0VmFsdWUYAiABKAsyFy5uZHgubW9kZWwuRGVjb2RlZEZy",
            "YW1lSAASLgoOUGFyYW1ldGVyVmFsdWUYBCABKAsyFC5uZHgubW9kZWwuUGFy",
            "YW1ldGVySABCCwoJVmFsdWVUeXBlGkkKCkl0ZW1zRW50cnkSCwoDa2V5GAEg",
            "ASgJEioKBXZhbHVlGAIgASgLMhsubmR4Lm1vZGVsLkV2ZW50LkV2ZW50VmFs",
            "dWU6AjgBQg8KDW9yZy5uZHgubW9kZWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.ConstantsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Frame), global::Ndx.Model.Frame.Parser, new[]{ "LinkType", "FrameNumber", "FrameLength", "FrameOffset", "TimeStamp", "ProcessId", "ProcessName", "Data", "ConversationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Variant), global::Ndx.Model.Variant.Parser, new[]{ "BoolValue", "Int32Value", "Int64Value", "UInt32Value", "UInt64Value", "FloatValue", "DoubleValue", "StringValue", "BytesValue", "IpAddressValue", "DateTimeValue" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.DecodedFrame), global::Ndx.Model.DecodedFrame.Parser, new[]{ "FrameNumber", "FrameProtocols", "Timestamp", "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Parameter), global::Ndx.Model.Parameter.Parser, new[]{ "Name", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Event), global::Ndx.Model.Event.Parser, new[]{ "Name", "Timestamp", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Event.Types.EventValue), global::Ndx.Model.Event.Types.EventValue.Parser, new[]{ "VariantValue", "PacketValue", "ParameterValue" }, new[]{ "ValueType" }, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  //// &lt;summary>
  //// Represents a single captured packet and its metadata
  //// &lt;/summary>
  /// </summary>
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      linkType_ = other.linkType_;
      frameNumber_ = other.frameNumber_;
      frameLength_ = other.frameLength_;
      frameOffset_ = other.frameOffset_;
      timeStamp_ = other.timeStamp_;
      processId_ = other.processId_;
      processName_ = other.processName_;
      data_ = other.data_;
      conversationId_ = other.conversationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "LinkType" field.</summary>
    public const int LinkTypeFieldNumber = 1;
    private global::Ndx.Model.DataLinkType linkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DataLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private int frameNumber_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets frame number.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLength" field.</summary>
    public const int FrameLengthFieldNumber = 3;
    private int frameLength_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the total lenght of the frame.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameLength {
      get { return frameLength_; }
      set {
        frameLength_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 4;
    private long frameOffset_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the offset of the frame in the source file/stream.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the timestamp when the packet was captured.
    //// &lt;/summary>		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "ProcessId" field.</summary>
    public const int ProcessIdFieldNumber = 6;
    private long processId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process id.
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "ProcessName" field.</summary>
    public const int ProcessNameFieldNumber = 7;
    private string processName_ = "";
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process name.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the raw frame content.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConversationId" field.</summary>
    public const int ConversationIdFieldNumber = 11;
    private int conversationId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets the conversation ID of this frame.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LinkType != other.LinkType) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLength != other.FrameLength) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (ProcessId != other.ProcessId) return false;
      if (ProcessName != other.ProcessName) return false;
      if (Data != other.Data) return false;
      if (ConversationId != other.ConversationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LinkType != 0) hash ^= LinkType.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLength != 0) hash ^= FrameLength.GetHashCode();
      if (FrameOffset != 0L) hash ^= FrameOffset.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (ProcessId != 0L) hash ^= ProcessId.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ConversationId != 0) hash ^= ConversationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LinkType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LinkType);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameNumber);
      }
      if (FrameLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameLength);
      }
      if (FrameOffset != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameOffset);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (ProcessId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ProcessId);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
      if (ConversationId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConversationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LinkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (FrameLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameLength);
      }
      if (FrameOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffset);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (ProcessId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessId);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ConversationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConversationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.LinkType != 0) {
        LinkType = other.LinkType;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLength != 0) {
        FrameLength = other.FrameLength;
      }
      if (other.FrameOffset != 0L) {
        FrameOffset = other.FrameOffset;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.ProcessId != 0L) {
        ProcessId = other.ProcessId;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ConversationId != 0) {
        ConversationId = other.ConversationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            linkType_ = (global::Ndx.Model.DataLinkType) input.ReadEnum();
            break;
          }
          case 16: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            FrameLength = input.ReadInt32();
            break;
          }
          case 32: {
            FrameOffset = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 48: {
            ProcessId = input.ReadInt64();
            break;
          }
          case 58: {
            ProcessName = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadBytes();
            break;
          }
          case 88: {
            ConversationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Variant : pb::IMessage<Variant> {
    private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant(Variant other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.UInt32Value:
          UInt32Value = other.UInt32Value;
          break;
        case ValueOneofCase.UInt64Value:
          UInt64Value = other.UInt64Value;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.IpAddressValue:
          IpAddressValue = other.IpAddressValue;
          break;
        case ValueOneofCase.DateTimeValue:
          DateTimeValue = other.DateTimeValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant Clone() {
      return new Variant(this);
    }

    /// <summary>Field number for the "BoolValue" field.</summary>
    public const int BoolValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "Int32Value" field.</summary>
    public const int Int32ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return valueCase_ == ValueOneofCase.Int32Value ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int32Value;
      }
    }

    /// <summary>Field number for the "Int64Value" field.</summary>
    public const int Int64ValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "UInt32Value" field.</summary>
    public const int UInt32ValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UInt32Value {
      get { return valueCase_ == ValueOneofCase.UInt32Value ? (uint) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.UInt32Value;
      }
    }

    /// <summary>Field number for the "UInt64Value" field.</summary>
    public const int UInt64ValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UInt64Value {
      get { return valueCase_ == ValueOneofCase.UInt64Value ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.UInt64Value;
      }
    }

    /// <summary>Field number for the "FloatValue" field.</summary>
    public const int FloatValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return valueCase_ == ValueOneofCase.FloatValue ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "DoubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "StringValue" field.</summary>
    public const int StringValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "BytesValue" field.</summary>
    public const int BytesValueFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "IpAddressValue" field.</summary>
    public const int IpAddressValueFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddressValue {
      get { return valueCase_ == ValueOneofCase.IpAddressValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.IpAddressValue;
      }
    }

    /// <summary>Field number for the "DateTimeValue" field.</summary>
    public const int DateTimeValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DateTimeValue {
      get { return valueCase_ == ValueOneofCase.DateTimeValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DateTimeValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "Value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      BoolValue = 1,
      Int32Value = 2,
      Int64Value = 3,
      UInt32Value = 4,
      UInt64Value = 5,
      FloatValue = 6,
      DoubleValue = 7,
      StringValue = 8,
      BytesValue = 9,
      IpAddressValue = 10,
      DateTimeValue = 11,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolValue != other.BoolValue) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (UInt32Value != other.UInt32Value) return false;
      if (UInt64Value != other.UInt64Value) return false;
      if (FloatValue != other.FloatValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (IpAddressValue != other.IpAddressValue) return false;
      if (DateTimeValue != other.DateTimeValue) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int32Value) hash ^= Int32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.UInt32Value) hash ^= UInt32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.UInt64Value) hash ^= UInt64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.IpAddressValue) hash ^= IpAddressValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DateTimeValue) hash ^= DateTimeValue.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(8);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        output.WriteRawTag(16);
        output.WriteSInt32(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(24);
        output.WriteSInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.UInt32Value) {
        output.WriteRawTag(32);
        output.WriteUInt32(UInt32Value);
      }
      if (valueCase_ == ValueOneofCase.UInt64Value) {
        output.WriteRawTag(40);
        output.WriteUInt64(UInt64Value);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        output.WriteRawTag(53);
        output.WriteFloat(FloatValue);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(57);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(66);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(74);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.IpAddressValue) {
        output.WriteRawTag(82);
        output.WriteString(IpAddressValue);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        output.WriteRawTag(88);
        output.WriteInt64(DateTimeValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.UInt32Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UInt32Value);
      }
      if (valueCase_ == ValueOneofCase.UInt64Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UInt64Value);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.IpAddressValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddressValue);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DateTimeValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variant other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.UInt32Value:
          UInt32Value = other.UInt32Value;
          break;
        case ValueOneofCase.UInt64Value:
          UInt64Value = other.UInt64Value;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.IpAddressValue:
          IpAddressValue = other.IpAddressValue;
          break;
        case ValueOneofCase.DateTimeValue:
          DateTimeValue = other.DateTimeValue;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoolValue = input.ReadBool();
            break;
          }
          case 16: {
            Int32Value = input.ReadSInt32();
            break;
          }
          case 24: {
            Int64Value = input.ReadSInt64();
            break;
          }
          case 32: {
            UInt32Value = input.ReadUInt32();
            break;
          }
          case 40: {
            UInt64Value = input.ReadUInt64();
            break;
          }
          case 53: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 57: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 66: {
            StringValue = input.ReadString();
            break;
          }
          case 74: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 82: {
            IpAddressValue = input.ReadString();
            break;
          }
          case 88: {
            DateTimeValue = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecodedFrame : pb::IMessage<DecodedFrame> {
    private static readonly pb::MessageParser<DecodedFrame> _parser = new pb::MessageParser<DecodedFrame>(() => new DecodedFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecodedFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame(DecodedFrame other) : this() {
      frameNumber_ = other.frameNumber_;
      frameProtocols_ = other.frameProtocols_;
      timestamp_ = other.timestamp_;
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecodedFrame Clone() {
      return new DecodedFrame(this);
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 1;
    private long frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameProtocols" field.</summary>
    public const int FrameProtocolsFieldNumber = 2;
    private string frameProtocols_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameProtocols {
      get { return frameProtocols_; }
      set {
        frameProtocols_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Fields" field.</summary>
    public const int FieldsFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Ndx.Model.Variant>.Codec _map_fields_codec
        = new pbc::MapField<string, global::Ndx.Model.Variant>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Variant.Parser), 82);
    private readonly pbc::MapField<string, global::Ndx.Model.Variant> fields_ = new pbc::MapField<string, global::Ndx.Model.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.Variant> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecodedFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecodedFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameProtocols != other.FrameProtocols) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!Fields.Equals(other.Fields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNumber != 0L) hash ^= FrameNumber.GetHashCode();
      if (FrameProtocols.Length != 0) hash ^= FrameProtocols.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= Fields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameProtocols);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      fields_.WriteTo(output, _map_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameProtocols);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += fields_.CalculateSize(_map_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecodedFrame other) {
      if (other == null) {
        return;
      }
      if (other.FrameNumber != 0L) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameProtocols.Length != 0) {
        FrameProtocols = other.FrameProtocols;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameNumber = input.ReadInt64();
            break;
          }
          case 18: {
            FrameProtocols = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 82: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      name_ = other.name_;
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Ndx.Model.Variant>.Codec _map_properties_codec
        = new pbc::MapField<string, global::Ndx.Model.Variant>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Variant.Parser), 18);
    private readonly pbc::MapField<string, global::Ndx.Model.Variant> properties_ = new pbc::MapField<string, global::Ndx.Model.Variant>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.Variant> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      properties_.WriteTo(output, _map_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      name_ = other.name_;
      timestamp_ = other.timestamp_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>.Codec _map_items_codec
        = new pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Event.Types.EventValue.Parser), 26);
    private readonly pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue> items_ = new pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= Items.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      items_.WriteTo(output, _map_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EventValue : pb::IMessage<EventValue> {
        private static readonly pb::MessageParser<EventValue> _parser = new pb::MessageParser<EventValue>(() => new EventValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Model.Event.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue(EventValue other) : this() {
          switch (other.ValueTypeCase) {
            case ValueTypeOneofCase.VariantValue:
              VariantValue = other.VariantValue.Clone();
              break;
            case ValueTypeOneofCase.PacketValue:
              PacketValue = other.PacketValue.Clone();
              break;
            case ValueTypeOneofCase.ParameterValue:
              ParameterValue = other.ParameterValue.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue Clone() {
          return new EventValue(this);
        }

        /// <summary>Field number for the "VariantValue" field.</summary>
        public const int VariantValueFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Model.Variant VariantValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.VariantValue ? (global::Ndx.Model.Variant) valueType_ : null; }
          set {
            valueType_ = value;
            valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.VariantValue;
          }
        }

        /// <summary>Field number for the "PacketValue" field.</summary>
        public const int PacketValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Model.DecodedFrame PacketValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.PacketValue ? (global::Ndx.Model.DecodedFrame) valueType_ : null; }
          set {
            valueType_ = value;
            valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.PacketValue;
          }
        }

        /// <summary>Field number for the "ParameterValue" field.</summary>
        public const int ParameterValueFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Model.Parameter ParameterValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.ParameterValue ? (global::Ndx.Model.Parameter) valueType_ : null; }
          set {
            valueType_ = value;
            valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.ParameterValue;
          }
        }

        private object valueType_;
        /// <summary>Enum of possible cases for the "ValueType" oneof.</summary>
        public enum ValueTypeOneofCase {
          None = 0,
          VariantValue = 1,
          PacketValue = 2,
          ParameterValue = 4,
        }
        private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueTypeOneofCase ValueTypeCase {
          get { return valueTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValueType() {
          valueTypeCase_ = ValueTypeOneofCase.None;
          valueType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(VariantValue, other.VariantValue)) return false;
          if (!object.Equals(PacketValue, other.PacketValue)) return false;
          if (!object.Equals(ParameterValue, other.ParameterValue)) return false;
          if (ValueTypeCase != other.ValueTypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (valueTypeCase_ == ValueTypeOneofCase.VariantValue) hash ^= VariantValue.GetHashCode();
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) hash ^= PacketValue.GetHashCode();
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) hash ^= ParameterValue.GetHashCode();
          hash ^= (int) valueTypeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (valueTypeCase_ == ValueTypeOneofCase.VariantValue) {
            output.WriteRawTag(10);
            output.WriteMessage(VariantValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
            output.WriteRawTag(18);
            output.WriteMessage(PacketValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
            output.WriteRawTag(34);
            output.WriteMessage(ParameterValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (valueTypeCase_ == ValueTypeOneofCase.VariantValue) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(VariantValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PacketValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParameterValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventValue other) {
          if (other == null) {
            return;
          }
          switch (other.ValueTypeCase) {
            case ValueTypeOneofCase.VariantValue:
              VariantValue = other.VariantValue;
              break;
            case ValueTypeOneofCase.PacketValue:
              PacketValue = other.PacketValue;
              break;
            case ValueTypeOneofCase.ParameterValue:
              ParameterValue = other.ParameterValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Ndx.Model.Variant subBuilder = new global::Ndx.Model.Variant();
                if (valueTypeCase_ == ValueTypeOneofCase.VariantValue) {
                  subBuilder.MergeFrom(VariantValue);
                }
                input.ReadMessage(subBuilder);
                VariantValue = subBuilder;
                break;
              }
              case 18: {
                global::Ndx.Model.DecodedFrame subBuilder = new global::Ndx.Model.DecodedFrame();
                if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
                  subBuilder.MergeFrom(PacketValue);
                }
                input.ReadMessage(subBuilder);
                PacketValue = subBuilder;
                break;
              }
              case 34: {
                global::Ndx.Model.Parameter subBuilder = new global::Ndx.Model.Parameter();
                if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
                  subBuilder.MergeFrom(ParameterValue);
                }
                input.ReadMessage(subBuilder);
                ParameterValue = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
