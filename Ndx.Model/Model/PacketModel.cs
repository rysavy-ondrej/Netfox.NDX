// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from PacketModel.proto</summary>
  public static partial class PacketModelReflection {

    #region Descriptor
    /// <summary>File descriptor for PacketModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQYWNrZXRNb2RlbC5wcm90bxIJbmR4Lm1vZGVsGg9Db25zdGFudHMucHJv",
            "dG8i0gEKBUZyYW1lEikKCExpbmtUeXBlGAEgASgOMhcubmR4Lm1vZGVsLkRh",
            "dGFMaW5rVHlwZRITCgtGcmFtZU51bWJlchgCIAEoBRITCgtGcmFtZUxlbmd0",
            "aBgDIAEoBRITCgtGcmFtZU9mZnNldBgEIAEoAxIRCglUaW1lU3RhbXAYBSAB",
            "KAMSEQoJUHJvY2Vzc0lkGAYgASgDEhMKC1Byb2Nlc3NOYW1lGAcgASgJEgwK",
            "BERhdGEYCiABKAwSFgoOQ29udmVyc2F0aW9uSWQYCyABKAUisgEKDFBhY2tl",
            "dEZpZWxkcxITCgtGcmFtZU51bWJlchgBIAEoAxIWCg5GcmFtZVByb3RvY29s",
            "cxgCIAEoCRIRCglUaW1lc3RhbXAYAyABKAMSMwoGRmllbGRzGAogAygLMiMu",
            "bmR4Lm1vZGVsLlBhY2tldEZpZWxkcy5GaWVsZHNFbnRyeRotCgtGaWVsZHNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIoYBCglQYXJh",
            "bWV0ZXISDAoETmFtZRgBIAEoCRI4CgpQcm9wZXJ0aWVzGAIgAygLMiQubmR4",
            "Lm1vZGVsLlBhcmFtZXRlci5Qcm9wZXJ0aWVzRW50cnkaMQoPUHJvcGVydGll",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiyQIKBUV2",
            "ZW50EgwKBE5hbWUYASABKAkSEQoJVGltZXN0YW1wGAIgASgDEioKBUl0ZW1z",
            "GAMgAygLMhsubmR4Lm1vZGVsLkV2ZW50Lkl0ZW1zRW50cnkapwEKCkV2ZW50",
            "VmFsdWUSFQoLU3RyaW5nVmFsdWUYASABKAlIABIVCgtOdW1iZXJWYWx1ZRgC",
            "IAEoA0gAEi4KC1BhY2tldFZhbHVlGAMgASgLMhcubmR4Lm1vZGVsLlBhY2tl",
            "dEZpZWxkc0gAEi4KDlBhcmFtZXRlclZhbHVlGAQgASgLMhQubmR4Lm1vZGVs",
            "LlBhcmFtZXRlckgAQgsKCVZhbHVlVHlwZRpJCgpJdGVtc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIqCgV2YWx1ZRgCIAEoCzIbLm5keC5tb2RlbC5FdmVudC5FdmVu",
            "dFZhbHVlOgI4AUIPCg1vcmcubmR4Lm1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.ConstantsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Frame), global::Ndx.Model.Frame.Parser, new[]{ "LinkType", "FrameNumber", "FrameLength", "FrameOffset", "TimeStamp", "ProcessId", "ProcessName", "Data", "ConversationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.PacketFields), global::Ndx.Model.PacketFields.Parser, new[]{ "FrameNumber", "FrameProtocols", "Timestamp", "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Parameter), global::Ndx.Model.Parameter.Parser, new[]{ "Name", "Properties" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Event), global::Ndx.Model.Event.Parser, new[]{ "Name", "Timestamp", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Event.Types.EventValue), global::Ndx.Model.Event.Types.EventValue.Parser, new[]{ "StringValue", "NumberValue", "PacketValue", "ParameterValue" }, new[]{ "ValueType" }, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  //// &lt;summary>
  //// Represents a single captured packet and its metadata
  //// &lt;/summary>
  /// </summary>
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      linkType_ = other.linkType_;
      frameNumber_ = other.frameNumber_;
      frameLength_ = other.frameLength_;
      frameOffset_ = other.frameOffset_;
      timeStamp_ = other.timeStamp_;
      processId_ = other.processId_;
      processName_ = other.processName_;
      data_ = other.data_;
      conversationId_ = other.conversationId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "LinkType" field.</summary>
    public const int LinkTypeFieldNumber = 1;
    private global::Ndx.Model.DataLinkType linkType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.DataLinkType LinkType {
      get { return linkType_; }
      set {
        linkType_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private int frameNumber_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets frame number.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLength" field.</summary>
    public const int FrameLengthFieldNumber = 3;
    private int frameLength_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the total lenght of the frame.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameLength {
      get { return frameLength_; }
      set {
        frameLength_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffset" field.</summary>
    public const int FrameOffsetFieldNumber = 4;
    private long frameOffset_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the offset of the frame in the source file/stream.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffset {
      get { return frameOffset_; }
      set {
        frameOffset_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the timestamp when the packet was captured.
    //// &lt;/summary>		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "ProcessId" field.</summary>
    public const int ProcessIdFieldNumber = 6;
    private long processId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process id.
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "ProcessName" field.</summary>
    public const int ProcessNameFieldNumber = 7;
    private string processName_ = "";
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets process name.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 10;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    //// &lt;summary>
    //// Gets or sets the raw frame content.
    //// &lt;/summary>	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConversationId" field.</summary>
    public const int ConversationIdFieldNumber = 11;
    private int conversationId_;
    /// <summary>
    //// &lt;summary>
    ////	Gets or sets the conversation ID of this frame.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConversationId {
      get { return conversationId_; }
      set {
        conversationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LinkType != other.LinkType) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLength != other.FrameLength) return false;
      if (FrameOffset != other.FrameOffset) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (ProcessId != other.ProcessId) return false;
      if (ProcessName != other.ProcessName) return false;
      if (Data != other.Data) return false;
      if (ConversationId != other.ConversationId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LinkType != 0) hash ^= LinkType.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLength != 0) hash ^= FrameLength.GetHashCode();
      if (FrameOffset != 0L) hash ^= FrameOffset.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (ProcessId != 0L) hash ^= ProcessId.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (ConversationId != 0) hash ^= ConversationId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LinkType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LinkType);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameNumber);
      }
      if (FrameLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FrameLength);
      }
      if (FrameOffset != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameOffset);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (ProcessId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ProcessId);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessName);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Data);
      }
      if (ConversationId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConversationId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LinkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LinkType);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (FrameLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameLength);
      }
      if (FrameOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffset);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (ProcessId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessId);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (ConversationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConversationId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.LinkType != 0) {
        LinkType = other.LinkType;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLength != 0) {
        FrameLength = other.FrameLength;
      }
      if (other.FrameOffset != 0L) {
        FrameOffset = other.FrameOffset;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.ProcessId != 0L) {
        ProcessId = other.ProcessId;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.ConversationId != 0) {
        ConversationId = other.ConversationId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            linkType_ = (global::Ndx.Model.DataLinkType) input.ReadEnum();
            break;
          }
          case 16: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 24: {
            FrameLength = input.ReadInt32();
            break;
          }
          case 32: {
            FrameOffset = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 48: {
            ProcessId = input.ReadInt64();
            break;
          }
          case 58: {
            ProcessName = input.ReadString();
            break;
          }
          case 82: {
            Data = input.ReadBytes();
            break;
          }
          case 88: {
            ConversationId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PacketFields : pb::IMessage<PacketFields> {
    private static readonly pb::MessageParser<PacketFields> _parser = new pb::MessageParser<PacketFields>(() => new PacketFields());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PacketFields> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketFields() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketFields(PacketFields other) : this() {
      frameNumber_ = other.frameNumber_;
      frameProtocols_ = other.frameProtocols_;
      timestamp_ = other.timestamp_;
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PacketFields Clone() {
      return new PacketFields(this);
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 1;
    private long frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameProtocols" field.</summary>
    public const int FrameProtocolsFieldNumber = 2;
    private string frameProtocols_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameProtocols {
      get { return frameProtocols_; }
      set {
        frameProtocols_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Fields" field.</summary>
    public const int FieldsFieldNumber = 10;
    private static readonly pbc::MapField<string, string>.Codec _map_fields_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 82);
    private readonly pbc::MapField<string, string> fields_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PacketFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PacketFields other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameProtocols != other.FrameProtocols) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!Fields.Equals(other.Fields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameNumber != 0L) hash ^= FrameNumber.GetHashCode();
      if (FrameProtocols.Length != 0) hash ^= FrameProtocols.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= Fields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FrameProtocols);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      fields_.WriteTo(output, _map_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameNumber);
      }
      if (FrameProtocols.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameProtocols);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += fields_.CalculateSize(_map_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PacketFields other) {
      if (other == null) {
        return;
      }
      if (other.FrameNumber != 0L) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameProtocols.Length != 0) {
        FrameProtocols = other.FrameProtocols;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameNumber = input.ReadInt64();
            break;
          }
          case 18: {
            FrameProtocols = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 82: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      name_ = other.name_;
      properties_ = other.properties_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      properties_.WriteTo(output, _map_properties_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      properties_.Add(other.properties_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.PacketModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      name_ = other.name_;
      timestamp_ = other.timestamp_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>.Codec _map_items_codec
        = new pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.Event.Types.EventValue.Parser), 26);
    private readonly pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue> items_ = new pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.Event.Types.EventValue> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!Items.Equals(other.Items)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= Items.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      items_.WriteTo(output, _map_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += items_.CalculateSize(_map_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EventValue : pb::IMessage<EventValue> {
        private static readonly pb::MessageParser<EventValue> _parser = new pb::MessageParser<EventValue>(() => new EventValue());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EventValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Model.Event.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue(EventValue other) : this() {
          switch (other.ValueTypeCase) {
            case ValueTypeOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case ValueTypeOneofCase.NumberValue:
              NumberValue = other.NumberValue;
              break;
            case ValueTypeOneofCase.PacketValue:
              PacketValue = other.PacketValue.Clone();
              break;
            case ValueTypeOneofCase.ParameterValue:
              ParameterValue = other.ParameterValue.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EventValue Clone() {
          return new EventValue(this);
        }

        /// <summary>Field number for the "StringValue" field.</summary>
        public const int StringValueFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StringValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.StringValue ? (string) valueType_ : ""; }
          set {
            valueType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            valueTypeCase_ = ValueTypeOneofCase.StringValue;
          }
        }

        /// <summary>Field number for the "NumberValue" field.</summary>
        public const int NumberValueFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long NumberValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.NumberValue ? (long) valueType_ : 0L; }
          set {
            valueType_ = value;
            valueTypeCase_ = ValueTypeOneofCase.NumberValue;
          }
        }

        /// <summary>Field number for the "PacketValue" field.</summary>
        public const int PacketValueFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Model.PacketFields PacketValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.PacketValue ? (global::Ndx.Model.PacketFields) valueType_ : null; }
          set {
            valueType_ = value;
            valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.PacketValue;
          }
        }

        /// <summary>Field number for the "ParameterValue" field.</summary>
        public const int ParameterValueFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Model.Parameter ParameterValue {
          get { return valueTypeCase_ == ValueTypeOneofCase.ParameterValue ? (global::Ndx.Model.Parameter) valueType_ : null; }
          set {
            valueType_ = value;
            valueTypeCase_ = value == null ? ValueTypeOneofCase.None : ValueTypeOneofCase.ParameterValue;
          }
        }

        private object valueType_;
        /// <summary>Enum of possible cases for the "ValueType" oneof.</summary>
        public enum ValueTypeOneofCase {
          None = 0,
          StringValue = 1,
          NumberValue = 2,
          PacketValue = 3,
          ParameterValue = 4,
        }
        private ValueTypeOneofCase valueTypeCase_ = ValueTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueTypeOneofCase ValueTypeCase {
          get { return valueTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValueType() {
          valueTypeCase_ = ValueTypeOneofCase.None;
          valueType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EventValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EventValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StringValue != other.StringValue) return false;
          if (NumberValue != other.NumberValue) return false;
          if (!object.Equals(PacketValue, other.PacketValue)) return false;
          if (!object.Equals(ParameterValue, other.ParameterValue)) return false;
          if (ValueTypeCase != other.ValueTypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (valueTypeCase_ == ValueTypeOneofCase.StringValue) hash ^= StringValue.GetHashCode();
          if (valueTypeCase_ == ValueTypeOneofCase.NumberValue) hash ^= NumberValue.GetHashCode();
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) hash ^= PacketValue.GetHashCode();
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) hash ^= ParameterValue.GetHashCode();
          hash ^= (int) valueTypeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
            output.WriteRawTag(10);
            output.WriteString(StringValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.NumberValue) {
            output.WriteRawTag(16);
            output.WriteInt64(NumberValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
            output.WriteRawTag(26);
            output.WriteMessage(PacketValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
            output.WriteRawTag(34);
            output.WriteMessage(ParameterValue);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (valueTypeCase_ == ValueTypeOneofCase.StringValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.NumberValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumberValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PacketValue);
          }
          if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParameterValue);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EventValue other) {
          if (other == null) {
            return;
          }
          switch (other.ValueTypeCase) {
            case ValueTypeOneofCase.StringValue:
              StringValue = other.StringValue;
              break;
            case ValueTypeOneofCase.NumberValue:
              NumberValue = other.NumberValue;
              break;
            case ValueTypeOneofCase.PacketValue:
              PacketValue = other.PacketValue;
              break;
            case ValueTypeOneofCase.ParameterValue:
              ParameterValue = other.ParameterValue;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                StringValue = input.ReadString();
                break;
              }
              case 16: {
                NumberValue = input.ReadInt64();
                break;
              }
              case 26: {
                global::Ndx.Model.PacketFields subBuilder = new global::Ndx.Model.PacketFields();
                if (valueTypeCase_ == ValueTypeOneofCase.PacketValue) {
                  subBuilder.MergeFrom(PacketValue);
                }
                input.ReadMessage(subBuilder);
                PacketValue = subBuilder;
                break;
              }
              case 34: {
                global::Ndx.Model.Parameter subBuilder = new global::Ndx.Model.Parameter();
                if (valueTypeCase_ == ValueTypeOneofCase.ParameterValue) {
                  subBuilder.MergeFrom(ParameterValue);
                }
                input.ReadMessage(subBuilder);
                ParameterValue = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
