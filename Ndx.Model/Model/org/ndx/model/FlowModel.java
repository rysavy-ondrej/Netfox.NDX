// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlowModel.proto

package org.ndx.model;

public final class FlowModel {
  private FlowModel() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *&#47; &lt;summary&gt;
   * /	Specifies the flow orientation if known.
   * / &lt;/summary&gt;
   * </pre>
   *
   * Protobuf enum {@code ndx.model.FlowOrientation}
   */
  public enum FlowOrientation
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Undefined = 0;</code>
     */
    Undefined(0),
    /**
     * <code>Upflow = 1;</code>
     */
    Upflow(1),
    /**
     * <code>Downflow = 2;</code>
     */
    Downflow(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>Undefined = 0;</code>
     */
    public static final int Undefined_VALUE = 0;
    /**
     * <code>Upflow = 1;</code>
     */
    public static final int Upflow_VALUE = 1;
    /**
     * <code>Downflow = 2;</code>
     */
    public static final int Downflow_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FlowOrientation valueOf(int value) {
      return forNumber(value);
    }

    public static FlowOrientation forNumber(int value) {
      switch (value) {
        case 0: return Undefined;
        case 1: return Upflow;
        case 2: return Downflow;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FlowOrientation>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FlowOrientation> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FlowOrientation>() {
            public FlowOrientation findValueByNumber(int number) {
              return FlowOrientation.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.ndx.model.FlowModel.getDescriptor().getEnumTypes().get(0);
    }

    private static final FlowOrientation[] VALUES = values();

    public static FlowOrientation valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FlowOrientation(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ndx.model.FlowOrientation)
  }

  /**
   * Protobuf enum {@code ndx.model.FlowType}
   */
  public enum FlowType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UndefinedFlow = 0;</code>
     */
    UndefinedFlow(0),
    /**
     * <code>NetworkFlow = 1;</code>
     */
    NetworkFlow(1),
    /**
     * <code>EtherFlow = 2;</code>
     */
    EtherFlow(2),
    /**
     * <code>IpFlow = 4;</code>
     */
    IpFlow(4),
    /**
     * <code>ApplicationFlow = 8;</code>
     */
    ApplicationFlow(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UndefinedFlow = 0;</code>
     */
    public static final int UndefinedFlow_VALUE = 0;
    /**
     * <code>NetworkFlow = 1;</code>
     */
    public static final int NetworkFlow_VALUE = 1;
    /**
     * <code>EtherFlow = 2;</code>
     */
    public static final int EtherFlow_VALUE = 2;
    /**
     * <code>IpFlow = 4;</code>
     */
    public static final int IpFlow_VALUE = 4;
    /**
     * <code>ApplicationFlow = 8;</code>
     */
    public static final int ApplicationFlow_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FlowType valueOf(int value) {
      return forNumber(value);
    }

    public static FlowType forNumber(int value) {
      switch (value) {
        case 0: return UndefinedFlow;
        case 1: return NetworkFlow;
        case 2: return EtherFlow;
        case 4: return IpFlow;
        case 8: return ApplicationFlow;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FlowType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FlowType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FlowType>() {
            public FlowType findValueByNumber(int number) {
              return FlowType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.ndx.model.FlowModel.getDescriptor().getEnumTypes().get(1);
    }

    private static final FlowType[] VALUES = values();

    public static FlowType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FlowType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ndx.model.FlowType)
  }

  public interface FlowKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ndx.model.FlowKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.ndx.model.FlowType Type = 1;</code>
     */
    int getTypeValue();
    /**
     * <code>.ndx.model.FlowType Type = 1;</code>
     */
    org.ndx.model.FlowModel.FlowType getType();

    /**
     * <code>bytes Protocol = 2;</code>
     */
    com.google.protobuf.ByteString getProtocol();

    /**
     * <code>bytes SourceAddress = 32;</code>
     */
    com.google.protobuf.ByteString getSourceAddress();

    /**
     * <code>bytes DestinationAddress = 33;</code>
     */
    com.google.protobuf.ByteString getDestinationAddress();

    /**
     * <code>bytes SourceSelector = 64;</code>
     */
    com.google.protobuf.ByteString getSourceSelector();

    /**
     * <code>bytes DestinationSelector = 65;</code>
     */
    com.google.protobuf.ByteString getDestinationSelector();

    /**
     * <code>bytes Tag = 80;</code>
     */
    com.google.protobuf.ByteString getTag();
  }
  /**
   * <pre>
   *&#47; &lt;summary&gt;
   * /	FlowKey is a 5-tuple that identifies the data traffic flow.
   * / This class supports classical IP flows as well as non-ip flows.
   * /	&lt;/summary&gt;
   * / &lt;remarks&gt;
   * / According to ISO/OSI model, the general addressing scheme is defined as follows:
   * / N-address = ((N-1)-Address, N-selector)
   * / 
   * / This means that for identification of communication between two parties it would be sufficient 
   * / to consider a 5 tuple:
   * /
   * / (N-protocol, (N-1)-SourceAddress, N-SourceSelector, (N-1)-DestinationAddress, N-DestinationSelector)
   * /
   * / The reason for adding protocol is that the single protocol is used and thus it 
   * / does not have to be encoded in both source and destination selectors.
   * /
   * / NetworkFlow:
   * / The case for TCP flow:
   * / (TCP, IP-Address, TCP-port, IP-Address, TCP-Port)
   * / 
   * / The case for ICMP flow:
   * / (ICMP, IP-Address, ICMP-Type . ICMP-Code, IP-Address, ICMP-Type . ICMP-Code)
   * /
   * / EtherFlow:
   * / The case of ARP flow:
   * /	(ARP, MAC-Address, [], MAC-Address, [])
   * /	
   * / The case of BPDU:
   * /	(BPDU, MAC-Address, [], MAC-Address, [])
   * / Because both parites needs to communicate using the same protocol it is possible to define
   * / the N-address pair as the 5-tuple.
   * /
   * / But there may be other flow types that aggreagate several flows or are more specific because of application selectors:
   * / 
   * /	IpFlow:
   * / (IP, IP-Addrees, [], IP-Address, [])
   * / 
   * / ApplicationFlow uses Endpoint as the address and selector which is application specific:
   * /
   * / (SMB, IP-Address:Port, (TID, PID, MID), IP-Address:Port, (TID, PID, MID))
   * /
   * / What about VLANs? and tunnels?
   * / &lt;/remarks&gt;
   * </pre>
   *
   * Protobuf type {@code ndx.model.FlowKey}
   */
  public  static final class FlowKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ndx.model.FlowKey)
      FlowKeyOrBuilder {
    // Use FlowKey.newBuilder() to construct.
    private FlowKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlowKey() {
      type_ = 0;
      protocol_ = com.google.protobuf.ByteString.EMPTY;
      sourceAddress_ = com.google.protobuf.ByteString.EMPTY;
      destinationAddress_ = com.google.protobuf.ByteString.EMPTY;
      sourceSelector_ = com.google.protobuf.ByteString.EMPTY;
      destinationSelector_ = com.google.protobuf.ByteString.EMPTY;
      tag_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FlowKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 18: {

              protocol_ = input.readBytes();
              break;
            }
            case 258: {

              sourceAddress_ = input.readBytes();
              break;
            }
            case 266: {

              destinationAddress_ = input.readBytes();
              break;
            }
            case 514: {

              sourceSelector_ = input.readBytes();
              break;
            }
            case 522: {

              destinationSelector_ = input.readBytes();
              break;
            }
            case 642: {

              tag_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.ndx.model.FlowModel.internal_static_ndx_model_FlowKey_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.ndx.model.FlowModel.internal_static_ndx_model_FlowKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.ndx.model.FlowModel.FlowKey.class, org.ndx.model.FlowModel.FlowKey.Builder.class);
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>.ndx.model.FlowType Type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.ndx.model.FlowType Type = 1;</code>
     */
    public org.ndx.model.FlowModel.FlowType getType() {
      org.ndx.model.FlowModel.FlowType result = org.ndx.model.FlowModel.FlowType.valueOf(type_);
      return result == null ? org.ndx.model.FlowModel.FlowType.UNRECOGNIZED : result;
    }

    public static final int PROTOCOL_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString protocol_;
    /**
     * <code>bytes Protocol = 2;</code>
     */
    public com.google.protobuf.ByteString getProtocol() {
      return protocol_;
    }

    public static final int SOURCEADDRESS_FIELD_NUMBER = 32;
    private com.google.protobuf.ByteString sourceAddress_;
    /**
     * <code>bytes SourceAddress = 32;</code>
     */
    public com.google.protobuf.ByteString getSourceAddress() {
      return sourceAddress_;
    }

    public static final int DESTINATIONADDRESS_FIELD_NUMBER = 33;
    private com.google.protobuf.ByteString destinationAddress_;
    /**
     * <code>bytes DestinationAddress = 33;</code>
     */
    public com.google.protobuf.ByteString getDestinationAddress() {
      return destinationAddress_;
    }

    public static final int SOURCESELECTOR_FIELD_NUMBER = 64;
    private com.google.protobuf.ByteString sourceSelector_;
    /**
     * <code>bytes SourceSelector = 64;</code>
     */
    public com.google.protobuf.ByteString getSourceSelector() {
      return sourceSelector_;
    }

    public static final int DESTINATIONSELECTOR_FIELD_NUMBER = 65;
    private com.google.protobuf.ByteString destinationSelector_;
    /**
     * <code>bytes DestinationSelector = 65;</code>
     */
    public com.google.protobuf.ByteString getDestinationSelector() {
      return destinationSelector_;
    }

    public static final int TAG_FIELD_NUMBER = 80;
    private com.google.protobuf.ByteString tag_;
    /**
     * <code>bytes Tag = 80;</code>
     */
    public com.google.protobuf.ByteString getTag() {
      return tag_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.ndx.model.FlowModel.FlowType.UndefinedFlow.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!protocol_.isEmpty()) {
        output.writeBytes(2, protocol_);
      }
      if (!sourceAddress_.isEmpty()) {
        output.writeBytes(32, sourceAddress_);
      }
      if (!destinationAddress_.isEmpty()) {
        output.writeBytes(33, destinationAddress_);
      }
      if (!sourceSelector_.isEmpty()) {
        output.writeBytes(64, sourceSelector_);
      }
      if (!destinationSelector_.isEmpty()) {
        output.writeBytes(65, destinationSelector_);
      }
      if (!tag_.isEmpty()) {
        output.writeBytes(80, tag_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.ndx.model.FlowModel.FlowType.UndefinedFlow.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!protocol_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, protocol_);
      }
      if (!sourceAddress_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(32, sourceAddress_);
      }
      if (!destinationAddress_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(33, destinationAddress_);
      }
      if (!sourceSelector_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(64, sourceSelector_);
      }
      if (!destinationSelector_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(65, destinationSelector_);
      }
      if (!tag_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(80, tag_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.ndx.model.FlowModel.FlowKey)) {
        return super.equals(obj);
      }
      org.ndx.model.FlowModel.FlowKey other = (org.ndx.model.FlowModel.FlowKey) obj;

      boolean result = true;
      result = result && type_ == other.type_;
      result = result && getProtocol()
          .equals(other.getProtocol());
      result = result && getSourceAddress()
          .equals(other.getSourceAddress());
      result = result && getDestinationAddress()
          .equals(other.getDestinationAddress());
      result = result && getSourceSelector()
          .equals(other.getSourceSelector());
      result = result && getDestinationSelector()
          .equals(other.getDestinationSelector());
      result = result && getTag()
          .equals(other.getTag());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
      hash = (53 * hash) + getProtocol().hashCode();
      hash = (37 * hash) + SOURCEADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getSourceAddress().hashCode();
      hash = (37 * hash) + DESTINATIONADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getDestinationAddress().hashCode();
      hash = (37 * hash) + SOURCESELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getSourceSelector().hashCode();
      hash = (37 * hash) + DESTINATIONSELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getDestinationSelector().hashCode();
      hash = (37 * hash) + TAG_FIELD_NUMBER;
      hash = (53 * hash) + getTag().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.ndx.model.FlowModel.FlowKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.ndx.model.FlowModel.FlowKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.ndx.model.FlowModel.FlowKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.ndx.model.FlowModel.FlowKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *&#47; &lt;summary&gt;
     * /	FlowKey is a 5-tuple that identifies the data traffic flow.
     * / This class supports classical IP flows as well as non-ip flows.
     * /	&lt;/summary&gt;
     * / &lt;remarks&gt;
     * / According to ISO/OSI model, the general addressing scheme is defined as follows:
     * / N-address = ((N-1)-Address, N-selector)
     * / 
     * / This means that for identification of communication between two parties it would be sufficient 
     * / to consider a 5 tuple:
     * /
     * / (N-protocol, (N-1)-SourceAddress, N-SourceSelector, (N-1)-DestinationAddress, N-DestinationSelector)
     * /
     * / The reason for adding protocol is that the single protocol is used and thus it 
     * / does not have to be encoded in both source and destination selectors.
     * /
     * / NetworkFlow:
     * / The case for TCP flow:
     * / (TCP, IP-Address, TCP-port, IP-Address, TCP-Port)
     * / 
     * / The case for ICMP flow:
     * / (ICMP, IP-Address, ICMP-Type . ICMP-Code, IP-Address, ICMP-Type . ICMP-Code)
     * /
     * / EtherFlow:
     * / The case of ARP flow:
     * /	(ARP, MAC-Address, [], MAC-Address, [])
     * /	
     * / The case of BPDU:
     * /	(BPDU, MAC-Address, [], MAC-Address, [])
     * / Because both parites needs to communicate using the same protocol it is possible to define
     * / the N-address pair as the 5-tuple.
     * /
     * / But there may be other flow types that aggreagate several flows or are more specific because of application selectors:
     * / 
     * /	IpFlow:
     * / (IP, IP-Addrees, [], IP-Address, [])
     * / 
     * / ApplicationFlow uses Endpoint as the address and selector which is application specific:
     * /
     * / (SMB, IP-Address:Port, (TID, PID, MID), IP-Address:Port, (TID, PID, MID))
     * /
     * / What about VLANs? and tunnels?
     * / &lt;/remarks&gt;
     * </pre>
     *
     * Protobuf type {@code ndx.model.FlowKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ndx.model.FlowKey)
        org.ndx.model.FlowModel.FlowKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.ndx.model.FlowModel.internal_static_ndx_model_FlowKey_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.ndx.model.FlowModel.internal_static_ndx_model_FlowKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.ndx.model.FlowModel.FlowKey.class, org.ndx.model.FlowModel.FlowKey.Builder.class);
      }

      // Construct using org.ndx.model.FlowModel.FlowKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        type_ = 0;

        protocol_ = com.google.protobuf.ByteString.EMPTY;

        sourceAddress_ = com.google.protobuf.ByteString.EMPTY;

        destinationAddress_ = com.google.protobuf.ByteString.EMPTY;

        sourceSelector_ = com.google.protobuf.ByteString.EMPTY;

        destinationSelector_ = com.google.protobuf.ByteString.EMPTY;

        tag_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.ndx.model.FlowModel.internal_static_ndx_model_FlowKey_descriptor;
      }

      public org.ndx.model.FlowModel.FlowKey getDefaultInstanceForType() {
        return org.ndx.model.FlowModel.FlowKey.getDefaultInstance();
      }

      public org.ndx.model.FlowModel.FlowKey build() {
        org.ndx.model.FlowModel.FlowKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.ndx.model.FlowModel.FlowKey buildPartial() {
        org.ndx.model.FlowModel.FlowKey result = new org.ndx.model.FlowModel.FlowKey(this);
        result.type_ = type_;
        result.protocol_ = protocol_;
        result.sourceAddress_ = sourceAddress_;
        result.destinationAddress_ = destinationAddress_;
        result.sourceSelector_ = sourceSelector_;
        result.destinationSelector_ = destinationSelector_;
        result.tag_ = tag_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.ndx.model.FlowModel.FlowKey) {
          return mergeFrom((org.ndx.model.FlowModel.FlowKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.ndx.model.FlowModel.FlowKey other) {
        if (other == org.ndx.model.FlowModel.FlowKey.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getProtocol() != com.google.protobuf.ByteString.EMPTY) {
          setProtocol(other.getProtocol());
        }
        if (other.getSourceAddress() != com.google.protobuf.ByteString.EMPTY) {
          setSourceAddress(other.getSourceAddress());
        }
        if (other.getDestinationAddress() != com.google.protobuf.ByteString.EMPTY) {
          setDestinationAddress(other.getDestinationAddress());
        }
        if (other.getSourceSelector() != com.google.protobuf.ByteString.EMPTY) {
          setSourceSelector(other.getSourceSelector());
        }
        if (other.getDestinationSelector() != com.google.protobuf.ByteString.EMPTY) {
          setDestinationSelector(other.getDestinationSelector());
        }
        if (other.getTag() != com.google.protobuf.ByteString.EMPTY) {
          setTag(other.getTag());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.ndx.model.FlowModel.FlowKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.ndx.model.FlowModel.FlowKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int type_ = 0;
      /**
       * <code>.ndx.model.FlowType Type = 1;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.ndx.model.FlowType Type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.ndx.model.FlowType Type = 1;</code>
       */
      public org.ndx.model.FlowModel.FlowType getType() {
        org.ndx.model.FlowModel.FlowType result = org.ndx.model.FlowModel.FlowType.valueOf(type_);
        return result == null ? org.ndx.model.FlowModel.FlowType.UNRECOGNIZED : result;
      }
      /**
       * <code>.ndx.model.FlowType Type = 1;</code>
       */
      public Builder setType(org.ndx.model.FlowModel.FlowType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.ndx.model.FlowType Type = 1;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString protocol_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes Protocol = 2;</code>
       */
      public com.google.protobuf.ByteString getProtocol() {
        return protocol_;
      }
      /**
       * <code>bytes Protocol = 2;</code>
       */
      public Builder setProtocol(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        protocol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes Protocol = 2;</code>
       */
      public Builder clearProtocol() {
        
        protocol_ = getDefaultInstance().getProtocol();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString sourceAddress_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes SourceAddress = 32;</code>
       */
      public com.google.protobuf.ByteString getSourceAddress() {
        return sourceAddress_;
      }
      /**
       * <code>bytes SourceAddress = 32;</code>
       */
      public Builder setSourceAddress(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sourceAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes SourceAddress = 32;</code>
       */
      public Builder clearSourceAddress() {
        
        sourceAddress_ = getDefaultInstance().getSourceAddress();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString destinationAddress_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes DestinationAddress = 33;</code>
       */
      public com.google.protobuf.ByteString getDestinationAddress() {
        return destinationAddress_;
      }
      /**
       * <code>bytes DestinationAddress = 33;</code>
       */
      public Builder setDestinationAddress(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        destinationAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes DestinationAddress = 33;</code>
       */
      public Builder clearDestinationAddress() {
        
        destinationAddress_ = getDefaultInstance().getDestinationAddress();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString sourceSelector_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes SourceSelector = 64;</code>
       */
      public com.google.protobuf.ByteString getSourceSelector() {
        return sourceSelector_;
      }
      /**
       * <code>bytes SourceSelector = 64;</code>
       */
      public Builder setSourceSelector(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sourceSelector_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes SourceSelector = 64;</code>
       */
      public Builder clearSourceSelector() {
        
        sourceSelector_ = getDefaultInstance().getSourceSelector();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString destinationSelector_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes DestinationSelector = 65;</code>
       */
      public com.google.protobuf.ByteString getDestinationSelector() {
        return destinationSelector_;
      }
      /**
       * <code>bytes DestinationSelector = 65;</code>
       */
      public Builder setDestinationSelector(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        destinationSelector_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes DestinationSelector = 65;</code>
       */
      public Builder clearDestinationSelector() {
        
        destinationSelector_ = getDefaultInstance().getDestinationSelector();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString tag_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes Tag = 80;</code>
       */
      public com.google.protobuf.ByteString getTag() {
        return tag_;
      }
      /**
       * <code>bytes Tag = 80;</code>
       */
      public Builder setTag(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes Tag = 80;</code>
       */
      public Builder clearTag() {
        
        tag_ = getDefaultInstance().getTag();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ndx.model.FlowKey)
    }

    // @@protoc_insertion_point(class_scope:ndx.model.FlowKey)
    private static final org.ndx.model.FlowModel.FlowKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.ndx.model.FlowModel.FlowKey();
    }

    public static org.ndx.model.FlowModel.FlowKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlowKey>
        PARSER = new com.google.protobuf.AbstractParser<FlowKey>() {
      public FlowKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FlowKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlowKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlowKey> getParserForType() {
      return PARSER;
    }

    public org.ndx.model.FlowModel.FlowKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ndx_model_FlowKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ndx_model_FlowKey_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017FlowModel.proto\022\tndx.model\"\263\001\n\007FlowKey" +
      "\022!\n\004Type\030\001 \001(\0162\023.ndx.model.FlowType\022\020\n\010P" +
      "rotocol\030\002 \001(\014\022\025\n\rSourceAddress\030  \001(\014\022\032\n\022" +
      "DestinationAddress\030! \001(\014\022\026\n\016SourceSelect" +
      "or\030@ \001(\014\022\033\n\023DestinationSelector\030A \001(\014\022\013\n" +
      "\003Tag\030P \001(\014*:\n\017FlowOrientation\022\r\n\tUndefin" +
      "ed\020\000\022\n\n\006Upflow\020\001\022\014\n\010Downflow\020\002*^\n\010FlowTy" +
      "pe\022\021\n\rUndefinedFlow\020\000\022\017\n\013NetworkFlow\020\001\022\r" +
      "\n\tEtherFlow\020\002\022\n\n\006IpFlow\020\004\022\023\n\017Application" +
      "Flow\020\010B\017\n\rorg.ndx.modelb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_ndx_model_FlowKey_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ndx_model_FlowKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ndx_model_FlowKey_descriptor,
        new java.lang.String[] { "Type", "Protocol", "SourceAddress", "DestinationAddress", "SourceSelector", "DestinationSelector", "Tag", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
