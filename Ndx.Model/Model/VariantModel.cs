// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VariantModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from VariantModel.proto</summary>
  public static partial class VariantModelReflection {

    #region Descriptor
    /// <summary>File descriptor for VariantModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VariantModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJWYXJpYW50TW9kZWwucHJvdG8SCW5keC5tb2RlbBoZZ29vZ2xlL3Byb3Rv",
            "YnVmL2FueS5wcm90byK1AgoHVmFyaWFudBITCglCb29sVmFsdWUYASABKAhI",
            "ABIUCgpJbnQzMlZhbHVlGAIgASgRSAASFAoKSW50NjRWYWx1ZRgDIAEoEkgA",
            "EhUKC1VJbnQzMlZhbHVlGAQgASgNSAASFQoLVUludDY0VmFsdWUYBSABKARI",
            "ABIUCgpGbG9hdFZhbHVlGAYgASgCSAASFQoLRG91YmxlVmFsdWUYByABKAFI",
            "ABIVCgtTdHJpbmdWYWx1ZRgIIAEoCUgAEhQKCkJ5dGVzVmFsdWUYCSABKAxI",
            "ABIYCg5JcEFkZHJlc3NWYWx1ZRgKIAEoDEgAEhcKDURhdGVUaW1lVmFsdWUY",
            "CyABKANIABIlCgVPdGhlchgMIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlI",
            "AEIHCgVWYWx1ZUIPCg1vcmcubmR4Lm1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Variant), global::Ndx.Model.Variant.Parser, new[]{ "BoolValue", "Int32Value", "Int64Value", "UInt32Value", "UInt64Value", "FloatValue", "DoubleValue", "StringValue", "BytesValue", "IpAddressValue", "DateTimeValue", "Other" }, new[]{ "Value" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Variant : pb::IMessage<Variant> {
    private static readonly pb::MessageParser<Variant> _parser = new pb::MessageParser<Variant>(() => new Variant());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variant> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.VariantModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant(Variant other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.UInt32Value:
          UInt32Value = other.UInt32Value;
          break;
        case ValueOneofCase.UInt64Value:
          UInt64Value = other.UInt64Value;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.IpAddressValue:
          IpAddressValue = other.IpAddressValue;
          break;
        case ValueOneofCase.DateTimeValue:
          DateTimeValue = other.DateTimeValue;
          break;
        case ValueOneofCase.Other:
          Other = other.Other.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variant Clone() {
      return new Variant(this);
    }

    /// <summary>Field number for the "BoolValue" field.</summary>
    public const int BoolValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "Int32Value" field.</summary>
    public const int Int32ValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32Value {
      get { return valueCase_ == ValueOneofCase.Int32Value ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int32Value;
      }
    }

    /// <summary>Field number for the "Int64Value" field.</summary>
    public const int Int64ValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "UInt32Value" field.</summary>
    public const int UInt32ValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UInt32Value {
      get { return valueCase_ == ValueOneofCase.UInt32Value ? (uint) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.UInt32Value;
      }
    }

    /// <summary>Field number for the "UInt64Value" field.</summary>
    public const int UInt64ValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UInt64Value {
      get { return valueCase_ == ValueOneofCase.UInt64Value ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.UInt64Value;
      }
    }

    /// <summary>Field number for the "FloatValue" field.</summary>
    public const int FloatValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return valueCase_ == ValueOneofCase.FloatValue ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "DoubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "StringValue" field.</summary>
    public const int StringValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "BytesValue" field.</summary>
    public const int BytesValueFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "IpAddressValue" field.</summary>
    public const int IpAddressValueFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddressValue {
      get { return valueCase_ == ValueOneofCase.IpAddressValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.IpAddressValue;
      }
    }

    /// <summary>Field number for the "DateTimeValue" field.</summary>
    public const int DateTimeValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DateTimeValue {
      get { return valueCase_ == ValueOneofCase.DateTimeValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DateTimeValue;
      }
    }

    /// <summary>Field number for the "Other" field.</summary>
    public const int OtherFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Other {
      get { return valueCase_ == ValueOneofCase.Other ? (global::Google.Protobuf.WellKnownTypes.Any) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Other;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "Value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      BoolValue = 1,
      Int32Value = 2,
      Int64Value = 3,
      UInt32Value = 4,
      UInt64Value = 5,
      FloatValue = 6,
      DoubleValue = 7,
      StringValue = 8,
      BytesValue = 9,
      IpAddressValue = 10,
      DateTimeValue = 11,
      Other = 12,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variant);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variant other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolValue != other.BoolValue) return false;
      if (Int32Value != other.Int32Value) return false;
      if (Int64Value != other.Int64Value) return false;
      if (UInt32Value != other.UInt32Value) return false;
      if (UInt64Value != other.UInt64Value) return false;
      if (FloatValue != other.FloatValue) return false;
      if (DoubleValue != other.DoubleValue) return false;
      if (StringValue != other.StringValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (IpAddressValue != other.IpAddressValue) return false;
      if (DateTimeValue != other.DateTimeValue) return false;
      if (!object.Equals(Other, other.Other)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int32Value) hash ^= Int32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.UInt32Value) hash ^= UInt32Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.UInt64Value) hash ^= UInt64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.FloatValue) hash ^= FloatValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= DoubleValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.IpAddressValue) hash ^= IpAddressValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DateTimeValue) hash ^= DateTimeValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Other) hash ^= Other.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(8);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        output.WriteRawTag(16);
        output.WriteSInt32(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(24);
        output.WriteSInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.UInt32Value) {
        output.WriteRawTag(32);
        output.WriteUInt32(UInt32Value);
      }
      if (valueCase_ == ValueOneofCase.UInt64Value) {
        output.WriteRawTag(40);
        output.WriteUInt64(UInt64Value);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        output.WriteRawTag(53);
        output.WriteFloat(FloatValue);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(57);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(66);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(74);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.IpAddressValue) {
        output.WriteRawTag(82);
        output.WriteBytes(IpAddressValue);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        output.WriteRawTag(88);
        output.WriteInt64(DateTimeValue);
      }
      if (valueCase_ == ValueOneofCase.Other) {
        output.WriteRawTag(98);
        output.WriteMessage(Other);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Int32Value) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Int32Value);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.UInt32Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UInt32Value);
      }
      if (valueCase_ == ValueOneofCase.UInt64Value) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UInt64Value);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.IpAddressValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpAddressValue);
      }
      if (valueCase_ == ValueOneofCase.DateTimeValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DateTimeValue);
      }
      if (valueCase_ == ValueOneofCase.Other) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variant other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.Int32Value:
          Int32Value = other.Int32Value;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.UInt32Value:
          UInt32Value = other.UInt32Value;
          break;
        case ValueOneofCase.UInt64Value:
          UInt64Value = other.UInt64Value;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.IpAddressValue:
          IpAddressValue = other.IpAddressValue;
          break;
        case ValueOneofCase.DateTimeValue:
          DateTimeValue = other.DateTimeValue;
          break;
        case ValueOneofCase.Other:
          Other = other.Other;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BoolValue = input.ReadBool();
            break;
          }
          case 16: {
            Int32Value = input.ReadSInt32();
            break;
          }
          case 24: {
            Int64Value = input.ReadSInt64();
            break;
          }
          case 32: {
            UInt32Value = input.ReadUInt32();
            break;
          }
          case 40: {
            UInt64Value = input.ReadUInt64();
            break;
          }
          case 53: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 57: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 66: {
            StringValue = input.ReadString();
            break;
          }
          case 74: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 82: {
            IpAddressValue = input.ReadBytes();
            break;
          }
          case 88: {
            DateTimeValue = input.ReadInt64();
            break;
          }
          case 98: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (valueCase_ == ValueOneofCase.Other) {
              subBuilder.MergeFrom(Other);
            }
            input.ReadMessage(subBuilder);
            Other = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
