// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolModel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Model {

  /// <summary>Holder for reflection information generated from ProtocolModel.proto</summary>
  public static partial class ProtocolModelReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtocolModel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b2NvbE1vZGVsLnByb3RvEgluZHgubW9kZWwaD0NvbnN0YW50cy5w",
            "cm90byKLAQoNUHJvdG9jb2xGaWVsZBIMCgROYW1lGAEgASgJEiIKBFR5cGUY",
            "AiABKA4yFC5uZHgubW9kZWwuRmllbGRUeXBlEigKB0Rpc3BsYXkYAyABKA4y",
            "Fy5uZHgubW9kZWwuRmllbGREaXNwbGF5EgwKBEluZm8YBCABKAkSEAoISnNv",
            "bk5hbWUYBSABKAkikgEKCFByb3RvY29sEgwKBE5hbWUYASABKAkSLwoGRmll",
            "bGRzGAIgAygLMh8ubmR4Lm1vZGVsLlByb3RvY29sLkZpZWxkc0VudHJ5GkcK",
            "C0ZpZWxkc0VudHJ5EgsKA2tleRgBIAEoCRInCgV2YWx1ZRgCIAEoCzIYLm5k",
            "eC5tb2RlbC5Qcm90b2NvbEZpZWxkOgI4ASroBQoJRmllbGRUeXBlEgsKB0ZU",
            "X05PTkUQABIPCgtGVF9QUk9UT0NPTBABEg4KCkZUX0JPT0xFQU4QAhILCgdG",
            "VF9DSEFSEAMSDAoIRlRfVUlOVDgQBBINCglGVF9VSU5UMTYQBRINCglGVF9V",
            "SU5UMjQQBhINCglGVF9VSU5UMzIQBxINCglGVF9VSU5UNDAQCBINCglGVF9V",
            "SU5UNDgQCRINCglGVF9VSU5UNTYQChINCglGVF9VSU5UNjQQCxILCgdGVF9J",
            "TlQ4EAwSDAoIRlRfSU5UMTYQDRIMCghGVF9JTlQyNBAOEgwKCEZUX0lOVDMy",
            "EA8SDAoIRlRfSU5UNDAQEBIMCghGVF9JTlQ0OBAREgwKCEZUX0lOVDU2EBIS",
            "DAoIRlRfSU5UNjQQExIYChRGVF9JRUVFXzExMDczX1NGTE9BVBAUEhcKE0ZU",
            "X0lFRUVfMTEwNzNfRkxPQVQQFRIMCghGVF9GTE9BVBAWEg0KCUZUX0RPVUJM",
            "RRAXEhQKEEZUX0FCU09MVVRFX1RJTUUQGBIUChBGVF9SRUxBVElWRV9USU1F",
            "EBkSDQoJRlRfU1RSSU5HEBoSDgoKRlRfU1RSSU5HWhAbEhIKDkZUX1VJTlRf",
            "U1RSSU5HEBwSDAoIRlRfRVRIRVIQHRIMCghGVF9CWVRFUxAeEhEKDUZUX1VJ",
            "TlRfQllURVMQHxILCgdGVF9JUHY0ECASCwoHRlRfSVB2NhAhEg0KCUZUX0lQ",
            "WE5FVBAiEg8KC0ZUX0ZSQU1FTlVNECMSCwoHRlRfUENSRRAkEgsKB0ZUX0dV",
            "SUQQJRIKCgZGVF9PSUQQJhIMCghGVF9FVUk2NBAnEgsKB0ZUX0FYMjUQKBIM",
            "CghGVF9WSU5FUxApEg4KCkZUX1JFTF9PSUQQKhIQCgxGVF9TWVNURU1fSUQQ",
            "KxIRCg1GVF9TVFJJTkdaUEFEECwSDAoIRlRfRkNXV04QLRIQCgxGVF9OVU1f",
            "VFlQRVMQLirFAgoMRmllbGREaXNwbGF5Eg0KCUJBU0VfTk9ORRAAEgwKCEJB",
            "U0VfREVDEAESDAoIQkFTRV9IRVgQAhIMCghCQVNFX09DVBADEhAKDEJBU0Vf",
            "REVDX0hFWBAEEhAKDEJBU0VfSEVYX0RFQxAFEg8KC0JBU0VfQ1VTVE9NEAYS",
            "DwoLU1RSX1VOSUNPREUQBxILCgdTRVBfRE9UEAgSDAoIU0VQX0RBU0gQCRIN",
            "CglTRVBfQ09MT04QChINCglTRVBfU1BBQ0UQCxIQCgxCQVNFX05FVE1BU0sQ",
            "DBIPCgtCQVNFX1BUX1VEUBANEg8KC0JBU0VfUFRfVENQEA4SEAoMQkFTRV9Q",
            "VF9EQ0NQEA8SEAoMQkFTRV9QVF9TQ1RQEBASDAoIQkFTRV9PVUkQERIXChNB",
            "QlNPTFVURV9USU1FX0xPQ0FMEBRCDwoNb3JnLm5keC5tb2RlbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Model.ConstantsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ndx.Model.FieldType), typeof(global::Ndx.Model.FieldDisplay), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.ProtocolField), global::Ndx.Model.ProtocolField.Parser, new[]{ "Name", "Type", "Display", "Info", "JsonName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Model.Protocol), global::Ndx.Model.Protocol.Parser, new[]{ "Name", "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum FieldType {
    /// <summary>
    /// used for text labels with no value 
    /// </summary>
    [pbr::OriginalName("FT_NONE")] FtNone = 0,
    [pbr::OriginalName("FT_PROTOCOL")] FtProtocol = 1,
    /// <summary>
    /// TRUE and FALSE come from &lt;glib.h> 
    /// </summary>
    [pbr::OriginalName("FT_BOOLEAN")] FtBoolean = 2,
    /// <summary>
    /// 1-octet character as 0-255 
    /// </summary>
    [pbr::OriginalName("FT_CHAR")] FtChar = 3,
    [pbr::OriginalName("FT_UINT8")] FtUint8 = 4,
    [pbr::OriginalName("FT_UINT16")] FtUint16 = 5,
    /// <summary>
    /// really a UINT32, but displayed as 6 hex-digits if FD_HEX
    /// </summary>
    [pbr::OriginalName("FT_UINT24")] FtUint24 = 6,
    [pbr::OriginalName("FT_UINT32")] FtUint32 = 7,
    /// <summary>
    /// really a UINT64, but displayed as 10 hex-digits if FD_HEX
    /// </summary>
    [pbr::OriginalName("FT_UINT40")] FtUint40 = 8,
    /// <summary>
    /// really a UINT64, but displayed as 12 hex-digits if FD_HEX
    /// </summary>
    [pbr::OriginalName("FT_UINT48")] FtUint48 = 9,
    /// <summary>
    /// really a UINT64, but displayed as 14 hex-digits if FD_HEX
    /// </summary>
    [pbr::OriginalName("FT_UINT56")] FtUint56 = 10,
    [pbr::OriginalName("FT_UINT64")] FtUint64 = 11,
    [pbr::OriginalName("FT_INT8")] FtInt8 = 12,
    [pbr::OriginalName("FT_INT16")] FtInt16 = 13,
    /// <summary>
    /// same as for UINT24 
    /// </summary>
    [pbr::OriginalName("FT_INT24")] FtInt24 = 14,
    [pbr::OriginalName("FT_INT32")] FtInt32 = 15,
    /// <summary>
    /// same as for UINT40 
    /// </summary>
    [pbr::OriginalName("FT_INT40")] FtInt40 = 16,
    /// <summary>
    /// same as for UINT48 
    /// </summary>
    [pbr::OriginalName("FT_INT48")] FtInt48 = 17,
    /// <summary>
    /// same as for UINT56 
    /// </summary>
    [pbr::OriginalName("FT_INT56")] FtInt56 = 18,
    [pbr::OriginalName("FT_INT64")] FtInt64 = 19,
    [pbr::OriginalName("FT_IEEE_11073_SFLOAT")] FtIeee11073Sfloat = 20,
    [pbr::OriginalName("FT_IEEE_11073_FLOAT")] FtIeee11073Float = 21,
    [pbr::OriginalName("FT_FLOAT")] FtFloat = 22,
    [pbr::OriginalName("FT_DOUBLE")] FtDouble = 23,
    [pbr::OriginalName("FT_ABSOLUTE_TIME")] FtAbsoluteTime = 24,
    [pbr::OriginalName("FT_RELATIVE_TIME")] FtRelativeTime = 25,
    [pbr::OriginalName("FT_STRING")] FtString = 26,
    /// <summary>
    /// for use with proto_tree_add_item() 
    /// </summary>
    [pbr::OriginalName("FT_STRINGZ")] FtStringz = 27,
    /// <summary>
    /// for use with proto_tree_add_item() 
    /// </summary>
    [pbr::OriginalName("FT_UINT_STRING")] FtUintString = 28,
    [pbr::OriginalName("FT_ETHER")] FtEther = 29,
    [pbr::OriginalName("FT_BYTES")] FtBytes = 30,
    [pbr::OriginalName("FT_UINT_BYTES")] FtUintBytes = 31,
    [pbr::OriginalName("FT_IPv4")] FtIpv4 = 32,
    [pbr::OriginalName("FT_IPv6")] FtIpv6 = 33,
    [pbr::OriginalName("FT_IPXNET")] FtIpxnet = 34,
    /// <summary>
    /// a UINT32, but if selected lets you go to frame with that number 
    /// </summary>
    [pbr::OriginalName("FT_FRAMENUM")] FtFramenum = 35,
    /// <summary>
    /// a compiled Perl-Compatible Regular Expression object 
    /// </summary>
    [pbr::OriginalName("FT_PCRE")] FtPcre = 36,
    /// <summary>
    /// GUID, UUID 
    /// </summary>
    [pbr::OriginalName("FT_GUID")] FtGuid = 37,
    /// <summary>
    /// OBJECT IDENTIFIER 
    /// </summary>
    [pbr::OriginalName("FT_OID")] FtOid = 38,
    [pbr::OriginalName("FT_EUI64")] FtEui64 = 39,
    [pbr::OriginalName("FT_AX25")] FtAx25 = 40,
    [pbr::OriginalName("FT_VINES")] FtVines = 41,
    /// <summary>
    /// RELATIVE-OID 
    /// </summary>
    [pbr::OriginalName("FT_REL_OID")] FtRelOid = 42,
    [pbr::OriginalName("FT_SYSTEM_ID")] FtSystemId = 43,
    /// <summary>
    /// for use with proto_tree_add_item() 
    /// </summary>
    [pbr::OriginalName("FT_STRINGZPAD")] FtStringzpad = 44,
    [pbr::OriginalName("FT_FCWWN")] FtFcwwn = 45,
    /// <summary>
    /// last item number plus one 
    /// </summary>
    [pbr::OriginalName("FT_NUM_TYPES")] FtNumTypes = 46,
  }

  public enum FieldDisplay {
    /// <summary>
    ///*&lt; none 
    /// </summary>
    [pbr::OriginalName("BASE_NONE")] BaseNone = 0,
    /// <summary>
    ///*&lt; decimal 
    /// </summary>
    [pbr::OriginalName("BASE_DEC")] BaseDec = 1,
    /// <summary>
    ///*&lt; hexadecimal 
    /// </summary>
    [pbr::OriginalName("BASE_HEX")] BaseHex = 2,
    /// <summary>
    ///*&lt; octal 
    /// </summary>
    [pbr::OriginalName("BASE_OCT")] BaseOct = 3,
    /// <summary>
    ///*&lt; decimal (hexadecimal) 
    /// </summary>
    [pbr::OriginalName("BASE_DEC_HEX")] BaseDecHex = 4,
    /// <summary>
    ///*&lt; hexadecimal (decimal) 
    /// </summary>
    [pbr::OriginalName("BASE_HEX_DEC")] BaseHexDec = 5,
    /// <summary>
    ///*&lt; call custom routine (in ->strings) to format 
    /// </summary>
    [pbr::OriginalName("BASE_CUSTOM")] BaseCustom = 6,
    /// <summary>
    ///*&lt; shows non-printable UNICODE characters as \\uXXXX (XXX for now non-printable characters display depends on UI) 
    /// </summary>
    [pbr::OriginalName("STR_UNICODE")] StrUnicode = 7,
    /// <summary>
    ///*&lt; hexadecimal bytes with a period (.) between each byte 
    /// </summary>
    [pbr::OriginalName("SEP_DOT")] SepDot = 8,
    /// <summary>
    ///*&lt; hexadecimal bytes with a dash (-) between each byte 
    /// </summary>
    [pbr::OriginalName("SEP_DASH")] SepDash = 9,
    /// <summary>
    ///*&lt; hexadecimal bytes with a colon (:) between each byte 
    /// </summary>
    [pbr::OriginalName("SEP_COLON")] SepColon = 10,
    /// <summary>
    ///*&lt; hexadecimal bytes with a space between each byte 
    /// </summary>
    [pbr::OriginalName("SEP_SPACE")] SepSpace = 11,
    /// <summary>
    /// Address types 
    /// </summary>
    [pbr::OriginalName("BASE_NETMASK")] BaseNetmask = 12,
    /// <summary>
    /// Port types 
    /// </summary>
    [pbr::OriginalName("BASE_PT_UDP")] BasePtUdp = 13,
    /// <summary>
    ///*&lt; TCP port 
    /// </summary>
    [pbr::OriginalName("BASE_PT_TCP")] BasePtTcp = 14,
    /// <summary>
    ///*&lt; DCCP port 
    /// </summary>
    [pbr::OriginalName("BASE_PT_DCCP")] BasePtDccp = 15,
    /// <summary>
    ///*&lt; SCTP port 
    /// </summary>
    [pbr::OriginalName("BASE_PT_SCTP")] BasePtSctp = 16,
    /// <summary>
    /// OUI types 
    /// </summary>
    [pbr::OriginalName("BASE_OUI")] BaseOui = 17,
    [pbr::OriginalName("ABSOLUTE_TIME_LOCAL")] AbsoluteTimeLocal = 20,
  }

  #endregion

  #region Messages
  /// <summary>
  //// &lt;summary> 
  ////	Information describing a header field.
  ////	&lt;/summary>
  /// </summary>
  public sealed partial class ProtocolField : pb::IMessage<ProtocolField> {
    private static readonly pb::MessageParser<ProtocolField> _parser = new pb::MessageParser<ProtocolField>(() => new ProtocolField());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtocolField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ProtocolModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolField(ProtocolField other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      display_ = other.display_;
      info_ = other.info_;
      jsonName_ = other.jsonName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolField Clone() {
      return new ProtocolField(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    //// &lt;summary>
    //// Full name of this field.
    //// &lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Ndx.Model.FieldType type_ = 0;
    /// <summary>
    //// &lt;summary>
    ////	Field type, one of FT_  value.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.FieldType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Display" field.</summary>
    public const int DisplayFieldNumber = 3;
    private global::Ndx.Model.FieldDisplay display_ = 0;
    /// <summary>
    ////	&lt;summary>
    ////	One of BASE_, or field bit-width if FT_BOOLEAN 
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Model.FieldDisplay Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 4;
    private string info_ = "";
    /// <summary>
    ////	&lt;summary>
    //// Brief description of field.
    ////	&lt;/summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "JsonName" field.</summary>
    public const int JsonNameFieldNumber = 5;
    private string jsonName_ = "";
    /// <summary>
    //// Defines the name of the field as appeared in the JSON output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JsonName {
      get { return jsonName_; }
      set {
        jsonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtocolField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtocolField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Display != other.Display) return false;
      if (Info != other.Info) return false;
      if (JsonName != other.JsonName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Display != 0) hash ^= Display.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (JsonName.Length != 0) hash ^= JsonName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Display != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Display);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (JsonName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(JsonName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Display != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Display);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (JsonName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtocolField other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Display != 0) {
        Display = other.Display;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.JsonName.Length != 0) {
        JsonName = other.JsonName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Ndx.Model.FieldType) input.ReadEnum();
            break;
          }
          case 24: {
            display_ = (global::Ndx.Model.FieldDisplay) input.ReadEnum();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
          case 42: {
            JsonName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Represents a protocol type specification. 
  /// </summary>
  public sealed partial class Protocol : pb::IMessage<Protocol> {
    private static readonly pb::MessageParser<Protocol> _parser = new pb::MessageParser<Protocol>(() => new Protocol());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Protocol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Model.ProtocolModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol(Protocol other) : this() {
      name_ = other.name_;
      fields_ = other.fields_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protocol Clone() {
      return new Protocol(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Ndx.Model.ProtocolField>.Codec _map_fields_codec
        = new pbc::MapField<string, global::Ndx.Model.ProtocolField>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Ndx.Model.ProtocolField.Parser), 18);
    private readonly pbc::MapField<string, global::Ndx.Model.ProtocolField> fields_ = new pbc::MapField<string, global::Ndx.Model.ProtocolField>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Ndx.Model.ProtocolField> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Protocol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Protocol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Fields.Equals(other.Fields)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Fields.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      fields_.WriteTo(output, _map_fields_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += fields_.CalculateSize(_map_fields_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protocol other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      fields_.Add(other.fields_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
