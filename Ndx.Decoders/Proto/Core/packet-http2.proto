syntax = "proto3";
package Ndx.Decoders.Core;
message Http2 {
   // Stream ('http2_http2_stream')
   int32 Http2Stream = 1;

   // Length ('http2_http2_length')
   uint32 Http2Length = 2;

   // Type ('http2_http2_type')
   uint32 Http2Type = 3;

   // Reserved ('http2_http2_r')
   uint32 Http2R = 4;

   // Weight ('http2_headers_http2_headers_weight')
   uint32 Http2HeadersWeight = 5;

   // Weight real ('http2_headers_http2_headers_weight_real')
   uint32 Http2HeadersWeightReal = 6;

   // Stream Identifier ('http2_http2_streamid')
   uint32 Http2Streamid = 7;

   // Magic ('http2_http2_magic')
   string Http2Magic = 8;

   // Unknown ('http2_http2_unknown')
   bytes Http2Unknown = 9;

   // Flags ('http2_http2_flags')
   uint32 Http2Flags = 10;

   // End Stream ('http2_flags_http2_flags_end_stream')
   bool Http2FlagsEndStream = 11;

   // End Headers ('http2_flags_http2_flags_eh')
   bool Http2FlagsEh = 12;

   // Padded ('http2_flags_http2_flags_padded')
   bool Http2FlagsPadded = 13;

   // Priority ('http2_flags_http2_flags_priority')
   bool Http2FlagsPriority = 14;

   // ACK ('http2_http2_flags_ack_ping')
   bool Http2FlagsAckPing = 15;

   // Unused ('http2_flags_http2_flags_unused')
   uint32 Http2FlagsUnused = 16;

   // Unused ('http2_flags_http2_flags_unused_settings')
   uint32 Http2FlagsUnusedSettings = 17;

   // Unused ('http2_flags_http2_flags_unused_ping')
   uint32 Http2FlagsUnusedPing = 18;

   // Unused ('http2_flags_http2_flags_unused_continuation')
   uint32 Http2FlagsUnusedContinuation = 19;

   // Unused ('http2_flags_http2_flags_unused_push_promise')
   uint32 Http2FlagsUnusedPushPromise = 20;

   // Unused ('http2_flags_http2_flags_unused_data')
   uint32 Http2FlagsUnusedData = 21;

   // Unused ('http2_flags_http2_flags_unused_headers')
   uint32 Http2FlagsUnusedHeaders = 22;

   // ACK ('http2_http2_flags_ack_settings')
   bool Http2FlagsAckSettings = 23;

   // Pad Length ('http2_http2_padding')
   uint32 Http2Padding = 24;

   // Pad Length ('http2_http2_pad_length')
   uint32 Http2PadLength = 25;

   // Exclusive ('http2_http2_exclusive')
   bool Http2Exclusive = 26;

   // Stream Dependency ('http2_http2_stream_dependency')
   uint32 Http2StreamDependency = 27;

   // Data ('http2_http2_data_data')
   bytes Http2DataData = 28;

   // Padding ('http2_http2_data_padding')
   bytes Http2DataPadding = 29;

   // Body fragments ('http2_http2_body_fragments')
   int32 Http2BodyFragments = 30;

   // Body fragment ('http2_http2_body_fragment')
   int64 Http2BodyFragment = 31;

   // Body fragment overlap ('http2_body_fragment_http2_body_fragment_overlap')
   bool Http2BodyFragmentOverlap = 32;

   // Body fragment overlapping with conflicting data ('http2_body_fragment_overlap_http2_body_fragment_overlap_conflicts')
   bool Http2BodyFragmentOverlapConflicts = 33;

   // Body has multiple tail fragments ('http2_body_fragment_http2_body_fragment_multiple_tails')
   bool Http2BodyFragmentMultipleTails = 34;

   // Body fragment too long ('http2_body_fragment_http2_body_fragment_too_long_fragment')
   bool Http2BodyFragmentTooLongFragment = 35;

   // Body defragment error ('http2_body_fragment_http2_body_fragment_error')
   int64 Http2BodyFragmentError = 36;

   // Body fragment count ('http2_body_fragment_http2_body_fragment_count')
   uint32 Http2BodyFragmentCount = 37;

   // Reassembled body in frame ('http2_http2_body_reassembled_in')
   int64 Http2BodyReassembledIn = 38;

   // Reassembled body length ('http2_http2_body_reassembled_length')
   uint32 Http2BodyReassembledLength = 39;

   // Header Block Fragment ('http2_http2_headers')
   bytes Http2Headers = 40;

   // Padding ('http2_headers_http2_headers_padding')
   bytes Http2HeadersPadding = 41;

   // Header ('http2_http2_header')
   int32 Http2Header = 42;

   // Header Length ('http2_header_http2_header_length')
   uint32 Http2HeaderLength = 43;

   // Header Count ('http2_header_http2_header_count')
   uint32 Http2HeaderCount = 44;

   // Name Length ('http2_header_name_http2_header_name_length')
   uint32 Http2HeaderNameLength = 45;

   // Name ('http2_header_http2_header_name')
   string Http2HeaderName = 46;

   // Value Length ('http2_header_value_http2_header_value_length')
   uint32 Http2HeaderValueLength = 47;

   // Value ('http2_header_http2_header_value')
   string Http2HeaderValue = 48;

   // Representation ('http2_header_http2_header_repr')
   string Http2HeaderRepr = 49;

   // Index ('http2_header_http2_header_index')
   uint32 Http2HeaderIndex = 50;

   // Header table size update ('http2_http2_header_table_size_update')
   int32 Http2HeaderTableSizeUpdate = 51;

   // Header table size ('http2_header_table_size_update_http2_header_table_size_update_header_table_size')
   uint32 Http2HeaderTableSizeUpdateHeaderTableSize = 52;

   // Error ('http2_http2_rst_stream_error')
   uint32 Http2RstStreamError = 53;

   // Settings ('http2_http2_settings')
   int32 Http2Settings = 54;

   // Settings Identifier ('http2_settings_http2_settings_id')
   uint32 Http2SettingsId = 55;

   // Header table size ('http2_settings_http2_settings_header_table_size')
   uint32 Http2SettingsHeaderTableSize = 56;

   // Enable PUSH ('http2_settings_http2_settings_enable_push')
   uint32 Http2SettingsEnablePush = 57;

   // Max concurrent streams ('http2_settings_http2_settings_max_concurrent_streams')
   uint32 Http2SettingsMaxConcurrentStreams = 58;

   // Initial Windows Size ('http2_settings_http2_settings_initial_window_size')
   uint32 Http2SettingsInitialWindowSize = 59;

   // Max frame size ('http2_settings_http2_settings_max_frame_size')
   uint32 Http2SettingsMaxFrameSize = 60;

   // Max header list size ('http2_settings_http2_settings_max_header_list_size')
   uint32 Http2SettingsMaxHeaderListSize = 61;

   // Unknown Settings ('http2_settings_http2_settings_unknown')
   uint32 Http2SettingsUnknown = 62;

   // Reserved ('http2_http2_push_promise_r')
   uint32 Http2PushPromiseR = 63;

   // Promised-Stream-ID ('http2_http2_push_promise_promised_stream_id')
   uint32 Http2PushPromisePromisedStreamId = 64;

   // Header Block Fragment ('http2_http2_push_promise_header')
   bytes Http2PushPromiseHeader = 65;

   // Padding ('http2_http2_push_promise_padding')
   bytes Http2PushPromisePadding = 66;

   // Ping ('http2_http2_ping')
   bytes Http2Ping = 67;

   // Pong ('http2_http2_pong')
   bytes Http2Pong = 68;

   // Reserved ('http2_http2_goway_r')
   uint32 Http2GowayR = 69;

   // Promised-Stream-ID ('http2_http2_goaway_last_stream_id')
   uint32 Http2GoawayLastStreamId = 70;

   // Error ('http2_http2_goaway_error')
   uint32 Http2GoawayError = 71;

   // Additional Debug Data ('http2_http2_goaway_addata')
   bytes Http2GoawayAddata = 72;

   // Reserved ('http2_http2_window_update_r')
   uint32 Http2WindowUpdateR = 73;

   // Window Size Increment ('http2_http2_window_update_window_size_increment')
   uint32 Http2WindowUpdateWindowSizeIncrement = 74;

   // Continuation Header ('http2_http2_continuation_header')
   string Http2ContinuationHeader = 75;

   // Padding ('http2_http2_continuation_padding')
   bytes Http2ContinuationPadding = 76;

   // Origin Length ('http2_altsvc_origin_http2_altsvc_origin_len')
   uint32 Http2AltsvcOriginLen = 77;

   // Origin ('http2_http2_altsvc_origin')
   string Http2AltsvcOrigin = 78;

   // Field/Value ('http2_http2_altsvc_field_value')
   string Http2AltsvcFieldValue = 79;

}
