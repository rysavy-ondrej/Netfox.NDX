syntax = "proto3";
package Ndx.Decoders.Core;
message Ppp {
   // PPP Fragment ('ppp_ppp_hdlc_fragment')
   bytes PppHdlcFragment = 1;

   // PPP Data ('ppp_ppp_hdlc_data')
   bytes PppHdlcData = 2;

   // Direction ('ppp_ppp_direction')
   uint32 PppDirection = 3;

   // Address ('ppp_ppp_address')
   uint32 PppAddress = 4;

   // Control ('ppp_ppp_control')
   uint32 PppControl = 5;

   // Protocol ('ppp_ppp_protocol')
   uint32 PppProtocol = 6;

   // Code ('ppp_ppp_code')
   uint32 PppCode = 7;

   // Identifier ('ppp_ppp_identifier')
   uint32 PppIdentifier = 8;

   // Length ('ppp_ppp_length')
   uint32 PppLength = 9;

   // Magic Number ('ppp_ppp_magic_number')
   uint32 PppMagicNumber = 10;

   // OUI ('ppp_ppp_oui')
   uint32 PppOui = 11;

   // Kind ('ppp_ppp_kind')
   uint32 PppKind = 12;

   // Data ('ppp_ppp_data')
   bytes PppData = 13;

   // FCS 16 ('ppp_ppp_fcs_16')
   uint32 PppFcs16 = 14;

   // FCS 32 ('ppp_ppp_fcs_32')
   uint32 PppFcs32 = 15;

   // FCS Status ('ppp_ppp_fcs_status')
   uint32 PppFcsStatus = 16;

   // PID ('pppmuxcp_flags_pppmuxcp_flags_pid')
   bool PppmuxcpFlagsPid = 17;

   // Length field ('pppmuxcp_flags_pppmuxcp_flags_field_length')
   bool PppmuxcpFlagsFieldLength = 18;

   // Type ('ppp_pppmuxcp_opt_type')
   uint32 PppmuxcpOptType = 19;

   // Length ('ppp_pppmuxcp_opt_length')
   uint32 PppmuxcpOptLength = 20;

   // PFF/LXT ('ppp_pppmuxcp_flags')
   uint32 PppmuxcpFlags = 21;

   // Sub-frame Length ('ppp_pppmuxcp_sub_frame_length')
   uint32 PppmuxcpSubFrameLength = 22;

   // Default Protocol ID ('ppp_pppmuxcp_def_prot_id')
   uint32 PppmuxcpDefProtId = 23;

   // Protocol ('ppp_pppmux_protocol')
   uint32 PppmuxProtocol = 24;

}
