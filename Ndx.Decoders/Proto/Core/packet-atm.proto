// This is file was generated by netdx on (2017-11-24 12:34:40 PM.
syntax = "proto3";
package Ndx.Decoders.Core;
message Atm {
    // AAL ('atm_atm_aal')
     uint32 AtmAal = 1;

    // GFC ('atm_atm_GFC')
     uint32 AtmGFC = 2;

    // VPI ('atm_atm_vpi')
     uint32 AtmVpi = 3;

    // VCI ('atm_atm_vci')
     uint32 AtmVci = 4;

    // CID ('atm_atm_cid')
     uint32 AtmCid = 5;

    // Reserved ('atm_atm_reserved')
     bytes AtmReserved = 6;

    // LE Client ('atm_atm_le_client_client')
     uint32 AtmLeClientClient = 7;

    // Tag ('atm_atm_lan_destination_tag')
     uint32 AtmLanDestinationTag = 8;

    // MAC address ('atm_atm_lan_destination_mac')
     bytes AtmLanDestinationMac = 9;

    // TLV Type ('atm_atm_le_control_tlv_type')
     uint32 AtmLeControlTlvType = 10;

    // TLV Length ('atm_atm_le_control_tlv_length')
     uint32 AtmLeControlTlvLength = 11;

    // Route descriptor ('atm_atm_lan_destination_route_desc')
     uint32 AtmLanDestinationRouteDesc = 12;

    // LAN ID ('atm_atm_lan_destination_lan_id')
     uint32 AtmLanDestinationLanId = 13;

    // Bridge number ('atm_atm_lan_destination_bridge_num')
     uint32 AtmLanDestinationBridgeNum = 14;

    // Source ATM address ('atm_atm_source_atm')
     bytes AtmSourceAtm = 15;

    // Target ATM address ('atm_atm_target_atm')
     bytes AtmTargetAtm = 16;

    // LAN type ('atm_atm_le_configure_join_frame_lan_type')
     uint32 AtmLeConfigureJoinFrameLanType = 17;

    // Maximum frame size ('atm_atm_le_configure_join_frame_max_frame_size')
     uint32 AtmLeConfigureJoinFrameMaxFrameSize = 18;

    // Number of TLVs ('atm_atm_le_configure_join_frame_num_tlvs')
     uint32 AtmLeConfigureJoinFrameNumTlvs = 19;

    // ELAN name size ('atm_atm_le_configure_join_frame_elan_name_size')
     uint32 AtmLeConfigureJoinFrameElanNameSize = 20;

    // Number of TLVs ('atm_atm_le_registration_frame_num_tlvs')
     uint32 AtmLeRegistrationFrameNumTlvs = 21;

    // Number of TLVs ('atm_atm_le_arp_frame_num_tlvs')
     uint32 AtmLeArpFrameNumTlvs = 22;

    // Number of TLVs ('atm_atm_le_verify_frame_num_tlvs')
     uint32 AtmLeVerifyFrameNumTlvs = 23;

    // ELAN name ('atm_atm_le_configure_join_frame_elan_name')
     bytes AtmLeConfigureJoinFrameElanName = 24;

    // Marker ('atm_atm_le_control_marker')
     uint32 AtmLeControlMarker = 25;

    // Protocol ('atm_atm_le_control_protocol')
     uint32 AtmLeControlProtocol = 26;

    // Version ('atm_atm_le_control_version')
     uint32 AtmLeControlVersion = 27;

    // Opcode ('atm_atm_le_control_opcode')
     uint32 AtmLeControlOpcode = 28;

    // Status ('atm_atm_le_control_status')
     uint32 AtmLeControlStatus = 29;

    // Transaction ID ('atm_atm_le_control_transaction_id')
     uint32 AtmLeControlTransactionId = 30;

    // Requester LECID ('atm_atm_le_control_requester_lecid')
     uint32 AtmLeControlRequesterLecid = 31;

    // Flags ('atm_atm_le_control_flag')
     uint32 AtmLeControlFlag = 32;

    // V2 capable ('atm_le_control_flag_atm_le_control_flag_v2_capable')
     bool AtmLeControlFlagV2Capable = 33;

    // Selective multicast ('atm_le_control_flag_atm_le_control_flag_selective_multicast')
     bool AtmLeControlFlagSelectiveMulticast = 34;

    // V2 required ('atm_le_control_flag_atm_le_control_flag_v2_required')
     bool AtmLeControlFlagV2Required = 35;

    // Proxy ('atm_le_control_flag_atm_le_control_flag_flag_proxy')
     bool AtmLeControlFlagFlagProxy = 36;

    // Exclude explorer frames ('atm_le_control_flag_atm_le_control_flag_exclude_explorer_frames')
     bool AtmLeControlFlagExcludeExplorerFrames = 37;

    // Address ('atm_le_control_flag_atm_le_control_flag_address')
     bool AtmLeControlFlagAddress = 38;

    // Topology change ('atm_le_control_flag_atm_le_control_flag_topology_change')
     bool AtmLeControlFlagTopologyChange = 39;

    // Traffic type ('atm_atm_traffic_type')
     uint32 AtmTrafficType = 40;

    // VC multiplexed traffic type ('atm_atm_traffic_vcmx')
     uint32 AtmTrafficVcmx = 41;

    // LANE traffic type ('atm_atm_traffic_lane')
     uint32 AtmTrafficLane = 42;

    // Ipsilon traffic type ('atm_atm_traffic_ipsilon')
     uint32 AtmTrafficIpsilon = 43;

    // Cells ('atm_atm_cells')
     uint32 AtmCells = 44;

    // AAL5 UU ('atm_atm_hf_atm_aal5t_uu')
     uint32 AtmHfAtmAal5tUu = 45;

    // AAL5 CPI ('atm_atm_hf_atm_aal5t_cpi')
     uint32 AtmHfAtmAal5tCpi = 46;

    // AAL5 len ('atm_atm_aal5t_len')
     uint32 AtmAal5tLen = 47;

    // AAL5 CRC ('atm_atm_aal5t_crc')
     uint32 AtmAal5tCrc = 48;

    // Payload Type ('atm_atm_payload_type')
     uint32 AtmPayloadType = 49;

    // Cell Loss Priority ('atm_atm_cell_loss_priority')
     bool AtmCellLossPriority = 50;

    // Header Error Check ('atm_atm_header_error_check')
     uint32 AtmHeaderErrorCheck = 51;

    // Channel ('atm_atm_channel')
     uint32 AtmChannel = 52;

    // CSI ('atm_atm_aa1_csi')
     uint32 AtmAa1Csi = 53;

    // Sequence Count ('atm_atm_aa1_seq_count')
     uint32 AtmAa1SeqCount = 54;

    // CRC ('atm_atm_aa1_crc')
     uint32 AtmAa1Crc = 55;

    // Parity ('atm_atm_aa1_parity')
     uint32 AtmAa1Parity = 56;

    // Payload ('atm_atm_aa1_payload')
     bytes AtmAa1Payload = 57;

    // Segment Type ('atm_atm_aal3_4_seg_type')
     uint32 AtmAal34SegType = 58;

    // Sequence Number ('atm_atm_aal3_4_seq_num')
     uint32 AtmAal34SeqNum = 59;

    // Multiplex ID ('atm_atm_aal3_4_multiplex_id')
     uint32 AtmAal34MultiplexId = 60;

    // Information ('atm_atm_aal3_4_information')
     bytes AtmAal34Information = 61;

    // Length Indicator ('atm_atm_aal3_4_length_indicator')
     uint32 AtmAal34LengthIndicator = 62;

    // CRC ('atm_atm_aal3_4_crc')
     uint32 AtmAal34Crc = 63;

    // OAM Type ('atm_atm_aal_oamcell_type')
     uint32 AtmAalOamcellType = 64;

    // Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_fm')
     uint32 AtmAalOamcellTypeFm = 65;

    // Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_pm')
     uint32 AtmAalOamcellTypePm = 66;

    // Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_ad')
     uint32 AtmAalOamcellTypeAd = 67;

    // Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_ft')
     uint32 AtmAalOamcellTypeFt = 68;

    // Function-specific information ('atm_atm_aal_oamcell_func_spec')
     bytes AtmAalOamcellFuncSpec = 69;

    // CRC-10 ('atm_atm_aal_oamcell_crc')
     uint32 AtmAalOamcellCrc = 70;

    // Padding ('atm_atm_padding')
     bytes AtmPadding = 71;

}
