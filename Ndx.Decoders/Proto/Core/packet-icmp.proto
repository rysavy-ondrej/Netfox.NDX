// This is file was generated by netdx on (2017-11-24 12:35:08 PM.
syntax = "proto3";
package Ndx.Decoders.Core;
message Icmp {
    // Type ('icmp_icmp_type')
     uint32 IcmpType = 1;

    // Code ('icmp_icmp_code')
     uint32 IcmpCode = 2;

    // Checksum ('icmp_icmp_checksum')
     uint32 IcmpChecksum = 3;

    // Checksum Status ('icmp_checksum_icmp_checksum_status')
     uint32 IcmpChecksumStatus = 4;

    // Unused ('icmp_icmp_unused')
     bytes IcmpUnused = 5;

    // Reserved ('icmp_icmp_reserved')
     bytes IcmpReserved = 6;

    // Identifier (BE) ('icmp_icmp_ident')
     uint32 IcmpIdent = 7;

    // Sequence number (BE) ('icmp_icmp_seq')
     uint32 IcmpSeq = 8;

    // Sequence number (LE) ('icmp_icmp_seq_le')
     uint32 IcmpSeqLe = 9;

    // MTU of next hop ('icmp_icmp_mtu')
     uint32 IcmpMtu = 10;

    // Number of addresses ('icmp_icmp_num_addrs')
     uint32 IcmpNumAddrs = 11;

    // Address entry size ('icmp_icmp_addr_entry_size')
     uint32 IcmpAddrEntrySize = 12;

    // Lifetime ('icmp_icmp_lifetime')
     uint32 IcmpLifetime = 13;

    // Pointer ('icmp_icmp_pointer')
     uint32 IcmpPointer = 14;

    // Router address ('icmp_icmp_router_address')
     bytes IcmpRouterAddress = 15;

    // Preference level ('icmp_icmp_pref_level')
     int32 IcmpPrefLevel = 16;

    // Originate timestamp ('icmp_icmp_originate_timestamp')
     uint32 IcmpOriginateTimestamp = 17;

    // Receive timestamp ('icmp_icmp_receive_timestamp')
     uint32 IcmpReceiveTimestamp = 18;

    // Transmit timestamp ('icmp_icmp_transmit_timestamp')
     uint32 IcmpTransmitTimestamp = 19;

    // Address Mask ('icmp_icmp_address_mask')
     bytes IcmpAddressMask = 20;

    // Gateway address ('icmp_icmp_redir_gw')
     bytes IcmpRedirGw = 21;

    // Extension Type ('icmp_icmp_mip_type')
     uint32 IcmpMipType = 22;

    // Length ('icmp_icmp_mip_length')
     uint32 IcmpMipLength = 23;

    // Prefix Length ('icmp_icmp_mip_prefixlength')
     uint32 IcmpMipPrefixlength = 24;

    // Sequence Number ('icmp_icmp_mip_seq')
     uint32 IcmpMipSeq = 25;

    // Registration Lifetime ('icmp_icmp_mip_life')
     uint32 IcmpMipLife = 26;

    // Flags ('icmp_icmp_mip_flags')
     uint32 IcmpMipFlags = 27;

    // Registration Required ('icmp_icmp_mip_r')
     bool IcmpMipR = 28;

    // Busy ('icmp_icmp_mip_b')
     bool IcmpMipB = 29;

    // Home Agent ('icmp_icmp_mip_h')
     bool IcmpMipH = 30;

    // Foreign Agent ('icmp_icmp_mip_f')
     bool IcmpMipF = 31;

    // Minimal Encapsulation ('icmp_icmp_mip_m')
     bool IcmpMipM = 32;

    // GRE ('icmp_icmp_mip_g')
     bool IcmpMipG = 33;

    // VJ Comp ('icmp_icmp_mip_v')
     bool IcmpMipV = 34;

    // Reverse tunneling ('icmp_icmp_mip_rt')
     bool IcmpMipRt = 35;

    // UDP tunneling ('icmp_icmp_mip_u')
     bool IcmpMipU = 36;

    // Revocation support ('icmp_icmp_mip_x')
     bool IcmpMipX = 37;

    // Reserved ('icmp_icmp_mip_reserved')
     uint32 IcmpMipReserved = 38;

    // Care-Of-Address ('icmp_icmp_mip_coa')
     bytes IcmpMipCoa = 39;

    // Challenge ('icmp_icmp_mip_challenge')
     bytes IcmpMipChallenge = 40;

    // Content ('icmp_icmp_mip_content')
     bytes IcmpMipContent = 41;

    // ICMP Extensions ('icmp_icmp_ext')
     int32 IcmpExt = 42;

    // Version ('icmp_ext_icmp_ext_version')
     uint32 IcmpExtVersion = 43;

    // Reserved ('icmp_ext_icmp_ext_res')
     uint32 IcmpExtRes = 44;

    // Checksum ('icmp_ext_icmp_ext_checksum')
     uint32 IcmpExtChecksum = 45;

    // Checksum Status ('icmp_ext_checksum_icmp_ext_checksum_status')
     uint32 IcmpExtChecksumStatus = 46;

    // Length ('icmp_ext_icmp_ext_length')
     uint32 IcmpExtLength = 47;

    // Class ('icmp_ext_icmp_ext_class')
     uint32 IcmpExtClass = 48;

    // C-Type ('icmp_ext_icmp_ext_ctype')
     uint32 IcmpExtCtype = 49;

    // Data ('icmp_ext_icmp_ext_data')
     bytes IcmpExtData = 50;

    // Label ('icmp_icmp_mpls_label')
     uint32 IcmpMplsLabel = 51;

    // Experimental ('icmp_icmp_mpls_exp')
     uint32 IcmpMplsExp = 52;

    // Stack bit ('icmp_icmp_mpls_s')
     bool IcmpMplsS = 53;

    // Time to live ('icmp_icmp_mpls_ttl')
     uint32 IcmpMplsTtl = 54;

    // Data ('icmp_icmp_mpls_data')
     bytes IcmpMplsData = 55;

    // Response frame ('icmp_icmp_resp_in')
     int64 IcmpRespIn = 56;

    // No response seen ('icmp_icmp_no_resp')
     int32 IcmpNoResp = 57;

    // Request frame ('icmp_icmp_resp_to')
     int64 IcmpRespTo = 58;

    // Response time ('icmp_icmp_resptime')
     double IcmpResptime = 59;

    // Timestamp from icmp data ('icmp_icmp_data_time')
     int64 IcmpDataTime = 60;

    // Timestamp from icmp data (relative) ('icmp_icmp_data_time_relative')
     float IcmpDataTimeRelative = 61;

    // Length ('icmp_icmp_length')
     uint32 IcmpLength = 62;

    // Length of original datagram ('icmp_length_icmp_length_original_datagram')
     uint32 IcmpLengthOriginalDatagram = 63;

    // Interface Role ('icmp_icmp_int_info_role')
     uint32 IcmpIntInfoRole = 64;

    // Reserved ('icmp_icmp_int_info_reserved')
     uint32 IcmpIntInfoReserved = 65;

    // ifIndex ('icmp_icmp_int_info_ifindex')
     bool IcmpIntInfoIfindex = 66;

    // IP Address ('icmp_icmp_int_info_ipaddr')
     bool IcmpIntInfoIpaddr = 67;

    // Interface Name ('icmp_icmp_int_info_name_present')
     bool IcmpIntInfoNamePresent = 68;

    // MTU ('icmp_icmp_int_info_mtu')
     bool IcmpIntInfoMtu = 69;

    // Interface Index ('icmp_icmp_int_info_index')
     uint32 IcmpIntInfoIndex = 70;

    // Address Family Identifier ('icmp_icmp_int_info_afi')
     uint32 IcmpIntInfoAfi = 71;

    // Source ('icmp_icmp_int_info_ipv4')
     bytes IcmpIntInfoIpv4 = 72;

    // Source ('icmp_icmp_int_info_ipv6')
     bytes IcmpIntInfoIpv6 = 73;

    // Source ('icmp_icmp_int_info_ipunknown')
     bytes IcmpIntInfoIpunknown = 74;

    // Name Length ('icmp_icmp_int_info_name_length')
     uint32 IcmpIntInfoNameLength = 75;

    // Name ('icmp_icmp_int_info_name')
     string IcmpIntInfoName = 76;

}
