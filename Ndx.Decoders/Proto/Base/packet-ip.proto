// This is file was generated by netdx on (2017-11-24 11:57:51 AM.
syntax = "proto3";
package Ndx.Decoders.Base;
message Ip {
    // Version ('ip_ip_version')
     uint32 IpVersion = 1;

    // Header Length ('ip_ip_hdr_len')
     uint32 IpHdrLen = 2;

    // Differentiated Services Field ('ip_ip_dsfield')
     uint32 IpDsfield = 3;

    // Differentiated Services Codepoint ('ip_dsfield_ip_dsfield_dscp')
     uint32 IpDsfieldDscp = 4;

    // Explicit Congestion Notification ('ip_dsfield_ip_dsfield_ecn')
     uint32 IpDsfieldEcn = 5;

    // Type of Service ('ip_ip_tos')
     uint32 IpTos = 6;

    // Precedence ('ip_tos_ip_tos_precedence')
     uint32 IpTosPrecedence = 7;

    // Delay ('ip_tos_ip_tos_delay')
     bool IpTosDelay = 8;

    // Throughput ('ip_tos_ip_tos_throughput')
     bool IpTosThroughput = 9;

    // Reliability ('ip_tos_ip_tos_reliability')
     bool IpTosReliability = 10;

    // Cost ('ip_tos_ip_tos_cost')
     bool IpTosCost = 11;

    // Total Length ('ip_ip_len')
     uint32 IpLen = 12;

    // Identification ('ip_ip_id')
     uint32 IpId = 13;

    // Destination ('ip_ip_dst')
     bytes IpDst = 14;

    // Destination Host ('ip_ip_dst_host')
     string IpDstHost = 15;

    // Source ('ip_ip_src')
     bytes IpSrc = 16;

    // Source Host ('ip_ip_src_host')
     string IpSrcHost = 17;

    // Source or Destination Address ('ip_ip_addr')
     bytes IpAddr = 18;

    // Flags ('ip_ip_flags')
     uint32 IpFlags = 19;

    // Security flag ('ip_flags_ip_flags_sf')
     bool IpFlagsSf = 20;

    // Reserved bit ('ip_flags_ip_flags_rb')
     bool IpFlagsRb = 21;

    // Don't fragment ('ip_flags_ip_flags_df')
     bool IpFlagsDf = 22;

    // More fragments ('ip_flags_ip_flags_mf')
     bool IpFlagsMf = 23;

    // Fragment offset ('ip_ip_frag_offset')
     uint32 IpFragOffset = 24;

    // Time to live ('ip_ip_ttl')
     uint32 IpTtl = 25;

    // Protocol ('ip_ip_proto')
     uint32 IpProto = 26;

    // Header checksum ('ip_ip_checksum')
     uint32 IpChecksum = 27;

    // Header checksum status ('ip_checksum_ip_checksum_status')
     uint32 IpChecksumStatus = 28;

}
