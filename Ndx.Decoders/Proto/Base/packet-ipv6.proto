// This is file was generated by netdx on (2017-11-24 11:57:54 AM.
syntax = "proto3";
package Ndx.Decoders.Base;
message Ipv6 {
    // Version ('ipv6_ipv6_version')
     uint32 Ipv6Version = 1;

    // Traffic Class ('ipv6_ipv6_tclass')
     uint32 Ipv6Tclass = 2;

    // Differentiated Services Codepoint ('ipv6_tclass_ipv6_tclass_dscp')
     uint32 Ipv6TclassDscp = 3;

    // Explicit Congestion Notification ('ipv6_tclass_ipv6_tclass_ecn')
     uint32 Ipv6TclassEcn = 4;

    // Flow Label ('ipv6_ipv6_flow')
     uint32 Ipv6Flow = 5;

    // Payload Length ('ipv6_ipv6_plen')
     uint32 Ipv6Plen = 6;

    // Next Header ('ipv6_ipv6_nxt')
     uint32 Ipv6Nxt = 7;

    // Hop Limit ('ipv6_ipv6_hlim')
     uint32 Ipv6Hlim = 8;

    // Source ('ipv6_ipv6_src')
     bytes Ipv6Src = 9;

    // Source Host ('ipv6_ipv6_src_host')
     string Ipv6SrcHost = 10;

    // Source SA MAC ('ipv6_ipv6_src_sa_mac')
     bytes Ipv6SrcSaMac = 11;

    // Source ISATAP IPv4 ('ipv6_ipv6_src_isatap_ipv4')
     bytes Ipv6SrcIsatapIpv4 = 12;

    // Source 6to4 Gateway IPv4 ('ipv6_ipv6_src_6to4_gw_ipv4')
     bytes Ipv6Src6To4GwIpv4 = 13;

    // Source 6to4 SLA ID ('ipv6_ipv6_src_6to4_sla_id')
     uint32 Ipv6Src6To4SlaId = 14;

    // Source Teredo Server IPv4 ('ipv6_ipv6_src_ts_ipv4')
     bytes Ipv6SrcTsIpv4 = 15;

    // Source Teredo Port ('ipv6_ipv6_src_tc_port')
     uint32 Ipv6SrcTcPort = 16;

    // Source Teredo Client IPv4 ('ipv6_ipv6_src_tc_ipv4')
     bytes Ipv6SrcTcIpv4 = 17;

    // Source Embedded IPv4 ('ipv6_ipv6_src_embed_ipv4')
     bytes Ipv6SrcEmbedIpv4 = 18;

    // Destination ('ipv6_ipv6_dst')
     bytes Ipv6Dst = 19;

    // Destination Host ('ipv6_ipv6_dst_host')
     string Ipv6DstHost = 20;

    // Destination SA MAC ('ipv6_ipv6_dst_sa_mac')
     bytes Ipv6DstSaMac = 21;

    // Destination ISATAP IPv4 ('ipv6_ipv6_dst_isatap_ipv4')
     bytes Ipv6DstIsatapIpv4 = 22;

    // Destination 6to4 Gateway IPv4 ('ipv6_ipv6_dst_6to4_gw_ipv4')
     bytes Ipv6Dst6To4GwIpv4 = 23;

    // Destination 6to4 SLA ID ('ipv6_ipv6_dst_6to4_sla_id')
     uint32 Ipv6Dst6To4SlaId = 24;

    // Destination Teredo Server IPv4 ('ipv6_ipv6_dst_ts_ipv4')
     bytes Ipv6DstTsIpv4 = 25;

    // Destination Teredo Port ('ipv6_ipv6_dst_tc_port')
     uint32 Ipv6DstTcPort = 26;

    // Destination Teredo Client IPv4 ('ipv6_ipv6_dst_tc_ipv4')
     bytes Ipv6DstTcIpv4 = 27;

    // Destination Embedded IPv4 ('ipv6_ipv6_dst_embed_ipv4')
     bytes Ipv6DstEmbedIpv4 = 28;

    // Source or Destination Address ('ipv6_ipv6_addr')
     bytes Ipv6Addr = 29;

    // Source or Destination Host ('ipv6_ipv6_host')
     string Ipv6Host = 30;

    // SA MAC ('ipv6_ipv6_sa_mac')
     bytes Ipv6SaMac = 31;

    // ISATAP IPv4 ('ipv6_ipv6_isatap_ipv4')
     bytes Ipv6IsatapIpv4 = 32;

    // 6to4 Gateway IPv4 ('ipv6_ipv6_6to4_gw_ipv4')
     bytes Ipv66To4GwIpv4 = 33;

    // 6to4 SLA ID ('ipv6_ipv6_6to4_sla_id')
     uint32 Ipv66To4SlaId = 34;

    // Teredo Server IPv4 ('ipv6_ipv6_ts_ipv4')
     bytes Ipv6TsIpv4 = 35;

    // Teredo Port ('ipv6_ipv6_tc_port')
     uint32 Ipv6TcPort = 36;

    // Teredo Client IPv4 ('ipv6_ipv6_tc_ipv4')
     bytes Ipv6TcIpv4 = 37;

    // Embedded IPv4 ('ipv6_ipv6_embed_ipv4')
     bytes Ipv6EmbedIpv4 = 38;

    // Source or Destination GeoIP Country ('ipv6_ipv6_geoip_country')
     string Ipv6GeoipCountry = 39;

    // Source or Destination GeoIP City ('ipv6_ipv6_geoip_city')
     string Ipv6GeoipCity = 40;

    // Source or Destination GeoIP Organization ('ipv6_ipv6_geoip_org')
     string Ipv6GeoipOrg = 41;

    // Source or Destination GeoIP ISP ('ipv6_ipv6_geoip_isp')
     string Ipv6GeoipIsp = 42;

    // Source or Destination GeoIP AS Number ('ipv6_ipv6_geoip_asnum')
     string Ipv6GeoipAsnum = 43;

    // Source or Destination GeoIP Latitude ('ipv6_ipv6_geoip_lat')
     double Ipv6GeoipLat = 44;

    // Source or Destination GeoIP Longitude ('ipv6_ipv6_geoip_lon')
     double Ipv6GeoipLon = 45;

    // Source GeoIP Country ('ipv6_ipv6_geoip_src_country')
     string Ipv6GeoipSrcCountry = 46;

    // Source GeoIP City ('ipv6_ipv6_geoip_src_city')
     string Ipv6GeoipSrcCity = 47;

    // Source GeoIP Organization ('ipv6_ipv6_geoip_src_org')
     string Ipv6GeoipSrcOrg = 48;

    // Source GeoIP ISP ('ipv6_ipv6_geoip_src_isp')
     string Ipv6GeoipSrcIsp = 49;

    // Source GeoIP AS Number ('ipv6_ipv6_geoip_src_asnum')
     string Ipv6GeoipSrcAsnum = 50;

    // Source GeoIP Latitude ('ipv6_ipv6_geoip_src_lat')
     double Ipv6GeoipSrcLat = 51;

    // Source GeoIP Longitude ('ipv6_ipv6_geoip_src_lon')
     double Ipv6GeoipSrcLon = 52;

    // Destination GeoIP Country ('ipv6_ipv6_geoip_dst_country')
     string Ipv6GeoipDstCountry = 53;

    // Destination GeoIP City ('ipv6_ipv6_geoip_dst_city')
     string Ipv6GeoipDstCity = 54;

    // Destination GeoIP Organization ('ipv6_ipv6_geoip_dst_org')
     string Ipv6GeoipDstOrg = 55;

    // Destination GeoIP ISP ('ipv6_ipv6_geoip_dst_isp')
     string Ipv6GeoipDstIsp = 56;

    // Destination GeoIP AS Number ('ipv6_ipv6_geoip_dst_asnum')
     string Ipv6GeoipDstAsnum = 57;

    // Destination GeoIP Latitude ('ipv6_ipv6_geoip_dst_lat')
     double Ipv6GeoipDstLat = 58;

    // Destination GeoIP Longitude ('ipv6_ipv6_geoip_dst_lon')
     double Ipv6GeoipDstLon = 59;

    // IPv6 Option ('ipv6_ipv6_opt')
     int32 Ipv6Opt = 60;

    // Type ('ipv6_opt_ipv6_opt_type')
     uint32 Ipv6OptType = 61;

    // Action ('ipv6_opt_type_ipv6_opt_type_action')
     uint32 Ipv6OptTypeAction = 62;

    // May Change ('ipv6_opt_type_ipv6_opt_type_change')
     bool Ipv6OptTypeChange = 63;

    // Low-Order Bits ('ipv6_opt_type_ipv6_opt_type_rest')
     uint32 Ipv6OptTypeRest = 64;

    // Length ('ipv6_opt_ipv6_opt_length')
     uint32 Ipv6OptLength = 65;

    // Pad1 ('ipv6_opt_ipv6_opt_pad1')
     int32 Ipv6OptPad1 = 66;

    // PadN ('ipv6_opt_ipv6_opt_padn')
     bytes Ipv6OptPadn = 67;

    // Router Alert ('ipv6_opt_ipv6_opt_router_alert')
     uint32 Ipv6OptRouterAlert = 68;

    // Tunnel Encapsulation Limit ('ipv6_opt_ipv6_opt_tel')
     uint32 Ipv6OptTel = 69;

    // Payload Length ('ipv6_opt_ipv6_opt_jumbo')
     uint32 Ipv6OptJumbo = 70;

    // CALIPSO Domain of Interpretation ('ipv6_ipv6_opt_calipso_doi')
     uint32 Ipv6OptCalipsoDoi = 71;

    // Compartment Length ('ipv6_ipv6_opt_calipso_cmpt_length')
     uint32 Ipv6OptCalipsoCmptLength = 72;

    // Sensitivity Level ('ipv6_ipv6_opt_calipso_sens_level')
     uint32 Ipv6OptCalipsoSensLevel = 73;

    // Checksum ('ipv6_ipv6_opt_calipso_checksum')
     uint32 Ipv6OptCalipsoChecksum = 74;

    // Compartment Bitmap ('ipv6_ipv6_opt_calipso_cmpt_bitmap')
     bytes Ipv6OptCalipsoCmptBitmap = 75;

    // H-bit ('ipv6_ipv6_opt_smf_dpd_hash_bit')
     bool Ipv6OptSmfDpdHashBit = 76;

    // TaggerID Type ('ipv6_ipv6_opt_smf_dpd_tid_type')
     uint32 Ipv6OptSmfDpdTidType = 77;

    // TaggerID Length ('ipv6_ipv6_opt_smf_dpd_tid_len')
     uint32 Ipv6OptSmfDpdTidLen = 78;

    // TaggerID ('ipv6_ipv6_opt_smf_dpd_tagger_id')
     bytes Ipv6OptSmfDpdTaggerId = 79;

    // Identifier ('ipv6_ipv6_opt_smf_dpd_ident')
     bytes Ipv6OptSmfDpdIdent = 80;

    // Hash Assist Value ('ipv6_ipv6_opt_smf_dpd_hav')
     bytes Ipv6OptSmfDpdHav = 81;

    // Scale DTLR ('ipv6_ipv6_opt_pdm_scale_dtlr')
     uint32 Ipv6OptPdmScaleDtlr = 82;

    // Scale DTLS ('ipv6_ipv6_opt_pdm_scale_dtls')
     uint32 Ipv6OptPdmScaleDtls = 83;

    // PSN This Packet ('ipv6_ipv6_opt_pdm_psn_this_pkt')
     uint32 Ipv6OptPdmPsnThisPkt = 84;

    // PSN Last Received ('ipv6_ipv6_opt_pdm_psn_last_recv')
     uint32 Ipv6OptPdmPsnLastRecv = 85;

    // Delta Time Last Received ('ipv6_ipv6_opt_pdm_delta_last_recv')
     uint32 Ipv6OptPdmDeltaLastRecv = 86;

    // Delta Time Last Sent ('ipv6_ipv6_opt_pdm_delta_last_sent')
     uint32 Ipv6OptPdmDeltaLastSent = 87;

    // Function ('ipv6_opt_ipv6_opt_qs_func')
     uint32 Ipv6OptQsFunc = 88;

    // Rate ('ipv6_opt_ipv6_opt_qs_rate')
     uint32 Ipv6OptQsRate = 89;

    // QS TTL ('ipv6_opt_ipv6_opt_qs_ttl')
     uint32 Ipv6OptQsTtl = 90;

    // TTL Diff ('ipv6_opt_ipv6_opt_qs_ttl_diff')
     uint32 Ipv6OptQsTtlDiff = 91;

    // Not Used ('ipv6_opt_ipv6_opt_qs_unused')
     uint32 Ipv6OptQsUnused = 92;

    // QS Nonce ('ipv6_opt_ipv6_opt_qs_nonce')
     uint32 Ipv6OptQsNonce = 93;

    // Reserved ('ipv6_opt_ipv6_opt_qs_reserved')
     uint32 Ipv6OptQsReserved = 94;

    // MIPv6 Home Address ('ipv6_ipv6_opt_mipv6_home_address')
     bytes Ipv6OptMipv6HomeAddress = 95;

    // Flag ('ipv6_ipv6_opt_rpl_flag')
     uint32 Ipv6OptRplFlag = 96;

    // Down ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_o')
     bool Ipv6OptRplFlagO = 97;

    // Rank Error ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_r')
     bool Ipv6OptRplFlagR = 98;

    // Forwarding Error ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_f')
     bool Ipv6OptRplFlagF = 99;

    // Reserved ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_rsv')
     uint32 Ipv6OptRplFlagRsv = 100;

    // RPLInstanceID ('ipv6_ipv6_opt_rpl_instance_id')
     uint32 Ipv6OptRplInstanceId = 101;

    // Sender Rank ('ipv6_ipv6_opt_rpl_sender_rank')
     uint32 Ipv6OptRplSenderRank = 102;

    // ILNP Nonce ('ipv6_opt_ipv6_opt_ilnp_nonce')
     bytes Ipv6OptIlnpNonce = 103;

    // LineIDLen ('ipv6_ipv6_opt_lio_length')
     uint32 Ipv6OptLioLength = 104;

    // Line ID ('ipv6_ipv6_opt_lio_line_id')
     string Ipv6OptLioLineId = 105;

    // Flag ('ipv6_ipv6_opt_mpl_flag')
     uint32 Ipv6OptMplFlag = 106;

    // Seed ID Length ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_s')
     uint32 Ipv6OptMplFlagS = 107;

    // Largest Sequence ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_m')
     bool Ipv6OptMplFlagM = 108;

    // Version ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_v')
     bool Ipv6OptMplFlagV = 109;

    // Reserved ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_rsv')
     uint32 Ipv6OptMplFlagRsv = 110;

    // Sequence ('ipv6_ipv6_opt_mpl_sequence')
     uint32 Ipv6OptMplSequence = 111;

    // Seed ID ('ipv6_ipv6_opt_mpl_seed_id')
     bytes Ipv6OptMplSeedId = 112;

    // Flags ('ipv6_ipv6_opt_dff_flags')
     uint32 Ipv6OptDffFlags = 113;

    // Version (VER) ('ipv6_ipv6_opt_dff_flag_ver')
     uint32 Ipv6OptDffFlagVer = 114;

    // Duplicate (DUP) ('ipv6_ipv6_opt_dff_flag_dup')
     bool Ipv6OptDffFlagDup = 115;

    // Return (RET) ('ipv6_ipv6_opt_dff_flag_ret')
     bool Ipv6OptDffFlagRet = 116;

    // Reserved ('ipv6_ipv6_opt_dff_flag_rsv')
     uint32 Ipv6OptDffFlagRsv = 117;

    // Sequence Number ('ipv6_ipv6_opt_dff_sequence_number')
     uint32 Ipv6OptDffSequenceNumber = 118;

    // Experimental Option ('ipv6_opt_ipv6_opt_experimental')
     bytes Ipv6OptExperimental = 119;

    // Unknown Data ('ipv6_ipv6_opt_unknown_data')
     bytes Ipv6OptUnknownData = 120;

    // Unknown Option Payload ('ipv6_opt_ipv6_opt_unknown')
     bytes Ipv6OptUnknown = 121;

    // IPv6 Fragment ('ipv6_ipv6_fragment')
     int64 Ipv6Fragment = 122;

    // Fragment overlap ('ipv6_fragment_ipv6_fragment_overlap')
     bool Ipv6FragmentOverlap = 123;

    // Conflicting data in fragment overlap ('ipv6_fragment_overlap_ipv6_fragment_overlap_conflict')
     bool Ipv6FragmentOverlapConflict = 124;

    // Multiple tail fragments found ('ipv6_fragment_ipv6_fragment_multipletails')
     bool Ipv6FragmentMultipletails = 125;

    // Fragment too long ('ipv6_fragment_ipv6_fragment_toolongfragment')
     bool Ipv6FragmentToolongfragment = 126;

    // Defragmentation error ('ipv6_fragment_ipv6_fragment_error')
     int64 Ipv6FragmentError = 127;

    // Fragment count ('ipv6_fragment_ipv6_fragment_count')
     uint32 Ipv6FragmentCount = 128;

    // IPv6 Fragments ('ipv6_ipv6_fragments')
     int32 Ipv6Fragments = 129;

    // Reassembled IPv6 in frame ('ipv6_ipv6_reassembled_in')
     int64 Ipv6ReassembledIn = 130;

    // Reassembled IPv6 length ('ipv6_ipv6_reassembled_length')
     uint32 Ipv6ReassembledLength = 131;

    // Reassembled IPv6 data ('ipv6_ipv6_reassembled_data')
     bytes Ipv6ReassembledData = 132;

    // Next Header ('ipv6_ipv6_hopopts_nxt')
     uint32 Ipv6HopoptsNxt = 133;

    // Length ('ipv6_ipv6_hopopts_len')
     uint32 Ipv6HopoptsLen = 134;

    // Length ('ipv6_ipv6_hopopts_len_oct')
     uint32 Ipv6HopoptsLenOct = 135;

    // Next Header ('ipv6_ipv6_dstopts_nxt')
     uint32 Ipv6DstoptsNxt = 136;

    // Length ('ipv6_ipv6_dstopts_len')
     uint32 Ipv6DstoptsLen = 137;

    // Length ('ipv6_ipv6_dstopts_len_oct')
     uint32 Ipv6DstoptsLenOct = 138;

    // Next Header ('ipv6_ipv6_routing_nxt')
     uint32 Ipv6RoutingNxt = 139;

    // Length ('ipv6_ipv6_routing_len')
     uint32 Ipv6RoutingLen = 140;

    // Length ('ipv6_ipv6_routing_len_oct')
     uint32 Ipv6RoutingLenOct = 141;

    // Type ('ipv6_ipv6_routing_type')
     uint32 Ipv6RoutingType = 142;

    // Segments Left ('ipv6_ipv6_routing_segleft')
     uint32 Ipv6RoutingSegleft = 143;

    // Type-Specific Data ('ipv6_ipv6_routing_unknown_data')
     bytes Ipv6RoutingUnknownData = 144;

    // Reserved ('ipv6_ipv6_routing_src_reserved')
     bytes Ipv6RoutingSrcReserved = 145;

    // Address ('ipv6_ipv6_routing_src_addr')
     bytes Ipv6RoutingSrcAddr = 146;

    // Reserved ('ipv6_ipv6_routing_mipv6_reserved')
     bytes Ipv6RoutingMipv6Reserved = 147;

    // Home Address ('ipv6_ipv6_routing_mipv6_home_address')
     bytes Ipv6RoutingMipv6HomeAddress = 148;

    // Compressed Internal Octets (CmprI) ('ipv6_ipv6_routing_rpl_cmprI')
     uint32 Ipv6RoutingRplCmpri = 149;

    // Compressed Final Octets (CmprE) ('ipv6_ipv6_routing_rpl_cmprE')
     uint32 Ipv6RoutingRplCmpre = 150;

    // Padding Bytes ('ipv6_ipv6_routing_rpl_pad')
     uint32 Ipv6RoutingRplPad = 151;

    // Reserved ('ipv6_ipv6_routing_rpl_reserved')
     uint32 Ipv6RoutingRplReserved = 152;

    // Total Address Count ('ipv6_ipv6_routing_rpl_addr_count')
     int32 Ipv6RoutingRplAddrCount = 153;

    // Address ('ipv6_ipv6_routing_rpl_address')
     bytes Ipv6RoutingRplAddress = 154;

    // Full Address ('ipv6_ipv6_routing_rpl_full_address')
     bytes Ipv6RoutingRplFullAddress = 155;

    // First segment ('ipv6_ipv6_routing_srh_first_segment')
     uint32 Ipv6RoutingSrhFirstSegment = 156;

    // Flags ('ipv6_ipv6_routing_srh_flags')
     uint32 Ipv6RoutingSrhFlags = 157;

    // Unused ('ipv6_ipv6_routing_srh_flag_unused1')
     uint32 Ipv6RoutingSrhFlagUnused1 = 158;

    // Protected ('ipv6_ipv6_routing_srh_flag_p')
     bool Ipv6RoutingSrhFlagP = 159;

    // OAM ('ipv6_ipv6_routing_srh_flag_o')
     bool Ipv6RoutingSrhFlagO = 160;

    // Alert ('ipv6_ipv6_routing_srh_flag_a')
     bool Ipv6RoutingSrhFlagA = 161;

    // HMAC ('ipv6_ipv6_routing_srh_flag_h')
     bool Ipv6RoutingSrhFlagH = 162;

    // Unused ('ipv6_ipv6_routing_srh_flag_unused2')
     uint32 Ipv6RoutingSrhFlagUnused2 = 163;

    // Reserved ('ipv6_ipv6_routing_srh_reserved')
     bytes Ipv6RoutingSrhReserved = 164;

    // Address ('ipv6_ipv6_routing_srh_addr')
     bytes Ipv6RoutingSrhAddr = 165;

    // Next header ('ipv6_ipv6_fraghdr_nxt')
     uint32 Ipv6FraghdrNxt = 166;

    // Reserved octet ('ipv6_ipv6_fraghdr_reserved_octet')
     uint32 Ipv6FraghdrReservedOctet = 167;

    // Offset ('ipv6_ipv6_fraghdr_offset')
     uint32 Ipv6FraghdrOffset = 168;

    // Reserved bits ('ipv6_ipv6_fraghdr_reserved_bits')
     uint32 Ipv6FraghdrReservedBits = 169;

    // More Fragments ('ipv6_ipv6_fraghdr_more')
     bool Ipv6FraghdrMore = 170;

    // Identification ('ipv6_ipv6_fraghdr_ident')
     uint32 Ipv6FraghdrIdent = 171;

}
