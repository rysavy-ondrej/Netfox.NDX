// This is file was generated by netdx on (2017-11-24 12:34:40 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Core
{
  public sealed partial class Atm
  {
    public static Atm DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Atm DecodeJson(JToken token)
    {
      var obj = new Atm();
      {
        var val = token["atm_atm_aal"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_GFC"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmGFC = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_vpi"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmVpi = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_vci"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmVci = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_cid"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmCid = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_reserved"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmReserved = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_le_client_client"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeClientClient = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_lan_destination_tag"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLanDestinationTag = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_lan_destination_mac"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLanDestinationMac = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); }
      }
      {
        var val = token["atm_atm_le_control_tlv_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlTlvType = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_tlv_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlTlvLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_lan_destination_route_desc"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLanDestinationRouteDesc = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_lan_destination_lan_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLanDestinationLanId = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_lan_destination_bridge_num"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLanDestinationBridgeNum = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_source_atm"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmSourceAtm = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_target_atm"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmTargetAtm = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_le_configure_join_frame_lan_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeConfigureJoinFrameLanType = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_configure_join_frame_max_frame_size"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeConfigureJoinFrameMaxFrameSize = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_configure_join_frame_num_tlvs"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeConfigureJoinFrameNumTlvs = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_le_configure_join_frame_elan_name_size"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeConfigureJoinFrameElanNameSize = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_le_registration_frame_num_tlvs"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeRegistrationFrameNumTlvs = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_le_arp_frame_num_tlvs"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeArpFrameNumTlvs = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_le_verify_frame_num_tlvs"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeVerifyFrameNumTlvs = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_le_configure_join_frame_elan_name"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeConfigureJoinFrameElanName = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_le_control_marker"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlMarker = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_protocol"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlProtocol = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_version"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlVersion = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_opcode"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlOpcode = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_status"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlStatus = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_transaction_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlTransactionId = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_requester_lecid"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlRequesterLecid = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_le_control_flag"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlag = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_v2_capable"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagV2Capable = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_selective_multicast"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagSelectiveMulticast = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_v2_required"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagV2Required = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_flag_proxy"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagFlagProxy = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_exclude_explorer_frames"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagExcludeExplorerFrames = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_address"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagAddress = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_le_control_flag_atm_le_control_flag_topology_change"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmLeControlFlagTopologyChange = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_atm_traffic_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmTrafficType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_traffic_vcmx"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmTrafficVcmx = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_traffic_lane"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmTrafficLane = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_traffic_ipsilon"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmTrafficIpsilon = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_cells"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmCells = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_hf_atm_aal5t_uu"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmHfAtmAal5TUu = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_hf_atm_aal5t_cpi"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmHfAtmAal5TCpi = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_aal5t_len"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal5TLen = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal5t_crc"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal5TCrc = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_payload_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmPayloadType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_cell_loss_priority"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmCellLossPriority = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["atm_atm_header_error_check"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmHeaderErrorCheck = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_channel"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmChannel = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aa1_csi"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAa1Csi = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aa1_seq_count"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAa1SeqCount = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aa1_crc"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAa1Crc = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aa1_parity"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAa1Parity = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aa1_payload"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAa1Payload = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_aal3_4_seg_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34SegType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal3_4_seq_num"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34SeqNum = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal3_4_multiplex_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34MultiplexId = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal3_4_information"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34Information = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_aal3_4_length_indicator"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34LengthIndicator = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal3_4_crc"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAal34Crc = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal_oamcell_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_aal_oamcell_type_atm_aal_oamcell_type_fm"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellTypeFm = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_aal_oamcell_type_atm_aal_oamcell_type_pm"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellTypePm = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_aal_oamcell_type_atm_aal_oamcell_type_ad"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellTypeAd = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_aal_oamcell_type_atm_aal_oamcell_type_ft"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellTypeFt = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["atm_atm_aal_oamcell_func_spec"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellFuncSpec = StringToBytes(propValue); }
      }
      {
        var val = token["atm_atm_aal_oamcell_crc"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmAalOamcellCrc = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["atm_atm_padding"];
        if (val != null) { var propValue = val.Value<string>(); obj.AtmPadding = StringToBytes(propValue); }
      }
      return obj;
    }
    public static Atm DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Atm();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Atm obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "atm_atm_aal": obj.AtmAal = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_GFC": obj.AtmGFC = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_vpi": obj.AtmVpi = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_vci": obj.AtmVci = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_cid": obj.AtmCid = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_reserved": obj.AtmReserved = StringToBytes(propValue); break;
      case "atm_atm_le_client_client": obj.AtmLeClientClient = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_lan_destination_tag": obj.AtmLanDestinationTag = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_lan_destination_mac": obj.AtmLanDestinationMac = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); break;
      case "atm_atm_le_control_tlv_type": obj.AtmLeControlTlvType = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_tlv_length": obj.AtmLeControlTlvLength = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_lan_destination_route_desc": obj.AtmLanDestinationRouteDesc = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_lan_destination_lan_id": obj.AtmLanDestinationLanId = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_lan_destination_bridge_num": obj.AtmLanDestinationBridgeNum = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_source_atm": obj.AtmSourceAtm = StringToBytes(propValue); break;
      case "atm_atm_target_atm": obj.AtmTargetAtm = StringToBytes(propValue); break;
      case "atm_atm_le_configure_join_frame_lan_type": obj.AtmLeConfigureJoinFrameLanType = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_configure_join_frame_max_frame_size": obj.AtmLeConfigureJoinFrameMaxFrameSize = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_configure_join_frame_num_tlvs": obj.AtmLeConfigureJoinFrameNumTlvs = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_le_configure_join_frame_elan_name_size": obj.AtmLeConfigureJoinFrameElanNameSize = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_le_registration_frame_num_tlvs": obj.AtmLeRegistrationFrameNumTlvs = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_le_arp_frame_num_tlvs": obj.AtmLeArpFrameNumTlvs = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_le_verify_frame_num_tlvs": obj.AtmLeVerifyFrameNumTlvs = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_le_configure_join_frame_elan_name": obj.AtmLeConfigureJoinFrameElanName = StringToBytes(propValue); break;
      case "atm_atm_le_control_marker": obj.AtmLeControlMarker = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_protocol": obj.AtmLeControlProtocol = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_version": obj.AtmLeControlVersion = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_opcode": obj.AtmLeControlOpcode = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_status": obj.AtmLeControlStatus = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_transaction_id": obj.AtmLeControlTransactionId = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_requester_lecid": obj.AtmLeControlRequesterLecid = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_le_control_flag": obj.AtmLeControlFlag = Convert.ToUInt32(propValue, 16); break;
      case "atm_le_control_flag_atm_le_control_flag_v2_capable": obj.AtmLeControlFlagV2Capable = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_selective_multicast": obj.AtmLeControlFlagSelectiveMulticast = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_v2_required": obj.AtmLeControlFlagV2Required = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_flag_proxy": obj.AtmLeControlFlagFlagProxy = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_exclude_explorer_frames": obj.AtmLeControlFlagExcludeExplorerFrames = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_address": obj.AtmLeControlFlagAddress = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_le_control_flag_atm_le_control_flag_topology_change": obj.AtmLeControlFlagTopologyChange = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_atm_traffic_type": obj.AtmTrafficType = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_traffic_vcmx": obj.AtmTrafficVcmx = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_traffic_lane": obj.AtmTrafficLane = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_traffic_ipsilon": obj.AtmTrafficIpsilon = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_cells": obj.AtmCells = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_hf_atm_aal5t_uu": obj.AtmHfAtmAal5TUu = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_hf_atm_aal5t_cpi": obj.AtmHfAtmAal5TCpi = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_aal5t_len": obj.AtmAal5TLen = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal5t_crc": obj.AtmAal5TCrc = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_payload_type": obj.AtmPayloadType = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_cell_loss_priority": obj.AtmCellLossPriority = Convert.ToInt32(propValue, 10) != 0; break;
      case "atm_atm_header_error_check": obj.AtmHeaderErrorCheck = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_channel": obj.AtmChannel = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aa1_csi": obj.AtmAa1Csi = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aa1_seq_count": obj.AtmAa1SeqCount = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aa1_crc": obj.AtmAa1Crc = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aa1_parity": obj.AtmAa1Parity = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aa1_payload": obj.AtmAa1Payload = StringToBytes(propValue); break;
      case "atm_atm_aal3_4_seg_type": obj.AtmAal34SegType = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal3_4_seq_num": obj.AtmAal34SeqNum = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal3_4_multiplex_id": obj.AtmAal34MultiplexId = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal3_4_information": obj.AtmAal34Information = StringToBytes(propValue); break;
      case "atm_atm_aal3_4_length_indicator": obj.AtmAal34LengthIndicator = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal3_4_crc": obj.AtmAal34Crc = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal_oamcell_type": obj.AtmAalOamcellType = Convert.ToUInt32(propValue, 10); break;
      case "atm_aal_oamcell_type_atm_aal_oamcell_type_fm": obj.AtmAalOamcellTypeFm = Convert.ToUInt32(propValue, 10); break;
      case "atm_aal_oamcell_type_atm_aal_oamcell_type_pm": obj.AtmAalOamcellTypePm = Convert.ToUInt32(propValue, 10); break;
      case "atm_aal_oamcell_type_atm_aal_oamcell_type_ad": obj.AtmAalOamcellTypeAd = Convert.ToUInt32(propValue, 10); break;
      case "atm_aal_oamcell_type_atm_aal_oamcell_type_ft": obj.AtmAalOamcellTypeFt = Convert.ToUInt32(propValue, 10); break;
      case "atm_atm_aal_oamcell_func_spec": obj.AtmAalOamcellFuncSpec = StringToBytes(propValue); break;
      case "atm_atm_aal_oamcell_crc": obj.AtmAalOamcellCrc = Convert.ToUInt32(propValue, 16); break;
      case "atm_atm_padding": obj.AtmPadding = StringToBytes(propValue); break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
