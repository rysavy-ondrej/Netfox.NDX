// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-atm.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-atm.proto</summary>
  public static partial class PacketAtmReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-atm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketAtmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtYXRtLnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSLoDwoDQXRt",
            "Eg4KBkF0bUFhbBgBIAEoDRIOCgZBdG1HRkMYAiABKA0SDgoGQXRtVnBpGAMg",
            "ASgNEg4KBkF0bVZjaRgEIAEoDRIOCgZBdG1DaWQYBSABKA0SEwoLQXRtUmVz",
            "ZXJ2ZWQYBiABKAwSGQoRQXRtTGVDbGllbnRDbGllbnQYByABKA0SHAoUQXRt",
            "TGFuRGVzdGluYXRpb25UYWcYCCABKA0SHAoUQXRtTGFuRGVzdGluYXRpb25N",
            "YWMYCSABKAwSGwoTQXRtTGVDb250cm9sVGx2VHlwZRgKIAEoDRIdChVBdG1M",
            "ZUNvbnRyb2xUbHZMZW5ndGgYCyABKA0SIgoaQXRtTGFuRGVzdGluYXRpb25S",
            "b3V0ZURlc2MYDCABKA0SHgoWQXRtTGFuRGVzdGluYXRpb25MYW5JZBgNIAEo",
            "DRIiChpBdG1MYW5EZXN0aW5hdGlvbkJyaWRnZU51bRgOIAEoDRIUCgxBdG1T",
            "b3VyY2VBdG0YDyABKAwSFAoMQXRtVGFyZ2V0QXRtGBAgASgMEiYKHkF0bUxl",
            "Q29uZmlndXJlSm9pbkZyYW1lTGFuVHlwZRgRIAEoDRIrCiNBdG1MZUNvbmZp",
            "Z3VyZUpvaW5GcmFtZU1heEZyYW1lU2l6ZRgSIAEoDRImCh5BdG1MZUNvbmZp",
            "Z3VyZUpvaW5GcmFtZU51bVRsdnMYEyABKA0SKwojQXRtTGVDb25maWd1cmVK",
            "b2luRnJhbWVFbGFuTmFtZVNpemUYFCABKA0SJQodQXRtTGVSZWdpc3RyYXRp",
            "b25GcmFtZU51bVRsdnMYFSABKA0SHAoUQXRtTGVBcnBGcmFtZU51bVRsdnMY",
            "FiABKA0SHwoXQXRtTGVWZXJpZnlGcmFtZU51bVRsdnMYFyABKA0SJwofQXRt",
            "TGVDb25maWd1cmVKb2luRnJhbWVFbGFuTmFtZRgYIAEoDBIaChJBdG1MZUNv",
            "bnRyb2xNYXJrZXIYGSABKA0SHAoUQXRtTGVDb250cm9sUHJvdG9jb2wYGiAB",
            "KA0SGwoTQXRtTGVDb250cm9sVmVyc2lvbhgbIAEoDRIaChJBdG1MZUNvbnRy",
            "b2xPcGNvZGUYHCABKA0SGgoSQXRtTGVDb250cm9sU3RhdHVzGB0gASgNEiEK",
            "GUF0bUxlQ29udHJvbFRyYW5zYWN0aW9uSWQYHiABKA0SIgoaQXRtTGVDb250",
            "cm9sUmVxdWVzdGVyTGVjaWQYHyABKA0SGAoQQXRtTGVDb250cm9sRmxhZxgg",
            "IAEoDRIhChlBdG1MZUNvbnRyb2xGbGFnVjJDYXBhYmxlGCEgASgIEioKIkF0",
            "bUxlQ29udHJvbEZsYWdTZWxlY3RpdmVNdWx0aWNhc3QYIiABKAgSIgoaQXRt",
            "TGVDb250cm9sRmxhZ1YyUmVxdWlyZWQYIyABKAgSIQoZQXRtTGVDb250cm9s",
            "RmxhZ0ZsYWdQcm94eRgkIAEoCBItCiVBdG1MZUNvbnRyb2xGbGFnRXhjbHVk",
            "ZUV4cGxvcmVyRnJhbWVzGCUgASgIEh8KF0F0bUxlQ29udHJvbEZsYWdBZGRy",
            "ZXNzGCYgASgIEiYKHkF0bUxlQ29udHJvbEZsYWdUb3BvbG9neUNoYW5nZRgn",
            "IAEoCBIWCg5BdG1UcmFmZmljVHlwZRgoIAEoDRIWCg5BdG1UcmFmZmljVmNt",
            "eBgpIAEoDRIWCg5BdG1UcmFmZmljTGFuZRgqIAEoDRIZChFBdG1UcmFmZmlj",
            "SXBzaWxvbhgrIAEoDRIQCghBdG1DZWxscxgsIAEoDRIXCg9BdG1IZkF0bUFh",
            "bDV0VXUYLSABKA0SGAoQQXRtSGZBdG1BYWw1dENwaRguIAEoDRITCgtBdG1B",
            "YWw1dExlbhgvIAEoDRITCgtBdG1BYWw1dENyYxgwIAEoDRIWCg5BdG1QYXls",
            "b2FkVHlwZRgxIAEoDRIbChNBdG1DZWxsTG9zc1ByaW9yaXR5GDIgASgIEhsK",
            "E0F0bUhlYWRlckVycm9yQ2hlY2sYMyABKA0SEgoKQXRtQ2hhbm5lbBg0IAEo",
            "DRIRCglBdG1BYTFDc2kYNSABKA0SFgoOQXRtQWExU2VxQ291bnQYNiABKA0S",
            "EQoJQXRtQWExQ3JjGDcgASgNEhQKDEF0bUFhMVBhcml0eRg4IAEoDRIVCg1B",
            "dG1BYTFQYXlsb2FkGDkgASgMEhcKD0F0bUFhbDM0U2VnVHlwZRg6IAEoDRIW",
            "Cg5BdG1BYWwzNFNlcU51bRg7IAEoDRIbChNBdG1BYWwzNE11bHRpcGxleElk",
            "GDwgASgNEhsKE0F0bUFhbDM0SW5mb3JtYXRpb24YPSABKAwSHwoXQXRtQWFs",
            "MzRMZW5ndGhJbmRpY2F0b3IYPiABKA0SEwoLQXRtQWFsMzRDcmMYPyABKA0S",
            "GQoRQXRtQWFsT2FtY2VsbFR5cGUYQCABKA0SGwoTQXRtQWFsT2FtY2VsbFR5",
            "cGVGbRhBIAEoDRIbChNBdG1BYWxPYW1jZWxsVHlwZVBtGEIgASgNEhsKE0F0",
            "bUFhbE9hbWNlbGxUeXBlQWQYQyABKA0SGwoTQXRtQWFsT2FtY2VsbFR5cGVG",
            "dBhEIAEoDRIdChVBdG1BYWxPYW1jZWxsRnVuY1NwZWMYRSABKAwSGAoQQXRt",
            "QWFsT2FtY2VsbENyYxhGIAEoDRISCgpBdG1QYWRkaW5nGEcgASgMYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Atm), global::Ndx.Decoders.Core.Atm.Parser, new[]{ "AtmAal", "AtmGFC", "AtmVpi", "AtmVci", "AtmCid", "AtmReserved", "AtmLeClientClient", "AtmLanDestinationTag", "AtmLanDestinationMac", "AtmLeControlTlvType", "AtmLeControlTlvLength", "AtmLanDestinationRouteDesc", "AtmLanDestinationLanId", "AtmLanDestinationBridgeNum", "AtmSourceAtm", "AtmTargetAtm", "AtmLeConfigureJoinFrameLanType", "AtmLeConfigureJoinFrameMaxFrameSize", "AtmLeConfigureJoinFrameNumTlvs", "AtmLeConfigureJoinFrameElanNameSize", "AtmLeRegistrationFrameNumTlvs", "AtmLeArpFrameNumTlvs", "AtmLeVerifyFrameNumTlvs", "AtmLeConfigureJoinFrameElanName", "AtmLeControlMarker", "AtmLeControlProtocol", "AtmLeControlVersion", "AtmLeControlOpcode", "AtmLeControlStatus", "AtmLeControlTransactionId", "AtmLeControlRequesterLecid", "AtmLeControlFlag", "AtmLeControlFlagV2Capable", "AtmLeControlFlagSelectiveMulticast", "AtmLeControlFlagV2Required", "AtmLeControlFlagFlagProxy", "AtmLeControlFlagExcludeExplorerFrames", "AtmLeControlFlagAddress", "AtmLeControlFlagTopologyChange", "AtmTrafficType", "AtmTrafficVcmx", "AtmTrafficLane", "AtmTrafficIpsilon", "AtmCells", "AtmHfAtmAal5TUu", "AtmHfAtmAal5TCpi", "AtmAal5TLen", "AtmAal5TCrc", "AtmPayloadType", "AtmCellLossPriority", "AtmHeaderErrorCheck", "AtmChannel", "AtmAa1Csi", "AtmAa1SeqCount", "AtmAa1Crc", "AtmAa1Parity", "AtmAa1Payload", "AtmAal34SegType", "AtmAal34SeqNum", "AtmAal34MultiplexId", "AtmAal34Information", "AtmAal34LengthIndicator", "AtmAal34Crc", "AtmAalOamcellType", "AtmAalOamcellTypeFm", "AtmAalOamcellTypePm", "AtmAalOamcellTypeAd", "AtmAalOamcellTypeFt", "AtmAalOamcellFuncSpec", "AtmAalOamcellCrc", "AtmPadding" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Atm : pb::IMessage<Atm> {
    private static readonly pb::MessageParser<Atm> _parser = new pb::MessageParser<Atm>(() => new Atm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Atm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketAtmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Atm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Atm(Atm other) : this() {
      atmAal_ = other.atmAal_;
      atmGFC_ = other.atmGFC_;
      atmVpi_ = other.atmVpi_;
      atmVci_ = other.atmVci_;
      atmCid_ = other.atmCid_;
      atmReserved_ = other.atmReserved_;
      atmLeClientClient_ = other.atmLeClientClient_;
      atmLanDestinationTag_ = other.atmLanDestinationTag_;
      atmLanDestinationMac_ = other.atmLanDestinationMac_;
      atmLeControlTlvType_ = other.atmLeControlTlvType_;
      atmLeControlTlvLength_ = other.atmLeControlTlvLength_;
      atmLanDestinationRouteDesc_ = other.atmLanDestinationRouteDesc_;
      atmLanDestinationLanId_ = other.atmLanDestinationLanId_;
      atmLanDestinationBridgeNum_ = other.atmLanDestinationBridgeNum_;
      atmSourceAtm_ = other.atmSourceAtm_;
      atmTargetAtm_ = other.atmTargetAtm_;
      atmLeConfigureJoinFrameLanType_ = other.atmLeConfigureJoinFrameLanType_;
      atmLeConfigureJoinFrameMaxFrameSize_ = other.atmLeConfigureJoinFrameMaxFrameSize_;
      atmLeConfigureJoinFrameNumTlvs_ = other.atmLeConfigureJoinFrameNumTlvs_;
      atmLeConfigureJoinFrameElanNameSize_ = other.atmLeConfigureJoinFrameElanNameSize_;
      atmLeRegistrationFrameNumTlvs_ = other.atmLeRegistrationFrameNumTlvs_;
      atmLeArpFrameNumTlvs_ = other.atmLeArpFrameNumTlvs_;
      atmLeVerifyFrameNumTlvs_ = other.atmLeVerifyFrameNumTlvs_;
      atmLeConfigureJoinFrameElanName_ = other.atmLeConfigureJoinFrameElanName_;
      atmLeControlMarker_ = other.atmLeControlMarker_;
      atmLeControlProtocol_ = other.atmLeControlProtocol_;
      atmLeControlVersion_ = other.atmLeControlVersion_;
      atmLeControlOpcode_ = other.atmLeControlOpcode_;
      atmLeControlStatus_ = other.atmLeControlStatus_;
      atmLeControlTransactionId_ = other.atmLeControlTransactionId_;
      atmLeControlRequesterLecid_ = other.atmLeControlRequesterLecid_;
      atmLeControlFlag_ = other.atmLeControlFlag_;
      atmLeControlFlagV2Capable_ = other.atmLeControlFlagV2Capable_;
      atmLeControlFlagSelectiveMulticast_ = other.atmLeControlFlagSelectiveMulticast_;
      atmLeControlFlagV2Required_ = other.atmLeControlFlagV2Required_;
      atmLeControlFlagFlagProxy_ = other.atmLeControlFlagFlagProxy_;
      atmLeControlFlagExcludeExplorerFrames_ = other.atmLeControlFlagExcludeExplorerFrames_;
      atmLeControlFlagAddress_ = other.atmLeControlFlagAddress_;
      atmLeControlFlagTopologyChange_ = other.atmLeControlFlagTopologyChange_;
      atmTrafficType_ = other.atmTrafficType_;
      atmTrafficVcmx_ = other.atmTrafficVcmx_;
      atmTrafficLane_ = other.atmTrafficLane_;
      atmTrafficIpsilon_ = other.atmTrafficIpsilon_;
      atmCells_ = other.atmCells_;
      atmHfAtmAal5TUu_ = other.atmHfAtmAal5TUu_;
      atmHfAtmAal5TCpi_ = other.atmHfAtmAal5TCpi_;
      atmAal5TLen_ = other.atmAal5TLen_;
      atmAal5TCrc_ = other.atmAal5TCrc_;
      atmPayloadType_ = other.atmPayloadType_;
      atmCellLossPriority_ = other.atmCellLossPriority_;
      atmHeaderErrorCheck_ = other.atmHeaderErrorCheck_;
      atmChannel_ = other.atmChannel_;
      atmAa1Csi_ = other.atmAa1Csi_;
      atmAa1SeqCount_ = other.atmAa1SeqCount_;
      atmAa1Crc_ = other.atmAa1Crc_;
      atmAa1Parity_ = other.atmAa1Parity_;
      atmAa1Payload_ = other.atmAa1Payload_;
      atmAal34SegType_ = other.atmAal34SegType_;
      atmAal34SeqNum_ = other.atmAal34SeqNum_;
      atmAal34MultiplexId_ = other.atmAal34MultiplexId_;
      atmAal34Information_ = other.atmAal34Information_;
      atmAal34LengthIndicator_ = other.atmAal34LengthIndicator_;
      atmAal34Crc_ = other.atmAal34Crc_;
      atmAalOamcellType_ = other.atmAalOamcellType_;
      atmAalOamcellTypeFm_ = other.atmAalOamcellTypeFm_;
      atmAalOamcellTypePm_ = other.atmAalOamcellTypePm_;
      atmAalOamcellTypeAd_ = other.atmAalOamcellTypeAd_;
      atmAalOamcellTypeFt_ = other.atmAalOamcellTypeFt_;
      atmAalOamcellFuncSpec_ = other.atmAalOamcellFuncSpec_;
      atmAalOamcellCrc_ = other.atmAalOamcellCrc_;
      atmPadding_ = other.atmPadding_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Atm Clone() {
      return new Atm(this);
    }

    /// <summary>Field number for the "AtmAal" field.</summary>
    public const int AtmAalFieldNumber = 1;
    private uint atmAal_;
    /// <summary>
    /// AAL ('atm_atm_aal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal {
      get { return atmAal_; }
      set {
        atmAal_ = value;
      }
    }

    /// <summary>Field number for the "AtmGFC" field.</summary>
    public const int AtmGFCFieldNumber = 2;
    private uint atmGFC_;
    /// <summary>
    /// GFC ('atm_atm_GFC')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmGFC {
      get { return atmGFC_; }
      set {
        atmGFC_ = value;
      }
    }

    /// <summary>Field number for the "AtmVpi" field.</summary>
    public const int AtmVpiFieldNumber = 3;
    private uint atmVpi_;
    /// <summary>
    /// VPI ('atm_atm_vpi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmVpi {
      get { return atmVpi_; }
      set {
        atmVpi_ = value;
      }
    }

    /// <summary>Field number for the "AtmVci" field.</summary>
    public const int AtmVciFieldNumber = 4;
    private uint atmVci_;
    /// <summary>
    /// VCI ('atm_atm_vci')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmVci {
      get { return atmVci_; }
      set {
        atmVci_ = value;
      }
    }

    /// <summary>Field number for the "AtmCid" field.</summary>
    public const int AtmCidFieldNumber = 5;
    private uint atmCid_;
    /// <summary>
    /// CID ('atm_atm_cid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmCid {
      get { return atmCid_; }
      set {
        atmCid_ = value;
      }
    }

    /// <summary>Field number for the "AtmReserved" field.</summary>
    public const int AtmReservedFieldNumber = 6;
    private pb::ByteString atmReserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('atm_atm_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmReserved {
      get { return atmReserved_; }
      set {
        atmReserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmLeClientClient" field.</summary>
    public const int AtmLeClientClientFieldNumber = 7;
    private uint atmLeClientClient_;
    /// <summary>
    /// LE Client ('atm_atm_le_client_client')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeClientClient {
      get { return atmLeClientClient_; }
      set {
        atmLeClientClient_ = value;
      }
    }

    /// <summary>Field number for the "AtmLanDestinationTag" field.</summary>
    public const int AtmLanDestinationTagFieldNumber = 8;
    private uint atmLanDestinationTag_;
    /// <summary>
    /// Tag ('atm_atm_lan_destination_tag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLanDestinationTag {
      get { return atmLanDestinationTag_; }
      set {
        atmLanDestinationTag_ = value;
      }
    }

    /// <summary>Field number for the "AtmLanDestinationMac" field.</summary>
    public const int AtmLanDestinationMacFieldNumber = 9;
    private pb::ByteString atmLanDestinationMac_ = pb::ByteString.Empty;
    /// <summary>
    /// MAC address ('atm_atm_lan_destination_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmLanDestinationMac {
      get { return atmLanDestinationMac_; }
      set {
        atmLanDestinationMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmLeControlTlvType" field.</summary>
    public const int AtmLeControlTlvTypeFieldNumber = 10;
    private uint atmLeControlTlvType_;
    /// <summary>
    /// TLV Type ('atm_atm_le_control_tlv_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlTlvType {
      get { return atmLeControlTlvType_; }
      set {
        atmLeControlTlvType_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlTlvLength" field.</summary>
    public const int AtmLeControlTlvLengthFieldNumber = 11;
    private uint atmLeControlTlvLength_;
    /// <summary>
    /// TLV Length ('atm_atm_le_control_tlv_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlTlvLength {
      get { return atmLeControlTlvLength_; }
      set {
        atmLeControlTlvLength_ = value;
      }
    }

    /// <summary>Field number for the "AtmLanDestinationRouteDesc" field.</summary>
    public const int AtmLanDestinationRouteDescFieldNumber = 12;
    private uint atmLanDestinationRouteDesc_;
    /// <summary>
    /// Route descriptor ('atm_atm_lan_destination_route_desc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLanDestinationRouteDesc {
      get { return atmLanDestinationRouteDesc_; }
      set {
        atmLanDestinationRouteDesc_ = value;
      }
    }

    /// <summary>Field number for the "AtmLanDestinationLanId" field.</summary>
    public const int AtmLanDestinationLanIdFieldNumber = 13;
    private uint atmLanDestinationLanId_;
    /// <summary>
    /// LAN ID ('atm_atm_lan_destination_lan_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLanDestinationLanId {
      get { return atmLanDestinationLanId_; }
      set {
        atmLanDestinationLanId_ = value;
      }
    }

    /// <summary>Field number for the "AtmLanDestinationBridgeNum" field.</summary>
    public const int AtmLanDestinationBridgeNumFieldNumber = 14;
    private uint atmLanDestinationBridgeNum_;
    /// <summary>
    /// Bridge number ('atm_atm_lan_destination_bridge_num')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLanDestinationBridgeNum {
      get { return atmLanDestinationBridgeNum_; }
      set {
        atmLanDestinationBridgeNum_ = value;
      }
    }

    /// <summary>Field number for the "AtmSourceAtm" field.</summary>
    public const int AtmSourceAtmFieldNumber = 15;
    private pb::ByteString atmSourceAtm_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ATM address ('atm_atm_source_atm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmSourceAtm {
      get { return atmSourceAtm_; }
      set {
        atmSourceAtm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmTargetAtm" field.</summary>
    public const int AtmTargetAtmFieldNumber = 16;
    private pb::ByteString atmTargetAtm_ = pb::ByteString.Empty;
    /// <summary>
    /// Target ATM address ('atm_atm_target_atm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmTargetAtm {
      get { return atmTargetAtm_; }
      set {
        atmTargetAtm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmLeConfigureJoinFrameLanType" field.</summary>
    public const int AtmLeConfigureJoinFrameLanTypeFieldNumber = 17;
    private uint atmLeConfigureJoinFrameLanType_;
    /// <summary>
    /// LAN type ('atm_atm_le_configure_join_frame_lan_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeConfigureJoinFrameLanType {
      get { return atmLeConfigureJoinFrameLanType_; }
      set {
        atmLeConfigureJoinFrameLanType_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeConfigureJoinFrameMaxFrameSize" field.</summary>
    public const int AtmLeConfigureJoinFrameMaxFrameSizeFieldNumber = 18;
    private uint atmLeConfigureJoinFrameMaxFrameSize_;
    /// <summary>
    /// Maximum frame size ('atm_atm_le_configure_join_frame_max_frame_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeConfigureJoinFrameMaxFrameSize {
      get { return atmLeConfigureJoinFrameMaxFrameSize_; }
      set {
        atmLeConfigureJoinFrameMaxFrameSize_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeConfigureJoinFrameNumTlvs" field.</summary>
    public const int AtmLeConfigureJoinFrameNumTlvsFieldNumber = 19;
    private uint atmLeConfigureJoinFrameNumTlvs_;
    /// <summary>
    /// Number of TLVs ('atm_atm_le_configure_join_frame_num_tlvs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeConfigureJoinFrameNumTlvs {
      get { return atmLeConfigureJoinFrameNumTlvs_; }
      set {
        atmLeConfigureJoinFrameNumTlvs_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeConfigureJoinFrameElanNameSize" field.</summary>
    public const int AtmLeConfigureJoinFrameElanNameSizeFieldNumber = 20;
    private uint atmLeConfigureJoinFrameElanNameSize_;
    /// <summary>
    /// ELAN name size ('atm_atm_le_configure_join_frame_elan_name_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeConfigureJoinFrameElanNameSize {
      get { return atmLeConfigureJoinFrameElanNameSize_; }
      set {
        atmLeConfigureJoinFrameElanNameSize_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeRegistrationFrameNumTlvs" field.</summary>
    public const int AtmLeRegistrationFrameNumTlvsFieldNumber = 21;
    private uint atmLeRegistrationFrameNumTlvs_;
    /// <summary>
    /// Number of TLVs ('atm_atm_le_registration_frame_num_tlvs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeRegistrationFrameNumTlvs {
      get { return atmLeRegistrationFrameNumTlvs_; }
      set {
        atmLeRegistrationFrameNumTlvs_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeArpFrameNumTlvs" field.</summary>
    public const int AtmLeArpFrameNumTlvsFieldNumber = 22;
    private uint atmLeArpFrameNumTlvs_;
    /// <summary>
    /// Number of TLVs ('atm_atm_le_arp_frame_num_tlvs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeArpFrameNumTlvs {
      get { return atmLeArpFrameNumTlvs_; }
      set {
        atmLeArpFrameNumTlvs_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeVerifyFrameNumTlvs" field.</summary>
    public const int AtmLeVerifyFrameNumTlvsFieldNumber = 23;
    private uint atmLeVerifyFrameNumTlvs_;
    /// <summary>
    /// Number of TLVs ('atm_atm_le_verify_frame_num_tlvs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeVerifyFrameNumTlvs {
      get { return atmLeVerifyFrameNumTlvs_; }
      set {
        atmLeVerifyFrameNumTlvs_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeConfigureJoinFrameElanName" field.</summary>
    public const int AtmLeConfigureJoinFrameElanNameFieldNumber = 24;
    private pb::ByteString atmLeConfigureJoinFrameElanName_ = pb::ByteString.Empty;
    /// <summary>
    /// ELAN name ('atm_atm_le_configure_join_frame_elan_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmLeConfigureJoinFrameElanName {
      get { return atmLeConfigureJoinFrameElanName_; }
      set {
        atmLeConfigureJoinFrameElanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmLeControlMarker" field.</summary>
    public const int AtmLeControlMarkerFieldNumber = 25;
    private uint atmLeControlMarker_;
    /// <summary>
    /// Marker ('atm_atm_le_control_marker')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlMarker {
      get { return atmLeControlMarker_; }
      set {
        atmLeControlMarker_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlProtocol" field.</summary>
    public const int AtmLeControlProtocolFieldNumber = 26;
    private uint atmLeControlProtocol_;
    /// <summary>
    /// Protocol ('atm_atm_le_control_protocol')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlProtocol {
      get { return atmLeControlProtocol_; }
      set {
        atmLeControlProtocol_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlVersion" field.</summary>
    public const int AtmLeControlVersionFieldNumber = 27;
    private uint atmLeControlVersion_;
    /// <summary>
    /// Version ('atm_atm_le_control_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlVersion {
      get { return atmLeControlVersion_; }
      set {
        atmLeControlVersion_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlOpcode" field.</summary>
    public const int AtmLeControlOpcodeFieldNumber = 28;
    private uint atmLeControlOpcode_;
    /// <summary>
    /// Opcode ('atm_atm_le_control_opcode')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlOpcode {
      get { return atmLeControlOpcode_; }
      set {
        atmLeControlOpcode_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlStatus" field.</summary>
    public const int AtmLeControlStatusFieldNumber = 29;
    private uint atmLeControlStatus_;
    /// <summary>
    /// Status ('atm_atm_le_control_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlStatus {
      get { return atmLeControlStatus_; }
      set {
        atmLeControlStatus_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlTransactionId" field.</summary>
    public const int AtmLeControlTransactionIdFieldNumber = 30;
    private uint atmLeControlTransactionId_;
    /// <summary>
    /// Transaction ID ('atm_atm_le_control_transaction_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlTransactionId {
      get { return atmLeControlTransactionId_; }
      set {
        atmLeControlTransactionId_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlRequesterLecid" field.</summary>
    public const int AtmLeControlRequesterLecidFieldNumber = 31;
    private uint atmLeControlRequesterLecid_;
    /// <summary>
    /// Requester LECID ('atm_atm_le_control_requester_lecid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlRequesterLecid {
      get { return atmLeControlRequesterLecid_; }
      set {
        atmLeControlRequesterLecid_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlag" field.</summary>
    public const int AtmLeControlFlagFieldNumber = 32;
    private uint atmLeControlFlag_;
    /// <summary>
    /// Flags ('atm_atm_le_control_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmLeControlFlag {
      get { return atmLeControlFlag_; }
      set {
        atmLeControlFlag_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagV2Capable" field.</summary>
    public const int AtmLeControlFlagV2CapableFieldNumber = 33;
    private bool atmLeControlFlagV2Capable_;
    /// <summary>
    /// V2 capable ('atm_le_control_flag_atm_le_control_flag_v2_capable')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagV2Capable {
      get { return atmLeControlFlagV2Capable_; }
      set {
        atmLeControlFlagV2Capable_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagSelectiveMulticast" field.</summary>
    public const int AtmLeControlFlagSelectiveMulticastFieldNumber = 34;
    private bool atmLeControlFlagSelectiveMulticast_;
    /// <summary>
    /// Selective multicast ('atm_le_control_flag_atm_le_control_flag_selective_multicast')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagSelectiveMulticast {
      get { return atmLeControlFlagSelectiveMulticast_; }
      set {
        atmLeControlFlagSelectiveMulticast_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagV2Required" field.</summary>
    public const int AtmLeControlFlagV2RequiredFieldNumber = 35;
    private bool atmLeControlFlagV2Required_;
    /// <summary>
    /// V2 required ('atm_le_control_flag_atm_le_control_flag_v2_required')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagV2Required {
      get { return atmLeControlFlagV2Required_; }
      set {
        atmLeControlFlagV2Required_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagFlagProxy" field.</summary>
    public const int AtmLeControlFlagFlagProxyFieldNumber = 36;
    private bool atmLeControlFlagFlagProxy_;
    /// <summary>
    /// Proxy ('atm_le_control_flag_atm_le_control_flag_flag_proxy')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagFlagProxy {
      get { return atmLeControlFlagFlagProxy_; }
      set {
        atmLeControlFlagFlagProxy_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagExcludeExplorerFrames" field.</summary>
    public const int AtmLeControlFlagExcludeExplorerFramesFieldNumber = 37;
    private bool atmLeControlFlagExcludeExplorerFrames_;
    /// <summary>
    /// Exclude explorer frames ('atm_le_control_flag_atm_le_control_flag_exclude_explorer_frames')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagExcludeExplorerFrames {
      get { return atmLeControlFlagExcludeExplorerFrames_; }
      set {
        atmLeControlFlagExcludeExplorerFrames_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagAddress" field.</summary>
    public const int AtmLeControlFlagAddressFieldNumber = 38;
    private bool atmLeControlFlagAddress_;
    /// <summary>
    /// Address ('atm_le_control_flag_atm_le_control_flag_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagAddress {
      get { return atmLeControlFlagAddress_; }
      set {
        atmLeControlFlagAddress_ = value;
      }
    }

    /// <summary>Field number for the "AtmLeControlFlagTopologyChange" field.</summary>
    public const int AtmLeControlFlagTopologyChangeFieldNumber = 39;
    private bool atmLeControlFlagTopologyChange_;
    /// <summary>
    /// Topology change ('atm_le_control_flag_atm_le_control_flag_topology_change')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmLeControlFlagTopologyChange {
      get { return atmLeControlFlagTopologyChange_; }
      set {
        atmLeControlFlagTopologyChange_ = value;
      }
    }

    /// <summary>Field number for the "AtmTrafficType" field.</summary>
    public const int AtmTrafficTypeFieldNumber = 40;
    private uint atmTrafficType_;
    /// <summary>
    /// Traffic type ('atm_atm_traffic_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmTrafficType {
      get { return atmTrafficType_; }
      set {
        atmTrafficType_ = value;
      }
    }

    /// <summary>Field number for the "AtmTrafficVcmx" field.</summary>
    public const int AtmTrafficVcmxFieldNumber = 41;
    private uint atmTrafficVcmx_;
    /// <summary>
    /// VC multiplexed traffic type ('atm_atm_traffic_vcmx')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmTrafficVcmx {
      get { return atmTrafficVcmx_; }
      set {
        atmTrafficVcmx_ = value;
      }
    }

    /// <summary>Field number for the "AtmTrafficLane" field.</summary>
    public const int AtmTrafficLaneFieldNumber = 42;
    private uint atmTrafficLane_;
    /// <summary>
    /// LANE traffic type ('atm_atm_traffic_lane')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmTrafficLane {
      get { return atmTrafficLane_; }
      set {
        atmTrafficLane_ = value;
      }
    }

    /// <summary>Field number for the "AtmTrafficIpsilon" field.</summary>
    public const int AtmTrafficIpsilonFieldNumber = 43;
    private uint atmTrafficIpsilon_;
    /// <summary>
    /// Ipsilon traffic type ('atm_atm_traffic_ipsilon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmTrafficIpsilon {
      get { return atmTrafficIpsilon_; }
      set {
        atmTrafficIpsilon_ = value;
      }
    }

    /// <summary>Field number for the "AtmCells" field.</summary>
    public const int AtmCellsFieldNumber = 44;
    private uint atmCells_;
    /// <summary>
    /// Cells ('atm_atm_cells')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmCells {
      get { return atmCells_; }
      set {
        atmCells_ = value;
      }
    }

    /// <summary>Field number for the "AtmHfAtmAal5tUu" field.</summary>
    public const int AtmHfAtmAal5TUuFieldNumber = 45;
    private uint atmHfAtmAal5TUu_;
    /// <summary>
    /// AAL5 UU ('atm_atm_hf_atm_aal5t_uu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmHfAtmAal5TUu {
      get { return atmHfAtmAal5TUu_; }
      set {
        atmHfAtmAal5TUu_ = value;
      }
    }

    /// <summary>Field number for the "AtmHfAtmAal5tCpi" field.</summary>
    public const int AtmHfAtmAal5TCpiFieldNumber = 46;
    private uint atmHfAtmAal5TCpi_;
    /// <summary>
    /// AAL5 CPI ('atm_atm_hf_atm_aal5t_cpi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmHfAtmAal5TCpi {
      get { return atmHfAtmAal5TCpi_; }
      set {
        atmHfAtmAal5TCpi_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal5tLen" field.</summary>
    public const int AtmAal5TLenFieldNumber = 47;
    private uint atmAal5TLen_;
    /// <summary>
    /// AAL5 len ('atm_atm_aal5t_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal5TLen {
      get { return atmAal5TLen_; }
      set {
        atmAal5TLen_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal5tCrc" field.</summary>
    public const int AtmAal5TCrcFieldNumber = 48;
    private uint atmAal5TCrc_;
    /// <summary>
    /// AAL5 CRC ('atm_atm_aal5t_crc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal5TCrc {
      get { return atmAal5TCrc_; }
      set {
        atmAal5TCrc_ = value;
      }
    }

    /// <summary>Field number for the "AtmPayloadType" field.</summary>
    public const int AtmPayloadTypeFieldNumber = 49;
    private uint atmPayloadType_;
    /// <summary>
    /// Payload Type ('atm_atm_payload_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmPayloadType {
      get { return atmPayloadType_; }
      set {
        atmPayloadType_ = value;
      }
    }

    /// <summary>Field number for the "AtmCellLossPriority" field.</summary>
    public const int AtmCellLossPriorityFieldNumber = 50;
    private bool atmCellLossPriority_;
    /// <summary>
    /// Cell Loss Priority ('atm_atm_cell_loss_priority')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtmCellLossPriority {
      get { return atmCellLossPriority_; }
      set {
        atmCellLossPriority_ = value;
      }
    }

    /// <summary>Field number for the "AtmHeaderErrorCheck" field.</summary>
    public const int AtmHeaderErrorCheckFieldNumber = 51;
    private uint atmHeaderErrorCheck_;
    /// <summary>
    /// Header Error Check ('atm_atm_header_error_check')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmHeaderErrorCheck {
      get { return atmHeaderErrorCheck_; }
      set {
        atmHeaderErrorCheck_ = value;
      }
    }

    /// <summary>Field number for the "AtmChannel" field.</summary>
    public const int AtmChannelFieldNumber = 52;
    private uint atmChannel_;
    /// <summary>
    /// Channel ('atm_atm_channel')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmChannel {
      get { return atmChannel_; }
      set {
        atmChannel_ = value;
      }
    }

    /// <summary>Field number for the "AtmAa1Csi" field.</summary>
    public const int AtmAa1CsiFieldNumber = 53;
    private uint atmAa1Csi_;
    /// <summary>
    /// CSI ('atm_atm_aa1_csi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAa1Csi {
      get { return atmAa1Csi_; }
      set {
        atmAa1Csi_ = value;
      }
    }

    /// <summary>Field number for the "AtmAa1SeqCount" field.</summary>
    public const int AtmAa1SeqCountFieldNumber = 54;
    private uint atmAa1SeqCount_;
    /// <summary>
    /// Sequence Count ('atm_atm_aa1_seq_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAa1SeqCount {
      get { return atmAa1SeqCount_; }
      set {
        atmAa1SeqCount_ = value;
      }
    }

    /// <summary>Field number for the "AtmAa1Crc" field.</summary>
    public const int AtmAa1CrcFieldNumber = 55;
    private uint atmAa1Crc_;
    /// <summary>
    /// CRC ('atm_atm_aa1_crc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAa1Crc {
      get { return atmAa1Crc_; }
      set {
        atmAa1Crc_ = value;
      }
    }

    /// <summary>Field number for the "AtmAa1Parity" field.</summary>
    public const int AtmAa1ParityFieldNumber = 56;
    private uint atmAa1Parity_;
    /// <summary>
    /// Parity ('atm_atm_aa1_parity')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAa1Parity {
      get { return atmAa1Parity_; }
      set {
        atmAa1Parity_ = value;
      }
    }

    /// <summary>Field number for the "AtmAa1Payload" field.</summary>
    public const int AtmAa1PayloadFieldNumber = 57;
    private pb::ByteString atmAa1Payload_ = pb::ByteString.Empty;
    /// <summary>
    /// Payload ('atm_atm_aa1_payload')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmAa1Payload {
      get { return atmAa1Payload_; }
      set {
        atmAa1Payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmAal34SegType" field.</summary>
    public const int AtmAal34SegTypeFieldNumber = 58;
    private uint atmAal34SegType_;
    /// <summary>
    /// Segment Type ('atm_atm_aal3_4_seg_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal34SegType {
      get { return atmAal34SegType_; }
      set {
        atmAal34SegType_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal34SeqNum" field.</summary>
    public const int AtmAal34SeqNumFieldNumber = 59;
    private uint atmAal34SeqNum_;
    /// <summary>
    /// Sequence Number ('atm_atm_aal3_4_seq_num')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal34SeqNum {
      get { return atmAal34SeqNum_; }
      set {
        atmAal34SeqNum_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal34MultiplexId" field.</summary>
    public const int AtmAal34MultiplexIdFieldNumber = 60;
    private uint atmAal34MultiplexId_;
    /// <summary>
    /// Multiplex ID ('atm_atm_aal3_4_multiplex_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal34MultiplexId {
      get { return atmAal34MultiplexId_; }
      set {
        atmAal34MultiplexId_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal34Information" field.</summary>
    public const int AtmAal34InformationFieldNumber = 61;
    private pb::ByteString atmAal34Information_ = pb::ByteString.Empty;
    /// <summary>
    /// Information ('atm_atm_aal3_4_information')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmAal34Information {
      get { return atmAal34Information_; }
      set {
        atmAal34Information_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmAal34LengthIndicator" field.</summary>
    public const int AtmAal34LengthIndicatorFieldNumber = 62;
    private uint atmAal34LengthIndicator_;
    /// <summary>
    /// Length Indicator ('atm_atm_aal3_4_length_indicator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal34LengthIndicator {
      get { return atmAal34LengthIndicator_; }
      set {
        atmAal34LengthIndicator_ = value;
      }
    }

    /// <summary>Field number for the "AtmAal34Crc" field.</summary>
    public const int AtmAal34CrcFieldNumber = 63;
    private uint atmAal34Crc_;
    /// <summary>
    /// CRC ('atm_atm_aal3_4_crc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAal34Crc {
      get { return atmAal34Crc_; }
      set {
        atmAal34Crc_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellType" field.</summary>
    public const int AtmAalOamcellTypeFieldNumber = 64;
    private uint atmAalOamcellType_;
    /// <summary>
    /// OAM Type ('atm_atm_aal_oamcell_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellType {
      get { return atmAalOamcellType_; }
      set {
        atmAalOamcellType_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellTypeFm" field.</summary>
    public const int AtmAalOamcellTypeFmFieldNumber = 65;
    private uint atmAalOamcellTypeFm_;
    /// <summary>
    /// Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_fm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellTypeFm {
      get { return atmAalOamcellTypeFm_; }
      set {
        atmAalOamcellTypeFm_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellTypePm" field.</summary>
    public const int AtmAalOamcellTypePmFieldNumber = 66;
    private uint atmAalOamcellTypePm_;
    /// <summary>
    /// Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_pm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellTypePm {
      get { return atmAalOamcellTypePm_; }
      set {
        atmAalOamcellTypePm_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellTypeAd" field.</summary>
    public const int AtmAalOamcellTypeAdFieldNumber = 67;
    private uint atmAalOamcellTypeAd_;
    /// <summary>
    /// Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_ad')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellTypeAd {
      get { return atmAalOamcellTypeAd_; }
      set {
        atmAalOamcellTypeAd_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellTypeFt" field.</summary>
    public const int AtmAalOamcellTypeFtFieldNumber = 68;
    private uint atmAalOamcellTypeFt_;
    /// <summary>
    /// Function Type ('atm_aal_oamcell_type_atm_aal_oamcell_type_ft')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellTypeFt {
      get { return atmAalOamcellTypeFt_; }
      set {
        atmAalOamcellTypeFt_ = value;
      }
    }

    /// <summary>Field number for the "AtmAalOamcellFuncSpec" field.</summary>
    public const int AtmAalOamcellFuncSpecFieldNumber = 69;
    private pb::ByteString atmAalOamcellFuncSpec_ = pb::ByteString.Empty;
    /// <summary>
    /// Function-specific information ('atm_atm_aal_oamcell_func_spec')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmAalOamcellFuncSpec {
      get { return atmAalOamcellFuncSpec_; }
      set {
        atmAalOamcellFuncSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AtmAalOamcellCrc" field.</summary>
    public const int AtmAalOamcellCrcFieldNumber = 70;
    private uint atmAalOamcellCrc_;
    /// <summary>
    /// CRC-10 ('atm_atm_aal_oamcell_crc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtmAalOamcellCrc {
      get { return atmAalOamcellCrc_; }
      set {
        atmAalOamcellCrc_ = value;
      }
    }

    /// <summary>Field number for the "AtmPadding" field.</summary>
    public const int AtmPaddingFieldNumber = 71;
    private pb::ByteString atmPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('atm_atm_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AtmPadding {
      get { return atmPadding_; }
      set {
        atmPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Atm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Atm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AtmAal != other.AtmAal) return false;
      if (AtmGFC != other.AtmGFC) return false;
      if (AtmVpi != other.AtmVpi) return false;
      if (AtmVci != other.AtmVci) return false;
      if (AtmCid != other.AtmCid) return false;
      if (AtmReserved != other.AtmReserved) return false;
      if (AtmLeClientClient != other.AtmLeClientClient) return false;
      if (AtmLanDestinationTag != other.AtmLanDestinationTag) return false;
      if (AtmLanDestinationMac != other.AtmLanDestinationMac) return false;
      if (AtmLeControlTlvType != other.AtmLeControlTlvType) return false;
      if (AtmLeControlTlvLength != other.AtmLeControlTlvLength) return false;
      if (AtmLanDestinationRouteDesc != other.AtmLanDestinationRouteDesc) return false;
      if (AtmLanDestinationLanId != other.AtmLanDestinationLanId) return false;
      if (AtmLanDestinationBridgeNum != other.AtmLanDestinationBridgeNum) return false;
      if (AtmSourceAtm != other.AtmSourceAtm) return false;
      if (AtmTargetAtm != other.AtmTargetAtm) return false;
      if (AtmLeConfigureJoinFrameLanType != other.AtmLeConfigureJoinFrameLanType) return false;
      if (AtmLeConfigureJoinFrameMaxFrameSize != other.AtmLeConfigureJoinFrameMaxFrameSize) return false;
      if (AtmLeConfigureJoinFrameNumTlvs != other.AtmLeConfigureJoinFrameNumTlvs) return false;
      if (AtmLeConfigureJoinFrameElanNameSize != other.AtmLeConfigureJoinFrameElanNameSize) return false;
      if (AtmLeRegistrationFrameNumTlvs != other.AtmLeRegistrationFrameNumTlvs) return false;
      if (AtmLeArpFrameNumTlvs != other.AtmLeArpFrameNumTlvs) return false;
      if (AtmLeVerifyFrameNumTlvs != other.AtmLeVerifyFrameNumTlvs) return false;
      if (AtmLeConfigureJoinFrameElanName != other.AtmLeConfigureJoinFrameElanName) return false;
      if (AtmLeControlMarker != other.AtmLeControlMarker) return false;
      if (AtmLeControlProtocol != other.AtmLeControlProtocol) return false;
      if (AtmLeControlVersion != other.AtmLeControlVersion) return false;
      if (AtmLeControlOpcode != other.AtmLeControlOpcode) return false;
      if (AtmLeControlStatus != other.AtmLeControlStatus) return false;
      if (AtmLeControlTransactionId != other.AtmLeControlTransactionId) return false;
      if (AtmLeControlRequesterLecid != other.AtmLeControlRequesterLecid) return false;
      if (AtmLeControlFlag != other.AtmLeControlFlag) return false;
      if (AtmLeControlFlagV2Capable != other.AtmLeControlFlagV2Capable) return false;
      if (AtmLeControlFlagSelectiveMulticast != other.AtmLeControlFlagSelectiveMulticast) return false;
      if (AtmLeControlFlagV2Required != other.AtmLeControlFlagV2Required) return false;
      if (AtmLeControlFlagFlagProxy != other.AtmLeControlFlagFlagProxy) return false;
      if (AtmLeControlFlagExcludeExplorerFrames != other.AtmLeControlFlagExcludeExplorerFrames) return false;
      if (AtmLeControlFlagAddress != other.AtmLeControlFlagAddress) return false;
      if (AtmLeControlFlagTopologyChange != other.AtmLeControlFlagTopologyChange) return false;
      if (AtmTrafficType != other.AtmTrafficType) return false;
      if (AtmTrafficVcmx != other.AtmTrafficVcmx) return false;
      if (AtmTrafficLane != other.AtmTrafficLane) return false;
      if (AtmTrafficIpsilon != other.AtmTrafficIpsilon) return false;
      if (AtmCells != other.AtmCells) return false;
      if (AtmHfAtmAal5TUu != other.AtmHfAtmAal5TUu) return false;
      if (AtmHfAtmAal5TCpi != other.AtmHfAtmAal5TCpi) return false;
      if (AtmAal5TLen != other.AtmAal5TLen) return false;
      if (AtmAal5TCrc != other.AtmAal5TCrc) return false;
      if (AtmPayloadType != other.AtmPayloadType) return false;
      if (AtmCellLossPriority != other.AtmCellLossPriority) return false;
      if (AtmHeaderErrorCheck != other.AtmHeaderErrorCheck) return false;
      if (AtmChannel != other.AtmChannel) return false;
      if (AtmAa1Csi != other.AtmAa1Csi) return false;
      if (AtmAa1SeqCount != other.AtmAa1SeqCount) return false;
      if (AtmAa1Crc != other.AtmAa1Crc) return false;
      if (AtmAa1Parity != other.AtmAa1Parity) return false;
      if (AtmAa1Payload != other.AtmAa1Payload) return false;
      if (AtmAal34SegType != other.AtmAal34SegType) return false;
      if (AtmAal34SeqNum != other.AtmAal34SeqNum) return false;
      if (AtmAal34MultiplexId != other.AtmAal34MultiplexId) return false;
      if (AtmAal34Information != other.AtmAal34Information) return false;
      if (AtmAal34LengthIndicator != other.AtmAal34LengthIndicator) return false;
      if (AtmAal34Crc != other.AtmAal34Crc) return false;
      if (AtmAalOamcellType != other.AtmAalOamcellType) return false;
      if (AtmAalOamcellTypeFm != other.AtmAalOamcellTypeFm) return false;
      if (AtmAalOamcellTypePm != other.AtmAalOamcellTypePm) return false;
      if (AtmAalOamcellTypeAd != other.AtmAalOamcellTypeAd) return false;
      if (AtmAalOamcellTypeFt != other.AtmAalOamcellTypeFt) return false;
      if (AtmAalOamcellFuncSpec != other.AtmAalOamcellFuncSpec) return false;
      if (AtmAalOamcellCrc != other.AtmAalOamcellCrc) return false;
      if (AtmPadding != other.AtmPadding) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AtmAal != 0) hash ^= AtmAal.GetHashCode();
      if (AtmGFC != 0) hash ^= AtmGFC.GetHashCode();
      if (AtmVpi != 0) hash ^= AtmVpi.GetHashCode();
      if (AtmVci != 0) hash ^= AtmVci.GetHashCode();
      if (AtmCid != 0) hash ^= AtmCid.GetHashCode();
      if (AtmReserved.Length != 0) hash ^= AtmReserved.GetHashCode();
      if (AtmLeClientClient != 0) hash ^= AtmLeClientClient.GetHashCode();
      if (AtmLanDestinationTag != 0) hash ^= AtmLanDestinationTag.GetHashCode();
      if (AtmLanDestinationMac.Length != 0) hash ^= AtmLanDestinationMac.GetHashCode();
      if (AtmLeControlTlvType != 0) hash ^= AtmLeControlTlvType.GetHashCode();
      if (AtmLeControlTlvLength != 0) hash ^= AtmLeControlTlvLength.GetHashCode();
      if (AtmLanDestinationRouteDesc != 0) hash ^= AtmLanDestinationRouteDesc.GetHashCode();
      if (AtmLanDestinationLanId != 0) hash ^= AtmLanDestinationLanId.GetHashCode();
      if (AtmLanDestinationBridgeNum != 0) hash ^= AtmLanDestinationBridgeNum.GetHashCode();
      if (AtmSourceAtm.Length != 0) hash ^= AtmSourceAtm.GetHashCode();
      if (AtmTargetAtm.Length != 0) hash ^= AtmTargetAtm.GetHashCode();
      if (AtmLeConfigureJoinFrameLanType != 0) hash ^= AtmLeConfigureJoinFrameLanType.GetHashCode();
      if (AtmLeConfigureJoinFrameMaxFrameSize != 0) hash ^= AtmLeConfigureJoinFrameMaxFrameSize.GetHashCode();
      if (AtmLeConfigureJoinFrameNumTlvs != 0) hash ^= AtmLeConfigureJoinFrameNumTlvs.GetHashCode();
      if (AtmLeConfigureJoinFrameElanNameSize != 0) hash ^= AtmLeConfigureJoinFrameElanNameSize.GetHashCode();
      if (AtmLeRegistrationFrameNumTlvs != 0) hash ^= AtmLeRegistrationFrameNumTlvs.GetHashCode();
      if (AtmLeArpFrameNumTlvs != 0) hash ^= AtmLeArpFrameNumTlvs.GetHashCode();
      if (AtmLeVerifyFrameNumTlvs != 0) hash ^= AtmLeVerifyFrameNumTlvs.GetHashCode();
      if (AtmLeConfigureJoinFrameElanName.Length != 0) hash ^= AtmLeConfigureJoinFrameElanName.GetHashCode();
      if (AtmLeControlMarker != 0) hash ^= AtmLeControlMarker.GetHashCode();
      if (AtmLeControlProtocol != 0) hash ^= AtmLeControlProtocol.GetHashCode();
      if (AtmLeControlVersion != 0) hash ^= AtmLeControlVersion.GetHashCode();
      if (AtmLeControlOpcode != 0) hash ^= AtmLeControlOpcode.GetHashCode();
      if (AtmLeControlStatus != 0) hash ^= AtmLeControlStatus.GetHashCode();
      if (AtmLeControlTransactionId != 0) hash ^= AtmLeControlTransactionId.GetHashCode();
      if (AtmLeControlRequesterLecid != 0) hash ^= AtmLeControlRequesterLecid.GetHashCode();
      if (AtmLeControlFlag != 0) hash ^= AtmLeControlFlag.GetHashCode();
      if (AtmLeControlFlagV2Capable != false) hash ^= AtmLeControlFlagV2Capable.GetHashCode();
      if (AtmLeControlFlagSelectiveMulticast != false) hash ^= AtmLeControlFlagSelectiveMulticast.GetHashCode();
      if (AtmLeControlFlagV2Required != false) hash ^= AtmLeControlFlagV2Required.GetHashCode();
      if (AtmLeControlFlagFlagProxy != false) hash ^= AtmLeControlFlagFlagProxy.GetHashCode();
      if (AtmLeControlFlagExcludeExplorerFrames != false) hash ^= AtmLeControlFlagExcludeExplorerFrames.GetHashCode();
      if (AtmLeControlFlagAddress != false) hash ^= AtmLeControlFlagAddress.GetHashCode();
      if (AtmLeControlFlagTopologyChange != false) hash ^= AtmLeControlFlagTopologyChange.GetHashCode();
      if (AtmTrafficType != 0) hash ^= AtmTrafficType.GetHashCode();
      if (AtmTrafficVcmx != 0) hash ^= AtmTrafficVcmx.GetHashCode();
      if (AtmTrafficLane != 0) hash ^= AtmTrafficLane.GetHashCode();
      if (AtmTrafficIpsilon != 0) hash ^= AtmTrafficIpsilon.GetHashCode();
      if (AtmCells != 0) hash ^= AtmCells.GetHashCode();
      if (AtmHfAtmAal5TUu != 0) hash ^= AtmHfAtmAal5TUu.GetHashCode();
      if (AtmHfAtmAal5TCpi != 0) hash ^= AtmHfAtmAal5TCpi.GetHashCode();
      if (AtmAal5TLen != 0) hash ^= AtmAal5TLen.GetHashCode();
      if (AtmAal5TCrc != 0) hash ^= AtmAal5TCrc.GetHashCode();
      if (AtmPayloadType != 0) hash ^= AtmPayloadType.GetHashCode();
      if (AtmCellLossPriority != false) hash ^= AtmCellLossPriority.GetHashCode();
      if (AtmHeaderErrorCheck != 0) hash ^= AtmHeaderErrorCheck.GetHashCode();
      if (AtmChannel != 0) hash ^= AtmChannel.GetHashCode();
      if (AtmAa1Csi != 0) hash ^= AtmAa1Csi.GetHashCode();
      if (AtmAa1SeqCount != 0) hash ^= AtmAa1SeqCount.GetHashCode();
      if (AtmAa1Crc != 0) hash ^= AtmAa1Crc.GetHashCode();
      if (AtmAa1Parity != 0) hash ^= AtmAa1Parity.GetHashCode();
      if (AtmAa1Payload.Length != 0) hash ^= AtmAa1Payload.GetHashCode();
      if (AtmAal34SegType != 0) hash ^= AtmAal34SegType.GetHashCode();
      if (AtmAal34SeqNum != 0) hash ^= AtmAal34SeqNum.GetHashCode();
      if (AtmAal34MultiplexId != 0) hash ^= AtmAal34MultiplexId.GetHashCode();
      if (AtmAal34Information.Length != 0) hash ^= AtmAal34Information.GetHashCode();
      if (AtmAal34LengthIndicator != 0) hash ^= AtmAal34LengthIndicator.GetHashCode();
      if (AtmAal34Crc != 0) hash ^= AtmAal34Crc.GetHashCode();
      if (AtmAalOamcellType != 0) hash ^= AtmAalOamcellType.GetHashCode();
      if (AtmAalOamcellTypeFm != 0) hash ^= AtmAalOamcellTypeFm.GetHashCode();
      if (AtmAalOamcellTypePm != 0) hash ^= AtmAalOamcellTypePm.GetHashCode();
      if (AtmAalOamcellTypeAd != 0) hash ^= AtmAalOamcellTypeAd.GetHashCode();
      if (AtmAalOamcellTypeFt != 0) hash ^= AtmAalOamcellTypeFt.GetHashCode();
      if (AtmAalOamcellFuncSpec.Length != 0) hash ^= AtmAalOamcellFuncSpec.GetHashCode();
      if (AtmAalOamcellCrc != 0) hash ^= AtmAalOamcellCrc.GetHashCode();
      if (AtmPadding.Length != 0) hash ^= AtmPadding.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AtmAal != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AtmAal);
      }
      if (AtmGFC != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AtmGFC);
      }
      if (AtmVpi != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AtmVpi);
      }
      if (AtmVci != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AtmVci);
      }
      if (AtmCid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AtmCid);
      }
      if (AtmReserved.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(AtmReserved);
      }
      if (AtmLeClientClient != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AtmLeClientClient);
      }
      if (AtmLanDestinationTag != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(AtmLanDestinationTag);
      }
      if (AtmLanDestinationMac.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(AtmLanDestinationMac);
      }
      if (AtmLeControlTlvType != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AtmLeControlTlvType);
      }
      if (AtmLeControlTlvLength != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(AtmLeControlTlvLength);
      }
      if (AtmLanDestinationRouteDesc != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AtmLanDestinationRouteDesc);
      }
      if (AtmLanDestinationLanId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(AtmLanDestinationLanId);
      }
      if (AtmLanDestinationBridgeNum != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(AtmLanDestinationBridgeNum);
      }
      if (AtmSourceAtm.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(AtmSourceAtm);
      }
      if (AtmTargetAtm.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(AtmTargetAtm);
      }
      if (AtmLeConfigureJoinFrameLanType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(AtmLeConfigureJoinFrameLanType);
      }
      if (AtmLeConfigureJoinFrameMaxFrameSize != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(AtmLeConfigureJoinFrameMaxFrameSize);
      }
      if (AtmLeConfigureJoinFrameNumTlvs != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(AtmLeConfigureJoinFrameNumTlvs);
      }
      if (AtmLeConfigureJoinFrameElanNameSize != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(AtmLeConfigureJoinFrameElanNameSize);
      }
      if (AtmLeRegistrationFrameNumTlvs != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(AtmLeRegistrationFrameNumTlvs);
      }
      if (AtmLeArpFrameNumTlvs != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(AtmLeArpFrameNumTlvs);
      }
      if (AtmLeVerifyFrameNumTlvs != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(AtmLeVerifyFrameNumTlvs);
      }
      if (AtmLeConfigureJoinFrameElanName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(AtmLeConfigureJoinFrameElanName);
      }
      if (AtmLeControlMarker != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(AtmLeControlMarker);
      }
      if (AtmLeControlProtocol != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(AtmLeControlProtocol);
      }
      if (AtmLeControlVersion != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(AtmLeControlVersion);
      }
      if (AtmLeControlOpcode != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(AtmLeControlOpcode);
      }
      if (AtmLeControlStatus != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(AtmLeControlStatus);
      }
      if (AtmLeControlTransactionId != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(AtmLeControlTransactionId);
      }
      if (AtmLeControlRequesterLecid != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(AtmLeControlRequesterLecid);
      }
      if (AtmLeControlFlag != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(AtmLeControlFlag);
      }
      if (AtmLeControlFlagV2Capable != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(AtmLeControlFlagV2Capable);
      }
      if (AtmLeControlFlagSelectiveMulticast != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(AtmLeControlFlagSelectiveMulticast);
      }
      if (AtmLeControlFlagV2Required != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(AtmLeControlFlagV2Required);
      }
      if (AtmLeControlFlagFlagProxy != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(AtmLeControlFlagFlagProxy);
      }
      if (AtmLeControlFlagExcludeExplorerFrames != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AtmLeControlFlagExcludeExplorerFrames);
      }
      if (AtmLeControlFlagAddress != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(AtmLeControlFlagAddress);
      }
      if (AtmLeControlFlagTopologyChange != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(AtmLeControlFlagTopologyChange);
      }
      if (AtmTrafficType != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(AtmTrafficType);
      }
      if (AtmTrafficVcmx != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(AtmTrafficVcmx);
      }
      if (AtmTrafficLane != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(AtmTrafficLane);
      }
      if (AtmTrafficIpsilon != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(AtmTrafficIpsilon);
      }
      if (AtmCells != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(AtmCells);
      }
      if (AtmHfAtmAal5TUu != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(AtmHfAtmAal5TUu);
      }
      if (AtmHfAtmAal5TCpi != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(AtmHfAtmAal5TCpi);
      }
      if (AtmAal5TLen != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(AtmAal5TLen);
      }
      if (AtmAal5TCrc != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(AtmAal5TCrc);
      }
      if (AtmPayloadType != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(AtmPayloadType);
      }
      if (AtmCellLossPriority != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(AtmCellLossPriority);
      }
      if (AtmHeaderErrorCheck != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(AtmHeaderErrorCheck);
      }
      if (AtmChannel != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(AtmChannel);
      }
      if (AtmAa1Csi != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(AtmAa1Csi);
      }
      if (AtmAa1SeqCount != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(AtmAa1SeqCount);
      }
      if (AtmAa1Crc != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(AtmAa1Crc);
      }
      if (AtmAa1Parity != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(AtmAa1Parity);
      }
      if (AtmAa1Payload.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteBytes(AtmAa1Payload);
      }
      if (AtmAal34SegType != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(AtmAal34SegType);
      }
      if (AtmAal34SeqNum != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(AtmAal34SeqNum);
      }
      if (AtmAal34MultiplexId != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(AtmAal34MultiplexId);
      }
      if (AtmAal34Information.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteBytes(AtmAal34Information);
      }
      if (AtmAal34LengthIndicator != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(AtmAal34LengthIndicator);
      }
      if (AtmAal34Crc != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(AtmAal34Crc);
      }
      if (AtmAalOamcellType != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(AtmAalOamcellType);
      }
      if (AtmAalOamcellTypeFm != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(AtmAalOamcellTypeFm);
      }
      if (AtmAalOamcellTypePm != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(AtmAalOamcellTypePm);
      }
      if (AtmAalOamcellTypeAd != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(AtmAalOamcellTypeAd);
      }
      if (AtmAalOamcellTypeFt != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(AtmAalOamcellTypeFt);
      }
      if (AtmAalOamcellFuncSpec.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteBytes(AtmAalOamcellFuncSpec);
      }
      if (AtmAalOamcellCrc != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(AtmAalOamcellCrc);
      }
      if (AtmPadding.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteBytes(AtmPadding);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AtmAal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal);
      }
      if (AtmGFC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmGFC);
      }
      if (AtmVpi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmVpi);
      }
      if (AtmVci != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmVci);
      }
      if (AtmCid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmCid);
      }
      if (AtmReserved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AtmReserved);
      }
      if (AtmLeClientClient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeClientClient);
      }
      if (AtmLanDestinationTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLanDestinationTag);
      }
      if (AtmLanDestinationMac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AtmLanDestinationMac);
      }
      if (AtmLeControlTlvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlTlvType);
      }
      if (AtmLeControlTlvLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlTlvLength);
      }
      if (AtmLanDestinationRouteDesc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLanDestinationRouteDesc);
      }
      if (AtmLanDestinationLanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLanDestinationLanId);
      }
      if (AtmLanDestinationBridgeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtmLanDestinationBridgeNum);
      }
      if (AtmSourceAtm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AtmSourceAtm);
      }
      if (AtmTargetAtm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmTargetAtm);
      }
      if (AtmLeConfigureJoinFrameLanType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeConfigureJoinFrameLanType);
      }
      if (AtmLeConfigureJoinFrameMaxFrameSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeConfigureJoinFrameMaxFrameSize);
      }
      if (AtmLeConfigureJoinFrameNumTlvs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeConfigureJoinFrameNumTlvs);
      }
      if (AtmLeConfigureJoinFrameElanNameSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeConfigureJoinFrameElanNameSize);
      }
      if (AtmLeRegistrationFrameNumTlvs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeRegistrationFrameNumTlvs);
      }
      if (AtmLeArpFrameNumTlvs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeArpFrameNumTlvs);
      }
      if (AtmLeVerifyFrameNumTlvs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeVerifyFrameNumTlvs);
      }
      if (AtmLeConfigureJoinFrameElanName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmLeConfigureJoinFrameElanName);
      }
      if (AtmLeControlMarker != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlMarker);
      }
      if (AtmLeControlProtocol != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlProtocol);
      }
      if (AtmLeControlVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlVersion);
      }
      if (AtmLeControlOpcode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlOpcode);
      }
      if (AtmLeControlStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlStatus);
      }
      if (AtmLeControlTransactionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlTransactionId);
      }
      if (AtmLeControlRequesterLecid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlRequesterLecid);
      }
      if (AtmLeControlFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmLeControlFlag);
      }
      if (AtmLeControlFlagV2Capable != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagSelectiveMulticast != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagV2Required != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagFlagProxy != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagExcludeExplorerFrames != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagAddress != false) {
        size += 2 + 1;
      }
      if (AtmLeControlFlagTopologyChange != false) {
        size += 2 + 1;
      }
      if (AtmTrafficType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmTrafficType);
      }
      if (AtmTrafficVcmx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmTrafficVcmx);
      }
      if (AtmTrafficLane != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmTrafficLane);
      }
      if (AtmTrafficIpsilon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmTrafficIpsilon);
      }
      if (AtmCells != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmCells);
      }
      if (AtmHfAtmAal5TUu != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmHfAtmAal5TUu);
      }
      if (AtmHfAtmAal5TCpi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmHfAtmAal5TCpi);
      }
      if (AtmAal5TLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal5TLen);
      }
      if (AtmAal5TCrc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal5TCrc);
      }
      if (AtmPayloadType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmPayloadType);
      }
      if (AtmCellLossPriority != false) {
        size += 2 + 1;
      }
      if (AtmHeaderErrorCheck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmHeaderErrorCheck);
      }
      if (AtmChannel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmChannel);
      }
      if (AtmAa1Csi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAa1Csi);
      }
      if (AtmAa1SeqCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAa1SeqCount);
      }
      if (AtmAa1Crc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAa1Crc);
      }
      if (AtmAa1Parity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAa1Parity);
      }
      if (AtmAa1Payload.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmAa1Payload);
      }
      if (AtmAal34SegType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal34SegType);
      }
      if (AtmAal34SeqNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal34SeqNum);
      }
      if (AtmAal34MultiplexId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal34MultiplexId);
      }
      if (AtmAal34Information.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmAal34Information);
      }
      if (AtmAal34LengthIndicator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal34LengthIndicator);
      }
      if (AtmAal34Crc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAal34Crc);
      }
      if (AtmAalOamcellType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellType);
      }
      if (AtmAalOamcellTypeFm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellTypeFm);
      }
      if (AtmAalOamcellTypePm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellTypePm);
      }
      if (AtmAalOamcellTypeAd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellTypeAd);
      }
      if (AtmAalOamcellTypeFt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellTypeFt);
      }
      if (AtmAalOamcellFuncSpec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmAalOamcellFuncSpec);
      }
      if (AtmAalOamcellCrc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtmAalOamcellCrc);
      }
      if (AtmPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AtmPadding);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Atm other) {
      if (other == null) {
        return;
      }
      if (other.AtmAal != 0) {
        AtmAal = other.AtmAal;
      }
      if (other.AtmGFC != 0) {
        AtmGFC = other.AtmGFC;
      }
      if (other.AtmVpi != 0) {
        AtmVpi = other.AtmVpi;
      }
      if (other.AtmVci != 0) {
        AtmVci = other.AtmVci;
      }
      if (other.AtmCid != 0) {
        AtmCid = other.AtmCid;
      }
      if (other.AtmReserved.Length != 0) {
        AtmReserved = other.AtmReserved;
      }
      if (other.AtmLeClientClient != 0) {
        AtmLeClientClient = other.AtmLeClientClient;
      }
      if (other.AtmLanDestinationTag != 0) {
        AtmLanDestinationTag = other.AtmLanDestinationTag;
      }
      if (other.AtmLanDestinationMac.Length != 0) {
        AtmLanDestinationMac = other.AtmLanDestinationMac;
      }
      if (other.AtmLeControlTlvType != 0) {
        AtmLeControlTlvType = other.AtmLeControlTlvType;
      }
      if (other.AtmLeControlTlvLength != 0) {
        AtmLeControlTlvLength = other.AtmLeControlTlvLength;
      }
      if (other.AtmLanDestinationRouteDesc != 0) {
        AtmLanDestinationRouteDesc = other.AtmLanDestinationRouteDesc;
      }
      if (other.AtmLanDestinationLanId != 0) {
        AtmLanDestinationLanId = other.AtmLanDestinationLanId;
      }
      if (other.AtmLanDestinationBridgeNum != 0) {
        AtmLanDestinationBridgeNum = other.AtmLanDestinationBridgeNum;
      }
      if (other.AtmSourceAtm.Length != 0) {
        AtmSourceAtm = other.AtmSourceAtm;
      }
      if (other.AtmTargetAtm.Length != 0) {
        AtmTargetAtm = other.AtmTargetAtm;
      }
      if (other.AtmLeConfigureJoinFrameLanType != 0) {
        AtmLeConfigureJoinFrameLanType = other.AtmLeConfigureJoinFrameLanType;
      }
      if (other.AtmLeConfigureJoinFrameMaxFrameSize != 0) {
        AtmLeConfigureJoinFrameMaxFrameSize = other.AtmLeConfigureJoinFrameMaxFrameSize;
      }
      if (other.AtmLeConfigureJoinFrameNumTlvs != 0) {
        AtmLeConfigureJoinFrameNumTlvs = other.AtmLeConfigureJoinFrameNumTlvs;
      }
      if (other.AtmLeConfigureJoinFrameElanNameSize != 0) {
        AtmLeConfigureJoinFrameElanNameSize = other.AtmLeConfigureJoinFrameElanNameSize;
      }
      if (other.AtmLeRegistrationFrameNumTlvs != 0) {
        AtmLeRegistrationFrameNumTlvs = other.AtmLeRegistrationFrameNumTlvs;
      }
      if (other.AtmLeArpFrameNumTlvs != 0) {
        AtmLeArpFrameNumTlvs = other.AtmLeArpFrameNumTlvs;
      }
      if (other.AtmLeVerifyFrameNumTlvs != 0) {
        AtmLeVerifyFrameNumTlvs = other.AtmLeVerifyFrameNumTlvs;
      }
      if (other.AtmLeConfigureJoinFrameElanName.Length != 0) {
        AtmLeConfigureJoinFrameElanName = other.AtmLeConfigureJoinFrameElanName;
      }
      if (other.AtmLeControlMarker != 0) {
        AtmLeControlMarker = other.AtmLeControlMarker;
      }
      if (other.AtmLeControlProtocol != 0) {
        AtmLeControlProtocol = other.AtmLeControlProtocol;
      }
      if (other.AtmLeControlVersion != 0) {
        AtmLeControlVersion = other.AtmLeControlVersion;
      }
      if (other.AtmLeControlOpcode != 0) {
        AtmLeControlOpcode = other.AtmLeControlOpcode;
      }
      if (other.AtmLeControlStatus != 0) {
        AtmLeControlStatus = other.AtmLeControlStatus;
      }
      if (other.AtmLeControlTransactionId != 0) {
        AtmLeControlTransactionId = other.AtmLeControlTransactionId;
      }
      if (other.AtmLeControlRequesterLecid != 0) {
        AtmLeControlRequesterLecid = other.AtmLeControlRequesterLecid;
      }
      if (other.AtmLeControlFlag != 0) {
        AtmLeControlFlag = other.AtmLeControlFlag;
      }
      if (other.AtmLeControlFlagV2Capable != false) {
        AtmLeControlFlagV2Capable = other.AtmLeControlFlagV2Capable;
      }
      if (other.AtmLeControlFlagSelectiveMulticast != false) {
        AtmLeControlFlagSelectiveMulticast = other.AtmLeControlFlagSelectiveMulticast;
      }
      if (other.AtmLeControlFlagV2Required != false) {
        AtmLeControlFlagV2Required = other.AtmLeControlFlagV2Required;
      }
      if (other.AtmLeControlFlagFlagProxy != false) {
        AtmLeControlFlagFlagProxy = other.AtmLeControlFlagFlagProxy;
      }
      if (other.AtmLeControlFlagExcludeExplorerFrames != false) {
        AtmLeControlFlagExcludeExplorerFrames = other.AtmLeControlFlagExcludeExplorerFrames;
      }
      if (other.AtmLeControlFlagAddress != false) {
        AtmLeControlFlagAddress = other.AtmLeControlFlagAddress;
      }
      if (other.AtmLeControlFlagTopologyChange != false) {
        AtmLeControlFlagTopologyChange = other.AtmLeControlFlagTopologyChange;
      }
      if (other.AtmTrafficType != 0) {
        AtmTrafficType = other.AtmTrafficType;
      }
      if (other.AtmTrafficVcmx != 0) {
        AtmTrafficVcmx = other.AtmTrafficVcmx;
      }
      if (other.AtmTrafficLane != 0) {
        AtmTrafficLane = other.AtmTrafficLane;
      }
      if (other.AtmTrafficIpsilon != 0) {
        AtmTrafficIpsilon = other.AtmTrafficIpsilon;
      }
      if (other.AtmCells != 0) {
        AtmCells = other.AtmCells;
      }
      if (other.AtmHfAtmAal5TUu != 0) {
        AtmHfAtmAal5TUu = other.AtmHfAtmAal5TUu;
      }
      if (other.AtmHfAtmAal5TCpi != 0) {
        AtmHfAtmAal5TCpi = other.AtmHfAtmAal5TCpi;
      }
      if (other.AtmAal5TLen != 0) {
        AtmAal5TLen = other.AtmAal5TLen;
      }
      if (other.AtmAal5TCrc != 0) {
        AtmAal5TCrc = other.AtmAal5TCrc;
      }
      if (other.AtmPayloadType != 0) {
        AtmPayloadType = other.AtmPayloadType;
      }
      if (other.AtmCellLossPriority != false) {
        AtmCellLossPriority = other.AtmCellLossPriority;
      }
      if (other.AtmHeaderErrorCheck != 0) {
        AtmHeaderErrorCheck = other.AtmHeaderErrorCheck;
      }
      if (other.AtmChannel != 0) {
        AtmChannel = other.AtmChannel;
      }
      if (other.AtmAa1Csi != 0) {
        AtmAa1Csi = other.AtmAa1Csi;
      }
      if (other.AtmAa1SeqCount != 0) {
        AtmAa1SeqCount = other.AtmAa1SeqCount;
      }
      if (other.AtmAa1Crc != 0) {
        AtmAa1Crc = other.AtmAa1Crc;
      }
      if (other.AtmAa1Parity != 0) {
        AtmAa1Parity = other.AtmAa1Parity;
      }
      if (other.AtmAa1Payload.Length != 0) {
        AtmAa1Payload = other.AtmAa1Payload;
      }
      if (other.AtmAal34SegType != 0) {
        AtmAal34SegType = other.AtmAal34SegType;
      }
      if (other.AtmAal34SeqNum != 0) {
        AtmAal34SeqNum = other.AtmAal34SeqNum;
      }
      if (other.AtmAal34MultiplexId != 0) {
        AtmAal34MultiplexId = other.AtmAal34MultiplexId;
      }
      if (other.AtmAal34Information.Length != 0) {
        AtmAal34Information = other.AtmAal34Information;
      }
      if (other.AtmAal34LengthIndicator != 0) {
        AtmAal34LengthIndicator = other.AtmAal34LengthIndicator;
      }
      if (other.AtmAal34Crc != 0) {
        AtmAal34Crc = other.AtmAal34Crc;
      }
      if (other.AtmAalOamcellType != 0) {
        AtmAalOamcellType = other.AtmAalOamcellType;
      }
      if (other.AtmAalOamcellTypeFm != 0) {
        AtmAalOamcellTypeFm = other.AtmAalOamcellTypeFm;
      }
      if (other.AtmAalOamcellTypePm != 0) {
        AtmAalOamcellTypePm = other.AtmAalOamcellTypePm;
      }
      if (other.AtmAalOamcellTypeAd != 0) {
        AtmAalOamcellTypeAd = other.AtmAalOamcellTypeAd;
      }
      if (other.AtmAalOamcellTypeFt != 0) {
        AtmAalOamcellTypeFt = other.AtmAalOamcellTypeFt;
      }
      if (other.AtmAalOamcellFuncSpec.Length != 0) {
        AtmAalOamcellFuncSpec = other.AtmAalOamcellFuncSpec;
      }
      if (other.AtmAalOamcellCrc != 0) {
        AtmAalOamcellCrc = other.AtmAalOamcellCrc;
      }
      if (other.AtmPadding.Length != 0) {
        AtmPadding = other.AtmPadding;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AtmAal = input.ReadUInt32();
            break;
          }
          case 16: {
            AtmGFC = input.ReadUInt32();
            break;
          }
          case 24: {
            AtmVpi = input.ReadUInt32();
            break;
          }
          case 32: {
            AtmVci = input.ReadUInt32();
            break;
          }
          case 40: {
            AtmCid = input.ReadUInt32();
            break;
          }
          case 50: {
            AtmReserved = input.ReadBytes();
            break;
          }
          case 56: {
            AtmLeClientClient = input.ReadUInt32();
            break;
          }
          case 64: {
            AtmLanDestinationTag = input.ReadUInt32();
            break;
          }
          case 74: {
            AtmLanDestinationMac = input.ReadBytes();
            break;
          }
          case 80: {
            AtmLeControlTlvType = input.ReadUInt32();
            break;
          }
          case 88: {
            AtmLeControlTlvLength = input.ReadUInt32();
            break;
          }
          case 96: {
            AtmLanDestinationRouteDesc = input.ReadUInt32();
            break;
          }
          case 104: {
            AtmLanDestinationLanId = input.ReadUInt32();
            break;
          }
          case 112: {
            AtmLanDestinationBridgeNum = input.ReadUInt32();
            break;
          }
          case 122: {
            AtmSourceAtm = input.ReadBytes();
            break;
          }
          case 130: {
            AtmTargetAtm = input.ReadBytes();
            break;
          }
          case 136: {
            AtmLeConfigureJoinFrameLanType = input.ReadUInt32();
            break;
          }
          case 144: {
            AtmLeConfigureJoinFrameMaxFrameSize = input.ReadUInt32();
            break;
          }
          case 152: {
            AtmLeConfigureJoinFrameNumTlvs = input.ReadUInt32();
            break;
          }
          case 160: {
            AtmLeConfigureJoinFrameElanNameSize = input.ReadUInt32();
            break;
          }
          case 168: {
            AtmLeRegistrationFrameNumTlvs = input.ReadUInt32();
            break;
          }
          case 176: {
            AtmLeArpFrameNumTlvs = input.ReadUInt32();
            break;
          }
          case 184: {
            AtmLeVerifyFrameNumTlvs = input.ReadUInt32();
            break;
          }
          case 194: {
            AtmLeConfigureJoinFrameElanName = input.ReadBytes();
            break;
          }
          case 200: {
            AtmLeControlMarker = input.ReadUInt32();
            break;
          }
          case 208: {
            AtmLeControlProtocol = input.ReadUInt32();
            break;
          }
          case 216: {
            AtmLeControlVersion = input.ReadUInt32();
            break;
          }
          case 224: {
            AtmLeControlOpcode = input.ReadUInt32();
            break;
          }
          case 232: {
            AtmLeControlStatus = input.ReadUInt32();
            break;
          }
          case 240: {
            AtmLeControlTransactionId = input.ReadUInt32();
            break;
          }
          case 248: {
            AtmLeControlRequesterLecid = input.ReadUInt32();
            break;
          }
          case 256: {
            AtmLeControlFlag = input.ReadUInt32();
            break;
          }
          case 264: {
            AtmLeControlFlagV2Capable = input.ReadBool();
            break;
          }
          case 272: {
            AtmLeControlFlagSelectiveMulticast = input.ReadBool();
            break;
          }
          case 280: {
            AtmLeControlFlagV2Required = input.ReadBool();
            break;
          }
          case 288: {
            AtmLeControlFlagFlagProxy = input.ReadBool();
            break;
          }
          case 296: {
            AtmLeControlFlagExcludeExplorerFrames = input.ReadBool();
            break;
          }
          case 304: {
            AtmLeControlFlagAddress = input.ReadBool();
            break;
          }
          case 312: {
            AtmLeControlFlagTopologyChange = input.ReadBool();
            break;
          }
          case 320: {
            AtmTrafficType = input.ReadUInt32();
            break;
          }
          case 328: {
            AtmTrafficVcmx = input.ReadUInt32();
            break;
          }
          case 336: {
            AtmTrafficLane = input.ReadUInt32();
            break;
          }
          case 344: {
            AtmTrafficIpsilon = input.ReadUInt32();
            break;
          }
          case 352: {
            AtmCells = input.ReadUInt32();
            break;
          }
          case 360: {
            AtmHfAtmAal5TUu = input.ReadUInt32();
            break;
          }
          case 368: {
            AtmHfAtmAal5TCpi = input.ReadUInt32();
            break;
          }
          case 376: {
            AtmAal5TLen = input.ReadUInt32();
            break;
          }
          case 384: {
            AtmAal5TCrc = input.ReadUInt32();
            break;
          }
          case 392: {
            AtmPayloadType = input.ReadUInt32();
            break;
          }
          case 400: {
            AtmCellLossPriority = input.ReadBool();
            break;
          }
          case 408: {
            AtmHeaderErrorCheck = input.ReadUInt32();
            break;
          }
          case 416: {
            AtmChannel = input.ReadUInt32();
            break;
          }
          case 424: {
            AtmAa1Csi = input.ReadUInt32();
            break;
          }
          case 432: {
            AtmAa1SeqCount = input.ReadUInt32();
            break;
          }
          case 440: {
            AtmAa1Crc = input.ReadUInt32();
            break;
          }
          case 448: {
            AtmAa1Parity = input.ReadUInt32();
            break;
          }
          case 458: {
            AtmAa1Payload = input.ReadBytes();
            break;
          }
          case 464: {
            AtmAal34SegType = input.ReadUInt32();
            break;
          }
          case 472: {
            AtmAal34SeqNum = input.ReadUInt32();
            break;
          }
          case 480: {
            AtmAal34MultiplexId = input.ReadUInt32();
            break;
          }
          case 490: {
            AtmAal34Information = input.ReadBytes();
            break;
          }
          case 496: {
            AtmAal34LengthIndicator = input.ReadUInt32();
            break;
          }
          case 504: {
            AtmAal34Crc = input.ReadUInt32();
            break;
          }
          case 512: {
            AtmAalOamcellType = input.ReadUInt32();
            break;
          }
          case 520: {
            AtmAalOamcellTypeFm = input.ReadUInt32();
            break;
          }
          case 528: {
            AtmAalOamcellTypePm = input.ReadUInt32();
            break;
          }
          case 536: {
            AtmAalOamcellTypeAd = input.ReadUInt32();
            break;
          }
          case 544: {
            AtmAalOamcellTypeFt = input.ReadUInt32();
            break;
          }
          case 554: {
            AtmAalOamcellFuncSpec = input.ReadBytes();
            break;
          }
          case 560: {
            AtmAalOamcellCrc = input.ReadUInt32();
            break;
          }
          case 570: {
            AtmPadding = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
