// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-http.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-http.proto</summary>
  public static partial class PacketHttpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-http.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketHttpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYWNrZXQtaHR0cC5wcm90bxIRTmR4LkRlY29kZXJzLkNvcmUigw4KBEh0",
            "dHASGAoQSHR0cE5vdGlmaWNhdGlvbhgBIAEoCBIUCgxIdHRwUmVzcG9uc2UY",
            "AiABKAgSEwoLSHR0cFJlcXVlc3QYAyABKAgSGgoSSHR0cFJlc3BvbnNlTnVt",
            "YmVyGAQgASgNEhkKEUh0dHBSZXF1ZXN0TnVtYmVyGAUgASgNEhUKDUh0dHBB",
            "dXRoYmFzaWMYBiABKAkSFgoOSHR0cEF1dGhjaXRyaXgYByABKAgSGgoSSHR0",
            "cEF1dGhjaXRyaXhVc2VyGAggASgJEhwKFEh0dHBBdXRoY2l0cml4RG9tYWlu",
            "GAkgASgJEh4KFkh0dHBBdXRoY2l0cml4UGFzc3dvcmQYCiABKAkSHQoVSHR0",
            "cEF1dGhjaXRyaXhTZXNzaW9uGAsgASgJEhkKEUh0dHBSZXF1ZXN0TWV0aG9k",
            "GAwgASgJEhYKDkh0dHBSZXF1ZXN0VXJpGA0gASgJEhoKEkh0dHBSZXF1ZXN0",
            "VXJpUGF0aBgOIAEoCRIbChNIdHRwUmVxdWVzdFVyaVF1ZXJ5GA8gASgJEiQK",
            "HEh0dHBSZXF1ZXN0VXJpUXVlcnlQYXJhbWV0ZXIYECABKAkSGgoSSHR0cFJl",
            "cXVlc3RWZXJzaW9uGBEgASgJEhsKE0h0dHBSZXNwb25zZVZlcnNpb24YEiAB",
            "KAkSGgoSSHR0cFJlcXVlc3RGdWxsVXJpGBMgASgJEhgKEEh0dHBSZXNwb25z",
            "ZUNvZGUYFCABKA0SHAoUSHR0cFJlc3BvbnNlQ29kZURlc2MYFSABKAkSGgoS",
            "SHR0cFJlc3BvbnNlUGhyYXNlGBYgASgJEhkKEUh0dHBBdXRob3JpemF0aW9u",
            "GBcgASgJEh0KFUh0dHBQcm94eUF1dGhlbnRpY2F0ZRgYIAEoCRIeChZIdHRw",
            "UHJveHlBdXRob3JpemF0aW9uGBkgASgJEhwKFEh0dHBQcm94eUNvbm5lY3RI",
            "b3N0GBogASgJEhwKFEh0dHBQcm94eUNvbm5lY3RQb3J0GBsgASgNEhsKE0h0",
            "dHBXd3dBdXRoZW50aWNhdGUYHCABKAkSFwoPSHR0cENvbnRlbnRUeXBlGB0g",
            "ASgJEh8KF0h0dHBDb250ZW50TGVuZ3RoSGVhZGVyGB4gASgJEhkKEUh0dHBD",
            "b250ZW50TGVuZ3RoGB8gASgEEhsKE0h0dHBDb250ZW50RW5jb2RpbmcYICAB",
            "KAkSHAoUSHR0cFRyYW5zZmVyRW5jb2RpbmcYISABKAkSEwoLSHR0cFVwZ3Jh",
            "ZGUYIiABKAkSFQoNSHR0cFVzZXJBZ2VudBgjIAEoCRIQCghIdHRwSG9zdBgk",
            "IAEoCRIWCg5IdHRwQ29ubmVjdGlvbhglIAEoCRISCgpIdHRwQ29va2llGCYg",
            "ASgJEhYKDkh0dHBDb29raWVQYWlyGCcgASgJEhIKCkh0dHBBY2NlcHQYKCAB",
            "KAkSEwoLSHR0cFJlZmVyZXIYKSABKAkSGgoSSHR0cEFjY2VwdExhbmd1YWdl",
            "GCogASgJEhoKEkh0dHBBY2NlcHRFbmNvZGluZxgrIAEoCRIQCghIdHRwRGF0",
            "ZRgsIAEoCRIYChBIdHRwQ2FjaGVDb250cm9sGC0gASgJEhIKCkh0dHBTZXJ2",
            "ZXIYLiABKAkSFAoMSHR0cExvY2F0aW9uGC8gASgJEh4KFkh0dHBTZWNXZWJz",
            "b2NrZXRBY2NlcHQYMCABKAkSIgoaSHR0cFNlY1dlYnNvY2tldEV4dGVuc2lv",
            "bnMYMSABKAkSGwoTSHR0cFNlY1dlYnNvY2tldEtleRgyIAEoCRIgChhIdHRw",
            "U2VjV2Vic29ja2V0UHJvdG9jb2wYMyABKAkSHwoXSHR0cFNlY1dlYnNvY2tl",
            "dFZlcnNpb24YNCABKAkSFQoNSHR0cFNldENvb2tpZRg1IAEoCRIYChBIdHRw",
            "TGFzdE1vZGlmaWVkGDYgASgJEhkKEUh0dHBYRm9yd2FyZGVkRm9yGDcgASgJ",
            "EhUKDUh0dHBSZXF1ZXN0SW4YOCABKAMSFgoOSHR0cFJlc3BvbnNlSW4YOSAB",
            "KAMSGQoRSHR0cE5leHRSZXF1ZXN0SW4YOiABKAMSGgoSSHR0cE5leHRSZXNw",
            "b25zZUluGDsgASgDEhkKEUh0dHBQcmV2UmVxdWVzdEluGDwgASgDEhoKEkh0",
            "dHBQcmV2UmVzcG9uc2VJbhg9IAEoAxIQCghIdHRwVGltZRg+IAEoAxIeChZI",
            "dHRwQ2h1bmtlZFRyYWlsZXJQYXJ0GD8gASgJEhkKEUh0dHBDaHVua0JvdW5k",
            "YXJ5GEAgASgMEhUKDUh0dHBDaHVua1NpemUYQSABKA0SFAoMSHR0cEZpbGVE",
            "YXRhGEIgASgJEhkKEUh0dHBVbmtub3duSGVhZGVyGEMgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Http), global::Ndx.Decoders.Core.Http.Parser, new[]{ "HttpNotification", "HttpResponse", "HttpRequest", "HttpResponseNumber", "HttpRequestNumber", "HttpAuthbasic", "HttpAuthcitrix", "HttpAuthcitrixUser", "HttpAuthcitrixDomain", "HttpAuthcitrixPassword", "HttpAuthcitrixSession", "HttpRequestMethod", "HttpRequestUri", "HttpRequestUriPath", "HttpRequestUriQuery", "HttpRequestUriQueryParameter", "HttpRequestVersion", "HttpResponseVersion", "HttpRequestFullUri", "HttpResponseCode", "HttpResponseCodeDesc", "HttpResponsePhrase", "HttpAuthorization", "HttpProxyAuthenticate", "HttpProxyAuthorization", "HttpProxyConnectHost", "HttpProxyConnectPort", "HttpWwwAuthenticate", "HttpContentType", "HttpContentLengthHeader", "HttpContentLength", "HttpContentEncoding", "HttpTransferEncoding", "HttpUpgrade", "HttpUserAgent", "HttpHost", "HttpConnection", "HttpCookie", "HttpCookiePair", "HttpAccept", "HttpReferer", "HttpAcceptLanguage", "HttpAcceptEncoding", "HttpDate", "HttpCacheControl", "HttpServer", "HttpLocation", "HttpSecWebsocketAccept", "HttpSecWebsocketExtensions", "HttpSecWebsocketKey", "HttpSecWebsocketProtocol", "HttpSecWebsocketVersion", "HttpSetCookie", "HttpLastModified", "HttpXForwardedFor", "HttpRequestIn", "HttpResponseIn", "HttpNextRequestIn", "HttpNextResponseIn", "HttpPrevRequestIn", "HttpPrevResponseIn", "HttpTime", "HttpChunkedTrailerPart", "HttpChunkBoundary", "HttpChunkSize", "HttpFileData", "HttpUnknownHeader" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Http : pb::IMessage<Http> {
    private static readonly pb::MessageParser<Http> _parser = new pb::MessageParser<Http>(() => new Http());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Http> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketHttpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http(Http other) : this() {
      httpNotification_ = other.httpNotification_;
      httpResponse_ = other.httpResponse_;
      httpRequest_ = other.httpRequest_;
      httpResponseNumber_ = other.httpResponseNumber_;
      httpRequestNumber_ = other.httpRequestNumber_;
      httpAuthbasic_ = other.httpAuthbasic_;
      httpAuthcitrix_ = other.httpAuthcitrix_;
      httpAuthcitrixUser_ = other.httpAuthcitrixUser_;
      httpAuthcitrixDomain_ = other.httpAuthcitrixDomain_;
      httpAuthcitrixPassword_ = other.httpAuthcitrixPassword_;
      httpAuthcitrixSession_ = other.httpAuthcitrixSession_;
      httpRequestMethod_ = other.httpRequestMethod_;
      httpRequestUri_ = other.httpRequestUri_;
      httpRequestUriPath_ = other.httpRequestUriPath_;
      httpRequestUriQuery_ = other.httpRequestUriQuery_;
      httpRequestUriQueryParameter_ = other.httpRequestUriQueryParameter_;
      httpRequestVersion_ = other.httpRequestVersion_;
      httpResponseVersion_ = other.httpResponseVersion_;
      httpRequestFullUri_ = other.httpRequestFullUri_;
      httpResponseCode_ = other.httpResponseCode_;
      httpResponseCodeDesc_ = other.httpResponseCodeDesc_;
      httpResponsePhrase_ = other.httpResponsePhrase_;
      httpAuthorization_ = other.httpAuthorization_;
      httpProxyAuthenticate_ = other.httpProxyAuthenticate_;
      httpProxyAuthorization_ = other.httpProxyAuthorization_;
      httpProxyConnectHost_ = other.httpProxyConnectHost_;
      httpProxyConnectPort_ = other.httpProxyConnectPort_;
      httpWwwAuthenticate_ = other.httpWwwAuthenticate_;
      httpContentType_ = other.httpContentType_;
      httpContentLengthHeader_ = other.httpContentLengthHeader_;
      httpContentLength_ = other.httpContentLength_;
      httpContentEncoding_ = other.httpContentEncoding_;
      httpTransferEncoding_ = other.httpTransferEncoding_;
      httpUpgrade_ = other.httpUpgrade_;
      httpUserAgent_ = other.httpUserAgent_;
      httpHost_ = other.httpHost_;
      httpConnection_ = other.httpConnection_;
      httpCookie_ = other.httpCookie_;
      httpCookiePair_ = other.httpCookiePair_;
      httpAccept_ = other.httpAccept_;
      httpReferer_ = other.httpReferer_;
      httpAcceptLanguage_ = other.httpAcceptLanguage_;
      httpAcceptEncoding_ = other.httpAcceptEncoding_;
      httpDate_ = other.httpDate_;
      httpCacheControl_ = other.httpCacheControl_;
      httpServer_ = other.httpServer_;
      httpLocation_ = other.httpLocation_;
      httpSecWebsocketAccept_ = other.httpSecWebsocketAccept_;
      httpSecWebsocketExtensions_ = other.httpSecWebsocketExtensions_;
      httpSecWebsocketKey_ = other.httpSecWebsocketKey_;
      httpSecWebsocketProtocol_ = other.httpSecWebsocketProtocol_;
      httpSecWebsocketVersion_ = other.httpSecWebsocketVersion_;
      httpSetCookie_ = other.httpSetCookie_;
      httpLastModified_ = other.httpLastModified_;
      httpXForwardedFor_ = other.httpXForwardedFor_;
      httpRequestIn_ = other.httpRequestIn_;
      httpResponseIn_ = other.httpResponseIn_;
      httpNextRequestIn_ = other.httpNextRequestIn_;
      httpNextResponseIn_ = other.httpNextResponseIn_;
      httpPrevRequestIn_ = other.httpPrevRequestIn_;
      httpPrevResponseIn_ = other.httpPrevResponseIn_;
      httpTime_ = other.httpTime_;
      httpChunkedTrailerPart_ = other.httpChunkedTrailerPart_;
      httpChunkBoundary_ = other.httpChunkBoundary_;
      httpChunkSize_ = other.httpChunkSize_;
      httpFileData_ = other.httpFileData_;
      httpUnknownHeader_ = other.httpUnknownHeader_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http Clone() {
      return new Http(this);
    }

    /// <summary>Field number for the "HttpNotification" field.</summary>
    public const int HttpNotificationFieldNumber = 1;
    private bool httpNotification_;
    /// <summary>
    /// Notification ('http_http_notification')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpNotification {
      get { return httpNotification_; }
      set {
        httpNotification_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponse" field.</summary>
    public const int HttpResponseFieldNumber = 2;
    private bool httpResponse_;
    /// <summary>
    /// Response ('http_http_response')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpResponse {
      get { return httpResponse_; }
      set {
        httpResponse_ = value;
      }
    }

    /// <summary>Field number for the "HttpRequest" field.</summary>
    public const int HttpRequestFieldNumber = 3;
    private bool httpRequest_;
    /// <summary>
    /// Request ('http_http_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpRequest {
      get { return httpRequest_; }
      set {
        httpRequest_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponseNumber" field.</summary>
    public const int HttpResponseNumberFieldNumber = 4;
    private uint httpResponseNumber_;
    /// <summary>
    /// Response number ('http_http_response_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpResponseNumber {
      get { return httpResponseNumber_; }
      set {
        httpResponseNumber_ = value;
      }
    }

    /// <summary>Field number for the "HttpRequestNumber" field.</summary>
    public const int HttpRequestNumberFieldNumber = 5;
    private uint httpRequestNumber_;
    /// <summary>
    /// Request number ('http_http_request_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpRequestNumber {
      get { return httpRequestNumber_; }
      set {
        httpRequestNumber_ = value;
      }
    }

    /// <summary>Field number for the "HttpAuthbasic" field.</summary>
    public const int HttpAuthbasicFieldNumber = 6;
    private string httpAuthbasic_ = "";
    /// <summary>
    /// Credentials ('http_http_authbasic')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthbasic {
      get { return httpAuthbasic_; }
      set {
        httpAuthbasic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthcitrix" field.</summary>
    public const int HttpAuthcitrixFieldNumber = 7;
    private bool httpAuthcitrix_;
    /// <summary>
    /// Citrix AG Auth ('http_http_authcitrix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpAuthcitrix {
      get { return httpAuthcitrix_; }
      set {
        httpAuthcitrix_ = value;
      }
    }

    /// <summary>Field number for the "HttpAuthcitrixUser" field.</summary>
    public const int HttpAuthcitrixUserFieldNumber = 8;
    private string httpAuthcitrixUser_ = "";
    /// <summary>
    /// Citrix AG Username ('http_authcitrix_http_authcitrix_user')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthcitrixUser {
      get { return httpAuthcitrixUser_; }
      set {
        httpAuthcitrixUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthcitrixDomain" field.</summary>
    public const int HttpAuthcitrixDomainFieldNumber = 9;
    private string httpAuthcitrixDomain_ = "";
    /// <summary>
    /// Citrix AG Domain ('http_authcitrix_http_authcitrix_domain')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthcitrixDomain {
      get { return httpAuthcitrixDomain_; }
      set {
        httpAuthcitrixDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthcitrixPassword" field.</summary>
    public const int HttpAuthcitrixPasswordFieldNumber = 10;
    private string httpAuthcitrixPassword_ = "";
    /// <summary>
    /// Citrix AG Password ('http_authcitrix_http_authcitrix_password')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthcitrixPassword {
      get { return httpAuthcitrixPassword_; }
      set {
        httpAuthcitrixPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthcitrixSession" field.</summary>
    public const int HttpAuthcitrixSessionFieldNumber = 11;
    private string httpAuthcitrixSession_ = "";
    /// <summary>
    /// Citrix AG Session ID ('http_authcitrix_http_authcitrix_session')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthcitrixSession {
      get { return httpAuthcitrixSession_; }
      set {
        httpAuthcitrixSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestMethod" field.</summary>
    public const int HttpRequestMethodFieldNumber = 12;
    private string httpRequestMethod_ = "";
    /// <summary>
    /// Request Method ('text_http_request_method')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestMethod {
      get { return httpRequestMethod_; }
      set {
        httpRequestMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestUri" field.</summary>
    public const int HttpRequestUriFieldNumber = 13;
    private string httpRequestUri_ = "";
    /// <summary>
    /// Request URI ('text_http_request_uri')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestUri {
      get { return httpRequestUri_; }
      set {
        httpRequestUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestUriPath" field.</summary>
    public const int HttpRequestUriPathFieldNumber = 14;
    private string httpRequestUriPath_ = "";
    /// <summary>
    /// Request URI Path ('http_request_uri_http_request_uri_path')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestUriPath {
      get { return httpRequestUriPath_; }
      set {
        httpRequestUriPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestUriQuery" field.</summary>
    public const int HttpRequestUriQueryFieldNumber = 15;
    private string httpRequestUriQuery_ = "";
    /// <summary>
    /// Request URI Query ('http_request_uri_http_request_uri_query')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestUriQuery {
      get { return httpRequestUriQuery_; }
      set {
        httpRequestUriQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestUriQueryParameter" field.</summary>
    public const int HttpRequestUriQueryParameterFieldNumber = 16;
    private string httpRequestUriQueryParameter_ = "";
    /// <summary>
    /// Request URI Query Parameter ('http_request_uri_query_http_request_uri_query_parameter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestUriQueryParameter {
      get { return httpRequestUriQueryParameter_; }
      set {
        httpRequestUriQueryParameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestVersion" field.</summary>
    public const int HttpRequestVersionFieldNumber = 17;
    private string httpRequestVersion_ = "";
    /// <summary>
    /// Request Version ('text_http_request_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestVersion {
      get { return httpRequestVersion_; }
      set {
        httpRequestVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpResponseVersion" field.</summary>
    public const int HttpResponseVersionFieldNumber = 18;
    private string httpResponseVersion_ = "";
    /// <summary>
    /// Response Version ('text_http_response_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpResponseVersion {
      get { return httpResponseVersion_; }
      set {
        httpResponseVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestFullUri" field.</summary>
    public const int HttpRequestFullUriFieldNumber = 19;
    private string httpRequestFullUri_ = "";
    /// <summary>
    /// Full request URI ('http_http_request_full_uri')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestFullUri {
      get { return httpRequestFullUri_; }
      set {
        httpRequestFullUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpResponseCode" field.</summary>
    public const int HttpResponseCodeFieldNumber = 20;
    private uint httpResponseCode_;
    /// <summary>
    /// Status Code ('text_http_response_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpResponseCode {
      get { return httpResponseCode_; }
      set {
        httpResponseCode_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponseCodeDesc" field.</summary>
    public const int HttpResponseCodeDescFieldNumber = 21;
    private string httpResponseCodeDesc_ = "";
    /// <summary>
    /// Status Code Description ('text_http_response_code_desc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpResponseCodeDesc {
      get { return httpResponseCodeDesc_; }
      set {
        httpResponseCodeDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpResponsePhrase" field.</summary>
    public const int HttpResponsePhraseFieldNumber = 22;
    private string httpResponsePhrase_ = "";
    /// <summary>
    /// Response Phrase ('text_http_response_phrase')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpResponsePhrase {
      get { return httpResponsePhrase_; }
      set {
        httpResponsePhrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthorization" field.</summary>
    public const int HttpAuthorizationFieldNumber = 23;
    private string httpAuthorization_ = "";
    /// <summary>
    /// Authorization ('http_http_authorization')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthorization {
      get { return httpAuthorization_; }
      set {
        httpAuthorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyAuthenticate" field.</summary>
    public const int HttpProxyAuthenticateFieldNumber = 24;
    private string httpProxyAuthenticate_ = "";
    /// <summary>
    /// Proxy-Authenticate ('http_http_proxy_authenticate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyAuthenticate {
      get { return httpProxyAuthenticate_; }
      set {
        httpProxyAuthenticate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyAuthorization" field.</summary>
    public const int HttpProxyAuthorizationFieldNumber = 25;
    private string httpProxyAuthorization_ = "";
    /// <summary>
    /// Proxy-Authorization ('http_http_proxy_authorization')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyAuthorization {
      get { return httpProxyAuthorization_; }
      set {
        httpProxyAuthorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyConnectHost" field.</summary>
    public const int HttpProxyConnectHostFieldNumber = 26;
    private string httpProxyConnectHost_ = "";
    /// <summary>
    /// Proxy-Connect-Hostname ('http_http_proxy_connect_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyConnectHost {
      get { return httpProxyConnectHost_; }
      set {
        httpProxyConnectHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyConnectPort" field.</summary>
    public const int HttpProxyConnectPortFieldNumber = 27;
    private uint httpProxyConnectPort_;
    /// <summary>
    /// Proxy-Connect-Port ('http_http_proxy_connect_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpProxyConnectPort {
      get { return httpProxyConnectPort_; }
      set {
        httpProxyConnectPort_ = value;
      }
    }

    /// <summary>Field number for the "HttpWwwAuthenticate" field.</summary>
    public const int HttpWwwAuthenticateFieldNumber = 28;
    private string httpWwwAuthenticate_ = "";
    /// <summary>
    /// WWW-Authenticate ('http_http_www_authenticate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpWwwAuthenticate {
      get { return httpWwwAuthenticate_; }
      set {
        httpWwwAuthenticate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentType" field.</summary>
    public const int HttpContentTypeFieldNumber = 29;
    private string httpContentType_ = "";
    /// <summary>
    /// Content-Type ('http_http_content_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentType {
      get { return httpContentType_; }
      set {
        httpContentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentLengthHeader" field.</summary>
    public const int HttpContentLengthHeaderFieldNumber = 30;
    private string httpContentLengthHeader_ = "";
    /// <summary>
    /// Content-Length ('http_http_content_length_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentLengthHeader {
      get { return httpContentLengthHeader_; }
      set {
        httpContentLengthHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentLength" field.</summary>
    public const int HttpContentLengthFieldNumber = 31;
    private ulong httpContentLength_;
    /// <summary>
    /// Content length ('http_http_content_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HttpContentLength {
      get { return httpContentLength_; }
      set {
        httpContentLength_ = value;
      }
    }

    /// <summary>Field number for the "HttpContentEncoding" field.</summary>
    public const int HttpContentEncodingFieldNumber = 32;
    private string httpContentEncoding_ = "";
    /// <summary>
    /// Content-Encoding ('http_http_content_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentEncoding {
      get { return httpContentEncoding_; }
      set {
        httpContentEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpTransferEncoding" field.</summary>
    public const int HttpTransferEncodingFieldNumber = 33;
    private string httpTransferEncoding_ = "";
    /// <summary>
    /// Transfer-Encoding ('http_http_transfer_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpTransferEncoding {
      get { return httpTransferEncoding_; }
      set {
        httpTransferEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpUpgrade" field.</summary>
    public const int HttpUpgradeFieldNumber = 34;
    private string httpUpgrade_ = "";
    /// <summary>
    /// Upgrade ('http_http_upgrade')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpUpgrade {
      get { return httpUpgrade_; }
      set {
        httpUpgrade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpUserAgent" field.</summary>
    public const int HttpUserAgentFieldNumber = 35;
    private string httpUserAgent_ = "";
    /// <summary>
    /// User-Agent ('http_http_user_agent')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpUserAgent {
      get { return httpUserAgent_; }
      set {
        httpUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpHost" field.</summary>
    public const int HttpHostFieldNumber = 36;
    private string httpHost_ = "";
    /// <summary>
    /// Host ('http_http_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpHost {
      get { return httpHost_; }
      set {
        httpHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpConnection" field.</summary>
    public const int HttpConnectionFieldNumber = 37;
    private string httpConnection_ = "";
    /// <summary>
    /// Connection ('http_http_connection')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpConnection {
      get { return httpConnection_; }
      set {
        httpConnection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCookie" field.</summary>
    public const int HttpCookieFieldNumber = 38;
    private string httpCookie_ = "";
    /// <summary>
    /// Cookie ('http_http_cookie')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCookie {
      get { return httpCookie_; }
      set {
        httpCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCookiePair" field.</summary>
    public const int HttpCookiePairFieldNumber = 39;
    private string httpCookiePair_ = "";
    /// <summary>
    /// Cookie pair ('http_http_cookie_pair')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCookiePair {
      get { return httpCookiePair_; }
      set {
        httpCookiePair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAccept" field.</summary>
    public const int HttpAcceptFieldNumber = 40;
    private string httpAccept_ = "";
    /// <summary>
    /// Accept ('http_http_accept')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAccept {
      get { return httpAccept_; }
      set {
        httpAccept_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpReferer" field.</summary>
    public const int HttpRefererFieldNumber = 41;
    private string httpReferer_ = "";
    /// <summary>
    /// Referer ('http_http_referer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpReferer {
      get { return httpReferer_; }
      set {
        httpReferer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAcceptLanguage" field.</summary>
    public const int HttpAcceptLanguageFieldNumber = 42;
    private string httpAcceptLanguage_ = "";
    /// <summary>
    /// Accept-Language ('http_http_accept_language')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAcceptLanguage {
      get { return httpAcceptLanguage_; }
      set {
        httpAcceptLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAcceptEncoding" field.</summary>
    public const int HttpAcceptEncodingFieldNumber = 43;
    private string httpAcceptEncoding_ = "";
    /// <summary>
    /// Accept Encoding ('http_http_accept_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAcceptEncoding {
      get { return httpAcceptEncoding_; }
      set {
        httpAcceptEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpDate" field.</summary>
    public const int HttpDateFieldNumber = 44;
    private string httpDate_ = "";
    /// <summary>
    /// Date ('http_http_date')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpDate {
      get { return httpDate_; }
      set {
        httpDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCacheControl" field.</summary>
    public const int HttpCacheControlFieldNumber = 45;
    private string httpCacheControl_ = "";
    /// <summary>
    /// Cache-Control ('http_http_cache_control')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCacheControl {
      get { return httpCacheControl_; }
      set {
        httpCacheControl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpServer" field.</summary>
    public const int HttpServerFieldNumber = 46;
    private string httpServer_ = "";
    /// <summary>
    /// Server ('http_http_server')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpServer {
      get { return httpServer_; }
      set {
        httpServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpLocation" field.</summary>
    public const int HttpLocationFieldNumber = 47;
    private string httpLocation_ = "";
    /// <summary>
    /// Location ('http_http_location')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpLocation {
      get { return httpLocation_; }
      set {
        httpLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSecWebsocketAccept" field.</summary>
    public const int HttpSecWebsocketAcceptFieldNumber = 48;
    private string httpSecWebsocketAccept_ = "";
    /// <summary>
    /// Sec-WebSocket-Accept ('http_http_sec_websocket_accept')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSecWebsocketAccept {
      get { return httpSecWebsocketAccept_; }
      set {
        httpSecWebsocketAccept_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSecWebsocketExtensions" field.</summary>
    public const int HttpSecWebsocketExtensionsFieldNumber = 49;
    private string httpSecWebsocketExtensions_ = "";
    /// <summary>
    /// Sec-WebSocket-Extensions ('http_http_sec_websocket_extensions')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSecWebsocketExtensions {
      get { return httpSecWebsocketExtensions_; }
      set {
        httpSecWebsocketExtensions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSecWebsocketKey" field.</summary>
    public const int HttpSecWebsocketKeyFieldNumber = 50;
    private string httpSecWebsocketKey_ = "";
    /// <summary>
    /// Sec-WebSocket-Key ('http_http_sec_websocket_key')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSecWebsocketKey {
      get { return httpSecWebsocketKey_; }
      set {
        httpSecWebsocketKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSecWebsocketProtocol" field.</summary>
    public const int HttpSecWebsocketProtocolFieldNumber = 51;
    private string httpSecWebsocketProtocol_ = "";
    /// <summary>
    /// Sec-WebSocket-Protocol ('http_http_sec_websocket_protocol')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSecWebsocketProtocol {
      get { return httpSecWebsocketProtocol_; }
      set {
        httpSecWebsocketProtocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSecWebsocketVersion" field.</summary>
    public const int HttpSecWebsocketVersionFieldNumber = 52;
    private string httpSecWebsocketVersion_ = "";
    /// <summary>
    /// Sec-WebSocket-Version ('http_http_sec_websocket_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSecWebsocketVersion {
      get { return httpSecWebsocketVersion_; }
      set {
        httpSecWebsocketVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSetCookie" field.</summary>
    public const int HttpSetCookieFieldNumber = 53;
    private string httpSetCookie_ = "";
    /// <summary>
    /// Set-Cookie ('http_http_set_cookie')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSetCookie {
      get { return httpSetCookie_; }
      set {
        httpSetCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpLastModified" field.</summary>
    public const int HttpLastModifiedFieldNumber = 54;
    private string httpLastModified_ = "";
    /// <summary>
    /// Last-Modified ('http_http_last_modified')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpLastModified {
      get { return httpLastModified_; }
      set {
        httpLastModified_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpXForwardedFor" field.</summary>
    public const int HttpXForwardedForFieldNumber = 55;
    private string httpXForwardedFor_ = "";
    /// <summary>
    /// X-Forwarded-For ('http_http_x_forwarded_for')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpXForwardedFor {
      get { return httpXForwardedFor_; }
      set {
        httpXForwardedFor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestIn" field.</summary>
    public const int HttpRequestInFieldNumber = 56;
    private long httpRequestIn_;
    /// <summary>
    /// Request in frame ('http_http_request_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpRequestIn {
      get { return httpRequestIn_; }
      set {
        httpRequestIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponseIn" field.</summary>
    public const int HttpResponseInFieldNumber = 57;
    private long httpResponseIn_;
    /// <summary>
    /// Response in frame ('http_http_response_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpResponseIn {
      get { return httpResponseIn_; }
      set {
        httpResponseIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpNextRequestIn" field.</summary>
    public const int HttpNextRequestInFieldNumber = 58;
    private long httpNextRequestIn_;
    /// <summary>
    /// Next request in frame ('http_http_next_request_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpNextRequestIn {
      get { return httpNextRequestIn_; }
      set {
        httpNextRequestIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpNextResponseIn" field.</summary>
    public const int HttpNextResponseInFieldNumber = 59;
    private long httpNextResponseIn_;
    /// <summary>
    /// Next response in frame ('http_http_next_response_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpNextResponseIn {
      get { return httpNextResponseIn_; }
      set {
        httpNextResponseIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpPrevRequestIn" field.</summary>
    public const int HttpPrevRequestInFieldNumber = 60;
    private long httpPrevRequestIn_;
    /// <summary>
    /// Prev request in frame ('http_http_prev_request_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpPrevRequestIn {
      get { return httpPrevRequestIn_; }
      set {
        httpPrevRequestIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpPrevResponseIn" field.</summary>
    public const int HttpPrevResponseInFieldNumber = 61;
    private long httpPrevResponseIn_;
    /// <summary>
    /// Prev response in frame ('http_http_prev_response_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpPrevResponseIn {
      get { return httpPrevResponseIn_; }
      set {
        httpPrevResponseIn_ = value;
      }
    }

    /// <summary>Field number for the "HttpTime" field.</summary>
    public const int HttpTimeFieldNumber = 62;
    private long httpTime_;
    /// <summary>
    /// Time since request ('http_http_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HttpTime {
      get { return httpTime_; }
      set {
        httpTime_ = value;
      }
    }

    /// <summary>Field number for the "HttpChunkedTrailerPart" field.</summary>
    public const int HttpChunkedTrailerPartFieldNumber = 63;
    private string httpChunkedTrailerPart_ = "";
    /// <summary>
    /// trailer-part ('http_http_chunked_trailer_part')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpChunkedTrailerPart {
      get { return httpChunkedTrailerPart_; }
      set {
        httpChunkedTrailerPart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpChunkBoundary" field.</summary>
    public const int HttpChunkBoundaryFieldNumber = 64;
    private pb::ByteString httpChunkBoundary_ = pb::ByteString.Empty;
    /// <summary>
    /// Chunk boundary ('http_http_chunk_boundary')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HttpChunkBoundary {
      get { return httpChunkBoundary_; }
      set {
        httpChunkBoundary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpChunkSize" field.</summary>
    public const int HttpChunkSizeFieldNumber = 65;
    private uint httpChunkSize_;
    /// <summary>
    /// Chunk size ('http_http_chunk_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpChunkSize {
      get { return httpChunkSize_; }
      set {
        httpChunkSize_ = value;
      }
    }

    /// <summary>Field number for the "HttpFileData" field.</summary>
    public const int HttpFileDataFieldNumber = 66;
    private string httpFileData_ = "";
    /// <summary>
    /// File Data ('http_http_file_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpFileData {
      get { return httpFileData_; }
      set {
        httpFileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpUnknownHeader" field.</summary>
    public const int HttpUnknownHeaderFieldNumber = 67;
    private string httpUnknownHeader_ = "";
    /// <summary>
    /// Unknown header ('http_http_unknown_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpUnknownHeader {
      get { return httpUnknownHeader_; }
      set {
        httpUnknownHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Http);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Http other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpNotification != other.HttpNotification) return false;
      if (HttpResponse != other.HttpResponse) return false;
      if (HttpRequest != other.HttpRequest) return false;
      if (HttpResponseNumber != other.HttpResponseNumber) return false;
      if (HttpRequestNumber != other.HttpRequestNumber) return false;
      if (HttpAuthbasic != other.HttpAuthbasic) return false;
      if (HttpAuthcitrix != other.HttpAuthcitrix) return false;
      if (HttpAuthcitrixUser != other.HttpAuthcitrixUser) return false;
      if (HttpAuthcitrixDomain != other.HttpAuthcitrixDomain) return false;
      if (HttpAuthcitrixPassword != other.HttpAuthcitrixPassword) return false;
      if (HttpAuthcitrixSession != other.HttpAuthcitrixSession) return false;
      if (HttpRequestMethod != other.HttpRequestMethod) return false;
      if (HttpRequestUri != other.HttpRequestUri) return false;
      if (HttpRequestUriPath != other.HttpRequestUriPath) return false;
      if (HttpRequestUriQuery != other.HttpRequestUriQuery) return false;
      if (HttpRequestUriQueryParameter != other.HttpRequestUriQueryParameter) return false;
      if (HttpRequestVersion != other.HttpRequestVersion) return false;
      if (HttpResponseVersion != other.HttpResponseVersion) return false;
      if (HttpRequestFullUri != other.HttpRequestFullUri) return false;
      if (HttpResponseCode != other.HttpResponseCode) return false;
      if (HttpResponseCodeDesc != other.HttpResponseCodeDesc) return false;
      if (HttpResponsePhrase != other.HttpResponsePhrase) return false;
      if (HttpAuthorization != other.HttpAuthorization) return false;
      if (HttpProxyAuthenticate != other.HttpProxyAuthenticate) return false;
      if (HttpProxyAuthorization != other.HttpProxyAuthorization) return false;
      if (HttpProxyConnectHost != other.HttpProxyConnectHost) return false;
      if (HttpProxyConnectPort != other.HttpProxyConnectPort) return false;
      if (HttpWwwAuthenticate != other.HttpWwwAuthenticate) return false;
      if (HttpContentType != other.HttpContentType) return false;
      if (HttpContentLengthHeader != other.HttpContentLengthHeader) return false;
      if (HttpContentLength != other.HttpContentLength) return false;
      if (HttpContentEncoding != other.HttpContentEncoding) return false;
      if (HttpTransferEncoding != other.HttpTransferEncoding) return false;
      if (HttpUpgrade != other.HttpUpgrade) return false;
      if (HttpUserAgent != other.HttpUserAgent) return false;
      if (HttpHost != other.HttpHost) return false;
      if (HttpConnection != other.HttpConnection) return false;
      if (HttpCookie != other.HttpCookie) return false;
      if (HttpCookiePair != other.HttpCookiePair) return false;
      if (HttpAccept != other.HttpAccept) return false;
      if (HttpReferer != other.HttpReferer) return false;
      if (HttpAcceptLanguage != other.HttpAcceptLanguage) return false;
      if (HttpAcceptEncoding != other.HttpAcceptEncoding) return false;
      if (HttpDate != other.HttpDate) return false;
      if (HttpCacheControl != other.HttpCacheControl) return false;
      if (HttpServer != other.HttpServer) return false;
      if (HttpLocation != other.HttpLocation) return false;
      if (HttpSecWebsocketAccept != other.HttpSecWebsocketAccept) return false;
      if (HttpSecWebsocketExtensions != other.HttpSecWebsocketExtensions) return false;
      if (HttpSecWebsocketKey != other.HttpSecWebsocketKey) return false;
      if (HttpSecWebsocketProtocol != other.HttpSecWebsocketProtocol) return false;
      if (HttpSecWebsocketVersion != other.HttpSecWebsocketVersion) return false;
      if (HttpSetCookie != other.HttpSetCookie) return false;
      if (HttpLastModified != other.HttpLastModified) return false;
      if (HttpXForwardedFor != other.HttpXForwardedFor) return false;
      if (HttpRequestIn != other.HttpRequestIn) return false;
      if (HttpResponseIn != other.HttpResponseIn) return false;
      if (HttpNextRequestIn != other.HttpNextRequestIn) return false;
      if (HttpNextResponseIn != other.HttpNextResponseIn) return false;
      if (HttpPrevRequestIn != other.HttpPrevRequestIn) return false;
      if (HttpPrevResponseIn != other.HttpPrevResponseIn) return false;
      if (HttpTime != other.HttpTime) return false;
      if (HttpChunkedTrailerPart != other.HttpChunkedTrailerPart) return false;
      if (HttpChunkBoundary != other.HttpChunkBoundary) return false;
      if (HttpChunkSize != other.HttpChunkSize) return false;
      if (HttpFileData != other.HttpFileData) return false;
      if (HttpUnknownHeader != other.HttpUnknownHeader) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpNotification != false) hash ^= HttpNotification.GetHashCode();
      if (HttpResponse != false) hash ^= HttpResponse.GetHashCode();
      if (HttpRequest != false) hash ^= HttpRequest.GetHashCode();
      if (HttpResponseNumber != 0) hash ^= HttpResponseNumber.GetHashCode();
      if (HttpRequestNumber != 0) hash ^= HttpRequestNumber.GetHashCode();
      if (HttpAuthbasic.Length != 0) hash ^= HttpAuthbasic.GetHashCode();
      if (HttpAuthcitrix != false) hash ^= HttpAuthcitrix.GetHashCode();
      if (HttpAuthcitrixUser.Length != 0) hash ^= HttpAuthcitrixUser.GetHashCode();
      if (HttpAuthcitrixDomain.Length != 0) hash ^= HttpAuthcitrixDomain.GetHashCode();
      if (HttpAuthcitrixPassword.Length != 0) hash ^= HttpAuthcitrixPassword.GetHashCode();
      if (HttpAuthcitrixSession.Length != 0) hash ^= HttpAuthcitrixSession.GetHashCode();
      if (HttpRequestMethod.Length != 0) hash ^= HttpRequestMethod.GetHashCode();
      if (HttpRequestUri.Length != 0) hash ^= HttpRequestUri.GetHashCode();
      if (HttpRequestUriPath.Length != 0) hash ^= HttpRequestUriPath.GetHashCode();
      if (HttpRequestUriQuery.Length != 0) hash ^= HttpRequestUriQuery.GetHashCode();
      if (HttpRequestUriQueryParameter.Length != 0) hash ^= HttpRequestUriQueryParameter.GetHashCode();
      if (HttpRequestVersion.Length != 0) hash ^= HttpRequestVersion.GetHashCode();
      if (HttpResponseVersion.Length != 0) hash ^= HttpResponseVersion.GetHashCode();
      if (HttpRequestFullUri.Length != 0) hash ^= HttpRequestFullUri.GetHashCode();
      if (HttpResponseCode != 0) hash ^= HttpResponseCode.GetHashCode();
      if (HttpResponseCodeDesc.Length != 0) hash ^= HttpResponseCodeDesc.GetHashCode();
      if (HttpResponsePhrase.Length != 0) hash ^= HttpResponsePhrase.GetHashCode();
      if (HttpAuthorization.Length != 0) hash ^= HttpAuthorization.GetHashCode();
      if (HttpProxyAuthenticate.Length != 0) hash ^= HttpProxyAuthenticate.GetHashCode();
      if (HttpProxyAuthorization.Length != 0) hash ^= HttpProxyAuthorization.GetHashCode();
      if (HttpProxyConnectHost.Length != 0) hash ^= HttpProxyConnectHost.GetHashCode();
      if (HttpProxyConnectPort != 0) hash ^= HttpProxyConnectPort.GetHashCode();
      if (HttpWwwAuthenticate.Length != 0) hash ^= HttpWwwAuthenticate.GetHashCode();
      if (HttpContentType.Length != 0) hash ^= HttpContentType.GetHashCode();
      if (HttpContentLengthHeader.Length != 0) hash ^= HttpContentLengthHeader.GetHashCode();
      if (HttpContentLength != 0UL) hash ^= HttpContentLength.GetHashCode();
      if (HttpContentEncoding.Length != 0) hash ^= HttpContentEncoding.GetHashCode();
      if (HttpTransferEncoding.Length != 0) hash ^= HttpTransferEncoding.GetHashCode();
      if (HttpUpgrade.Length != 0) hash ^= HttpUpgrade.GetHashCode();
      if (HttpUserAgent.Length != 0) hash ^= HttpUserAgent.GetHashCode();
      if (HttpHost.Length != 0) hash ^= HttpHost.GetHashCode();
      if (HttpConnection.Length != 0) hash ^= HttpConnection.GetHashCode();
      if (HttpCookie.Length != 0) hash ^= HttpCookie.GetHashCode();
      if (HttpCookiePair.Length != 0) hash ^= HttpCookiePair.GetHashCode();
      if (HttpAccept.Length != 0) hash ^= HttpAccept.GetHashCode();
      if (HttpReferer.Length != 0) hash ^= HttpReferer.GetHashCode();
      if (HttpAcceptLanguage.Length != 0) hash ^= HttpAcceptLanguage.GetHashCode();
      if (HttpAcceptEncoding.Length != 0) hash ^= HttpAcceptEncoding.GetHashCode();
      if (HttpDate.Length != 0) hash ^= HttpDate.GetHashCode();
      if (HttpCacheControl.Length != 0) hash ^= HttpCacheControl.GetHashCode();
      if (HttpServer.Length != 0) hash ^= HttpServer.GetHashCode();
      if (HttpLocation.Length != 0) hash ^= HttpLocation.GetHashCode();
      if (HttpSecWebsocketAccept.Length != 0) hash ^= HttpSecWebsocketAccept.GetHashCode();
      if (HttpSecWebsocketExtensions.Length != 0) hash ^= HttpSecWebsocketExtensions.GetHashCode();
      if (HttpSecWebsocketKey.Length != 0) hash ^= HttpSecWebsocketKey.GetHashCode();
      if (HttpSecWebsocketProtocol.Length != 0) hash ^= HttpSecWebsocketProtocol.GetHashCode();
      if (HttpSecWebsocketVersion.Length != 0) hash ^= HttpSecWebsocketVersion.GetHashCode();
      if (HttpSetCookie.Length != 0) hash ^= HttpSetCookie.GetHashCode();
      if (HttpLastModified.Length != 0) hash ^= HttpLastModified.GetHashCode();
      if (HttpXForwardedFor.Length != 0) hash ^= HttpXForwardedFor.GetHashCode();
      if (HttpRequestIn != 0L) hash ^= HttpRequestIn.GetHashCode();
      if (HttpResponseIn != 0L) hash ^= HttpResponseIn.GetHashCode();
      if (HttpNextRequestIn != 0L) hash ^= HttpNextRequestIn.GetHashCode();
      if (HttpNextResponseIn != 0L) hash ^= HttpNextResponseIn.GetHashCode();
      if (HttpPrevRequestIn != 0L) hash ^= HttpPrevRequestIn.GetHashCode();
      if (HttpPrevResponseIn != 0L) hash ^= HttpPrevResponseIn.GetHashCode();
      if (HttpTime != 0L) hash ^= HttpTime.GetHashCode();
      if (HttpChunkedTrailerPart.Length != 0) hash ^= HttpChunkedTrailerPart.GetHashCode();
      if (HttpChunkBoundary.Length != 0) hash ^= HttpChunkBoundary.GetHashCode();
      if (HttpChunkSize != 0) hash ^= HttpChunkSize.GetHashCode();
      if (HttpFileData.Length != 0) hash ^= HttpFileData.GetHashCode();
      if (HttpUnknownHeader.Length != 0) hash ^= HttpUnknownHeader.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpNotification != false) {
        output.WriteRawTag(8);
        output.WriteBool(HttpNotification);
      }
      if (HttpResponse != false) {
        output.WriteRawTag(16);
        output.WriteBool(HttpResponse);
      }
      if (HttpRequest != false) {
        output.WriteRawTag(24);
        output.WriteBool(HttpRequest);
      }
      if (HttpResponseNumber != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HttpResponseNumber);
      }
      if (HttpRequestNumber != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HttpRequestNumber);
      }
      if (HttpAuthbasic.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HttpAuthbasic);
      }
      if (HttpAuthcitrix != false) {
        output.WriteRawTag(56);
        output.WriteBool(HttpAuthcitrix);
      }
      if (HttpAuthcitrixUser.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HttpAuthcitrixUser);
      }
      if (HttpAuthcitrixDomain.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(HttpAuthcitrixDomain);
      }
      if (HttpAuthcitrixPassword.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(HttpAuthcitrixPassword);
      }
      if (HttpAuthcitrixSession.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(HttpAuthcitrixSession);
      }
      if (HttpRequestMethod.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HttpRequestMethod);
      }
      if (HttpRequestUri.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HttpRequestUri);
      }
      if (HttpRequestUriPath.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(HttpRequestUriPath);
      }
      if (HttpRequestUriQuery.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(HttpRequestUriQuery);
      }
      if (HttpRequestUriQueryParameter.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HttpRequestUriQueryParameter);
      }
      if (HttpRequestVersion.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(HttpRequestVersion);
      }
      if (HttpResponseVersion.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(HttpResponseVersion);
      }
      if (HttpRequestFullUri.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(HttpRequestFullUri);
      }
      if (HttpResponseCode != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(HttpResponseCode);
      }
      if (HttpResponseCodeDesc.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(HttpResponseCodeDesc);
      }
      if (HttpResponsePhrase.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(HttpResponsePhrase);
      }
      if (HttpAuthorization.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(HttpAuthorization);
      }
      if (HttpProxyAuthenticate.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(HttpProxyAuthenticate);
      }
      if (HttpProxyAuthorization.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(HttpProxyAuthorization);
      }
      if (HttpProxyConnectHost.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(HttpProxyConnectHost);
      }
      if (HttpProxyConnectPort != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(HttpProxyConnectPort);
      }
      if (HttpWwwAuthenticate.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(HttpWwwAuthenticate);
      }
      if (HttpContentType.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(HttpContentType);
      }
      if (HttpContentLengthHeader.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(HttpContentLengthHeader);
      }
      if (HttpContentLength != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(HttpContentLength);
      }
      if (HttpContentEncoding.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(HttpContentEncoding);
      }
      if (HttpTransferEncoding.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(HttpTransferEncoding);
      }
      if (HttpUpgrade.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(HttpUpgrade);
      }
      if (HttpUserAgent.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(HttpUserAgent);
      }
      if (HttpHost.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(HttpHost);
      }
      if (HttpConnection.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(HttpConnection);
      }
      if (HttpCookie.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(HttpCookie);
      }
      if (HttpCookiePair.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(HttpCookiePair);
      }
      if (HttpAccept.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(HttpAccept);
      }
      if (HttpReferer.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(HttpReferer);
      }
      if (HttpAcceptLanguage.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(HttpAcceptLanguage);
      }
      if (HttpAcceptEncoding.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(HttpAcceptEncoding);
      }
      if (HttpDate.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(HttpDate);
      }
      if (HttpCacheControl.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(HttpCacheControl);
      }
      if (HttpServer.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(HttpServer);
      }
      if (HttpLocation.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(HttpLocation);
      }
      if (HttpSecWebsocketAccept.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(HttpSecWebsocketAccept);
      }
      if (HttpSecWebsocketExtensions.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(HttpSecWebsocketExtensions);
      }
      if (HttpSecWebsocketKey.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(HttpSecWebsocketKey);
      }
      if (HttpSecWebsocketProtocol.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(HttpSecWebsocketProtocol);
      }
      if (HttpSecWebsocketVersion.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(HttpSecWebsocketVersion);
      }
      if (HttpSetCookie.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(HttpSetCookie);
      }
      if (HttpLastModified.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(HttpLastModified);
      }
      if (HttpXForwardedFor.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(HttpXForwardedFor);
      }
      if (HttpRequestIn != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(HttpRequestIn);
      }
      if (HttpResponseIn != 0L) {
        output.WriteRawTag(200, 3);
        output.WriteInt64(HttpResponseIn);
      }
      if (HttpNextRequestIn != 0L) {
        output.WriteRawTag(208, 3);
        output.WriteInt64(HttpNextRequestIn);
      }
      if (HttpNextResponseIn != 0L) {
        output.WriteRawTag(216, 3);
        output.WriteInt64(HttpNextResponseIn);
      }
      if (HttpPrevRequestIn != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(HttpPrevRequestIn);
      }
      if (HttpPrevResponseIn != 0L) {
        output.WriteRawTag(232, 3);
        output.WriteInt64(HttpPrevResponseIn);
      }
      if (HttpTime != 0L) {
        output.WriteRawTag(240, 3);
        output.WriteInt64(HttpTime);
      }
      if (HttpChunkedTrailerPart.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(HttpChunkedTrailerPart);
      }
      if (HttpChunkBoundary.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteBytes(HttpChunkBoundary);
      }
      if (HttpChunkSize != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(HttpChunkSize);
      }
      if (HttpFileData.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(HttpFileData);
      }
      if (HttpUnknownHeader.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(HttpUnknownHeader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpNotification != false) {
        size += 1 + 1;
      }
      if (HttpResponse != false) {
        size += 1 + 1;
      }
      if (HttpRequest != false) {
        size += 1 + 1;
      }
      if (HttpResponseNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpResponseNumber);
      }
      if (HttpRequestNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpRequestNumber);
      }
      if (HttpAuthbasic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthbasic);
      }
      if (HttpAuthcitrix != false) {
        size += 1 + 1;
      }
      if (HttpAuthcitrixUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthcitrixUser);
      }
      if (HttpAuthcitrixDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthcitrixDomain);
      }
      if (HttpAuthcitrixPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthcitrixPassword);
      }
      if (HttpAuthcitrixSession.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthcitrixSession);
      }
      if (HttpRequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestMethod);
      }
      if (HttpRequestUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestUri);
      }
      if (HttpRequestUriPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestUriPath);
      }
      if (HttpRequestUriQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestUriQuery);
      }
      if (HttpRequestUriQueryParameter.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpRequestUriQueryParameter);
      }
      if (HttpRequestVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpRequestVersion);
      }
      if (HttpResponseVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpResponseVersion);
      }
      if (HttpRequestFullUri.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpRequestFullUri);
      }
      if (HttpResponseCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HttpResponseCode);
      }
      if (HttpResponseCodeDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpResponseCodeDesc);
      }
      if (HttpResponsePhrase.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpResponsePhrase);
      }
      if (HttpAuthorization.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAuthorization);
      }
      if (HttpProxyAuthenticate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpProxyAuthenticate);
      }
      if (HttpProxyAuthorization.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpProxyAuthorization);
      }
      if (HttpProxyConnectHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpProxyConnectHost);
      }
      if (HttpProxyConnectPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HttpProxyConnectPort);
      }
      if (HttpWwwAuthenticate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpWwwAuthenticate);
      }
      if (HttpContentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentType);
      }
      if (HttpContentLengthHeader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentLengthHeader);
      }
      if (HttpContentLength != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HttpContentLength);
      }
      if (HttpContentEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentEncoding);
      }
      if (HttpTransferEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpTransferEncoding);
      }
      if (HttpUpgrade.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpUpgrade);
      }
      if (HttpUserAgent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpUserAgent);
      }
      if (HttpHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpHost);
      }
      if (HttpConnection.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpConnection);
      }
      if (HttpCookie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCookie);
      }
      if (HttpCookiePair.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCookiePair);
      }
      if (HttpAccept.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAccept);
      }
      if (HttpReferer.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpReferer);
      }
      if (HttpAcceptLanguage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAcceptLanguage);
      }
      if (HttpAcceptEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAcceptEncoding);
      }
      if (HttpDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpDate);
      }
      if (HttpCacheControl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCacheControl);
      }
      if (HttpServer.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpServer);
      }
      if (HttpLocation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpLocation);
      }
      if (HttpSecWebsocketAccept.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSecWebsocketAccept);
      }
      if (HttpSecWebsocketExtensions.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSecWebsocketExtensions);
      }
      if (HttpSecWebsocketKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSecWebsocketKey);
      }
      if (HttpSecWebsocketProtocol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSecWebsocketProtocol);
      }
      if (HttpSecWebsocketVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSecWebsocketVersion);
      }
      if (HttpSetCookie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSetCookie);
      }
      if (HttpLastModified.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpLastModified);
      }
      if (HttpXForwardedFor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpXForwardedFor);
      }
      if (HttpRequestIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpRequestIn);
      }
      if (HttpResponseIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpResponseIn);
      }
      if (HttpNextRequestIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpNextRequestIn);
      }
      if (HttpNextResponseIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpNextResponseIn);
      }
      if (HttpPrevRequestIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpPrevRequestIn);
      }
      if (HttpPrevResponseIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpPrevResponseIn);
      }
      if (HttpTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HttpTime);
      }
      if (HttpChunkedTrailerPart.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpChunkedTrailerPart);
      }
      if (HttpChunkBoundary.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(HttpChunkBoundary);
      }
      if (HttpChunkSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HttpChunkSize);
      }
      if (HttpFileData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpFileData);
      }
      if (HttpUnknownHeader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpUnknownHeader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Http other) {
      if (other == null) {
        return;
      }
      if (other.HttpNotification != false) {
        HttpNotification = other.HttpNotification;
      }
      if (other.HttpResponse != false) {
        HttpResponse = other.HttpResponse;
      }
      if (other.HttpRequest != false) {
        HttpRequest = other.HttpRequest;
      }
      if (other.HttpResponseNumber != 0) {
        HttpResponseNumber = other.HttpResponseNumber;
      }
      if (other.HttpRequestNumber != 0) {
        HttpRequestNumber = other.HttpRequestNumber;
      }
      if (other.HttpAuthbasic.Length != 0) {
        HttpAuthbasic = other.HttpAuthbasic;
      }
      if (other.HttpAuthcitrix != false) {
        HttpAuthcitrix = other.HttpAuthcitrix;
      }
      if (other.HttpAuthcitrixUser.Length != 0) {
        HttpAuthcitrixUser = other.HttpAuthcitrixUser;
      }
      if (other.HttpAuthcitrixDomain.Length != 0) {
        HttpAuthcitrixDomain = other.HttpAuthcitrixDomain;
      }
      if (other.HttpAuthcitrixPassword.Length != 0) {
        HttpAuthcitrixPassword = other.HttpAuthcitrixPassword;
      }
      if (other.HttpAuthcitrixSession.Length != 0) {
        HttpAuthcitrixSession = other.HttpAuthcitrixSession;
      }
      if (other.HttpRequestMethod.Length != 0) {
        HttpRequestMethod = other.HttpRequestMethod;
      }
      if (other.HttpRequestUri.Length != 0) {
        HttpRequestUri = other.HttpRequestUri;
      }
      if (other.HttpRequestUriPath.Length != 0) {
        HttpRequestUriPath = other.HttpRequestUriPath;
      }
      if (other.HttpRequestUriQuery.Length != 0) {
        HttpRequestUriQuery = other.HttpRequestUriQuery;
      }
      if (other.HttpRequestUriQueryParameter.Length != 0) {
        HttpRequestUriQueryParameter = other.HttpRequestUriQueryParameter;
      }
      if (other.HttpRequestVersion.Length != 0) {
        HttpRequestVersion = other.HttpRequestVersion;
      }
      if (other.HttpResponseVersion.Length != 0) {
        HttpResponseVersion = other.HttpResponseVersion;
      }
      if (other.HttpRequestFullUri.Length != 0) {
        HttpRequestFullUri = other.HttpRequestFullUri;
      }
      if (other.HttpResponseCode != 0) {
        HttpResponseCode = other.HttpResponseCode;
      }
      if (other.HttpResponseCodeDesc.Length != 0) {
        HttpResponseCodeDesc = other.HttpResponseCodeDesc;
      }
      if (other.HttpResponsePhrase.Length != 0) {
        HttpResponsePhrase = other.HttpResponsePhrase;
      }
      if (other.HttpAuthorization.Length != 0) {
        HttpAuthorization = other.HttpAuthorization;
      }
      if (other.HttpProxyAuthenticate.Length != 0) {
        HttpProxyAuthenticate = other.HttpProxyAuthenticate;
      }
      if (other.HttpProxyAuthorization.Length != 0) {
        HttpProxyAuthorization = other.HttpProxyAuthorization;
      }
      if (other.HttpProxyConnectHost.Length != 0) {
        HttpProxyConnectHost = other.HttpProxyConnectHost;
      }
      if (other.HttpProxyConnectPort != 0) {
        HttpProxyConnectPort = other.HttpProxyConnectPort;
      }
      if (other.HttpWwwAuthenticate.Length != 0) {
        HttpWwwAuthenticate = other.HttpWwwAuthenticate;
      }
      if (other.HttpContentType.Length != 0) {
        HttpContentType = other.HttpContentType;
      }
      if (other.HttpContentLengthHeader.Length != 0) {
        HttpContentLengthHeader = other.HttpContentLengthHeader;
      }
      if (other.HttpContentLength != 0UL) {
        HttpContentLength = other.HttpContentLength;
      }
      if (other.HttpContentEncoding.Length != 0) {
        HttpContentEncoding = other.HttpContentEncoding;
      }
      if (other.HttpTransferEncoding.Length != 0) {
        HttpTransferEncoding = other.HttpTransferEncoding;
      }
      if (other.HttpUpgrade.Length != 0) {
        HttpUpgrade = other.HttpUpgrade;
      }
      if (other.HttpUserAgent.Length != 0) {
        HttpUserAgent = other.HttpUserAgent;
      }
      if (other.HttpHost.Length != 0) {
        HttpHost = other.HttpHost;
      }
      if (other.HttpConnection.Length != 0) {
        HttpConnection = other.HttpConnection;
      }
      if (other.HttpCookie.Length != 0) {
        HttpCookie = other.HttpCookie;
      }
      if (other.HttpCookiePair.Length != 0) {
        HttpCookiePair = other.HttpCookiePair;
      }
      if (other.HttpAccept.Length != 0) {
        HttpAccept = other.HttpAccept;
      }
      if (other.HttpReferer.Length != 0) {
        HttpReferer = other.HttpReferer;
      }
      if (other.HttpAcceptLanguage.Length != 0) {
        HttpAcceptLanguage = other.HttpAcceptLanguage;
      }
      if (other.HttpAcceptEncoding.Length != 0) {
        HttpAcceptEncoding = other.HttpAcceptEncoding;
      }
      if (other.HttpDate.Length != 0) {
        HttpDate = other.HttpDate;
      }
      if (other.HttpCacheControl.Length != 0) {
        HttpCacheControl = other.HttpCacheControl;
      }
      if (other.HttpServer.Length != 0) {
        HttpServer = other.HttpServer;
      }
      if (other.HttpLocation.Length != 0) {
        HttpLocation = other.HttpLocation;
      }
      if (other.HttpSecWebsocketAccept.Length != 0) {
        HttpSecWebsocketAccept = other.HttpSecWebsocketAccept;
      }
      if (other.HttpSecWebsocketExtensions.Length != 0) {
        HttpSecWebsocketExtensions = other.HttpSecWebsocketExtensions;
      }
      if (other.HttpSecWebsocketKey.Length != 0) {
        HttpSecWebsocketKey = other.HttpSecWebsocketKey;
      }
      if (other.HttpSecWebsocketProtocol.Length != 0) {
        HttpSecWebsocketProtocol = other.HttpSecWebsocketProtocol;
      }
      if (other.HttpSecWebsocketVersion.Length != 0) {
        HttpSecWebsocketVersion = other.HttpSecWebsocketVersion;
      }
      if (other.HttpSetCookie.Length != 0) {
        HttpSetCookie = other.HttpSetCookie;
      }
      if (other.HttpLastModified.Length != 0) {
        HttpLastModified = other.HttpLastModified;
      }
      if (other.HttpXForwardedFor.Length != 0) {
        HttpXForwardedFor = other.HttpXForwardedFor;
      }
      if (other.HttpRequestIn != 0L) {
        HttpRequestIn = other.HttpRequestIn;
      }
      if (other.HttpResponseIn != 0L) {
        HttpResponseIn = other.HttpResponseIn;
      }
      if (other.HttpNextRequestIn != 0L) {
        HttpNextRequestIn = other.HttpNextRequestIn;
      }
      if (other.HttpNextResponseIn != 0L) {
        HttpNextResponseIn = other.HttpNextResponseIn;
      }
      if (other.HttpPrevRequestIn != 0L) {
        HttpPrevRequestIn = other.HttpPrevRequestIn;
      }
      if (other.HttpPrevResponseIn != 0L) {
        HttpPrevResponseIn = other.HttpPrevResponseIn;
      }
      if (other.HttpTime != 0L) {
        HttpTime = other.HttpTime;
      }
      if (other.HttpChunkedTrailerPart.Length != 0) {
        HttpChunkedTrailerPart = other.HttpChunkedTrailerPart;
      }
      if (other.HttpChunkBoundary.Length != 0) {
        HttpChunkBoundary = other.HttpChunkBoundary;
      }
      if (other.HttpChunkSize != 0) {
        HttpChunkSize = other.HttpChunkSize;
      }
      if (other.HttpFileData.Length != 0) {
        HttpFileData = other.HttpFileData;
      }
      if (other.HttpUnknownHeader.Length != 0) {
        HttpUnknownHeader = other.HttpUnknownHeader;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HttpNotification = input.ReadBool();
            break;
          }
          case 16: {
            HttpResponse = input.ReadBool();
            break;
          }
          case 24: {
            HttpRequest = input.ReadBool();
            break;
          }
          case 32: {
            HttpResponseNumber = input.ReadUInt32();
            break;
          }
          case 40: {
            HttpRequestNumber = input.ReadUInt32();
            break;
          }
          case 50: {
            HttpAuthbasic = input.ReadString();
            break;
          }
          case 56: {
            HttpAuthcitrix = input.ReadBool();
            break;
          }
          case 66: {
            HttpAuthcitrixUser = input.ReadString();
            break;
          }
          case 74: {
            HttpAuthcitrixDomain = input.ReadString();
            break;
          }
          case 82: {
            HttpAuthcitrixPassword = input.ReadString();
            break;
          }
          case 90: {
            HttpAuthcitrixSession = input.ReadString();
            break;
          }
          case 98: {
            HttpRequestMethod = input.ReadString();
            break;
          }
          case 106: {
            HttpRequestUri = input.ReadString();
            break;
          }
          case 114: {
            HttpRequestUriPath = input.ReadString();
            break;
          }
          case 122: {
            HttpRequestUriQuery = input.ReadString();
            break;
          }
          case 130: {
            HttpRequestUriQueryParameter = input.ReadString();
            break;
          }
          case 138: {
            HttpRequestVersion = input.ReadString();
            break;
          }
          case 146: {
            HttpResponseVersion = input.ReadString();
            break;
          }
          case 154: {
            HttpRequestFullUri = input.ReadString();
            break;
          }
          case 160: {
            HttpResponseCode = input.ReadUInt32();
            break;
          }
          case 170: {
            HttpResponseCodeDesc = input.ReadString();
            break;
          }
          case 178: {
            HttpResponsePhrase = input.ReadString();
            break;
          }
          case 186: {
            HttpAuthorization = input.ReadString();
            break;
          }
          case 194: {
            HttpProxyAuthenticate = input.ReadString();
            break;
          }
          case 202: {
            HttpProxyAuthorization = input.ReadString();
            break;
          }
          case 210: {
            HttpProxyConnectHost = input.ReadString();
            break;
          }
          case 216: {
            HttpProxyConnectPort = input.ReadUInt32();
            break;
          }
          case 226: {
            HttpWwwAuthenticate = input.ReadString();
            break;
          }
          case 234: {
            HttpContentType = input.ReadString();
            break;
          }
          case 242: {
            HttpContentLengthHeader = input.ReadString();
            break;
          }
          case 248: {
            HttpContentLength = input.ReadUInt64();
            break;
          }
          case 258: {
            HttpContentEncoding = input.ReadString();
            break;
          }
          case 266: {
            HttpTransferEncoding = input.ReadString();
            break;
          }
          case 274: {
            HttpUpgrade = input.ReadString();
            break;
          }
          case 282: {
            HttpUserAgent = input.ReadString();
            break;
          }
          case 290: {
            HttpHost = input.ReadString();
            break;
          }
          case 298: {
            HttpConnection = input.ReadString();
            break;
          }
          case 306: {
            HttpCookie = input.ReadString();
            break;
          }
          case 314: {
            HttpCookiePair = input.ReadString();
            break;
          }
          case 322: {
            HttpAccept = input.ReadString();
            break;
          }
          case 330: {
            HttpReferer = input.ReadString();
            break;
          }
          case 338: {
            HttpAcceptLanguage = input.ReadString();
            break;
          }
          case 346: {
            HttpAcceptEncoding = input.ReadString();
            break;
          }
          case 354: {
            HttpDate = input.ReadString();
            break;
          }
          case 362: {
            HttpCacheControl = input.ReadString();
            break;
          }
          case 370: {
            HttpServer = input.ReadString();
            break;
          }
          case 378: {
            HttpLocation = input.ReadString();
            break;
          }
          case 386: {
            HttpSecWebsocketAccept = input.ReadString();
            break;
          }
          case 394: {
            HttpSecWebsocketExtensions = input.ReadString();
            break;
          }
          case 402: {
            HttpSecWebsocketKey = input.ReadString();
            break;
          }
          case 410: {
            HttpSecWebsocketProtocol = input.ReadString();
            break;
          }
          case 418: {
            HttpSecWebsocketVersion = input.ReadString();
            break;
          }
          case 426: {
            HttpSetCookie = input.ReadString();
            break;
          }
          case 434: {
            HttpLastModified = input.ReadString();
            break;
          }
          case 442: {
            HttpXForwardedFor = input.ReadString();
            break;
          }
          case 448: {
            HttpRequestIn = input.ReadInt64();
            break;
          }
          case 456: {
            HttpResponseIn = input.ReadInt64();
            break;
          }
          case 464: {
            HttpNextRequestIn = input.ReadInt64();
            break;
          }
          case 472: {
            HttpNextResponseIn = input.ReadInt64();
            break;
          }
          case 480: {
            HttpPrevRequestIn = input.ReadInt64();
            break;
          }
          case 488: {
            HttpPrevResponseIn = input.ReadInt64();
            break;
          }
          case 496: {
            HttpTime = input.ReadInt64();
            break;
          }
          case 506: {
            HttpChunkedTrailerPart = input.ReadString();
            break;
          }
          case 514: {
            HttpChunkBoundary = input.ReadBytes();
            break;
          }
          case 520: {
            HttpChunkSize = input.ReadUInt32();
            break;
          }
          case 530: {
            HttpFileData = input.ReadString();
            break;
          }
          case 538: {
            HttpUnknownHeader = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
