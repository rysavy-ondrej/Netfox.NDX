// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-http.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-http.proto</summary>
  public static partial class PacketHttpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-http.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketHttpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYWNrZXQtaHR0cC5wcm90bxIRTmR4LkRlY29kZXJzLkNvcmUigQkKBEh0",
            "dHASGAoQSHR0cE5vdGlmaWNhdGlvbhgBIAEoCBIUCgxIdHRwUmVzcG9uc2UY",
            "AiABKAgSEwoLSHR0cFJlcXVlc3QYAyABKAgSGgoSSHR0cFJlc3BvbnNlTnVt",
            "YmVyGAQgASgNEhkKEUh0dHBSZXF1ZXN0TnVtYmVyGAUgASgNEhUKDUh0dHBB",
            "dXRoYmFzaWMYBiABKAkSGQoRSHR0cFJlcXVlc3RNZXRob2QYByABKAkSGgoS",
            "SHR0cFJlcXVlc3RWZXJzaW9uGAggASgJEhsKE0h0dHBSZXNwb25zZVZlcnNp",
            "b24YCSABKAkSGgoSSHR0cFJlcXVlc3RGdWxsVXJpGAogASgJEhgKEEh0dHBS",
            "ZXNwb25zZUNvZGUYCyABKA0SGgoSSHR0cFJlc3BvbnNlUGhyYXNlGAwgASgJ",
            "EhkKEUh0dHBBdXRob3JpemF0aW9uGA0gASgJEh0KFUh0dHBQcm94eUF1dGhl",
            "bnRpY2F0ZRgOIAEoCRIeChZIdHRwUHJveHlBdXRob3JpemF0aW9uGA8gASgJ",
            "EhwKFEh0dHBQcm94eUNvbm5lY3RIb3N0GBAgASgJEhwKFEh0dHBQcm94eUNv",
            "bm5lY3RQb3J0GBEgASgNEhsKE0h0dHBXd3dBdXRoZW50aWNhdGUYEiABKAkS",
            "FwoPSHR0cENvbnRlbnRUeXBlGBMgASgJEh8KF0h0dHBDb250ZW50TGVuZ3Ro",
            "SGVhZGVyGBQgASgJEhkKEUh0dHBDb250ZW50TGVuZ3RoGBUgASgEEhsKE0h0",
            "dHBDb250ZW50RW5jb2RpbmcYFiABKAkSHAoUSHR0cFRyYW5zZmVyRW5jb2Rp",
            "bmcYFyABKAkSEwoLSHR0cFVwZ3JhZGUYGCABKAkSFQoNSHR0cFVzZXJBZ2Vu",
            "dBgZIAEoCRIQCghIdHRwSG9zdBgaIAEoCRIWCg5IdHRwQ29ubmVjdGlvbhgb",
            "IAEoCRISCgpIdHRwQ29va2llGBwgASgJEhYKDkh0dHBDb29raWVQYWlyGB0g",
            "ASgJEhIKCkh0dHBBY2NlcHQYHiABKAkSEwoLSHR0cFJlZmVyZXIYHyABKAkS",
            "GgoSSHR0cEFjY2VwdExhbmd1YWdlGCAgASgJEhoKEkh0dHBBY2NlcHRFbmNv",
            "ZGluZxghIAEoCRIQCghIdHRwRGF0ZRgiIAEoCRIYChBIdHRwQ2FjaGVDb250",
            "cm9sGCMgASgJEhIKCkh0dHBTZXJ2ZXIYJCABKAkSFAoMSHR0cExvY2F0aW9u",
            "GCUgASgJEhUKDUh0dHBTZXRDb29raWUYJiABKAkSGAoQSHR0cExhc3RNb2Rp",
            "ZmllZBgnIAEoCRIZChFIdHRwWEZvcndhcmRlZEZvchgoIAEoCRIeChZIdHRw",
            "Q2h1bmtlZFRyYWlsZXJQYXJ0GCkgASgJEhkKEUh0dHBDaHVua0JvdW5kYXJ5",
            "GCogASgMEhUKDUh0dHBDaHVua1NpemUYKyABKA0SFAoMSHR0cEZpbGVEYXRh",
            "GCwgASgJEhAKCEh0dHBUaW1lGC0gASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Http), global::Ndx.Decoders.Core.Http.Parser, new[]{ "HttpNotification", "HttpResponse", "HttpRequest", "HttpResponseNumber", "HttpRequestNumber", "HttpAuthbasic", "HttpRequestMethod", "HttpRequestVersion", "HttpResponseVersion", "HttpRequestFullUri", "HttpResponseCode", "HttpResponsePhrase", "HttpAuthorization", "HttpProxyAuthenticate", "HttpProxyAuthorization", "HttpProxyConnectHost", "HttpProxyConnectPort", "HttpWwwAuthenticate", "HttpContentType", "HttpContentLengthHeader", "HttpContentLength", "HttpContentEncoding", "HttpTransferEncoding", "HttpUpgrade", "HttpUserAgent", "HttpHost", "HttpConnection", "HttpCookie", "HttpCookiePair", "HttpAccept", "HttpReferer", "HttpAcceptLanguage", "HttpAcceptEncoding", "HttpDate", "HttpCacheControl", "HttpServer", "HttpLocation", "HttpSetCookie", "HttpLastModified", "HttpXForwardedFor", "HttpChunkedTrailerPart", "HttpChunkBoundary", "HttpChunkSize", "HttpFileData", "HttpTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Http : pb::IMessage<Http> {
    private static readonly pb::MessageParser<Http> _parser = new pb::MessageParser<Http>(() => new Http());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Http> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketHttpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http(Http other) : this() {
      httpNotification_ = other.httpNotification_;
      httpResponse_ = other.httpResponse_;
      httpRequest_ = other.httpRequest_;
      httpResponseNumber_ = other.httpResponseNumber_;
      httpRequestNumber_ = other.httpRequestNumber_;
      httpAuthbasic_ = other.httpAuthbasic_;
      httpRequestMethod_ = other.httpRequestMethod_;
      httpRequestVersion_ = other.httpRequestVersion_;
      httpResponseVersion_ = other.httpResponseVersion_;
      httpRequestFullUri_ = other.httpRequestFullUri_;
      httpResponseCode_ = other.httpResponseCode_;
      httpResponsePhrase_ = other.httpResponsePhrase_;
      httpAuthorization_ = other.httpAuthorization_;
      httpProxyAuthenticate_ = other.httpProxyAuthenticate_;
      httpProxyAuthorization_ = other.httpProxyAuthorization_;
      httpProxyConnectHost_ = other.httpProxyConnectHost_;
      httpProxyConnectPort_ = other.httpProxyConnectPort_;
      httpWwwAuthenticate_ = other.httpWwwAuthenticate_;
      httpContentType_ = other.httpContentType_;
      httpContentLengthHeader_ = other.httpContentLengthHeader_;
      httpContentLength_ = other.httpContentLength_;
      httpContentEncoding_ = other.httpContentEncoding_;
      httpTransferEncoding_ = other.httpTransferEncoding_;
      httpUpgrade_ = other.httpUpgrade_;
      httpUserAgent_ = other.httpUserAgent_;
      httpHost_ = other.httpHost_;
      httpConnection_ = other.httpConnection_;
      httpCookie_ = other.httpCookie_;
      httpCookiePair_ = other.httpCookiePair_;
      httpAccept_ = other.httpAccept_;
      httpReferer_ = other.httpReferer_;
      httpAcceptLanguage_ = other.httpAcceptLanguage_;
      httpAcceptEncoding_ = other.httpAcceptEncoding_;
      httpDate_ = other.httpDate_;
      httpCacheControl_ = other.httpCacheControl_;
      httpServer_ = other.httpServer_;
      httpLocation_ = other.httpLocation_;
      httpSetCookie_ = other.httpSetCookie_;
      httpLastModified_ = other.httpLastModified_;
      httpXForwardedFor_ = other.httpXForwardedFor_;
      httpChunkedTrailerPart_ = other.httpChunkedTrailerPart_;
      httpChunkBoundary_ = other.httpChunkBoundary_;
      httpChunkSize_ = other.httpChunkSize_;
      httpFileData_ = other.httpFileData_;
      httpTime_ = other.httpTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http Clone() {
      return new Http(this);
    }

    /// <summary>Field number for the "HttpNotification" field.</summary>
    public const int HttpNotificationFieldNumber = 1;
    private bool httpNotification_;
    /// <summary>
    /// Notification ('http_http_notification')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpNotification {
      get { return httpNotification_; }
      set {
        httpNotification_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponse" field.</summary>
    public const int HttpResponseFieldNumber = 2;
    private bool httpResponse_;
    /// <summary>
    /// Response ('http_http_response')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpResponse {
      get { return httpResponse_; }
      set {
        httpResponse_ = value;
      }
    }

    /// <summary>Field number for the "HttpRequest" field.</summary>
    public const int HttpRequestFieldNumber = 3;
    private bool httpRequest_;
    /// <summary>
    /// Request ('http_http_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HttpRequest {
      get { return httpRequest_; }
      set {
        httpRequest_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponseNumber" field.</summary>
    public const int HttpResponseNumberFieldNumber = 4;
    private uint httpResponseNumber_;
    /// <summary>
    /// Response number ('http_http_response_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpResponseNumber {
      get { return httpResponseNumber_; }
      set {
        httpResponseNumber_ = value;
      }
    }

    /// <summary>Field number for the "HttpRequestNumber" field.</summary>
    public const int HttpRequestNumberFieldNumber = 5;
    private uint httpRequestNumber_;
    /// <summary>
    /// Request number ('http_http_request_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpRequestNumber {
      get { return httpRequestNumber_; }
      set {
        httpRequestNumber_ = value;
      }
    }

    /// <summary>Field number for the "HttpAuthbasic" field.</summary>
    public const int HttpAuthbasicFieldNumber = 6;
    private string httpAuthbasic_ = "";
    /// <summary>
    /// Credentials ('http_http_authbasic')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthbasic {
      get { return httpAuthbasic_; }
      set {
        httpAuthbasic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestMethod" field.</summary>
    public const int HttpRequestMethodFieldNumber = 7;
    private string httpRequestMethod_ = "";
    /// <summary>
    /// Request Method ('text_http_request_method')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestMethod {
      get { return httpRequestMethod_; }
      set {
        httpRequestMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestVersion" field.</summary>
    public const int HttpRequestVersionFieldNumber = 8;
    private string httpRequestVersion_ = "";
    /// <summary>
    /// Request Version ('text_http_request_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestVersion {
      get { return httpRequestVersion_; }
      set {
        httpRequestVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpResponseVersion" field.</summary>
    public const int HttpResponseVersionFieldNumber = 9;
    private string httpResponseVersion_ = "";
    /// <summary>
    /// Response Version ('text_http_response_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpResponseVersion {
      get { return httpResponseVersion_; }
      set {
        httpResponseVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpRequestFullUri" field.</summary>
    public const int HttpRequestFullUriFieldNumber = 10;
    private string httpRequestFullUri_ = "";
    /// <summary>
    /// Full request URI ('http_http_request_full_uri')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpRequestFullUri {
      get { return httpRequestFullUri_; }
      set {
        httpRequestFullUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpResponseCode" field.</summary>
    public const int HttpResponseCodeFieldNumber = 11;
    private uint httpResponseCode_;
    /// <summary>
    /// Status Code ('text_http_response_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpResponseCode {
      get { return httpResponseCode_; }
      set {
        httpResponseCode_ = value;
      }
    }

    /// <summary>Field number for the "HttpResponsePhrase" field.</summary>
    public const int HttpResponsePhraseFieldNumber = 12;
    private string httpResponsePhrase_ = "";
    /// <summary>
    /// Response Phrase ('text_http_response_phrase')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpResponsePhrase {
      get { return httpResponsePhrase_; }
      set {
        httpResponsePhrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAuthorization" field.</summary>
    public const int HttpAuthorizationFieldNumber = 13;
    private string httpAuthorization_ = "";
    /// <summary>
    /// Authorization ('http_http_authorization')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAuthorization {
      get { return httpAuthorization_; }
      set {
        httpAuthorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyAuthenticate" field.</summary>
    public const int HttpProxyAuthenticateFieldNumber = 14;
    private string httpProxyAuthenticate_ = "";
    /// <summary>
    /// Proxy-Authenticate ('http_http_proxy_authenticate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyAuthenticate {
      get { return httpProxyAuthenticate_; }
      set {
        httpProxyAuthenticate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyAuthorization" field.</summary>
    public const int HttpProxyAuthorizationFieldNumber = 15;
    private string httpProxyAuthorization_ = "";
    /// <summary>
    /// Proxy-Authorization ('http_http_proxy_authorization')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyAuthorization {
      get { return httpProxyAuthorization_; }
      set {
        httpProxyAuthorization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyConnectHost" field.</summary>
    public const int HttpProxyConnectHostFieldNumber = 16;
    private string httpProxyConnectHost_ = "";
    /// <summary>
    /// Proxy-Connect-Hostname ('http_http_proxy_connect_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpProxyConnectHost {
      get { return httpProxyConnectHost_; }
      set {
        httpProxyConnectHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpProxyConnectPort" field.</summary>
    public const int HttpProxyConnectPortFieldNumber = 17;
    private uint httpProxyConnectPort_;
    /// <summary>
    /// Proxy-Connect-Port ('http_http_proxy_connect_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpProxyConnectPort {
      get { return httpProxyConnectPort_; }
      set {
        httpProxyConnectPort_ = value;
      }
    }

    /// <summary>Field number for the "HttpWwwAuthenticate" field.</summary>
    public const int HttpWwwAuthenticateFieldNumber = 18;
    private string httpWwwAuthenticate_ = "";
    /// <summary>
    /// WWW-Authenticate ('http_http_www_authenticate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpWwwAuthenticate {
      get { return httpWwwAuthenticate_; }
      set {
        httpWwwAuthenticate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentType" field.</summary>
    public const int HttpContentTypeFieldNumber = 19;
    private string httpContentType_ = "";
    /// <summary>
    /// Content-Type ('http_http_content_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentType {
      get { return httpContentType_; }
      set {
        httpContentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentLengthHeader" field.</summary>
    public const int HttpContentLengthHeaderFieldNumber = 20;
    private string httpContentLengthHeader_ = "";
    /// <summary>
    /// Content-Length ('http_http_content_length_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentLengthHeader {
      get { return httpContentLengthHeader_; }
      set {
        httpContentLengthHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpContentLength" field.</summary>
    public const int HttpContentLengthFieldNumber = 21;
    private ulong httpContentLength_;
    /// <summary>
    /// Content length ('http_http_content_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HttpContentLength {
      get { return httpContentLength_; }
      set {
        httpContentLength_ = value;
      }
    }

    /// <summary>Field number for the "HttpContentEncoding" field.</summary>
    public const int HttpContentEncodingFieldNumber = 22;
    private string httpContentEncoding_ = "";
    /// <summary>
    /// Content-Encoding ('http_http_content_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpContentEncoding {
      get { return httpContentEncoding_; }
      set {
        httpContentEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpTransferEncoding" field.</summary>
    public const int HttpTransferEncodingFieldNumber = 23;
    private string httpTransferEncoding_ = "";
    /// <summary>
    /// Transfer-Encoding ('http_http_transfer_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpTransferEncoding {
      get { return httpTransferEncoding_; }
      set {
        httpTransferEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpUpgrade" field.</summary>
    public const int HttpUpgradeFieldNumber = 24;
    private string httpUpgrade_ = "";
    /// <summary>
    /// Upgrade ('http_http_upgrade')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpUpgrade {
      get { return httpUpgrade_; }
      set {
        httpUpgrade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpUserAgent" field.</summary>
    public const int HttpUserAgentFieldNumber = 25;
    private string httpUserAgent_ = "";
    /// <summary>
    /// User-Agent ('http_http_user_agent')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpUserAgent {
      get { return httpUserAgent_; }
      set {
        httpUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpHost" field.</summary>
    public const int HttpHostFieldNumber = 26;
    private string httpHost_ = "";
    /// <summary>
    /// Host ('http_http_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpHost {
      get { return httpHost_; }
      set {
        httpHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpConnection" field.</summary>
    public const int HttpConnectionFieldNumber = 27;
    private string httpConnection_ = "";
    /// <summary>
    /// Connection ('http_http_connection')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpConnection {
      get { return httpConnection_; }
      set {
        httpConnection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCookie" field.</summary>
    public const int HttpCookieFieldNumber = 28;
    private string httpCookie_ = "";
    /// <summary>
    /// Cookie ('http_http_cookie')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCookie {
      get { return httpCookie_; }
      set {
        httpCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCookiePair" field.</summary>
    public const int HttpCookiePairFieldNumber = 29;
    private string httpCookiePair_ = "";
    /// <summary>
    /// Cookie pair ('http_http_cookie_pair')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCookiePair {
      get { return httpCookiePair_; }
      set {
        httpCookiePair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAccept" field.</summary>
    public const int HttpAcceptFieldNumber = 30;
    private string httpAccept_ = "";
    /// <summary>
    /// Accept ('http_http_accept')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAccept {
      get { return httpAccept_; }
      set {
        httpAccept_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpReferer" field.</summary>
    public const int HttpRefererFieldNumber = 31;
    private string httpReferer_ = "";
    /// <summary>
    /// Referer ('http_http_referer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpReferer {
      get { return httpReferer_; }
      set {
        httpReferer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAcceptLanguage" field.</summary>
    public const int HttpAcceptLanguageFieldNumber = 32;
    private string httpAcceptLanguage_ = "";
    /// <summary>
    /// Accept-Language ('http_http_accept_language')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAcceptLanguage {
      get { return httpAcceptLanguage_; }
      set {
        httpAcceptLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpAcceptEncoding" field.</summary>
    public const int HttpAcceptEncodingFieldNumber = 33;
    private string httpAcceptEncoding_ = "";
    /// <summary>
    /// Accept Encoding ('http_http_accept_encoding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpAcceptEncoding {
      get { return httpAcceptEncoding_; }
      set {
        httpAcceptEncoding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpDate" field.</summary>
    public const int HttpDateFieldNumber = 34;
    private string httpDate_ = "";
    /// <summary>
    /// Date ('http_http_date')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpDate {
      get { return httpDate_; }
      set {
        httpDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpCacheControl" field.</summary>
    public const int HttpCacheControlFieldNumber = 35;
    private string httpCacheControl_ = "";
    /// <summary>
    /// Cache-Control ('http_http_cache_control')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpCacheControl {
      get { return httpCacheControl_; }
      set {
        httpCacheControl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpServer" field.</summary>
    public const int HttpServerFieldNumber = 36;
    private string httpServer_ = "";
    /// <summary>
    /// Server ('http_http_server')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpServer {
      get { return httpServer_; }
      set {
        httpServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpLocation" field.</summary>
    public const int HttpLocationFieldNumber = 37;
    private string httpLocation_ = "";
    /// <summary>
    /// Location ('http_http_location')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpLocation {
      get { return httpLocation_; }
      set {
        httpLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpSetCookie" field.</summary>
    public const int HttpSetCookieFieldNumber = 38;
    private string httpSetCookie_ = "";
    /// <summary>
    /// Set-Cookie ('http_http_set_cookie')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpSetCookie {
      get { return httpSetCookie_; }
      set {
        httpSetCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpLastModified" field.</summary>
    public const int HttpLastModifiedFieldNumber = 39;
    private string httpLastModified_ = "";
    /// <summary>
    /// Last-Modified ('http_http_last_modified')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpLastModified {
      get { return httpLastModified_; }
      set {
        httpLastModified_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpXForwardedFor" field.</summary>
    public const int HttpXForwardedForFieldNumber = 40;
    private string httpXForwardedFor_ = "";
    /// <summary>
    /// X-Forwarded-For ('http_http_x_forwarded_for')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpXForwardedFor {
      get { return httpXForwardedFor_; }
      set {
        httpXForwardedFor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpChunkedTrailerPart" field.</summary>
    public const int HttpChunkedTrailerPartFieldNumber = 41;
    private string httpChunkedTrailerPart_ = "";
    /// <summary>
    /// trailer-part ('http_http_chunked_trailer_part')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpChunkedTrailerPart {
      get { return httpChunkedTrailerPart_; }
      set {
        httpChunkedTrailerPart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpChunkBoundary" field.</summary>
    public const int HttpChunkBoundaryFieldNumber = 42;
    private pb::ByteString httpChunkBoundary_ = pb::ByteString.Empty;
    /// <summary>
    /// Chunk boundary ('http_http_chunk_boundary')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HttpChunkBoundary {
      get { return httpChunkBoundary_; }
      set {
        httpChunkBoundary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpChunkSize" field.</summary>
    public const int HttpChunkSizeFieldNumber = 43;
    private uint httpChunkSize_;
    /// <summary>
    /// Chunk size ('http_http_chunk_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpChunkSize {
      get { return httpChunkSize_; }
      set {
        httpChunkSize_ = value;
      }
    }

    /// <summary>Field number for the "HttpFileData" field.</summary>
    public const int HttpFileDataFieldNumber = 44;
    private string httpFileData_ = "";
    /// <summary>
    /// File Data ('http_http_file_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpFileData {
      get { return httpFileData_; }
      set {
        httpFileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HttpTime" field.</summary>
    public const int HttpTimeFieldNumber = 45;
    private float httpTime_;
    /// <summary>
    /// Time since request ('http_http_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HttpTime {
      get { return httpTime_; }
      set {
        httpTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Http);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Http other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpNotification != other.HttpNotification) return false;
      if (HttpResponse != other.HttpResponse) return false;
      if (HttpRequest != other.HttpRequest) return false;
      if (HttpResponseNumber != other.HttpResponseNumber) return false;
      if (HttpRequestNumber != other.HttpRequestNumber) return false;
      if (HttpAuthbasic != other.HttpAuthbasic) return false;
      if (HttpRequestMethod != other.HttpRequestMethod) return false;
      if (HttpRequestVersion != other.HttpRequestVersion) return false;
      if (HttpResponseVersion != other.HttpResponseVersion) return false;
      if (HttpRequestFullUri != other.HttpRequestFullUri) return false;
      if (HttpResponseCode != other.HttpResponseCode) return false;
      if (HttpResponsePhrase != other.HttpResponsePhrase) return false;
      if (HttpAuthorization != other.HttpAuthorization) return false;
      if (HttpProxyAuthenticate != other.HttpProxyAuthenticate) return false;
      if (HttpProxyAuthorization != other.HttpProxyAuthorization) return false;
      if (HttpProxyConnectHost != other.HttpProxyConnectHost) return false;
      if (HttpProxyConnectPort != other.HttpProxyConnectPort) return false;
      if (HttpWwwAuthenticate != other.HttpWwwAuthenticate) return false;
      if (HttpContentType != other.HttpContentType) return false;
      if (HttpContentLengthHeader != other.HttpContentLengthHeader) return false;
      if (HttpContentLength != other.HttpContentLength) return false;
      if (HttpContentEncoding != other.HttpContentEncoding) return false;
      if (HttpTransferEncoding != other.HttpTransferEncoding) return false;
      if (HttpUpgrade != other.HttpUpgrade) return false;
      if (HttpUserAgent != other.HttpUserAgent) return false;
      if (HttpHost != other.HttpHost) return false;
      if (HttpConnection != other.HttpConnection) return false;
      if (HttpCookie != other.HttpCookie) return false;
      if (HttpCookiePair != other.HttpCookiePair) return false;
      if (HttpAccept != other.HttpAccept) return false;
      if (HttpReferer != other.HttpReferer) return false;
      if (HttpAcceptLanguage != other.HttpAcceptLanguage) return false;
      if (HttpAcceptEncoding != other.HttpAcceptEncoding) return false;
      if (HttpDate != other.HttpDate) return false;
      if (HttpCacheControl != other.HttpCacheControl) return false;
      if (HttpServer != other.HttpServer) return false;
      if (HttpLocation != other.HttpLocation) return false;
      if (HttpSetCookie != other.HttpSetCookie) return false;
      if (HttpLastModified != other.HttpLastModified) return false;
      if (HttpXForwardedFor != other.HttpXForwardedFor) return false;
      if (HttpChunkedTrailerPart != other.HttpChunkedTrailerPart) return false;
      if (HttpChunkBoundary != other.HttpChunkBoundary) return false;
      if (HttpChunkSize != other.HttpChunkSize) return false;
      if (HttpFileData != other.HttpFileData) return false;
      if (HttpTime != other.HttpTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpNotification != false) hash ^= HttpNotification.GetHashCode();
      if (HttpResponse != false) hash ^= HttpResponse.GetHashCode();
      if (HttpRequest != false) hash ^= HttpRequest.GetHashCode();
      if (HttpResponseNumber != 0) hash ^= HttpResponseNumber.GetHashCode();
      if (HttpRequestNumber != 0) hash ^= HttpRequestNumber.GetHashCode();
      if (HttpAuthbasic.Length != 0) hash ^= HttpAuthbasic.GetHashCode();
      if (HttpRequestMethod.Length != 0) hash ^= HttpRequestMethod.GetHashCode();
      if (HttpRequestVersion.Length != 0) hash ^= HttpRequestVersion.GetHashCode();
      if (HttpResponseVersion.Length != 0) hash ^= HttpResponseVersion.GetHashCode();
      if (HttpRequestFullUri.Length != 0) hash ^= HttpRequestFullUri.GetHashCode();
      if (HttpResponseCode != 0) hash ^= HttpResponseCode.GetHashCode();
      if (HttpResponsePhrase.Length != 0) hash ^= HttpResponsePhrase.GetHashCode();
      if (HttpAuthorization.Length != 0) hash ^= HttpAuthorization.GetHashCode();
      if (HttpProxyAuthenticate.Length != 0) hash ^= HttpProxyAuthenticate.GetHashCode();
      if (HttpProxyAuthorization.Length != 0) hash ^= HttpProxyAuthorization.GetHashCode();
      if (HttpProxyConnectHost.Length != 0) hash ^= HttpProxyConnectHost.GetHashCode();
      if (HttpProxyConnectPort != 0) hash ^= HttpProxyConnectPort.GetHashCode();
      if (HttpWwwAuthenticate.Length != 0) hash ^= HttpWwwAuthenticate.GetHashCode();
      if (HttpContentType.Length != 0) hash ^= HttpContentType.GetHashCode();
      if (HttpContentLengthHeader.Length != 0) hash ^= HttpContentLengthHeader.GetHashCode();
      if (HttpContentLength != 0UL) hash ^= HttpContentLength.GetHashCode();
      if (HttpContentEncoding.Length != 0) hash ^= HttpContentEncoding.GetHashCode();
      if (HttpTransferEncoding.Length != 0) hash ^= HttpTransferEncoding.GetHashCode();
      if (HttpUpgrade.Length != 0) hash ^= HttpUpgrade.GetHashCode();
      if (HttpUserAgent.Length != 0) hash ^= HttpUserAgent.GetHashCode();
      if (HttpHost.Length != 0) hash ^= HttpHost.GetHashCode();
      if (HttpConnection.Length != 0) hash ^= HttpConnection.GetHashCode();
      if (HttpCookie.Length != 0) hash ^= HttpCookie.GetHashCode();
      if (HttpCookiePair.Length != 0) hash ^= HttpCookiePair.GetHashCode();
      if (HttpAccept.Length != 0) hash ^= HttpAccept.GetHashCode();
      if (HttpReferer.Length != 0) hash ^= HttpReferer.GetHashCode();
      if (HttpAcceptLanguage.Length != 0) hash ^= HttpAcceptLanguage.GetHashCode();
      if (HttpAcceptEncoding.Length != 0) hash ^= HttpAcceptEncoding.GetHashCode();
      if (HttpDate.Length != 0) hash ^= HttpDate.GetHashCode();
      if (HttpCacheControl.Length != 0) hash ^= HttpCacheControl.GetHashCode();
      if (HttpServer.Length != 0) hash ^= HttpServer.GetHashCode();
      if (HttpLocation.Length != 0) hash ^= HttpLocation.GetHashCode();
      if (HttpSetCookie.Length != 0) hash ^= HttpSetCookie.GetHashCode();
      if (HttpLastModified.Length != 0) hash ^= HttpLastModified.GetHashCode();
      if (HttpXForwardedFor.Length != 0) hash ^= HttpXForwardedFor.GetHashCode();
      if (HttpChunkedTrailerPart.Length != 0) hash ^= HttpChunkedTrailerPart.GetHashCode();
      if (HttpChunkBoundary.Length != 0) hash ^= HttpChunkBoundary.GetHashCode();
      if (HttpChunkSize != 0) hash ^= HttpChunkSize.GetHashCode();
      if (HttpFileData.Length != 0) hash ^= HttpFileData.GetHashCode();
      if (HttpTime != 0F) hash ^= HttpTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpNotification != false) {
        output.WriteRawTag(8);
        output.WriteBool(HttpNotification);
      }
      if (HttpResponse != false) {
        output.WriteRawTag(16);
        output.WriteBool(HttpResponse);
      }
      if (HttpRequest != false) {
        output.WriteRawTag(24);
        output.WriteBool(HttpRequest);
      }
      if (HttpResponseNumber != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HttpResponseNumber);
      }
      if (HttpRequestNumber != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HttpRequestNumber);
      }
      if (HttpAuthbasic.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HttpAuthbasic);
      }
      if (HttpRequestMethod.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HttpRequestMethod);
      }
      if (HttpRequestVersion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HttpRequestVersion);
      }
      if (HttpResponseVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(HttpResponseVersion);
      }
      if (HttpRequestFullUri.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(HttpRequestFullUri);
      }
      if (HttpResponseCode != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(HttpResponseCode);
      }
      if (HttpResponsePhrase.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HttpResponsePhrase);
      }
      if (HttpAuthorization.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HttpAuthorization);
      }
      if (HttpProxyAuthenticate.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(HttpProxyAuthenticate);
      }
      if (HttpProxyAuthorization.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(HttpProxyAuthorization);
      }
      if (HttpProxyConnectHost.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HttpProxyConnectHost);
      }
      if (HttpProxyConnectPort != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(HttpProxyConnectPort);
      }
      if (HttpWwwAuthenticate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(HttpWwwAuthenticate);
      }
      if (HttpContentType.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(HttpContentType);
      }
      if (HttpContentLengthHeader.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(HttpContentLengthHeader);
      }
      if (HttpContentLength != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(HttpContentLength);
      }
      if (HttpContentEncoding.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(HttpContentEncoding);
      }
      if (HttpTransferEncoding.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(HttpTransferEncoding);
      }
      if (HttpUpgrade.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(HttpUpgrade);
      }
      if (HttpUserAgent.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(HttpUserAgent);
      }
      if (HttpHost.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(HttpHost);
      }
      if (HttpConnection.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(HttpConnection);
      }
      if (HttpCookie.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(HttpCookie);
      }
      if (HttpCookiePair.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(HttpCookiePair);
      }
      if (HttpAccept.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(HttpAccept);
      }
      if (HttpReferer.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(HttpReferer);
      }
      if (HttpAcceptLanguage.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(HttpAcceptLanguage);
      }
      if (HttpAcceptEncoding.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(HttpAcceptEncoding);
      }
      if (HttpDate.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(HttpDate);
      }
      if (HttpCacheControl.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(HttpCacheControl);
      }
      if (HttpServer.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(HttpServer);
      }
      if (HttpLocation.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(HttpLocation);
      }
      if (HttpSetCookie.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(HttpSetCookie);
      }
      if (HttpLastModified.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(HttpLastModified);
      }
      if (HttpXForwardedFor.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(HttpXForwardedFor);
      }
      if (HttpChunkedTrailerPart.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(HttpChunkedTrailerPart);
      }
      if (HttpChunkBoundary.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteBytes(HttpChunkBoundary);
      }
      if (HttpChunkSize != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(HttpChunkSize);
      }
      if (HttpFileData.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(HttpFileData);
      }
      if (HttpTime != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(HttpTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpNotification != false) {
        size += 1 + 1;
      }
      if (HttpResponse != false) {
        size += 1 + 1;
      }
      if (HttpRequest != false) {
        size += 1 + 1;
      }
      if (HttpResponseNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpResponseNumber);
      }
      if (HttpRequestNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpRequestNumber);
      }
      if (HttpAuthbasic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthbasic);
      }
      if (HttpRequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestMethod);
      }
      if (HttpRequestVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestVersion);
      }
      if (HttpResponseVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpResponseVersion);
      }
      if (HttpRequestFullUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpRequestFullUri);
      }
      if (HttpResponseCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpResponseCode);
      }
      if (HttpResponsePhrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpResponsePhrase);
      }
      if (HttpAuthorization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpAuthorization);
      }
      if (HttpProxyAuthenticate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpProxyAuthenticate);
      }
      if (HttpProxyAuthorization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpProxyAuthorization);
      }
      if (HttpProxyConnectHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpProxyConnectHost);
      }
      if (HttpProxyConnectPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HttpProxyConnectPort);
      }
      if (HttpWwwAuthenticate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpWwwAuthenticate);
      }
      if (HttpContentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentType);
      }
      if (HttpContentLengthHeader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentLengthHeader);
      }
      if (HttpContentLength != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HttpContentLength);
      }
      if (HttpContentEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpContentEncoding);
      }
      if (HttpTransferEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpTransferEncoding);
      }
      if (HttpUpgrade.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpUpgrade);
      }
      if (HttpUserAgent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpUserAgent);
      }
      if (HttpHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpHost);
      }
      if (HttpConnection.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpConnection);
      }
      if (HttpCookie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCookie);
      }
      if (HttpCookiePair.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCookiePair);
      }
      if (HttpAccept.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAccept);
      }
      if (HttpReferer.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpReferer);
      }
      if (HttpAcceptLanguage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAcceptLanguage);
      }
      if (HttpAcceptEncoding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpAcceptEncoding);
      }
      if (HttpDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpDate);
      }
      if (HttpCacheControl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpCacheControl);
      }
      if (HttpServer.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpServer);
      }
      if (HttpLocation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpLocation);
      }
      if (HttpSetCookie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpSetCookie);
      }
      if (HttpLastModified.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpLastModified);
      }
      if (HttpXForwardedFor.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpXForwardedFor);
      }
      if (HttpChunkedTrailerPart.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpChunkedTrailerPart);
      }
      if (HttpChunkBoundary.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(HttpChunkBoundary);
      }
      if (HttpChunkSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HttpChunkSize);
      }
      if (HttpFileData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HttpFileData);
      }
      if (HttpTime != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Http other) {
      if (other == null) {
        return;
      }
      if (other.HttpNotification != false) {
        HttpNotification = other.HttpNotification;
      }
      if (other.HttpResponse != false) {
        HttpResponse = other.HttpResponse;
      }
      if (other.HttpRequest != false) {
        HttpRequest = other.HttpRequest;
      }
      if (other.HttpResponseNumber != 0) {
        HttpResponseNumber = other.HttpResponseNumber;
      }
      if (other.HttpRequestNumber != 0) {
        HttpRequestNumber = other.HttpRequestNumber;
      }
      if (other.HttpAuthbasic.Length != 0) {
        HttpAuthbasic = other.HttpAuthbasic;
      }
      if (other.HttpRequestMethod.Length != 0) {
        HttpRequestMethod = other.HttpRequestMethod;
      }
      if (other.HttpRequestVersion.Length != 0) {
        HttpRequestVersion = other.HttpRequestVersion;
      }
      if (other.HttpResponseVersion.Length != 0) {
        HttpResponseVersion = other.HttpResponseVersion;
      }
      if (other.HttpRequestFullUri.Length != 0) {
        HttpRequestFullUri = other.HttpRequestFullUri;
      }
      if (other.HttpResponseCode != 0) {
        HttpResponseCode = other.HttpResponseCode;
      }
      if (other.HttpResponsePhrase.Length != 0) {
        HttpResponsePhrase = other.HttpResponsePhrase;
      }
      if (other.HttpAuthorization.Length != 0) {
        HttpAuthorization = other.HttpAuthorization;
      }
      if (other.HttpProxyAuthenticate.Length != 0) {
        HttpProxyAuthenticate = other.HttpProxyAuthenticate;
      }
      if (other.HttpProxyAuthorization.Length != 0) {
        HttpProxyAuthorization = other.HttpProxyAuthorization;
      }
      if (other.HttpProxyConnectHost.Length != 0) {
        HttpProxyConnectHost = other.HttpProxyConnectHost;
      }
      if (other.HttpProxyConnectPort != 0) {
        HttpProxyConnectPort = other.HttpProxyConnectPort;
      }
      if (other.HttpWwwAuthenticate.Length != 0) {
        HttpWwwAuthenticate = other.HttpWwwAuthenticate;
      }
      if (other.HttpContentType.Length != 0) {
        HttpContentType = other.HttpContentType;
      }
      if (other.HttpContentLengthHeader.Length != 0) {
        HttpContentLengthHeader = other.HttpContentLengthHeader;
      }
      if (other.HttpContentLength != 0UL) {
        HttpContentLength = other.HttpContentLength;
      }
      if (other.HttpContentEncoding.Length != 0) {
        HttpContentEncoding = other.HttpContentEncoding;
      }
      if (other.HttpTransferEncoding.Length != 0) {
        HttpTransferEncoding = other.HttpTransferEncoding;
      }
      if (other.HttpUpgrade.Length != 0) {
        HttpUpgrade = other.HttpUpgrade;
      }
      if (other.HttpUserAgent.Length != 0) {
        HttpUserAgent = other.HttpUserAgent;
      }
      if (other.HttpHost.Length != 0) {
        HttpHost = other.HttpHost;
      }
      if (other.HttpConnection.Length != 0) {
        HttpConnection = other.HttpConnection;
      }
      if (other.HttpCookie.Length != 0) {
        HttpCookie = other.HttpCookie;
      }
      if (other.HttpCookiePair.Length != 0) {
        HttpCookiePair = other.HttpCookiePair;
      }
      if (other.HttpAccept.Length != 0) {
        HttpAccept = other.HttpAccept;
      }
      if (other.HttpReferer.Length != 0) {
        HttpReferer = other.HttpReferer;
      }
      if (other.HttpAcceptLanguage.Length != 0) {
        HttpAcceptLanguage = other.HttpAcceptLanguage;
      }
      if (other.HttpAcceptEncoding.Length != 0) {
        HttpAcceptEncoding = other.HttpAcceptEncoding;
      }
      if (other.HttpDate.Length != 0) {
        HttpDate = other.HttpDate;
      }
      if (other.HttpCacheControl.Length != 0) {
        HttpCacheControl = other.HttpCacheControl;
      }
      if (other.HttpServer.Length != 0) {
        HttpServer = other.HttpServer;
      }
      if (other.HttpLocation.Length != 0) {
        HttpLocation = other.HttpLocation;
      }
      if (other.HttpSetCookie.Length != 0) {
        HttpSetCookie = other.HttpSetCookie;
      }
      if (other.HttpLastModified.Length != 0) {
        HttpLastModified = other.HttpLastModified;
      }
      if (other.HttpXForwardedFor.Length != 0) {
        HttpXForwardedFor = other.HttpXForwardedFor;
      }
      if (other.HttpChunkedTrailerPart.Length != 0) {
        HttpChunkedTrailerPart = other.HttpChunkedTrailerPart;
      }
      if (other.HttpChunkBoundary.Length != 0) {
        HttpChunkBoundary = other.HttpChunkBoundary;
      }
      if (other.HttpChunkSize != 0) {
        HttpChunkSize = other.HttpChunkSize;
      }
      if (other.HttpFileData.Length != 0) {
        HttpFileData = other.HttpFileData;
      }
      if (other.HttpTime != 0F) {
        HttpTime = other.HttpTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HttpNotification = input.ReadBool();
            break;
          }
          case 16: {
            HttpResponse = input.ReadBool();
            break;
          }
          case 24: {
            HttpRequest = input.ReadBool();
            break;
          }
          case 32: {
            HttpResponseNumber = input.ReadUInt32();
            break;
          }
          case 40: {
            HttpRequestNumber = input.ReadUInt32();
            break;
          }
          case 50: {
            HttpAuthbasic = input.ReadString();
            break;
          }
          case 58: {
            HttpRequestMethod = input.ReadString();
            break;
          }
          case 66: {
            HttpRequestVersion = input.ReadString();
            break;
          }
          case 74: {
            HttpResponseVersion = input.ReadString();
            break;
          }
          case 82: {
            HttpRequestFullUri = input.ReadString();
            break;
          }
          case 88: {
            HttpResponseCode = input.ReadUInt32();
            break;
          }
          case 98: {
            HttpResponsePhrase = input.ReadString();
            break;
          }
          case 106: {
            HttpAuthorization = input.ReadString();
            break;
          }
          case 114: {
            HttpProxyAuthenticate = input.ReadString();
            break;
          }
          case 122: {
            HttpProxyAuthorization = input.ReadString();
            break;
          }
          case 130: {
            HttpProxyConnectHost = input.ReadString();
            break;
          }
          case 136: {
            HttpProxyConnectPort = input.ReadUInt32();
            break;
          }
          case 146: {
            HttpWwwAuthenticate = input.ReadString();
            break;
          }
          case 154: {
            HttpContentType = input.ReadString();
            break;
          }
          case 162: {
            HttpContentLengthHeader = input.ReadString();
            break;
          }
          case 168: {
            HttpContentLength = input.ReadUInt64();
            break;
          }
          case 178: {
            HttpContentEncoding = input.ReadString();
            break;
          }
          case 186: {
            HttpTransferEncoding = input.ReadString();
            break;
          }
          case 194: {
            HttpUpgrade = input.ReadString();
            break;
          }
          case 202: {
            HttpUserAgent = input.ReadString();
            break;
          }
          case 210: {
            HttpHost = input.ReadString();
            break;
          }
          case 218: {
            HttpConnection = input.ReadString();
            break;
          }
          case 226: {
            HttpCookie = input.ReadString();
            break;
          }
          case 234: {
            HttpCookiePair = input.ReadString();
            break;
          }
          case 242: {
            HttpAccept = input.ReadString();
            break;
          }
          case 250: {
            HttpReferer = input.ReadString();
            break;
          }
          case 258: {
            HttpAcceptLanguage = input.ReadString();
            break;
          }
          case 266: {
            HttpAcceptEncoding = input.ReadString();
            break;
          }
          case 274: {
            HttpDate = input.ReadString();
            break;
          }
          case 282: {
            HttpCacheControl = input.ReadString();
            break;
          }
          case 290: {
            HttpServer = input.ReadString();
            break;
          }
          case 298: {
            HttpLocation = input.ReadString();
            break;
          }
          case 306: {
            HttpSetCookie = input.ReadString();
            break;
          }
          case 314: {
            HttpLastModified = input.ReadString();
            break;
          }
          case 322: {
            HttpXForwardedFor = input.ReadString();
            break;
          }
          case 330: {
            HttpChunkedTrailerPart = input.ReadString();
            break;
          }
          case 338: {
            HttpChunkBoundary = input.ReadBytes();
            break;
          }
          case 344: {
            HttpChunkSize = input.ReadUInt32();
            break;
          }
          case 354: {
            HttpFileData = input.ReadString();
            break;
          }
          case 365: {
            HttpTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
