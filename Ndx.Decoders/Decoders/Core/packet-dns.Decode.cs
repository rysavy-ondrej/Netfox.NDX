// This is file was generated by netdx on (2017-11-24 12:34:49 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Core
{
  public sealed partial class Dns
  {
    public static Dns DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Dns DecodeJson(JToken token)
    {
      var obj = new Dns();
      {
        var val = token["dns_dns_flags"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsFlags = default(ByteString); }
      }
      {
        var val = token["dns_dns_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsId = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["dns_dns_response_in"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsResponseIn = default(Int64); }
      }
      {
        var val = token["dns_dns_response_to"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsResponseTo = default(Int64); }
      }
      {
        var val = token["dns_dns_time"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsTime = Convert.ToSingle(propValue); }
      }
      {
        var val = token["dns_dns_count_add_rr"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountAddRr = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token[""];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsQry = default(ByteString); }
      }
      {
        var val = token[""];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsResp = default(ByteString); }
      }
      {
        var val = token["dns_dns_count_queries"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountQueries = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["dns_dns_count_zones"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountZones = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["dns_dns_count_answers"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountAnswers = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["dns_dns_count_prerequisites"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountPrerequisites = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["dns_dns_count_auth_rr"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountAuthRr = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["dns_dns_count_updates"];
        if (val != null) { var propValue = val.Value<string>(); obj.DnsCountUpdates = Convert.ToUInt32(propValue, 10); }
      }
      return obj;
    }
    public static Dns DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Dns();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Dns obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "dns_dns_flags": obj.DnsFlags = default(ByteString); break;
      case "dns_dns_id": obj.DnsId = Convert.ToUInt32(propValue, 16); break;
      case "dns_dns_response_in": obj.DnsResponseIn = default(Int64); break;
      case "dns_dns_response_to": obj.DnsResponseTo = default(Int64); break;
      case "dns_dns_time": obj.DnsTime = Convert.ToSingle(propValue); break;
      case "dns_dns_count_add_rr": obj.DnsCountAddRr = Convert.ToUInt32(propValue, 10); break;
      case "": obj.DnsQry = default(ByteString); break;
      case "": obj.DnsResp = default(ByteString); break;
      case "dns_dns_count_queries": obj.DnsCountQueries = Convert.ToUInt32(propValue, 10); break;
      case "dns_dns_count_zones": obj.DnsCountZones = Convert.ToUInt32(propValue, 10); break;
      case "dns_dns_count_answers": obj.DnsCountAnswers = Convert.ToUInt32(propValue, 10); break;
      case "dns_dns_count_prerequisites": obj.DnsCountPrerequisites = Convert.ToUInt32(propValue, 10); break;
      case "dns_dns_count_auth_rr": obj.DnsCountAuthRr = Convert.ToUInt32(propValue, 10); break;
      case "dns_dns_count_updates": obj.DnsCountUpdates = Convert.ToUInt32(propValue, 10); break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
