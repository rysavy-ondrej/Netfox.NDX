// This is file was generated by netdx on (2017-11-23 5:00:36 PM.
using Newtonsoft.Json.Linq;
using Google.Protobuf;
using System;
namespace Ndx.Decoders.Core
{
  public sealed partial class Dns
  {
    public static Dns DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Dns DecodeJson(JToken token)
    {
      var obj = new Dns();
      {
        var val = token["dns_dns_flags"];
        if (val != null) obj.DnsFlags = default(ByteString);
      }
      {
        var val = token["dns_dns_id"];
        if (val != null) obj.DnsId = Convert.ToUInt32(val.Value<string>(), 16);
      }
      {
        var val = token["dns_dns_response_in"];
        if (val != null) obj.DnsResponseIn = default(Int64);
      }
      {
        var val = token["dns_dns_response_to"];
        if (val != null) obj.DnsResponseTo = default(Int64);
      }
      {
        var val = token["dns_dns_time"];
        if (val != null) obj.DnsTime = Convert.ToSingle(val.Value<string>());
      }
      {
        var val = token["dns_dns_count_add_rr"];
        if (val != null) obj.DnsCountAddRr = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token[""];
        if (val != null) obj.DnsQry = default(ByteString);
      }
      {
        var val = token[""];
        if (val != null) obj.DnsResp = default(ByteString);
      }
      {
        var val = token["dns_dns_count_queries"];
        if (val != null) obj.DnsCountQueries = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token["dns_dns_count_zones"];
        if (val != null) obj.DnsCountZones = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token["dns_dns_count_answers"];
        if (val != null) obj.DnsCountAnswers = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token["dns_dns_count_prerequisites"];
        if (val != null) obj.DnsCountPrerequisites = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token["dns_dns_count_auth_rr"];
        if (val != null) obj.DnsCountAuthRr = Convert.ToUInt32(val.Value<string>(), 10);
      }
      {
        var val = token["dns_dns_count_updates"];
        if (val != null) obj.DnsCountUpdates = Convert.ToUInt32(val.Value<string>(), 10);
      }
      return obj;
    }

                    public static Google.Protobuf.ByteString StringToBytes(string str)
                    {
                        var bstrArr = str.Split(':');
                        var byteArray = new byte[bstrArr.Length];
                        for (int i = 0; i < bstrArr.Length; i++)
                        {
                            byteArray[i] = Convert.ToByte(bstrArr[i], 16);
                        }
                        return Google.Protobuf.ByteString.CopyFrom( byteArray );
                    }
                    
  }
}
