// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-icmpv6.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-icmpv6.proto</summary>
  public static partial class PacketIcmpv6Reflection {

    #region Descriptor
    /// <summary>File descriptor for packet-icmpv6.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIcmpv6Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwYWNrZXQtaWNtcHY2LnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSLoZgoG",
            "SWNtcHY2EhIKCkljbXB2NlR5cGUYASABKA0SEgoKSWNtcHY2Q29kZRgCIAEo",
            "DRIWCg5JY21wdjZDaGVja3N1bRgDIAEoDRIcChRJY21wdjZDaGVja3N1bVN0",
            "YXR1cxgEIAEoDRIWCg5JY21wdjZSZXNlcnZlZBgFIAEoDBISCgpJY21wdjZE",
            "YXRhGAYgASgMEhkKEUljbXB2NlVua25vd25EYXRhGAcgASgMEhEKCUljbXB2",
            "Nk10dRgIIAEoDRIVCg1JY21wdjZQb2ludGVyGAkgASgNEhwKFEljbXB2NkVj",
            "aG9JZGVudGlmaWVyGAogASgNEiAKGEljbXB2NkVjaG9TZXF1ZW5jZU51bWJl",
            "chgLIAEoDRITCgtJY21wdjZOb25jZRgMIAEoDBIdChVJY21wdjZOZFJhQ3Vy",
            "SG9wTGltaXQYDSABKA0SFgoOSWNtcHY2TmRSYUZsYWcYDiABKA0SFwoPSWNt",
            "cHY2TmRSYUZsYWdNGA8gASgIEhcKD0ljbXB2Nk5kUmFGbGFnTxgQIAEoCBIX",
            "Cg9JY21wdjZOZFJhRmxhZ0gYESABKAgSGQoRSWNtcHY2TmRSYUZsYWdQcmYY",
            "EiABKA0SFwoPSWNtcHY2TmRSYUZsYWdQGBMgASgIEhkKEUljbXB2Nk5kUmFG",
            "bGFnUnN2GBQgASgNEiAKGEljbXB2Nk5kUmFSb3V0ZXJMaWZldGltZRgVIAEo",
            "DRIfChdJY21wdjZOZFJhUmVhY2hhYmxlVGltZRgWIAEoDRIeChZJY21wdjZO",
            "ZFJhUmV0cmFuc1RpbWVyGBcgASgNEh8KF0ljbXB2Nk5kTnNUYXJnZXRBZGRy",
            "ZXNzGBggASgMEhYKDkljbXB2Nk5kTmFGbGFnGBkgASgNEhcKD0ljbXB2Nk5k",
            "TmFGbGFnUhgaIAEoCBIXCg9JY21wdjZOZE5hRmxhZ1MYGyABKAgSFwoPSWNt",
            "cHY2TmROYUZsYWdPGBwgASgIEhkKEUljbXB2Nk5kTmFGbGFnUnN2GB0gASgN",
            "Eh8KF0ljbXB2Nk5kTmFUYXJnZXRBZGRyZXNzGB4gASgMEh8KF0ljbXB2Nk5k",
            "UmRUYXJnZXRBZGRyZXNzGB8gASgMEiQKHEljbXB2NlJkTmFEZXN0aW5hdGlv",
            "bkFkZHJlc3MYICABKAwSEQoJSWNtcHY2T3B0GCEgASgFEhUKDUljbXB2Nk9w",
            "dFR5cGUYIiABKA0SFwoPSWNtcHY2T3B0TGVuZ3RoGCMgASgNEhkKEUljbXB2",
            "Nk9wdFJlc2VydmVkGCQgASgFEhgKEEljbXB2Nk9wdFBhZGRpbmcYJSABKAUS",
            "GQoRSWNtcHY2T3B0TGlua2FkZHIYJiABKAwSHAoUSWNtcHY2T3B0U3JjTGlu",
            "a2FkZHIYJyABKAwSHwoXSWNtcHY2T3B0VGFyZ2V0TGlua2FkZHIYKCABKAwS",
            "HgoWSWNtcHY2T3B0TGlua2FkZHJFdWk2NBgpIAEoDBIhChlJY21wdjZPcHRT",
            "cmNMaW5rYWRkckV1aTY0GCogASgMEiQKHEljbXB2Nk9wdFRhcmdldExpbmth",
            "ZGRyRXVpNjQYKyABKAwSHQoVSWNtcHY2T3B0UHJlZml4TGVuZ3RoGCwgASgN",
            "EhsKE0ljbXB2Nk9wdFByZWZpeEZsYWcYLSABKA0SHAoUSWNtcHY2T3B0UHJl",
            "Zml4RmxhZ0wYLiABKAgSHAoUSWNtcHY2T3B0UHJlZml4RmxhZ0EYLyABKAgS",
            "HAoUSWNtcHY2T3B0UHJlZml4RmxhZ1IYMCABKAgSIwobSWNtcHY2T3B0UHJl",
            "Zml4RmxhZ1Jlc2VydmVkGDEgASgNEiQKHEljbXB2Nk9wdFByZWZpeFZhbGlk",
            "TGlmZXRpbWUYMiABKA0SKAogSWNtcHY2T3B0UHJlZml4UHJlZmVycmVkTGlm",
            "ZXRpbWUYMyABKA0SFwoPSWNtcHY2T3B0UHJlZml4GDQgASgMEh0KFUljbXB2",
            "Nk9wdENnYVBhZExlbmd0aBg1IAEoDRIUCgxJY21wdjZPcHRDZ2EYNiABKAwS",
            "HAoUSWNtcHY2T3B0Q2dhTW9kaWZpZXIYNyABKAwSIAoYSWNtcHY2T3B0Q2dh",
            "U3VibmV0UHJlZml4GDggASgMEhkKEUljbXB2Nk9wdENnYUNvdW50GDkgASgM",
            "EhsKE0ljbXB2Nk9wdENnYUV4dFR5cGUYOiABKA0SHQoVSWNtcHY2T3B0Q2dh",
            "RXh0TGVuZ3RoGDsgASgNEhsKE0ljbXB2Nk9wdENnYUV4dERhdGEYPCABKAwS",
            "GwoTSWNtcHY2T3B0UnNhS2V5SGFzaBg9IAEoDBIoCiBJY21wdjZPcHREaWdp",
            "dGFsU2lnbmF0dXJlUGFkZGluZxg+IAEoBRIaChJJY21wdjZPcHRQc0tleUhh",
            "c2gYPyABKAwSGgoSSWNtcHY2T3B0VGltZXN0YW1wGEAgASgDEhYKDkljbXB2",
            "Nk9wdE5vbmNlGEEgASgMEiMKG0ljbXB2Nk9wdENlcnRpZmljYXRlUGFkZGlu",
            "ZxhCIAEoBRIeChZJY21wdjZPcHRJcGFPcHRpb25Db2RlGEMgASgNEh0KFUlj",
            "bXB2Nk9wdElwYVByZWZpeExlbhhEIAEoDRIfChdJY21wdjZPcHRJcGFJcHY2",
            "QWRkcmVzcxhFIAEoDBIfChdJY21wdjZPcHROcnBpT3B0aW9uQ29kZRhGIAEo",
            "DRIeChZJY21wdjZPcHROcnBpUHJlZml4TGVuGEcgASgNEhsKE0ljbXB2Nk9w",
            "dE5ycGlQcmVmaXgYSCABKAwSHgoWSWNtcHY2T3B0TGxhT3B0aW9uQ29kZRhJ",
            "IAEoDRIZChFJY21wdjZPcHRMbGFCeXRlcxhKIAEoDBIgChhJY21wdjZPcHRO",
            "YWFja09wdGlvbkNvZGUYSyABKA0SHAoUSWNtcHY2T3B0TmFhY2tTdGF0dXMY",
            "TCABKA0SIgoaSWNtcHY2T3B0TmFhY2tTdXBwbGllZE5jb2EYTSABKAwSHAoU",
            "SWNtcHY2T3B0TWFwRGlzdGFuY2UYTiABKA0SHgoWSWNtcHY2T3B0TWFwUHJl",
            "ZmVyZW5jZRhPIAEoDRIYChBJY21wdjZPcHRNYXBGbGFnGFAgASgNEhkKEUlj",
            "bXB2Nk9wdE1hcEZsYWdSGFEgASgIEiAKGEljbXB2Nk9wdE1hcEZsYWdSZXNl",
            "cnZlZBhSIAEoDRIhChlJY21wdjZPcHRNYXBWYWxpZExpZmV0aW1lGFMgASgN",
            "EiEKGUljbXB2Nk9wdE1hcEdsb2JhbEFkZHJlc3MYVCABKAwSHgoWSWNtcHY2",
            "T3B0Um91dGVJbmZvRmxhZxhVIAEoDRItCiVJY21wdjZPcHRSb3V0ZUluZm9G",
            "bGFnUm91dGVQcmVmZXJlbmNlGFYgASgNEiYKHkljbXB2Nk9wdFJvdXRlSW5m",
            "b0ZsYWdSZXNlcnZlZBhXIAEoDRIeChZJY21wdjZPcHRSb3V0ZUxpZmV0aW1l",
            "GFggASgNEhkKEUljbXB2Nk9wdE5hbWVUeXBlGFkgASgNEhkKEUljbXB2Nk9w",
            "dE5hbWVYNTAxGFogASgMEh0KFUljbXB2Nk9wdE5hbWVUeXBlRnFkbhhbIAEo",
            "CRIcChRJY21wdjZTZW5kSWRlbnRpZmllchhcIAEoDRIfChdJY21wdjZTZW5k",
            "QWxsQ29tcG9uZW50cxhdIAEoDRIbChNJY21wdjZTZW5kQ29tcG9uZW50GF4g",
            "ASgNEhYKDkljbXB2Nlg1MDlOYW1lGF8gASgNEh0KFUljbXB2Nlg1MDlDZXJ0",
            "aWZpY2F0ZRhgIAEoBRIhChlJY21wdjZPcHRSZWRpcmVjdGVkUGFja2V0GGEg",
            "ASgFEhQKDEljbXB2Nk9wdE10dRhiIAEoDRIiChpJY21wdjZPcHROYm1hU2hv",
            "cnRjdXRMaW1pdBhjIAEoDRImCh5JY21wdjZPcHRBZHZlcnRpc2VtZW50SW50",
            "ZXJ2YWwYZCABKA0SJAocSWNtcHY2T3B0SG9tZUFnZW50UHJlZmVyZW5jZRhl",
            "IAEoDRIiChpJY21wdjZPcHRIb21lQWdlbnRMaWZldGltZRhmIAEoDRIcChRJ",
            "Y21wdjZPcHRJcHY2QWRkcmVzcxhnIAEoDBIeChZJY21wdjZPcHRSZG5zc0xp",
            "ZmV0aW1lGGggASgNEhYKDkljbXB2Nk9wdFJkbnNzGGkgASgMEhQKDEljbXB2",
            "Nk9wdEVmbxhqIAEoDRIVCg1JY21wdjZPcHRFZm9NGGsgASgIEhUKDUljbXB2",
            "Nk9wdEVmb08YbCABKAgSFQoNSWNtcHY2T3B0RWZvSBhtIAEoCBIXCg9JY21w",
            "djZPcHRFZm9QcmYYbiABKA0SFQoNSWNtcHY2T3B0RWZvUBhvIAEoCBIXCg9J",
            "Y21wdjZPcHRFZm9Sc3YYcCABKA0SHQoVSWNtcHY2T3B0SGtyUGFkTGVuZ3Ro",
            "GHEgASgNEhYKDkljbXB2Nk9wdEhrckF0GHIgASgNEhwKFEljbXB2Nk9wdEhr",
            "clJlc2VydmVkGHMgASgNEicKH0ljbXB2Nk9wdEhrckVuY3J5cHRpb25QdWJs",
            "aWNLZXkYdCABKAwSGwoTSWNtcHY2T3B0SGtyUGFkZGluZxh1IAEoDBIcChRJ",
            "Y21wdjZPcHRIa3JMaWZldGltZRh2IAEoDRIoCiBJY21wdjZPcHRIa3JFbmNy",
            "eXB0ZWRIYW5kb3ZlcktleRh3IAEoDBIeChZJY21wdjZPcHRIYWlPcHRpb25D",
            "b2RlGHggASgNEhoKEkljbXB2Nk9wdEhhaUxlbmd0aBh5IAEoDRIZChFJY21w",
            "djZPcHRIYWlWYWx1ZRh6IAEoDBIdChVJY21wdjZPcHRNbk9wdGlvbkNvZGUY",
            "eyABKA0SGQoRSWNtcHY2T3B0TW5MZW5ndGgYfCABKA0SGAoQSWNtcHY2T3B0",
            "TW5WYWx1ZRh9IAEoDBIeChZJY21wdjZPcHREbnNzbExpZmV0aW1lGH4gASgN",
            "EhYKDkljbXB2Nk9wdERuc3NsGH8gASgJEhsKEkljbXB2Nk9wdEFyb1N0YXR1",
            "cxiAASABKA0SKQogSWNtcHY2T3B0QXJvUmVnaXN0cmF0aW9uTGlmZXRpbWUY",
            "gQEgASgNEhoKEUljbXB2Nk9wdEFyb0V1aTY0GIIBIAEoDBIiChlJY21wdjZP",
            "cHQ2Q29Db250ZXh0TGVuZ3RoGIMBIAEoDRIZChBJY21wdjZPcHQ2Q29GbGFn",
            "GIQBIAEoDRIaChFJY21wdjZPcHQ2Q29GbGFnQxiFASABKAgSHAoTSWNtcHY2",
            "T3B0NkNvRmxhZ0NpZBiGASABKA0SIQoYSWNtcHY2T3B0NkNvRmxhZ1Jlc2Vy",
            "dmVkGIcBIAEoDRIiChlJY21wdjZPcHQ2Q29WYWxpZExpZmV0aW1lGIgBIAEo",
            "DRIiChlJY21wdjZPcHQ2Q29Db250ZXh0UHJlZml4GIkBIAEoDBIgChdJY21w",
            "djZPcHRBYnJvVmVyc2lvbkxvdxiKASABKA0SIQoYSWNtcHY2T3B0QWJyb1Zl",
            "cnNpb25IaWdoGIsBIAEoDRIjChpJY21wdjZPcHRBYnJvVmFsaWRMaWZldGlt",
            "ZRiMASABKA0SIQoYSWNtcHY2T3B0QWJybzZMYnJBZGRyZXNzGI0BIAEoDBIh",
            "ChhJY21wdjZPcHQ2Q2lvVW5hc3NpZ25lZDEYjgEgASgNEhsKEkljbXB2Nk9w",
            "dDZDaW9GbGFnRxiPASABKA0SIQoYSWNtcHY2T3B0NkNpb1VuYXNzaWduZWQy",
            "GJABIAEoDRIfChZJY21wdjZPcHRDYXB0aXZlUG9ydGFsGJEBIAEoCRImCh1J",
            "Y21wdjZNbGRNYXhpbXVtUmVzcG9uc2VEZWxheRiSASABKA0SIgoZSWNtcHY2",
            "TWxkTXVsdGljYXN0QWRkcmVzcxiTASABKAwSHwoWSWNtcHY2UnJTZXF1ZW5j",
            "ZU51bWJlchiUASABKA0SHgoVSWNtcHY2UnJTZWdtZW50TnVtYmVyGJUBIAEo",
            "DRIVCgxJY21wdjZSckZsYWcYlgEgASgNEhYKDUljbXB2NlJyRmxhZ1QYlwEg",
            "ASgIEhYKDUljbXB2NlJyRmxhZ1IYmAEgASgIEhYKDUljbXB2NlJyRmxhZ0EY",
            "mQEgASgIEhYKDUljbXB2NlJyRmxhZ1MYmgEgASgIEhYKDUljbXB2NlJyRmxh",
            "Z1AYmwEgASgIEhgKD0ljbXB2NlJyRmxhZ1JzdhicASABKA0SGQoQSWNtcHY2",
            "UnJNYXhkZWxheRidASABKA0SFgoNSWNtcHY2UnJQY29NcBieASABKAUSHAoT",
            "SWNtcHY2UnJQY29NcE9wY29kZRifASABKA0SHgoVSWNtcHY2UnJQY29NcE9w",
            "bGVuZ3RoGKABIAEoDRIdChRJY21wdjZSclBjb01wT3JkaW5hbBihASABKA0S",
            "HgoVSWNtcHY2UnJQY29NcE1hdGNobGVuGKIBIAEoDRIcChNJY21wdjZSclBj",
            "b01wTWlubGVuGKMBIAEoDRIcChNJY21wdjZSclBjb01wTWF4bGVuGKQBIAEo",
            "DRIhChhJY21wdjZSclBjb01wTWF0Y2hwcmVmaXgYpQEgASgMEhYKDUljbXB2",
            "NlJyUGNvVXAYpgEgASgFEhwKE0ljbXB2NlJyUGNvVXBVc2VsZW4YpwEgASgN",
            "Eh0KFEljbXB2NlJyUGNvVXBLZWVwbGVuGKgBIAEoDRIeChVJY21wdjZSclBj",
            "b1VwRmxhZ21hc2sYqQEgASgNEh8KFkljbXB2NlJyUGNvVXBGbGFnbWFza0wY",
            "qgEgASgIEh8KFkljbXB2NlJyUGNvVXBGbGFnbWFza0EYqwEgASgIEiYKHUlj",
            "bXB2NlJyUGNvVXBGbGFnbWFza1Jlc2VydmVkGKwBIAEoDRIdChRJY21wdjZS",
            "clBjb1VwUmFmbGFncxitASABKA0SIwoaSWNtcHY2UnJQY29VcFZhbGlkbGlm",
            "ZXRpbWUYrgEgASgNEicKHkljbXB2NlJyUGNvVXBQcmVmZXJyZWRsaWZldGlt",
            "ZRivASABKA0SGgoRSWNtcHY2UnJQY29VcEZsYWcYsAEgASgNEhsKEkljbXB2",
            "NlJyUGNvVXBGbGFnVhixASABKAgSGwoSSWNtcHY2UnJQY29VcEZsYWdQGLIB",
            "IAEoCBIiChlJY21wdjZSclBjb1VwRmxhZ1Jlc2VydmVkGLMBIAEoDRIfChZJ",
            "Y21wdjZSclBjb1VwVXNlcHJlZml4GLQBIAEoDBITCgpJY21wdjZSclJtGLUB",
            "IAEoBRIXCg5JY21wdjZSclJtRmxhZxi2ASABKA0SGAoPSWNtcHY2UnJSbUZs",
            "YWdCGLcBIAEoCBIYCg9JY21wdjZSclJtRmxhZ0YYuAEgASgIEh8KFkljbXB2",
            "NlJyUm1GbGFnUmVzZXJ2ZWQYuQEgASgNEhoKEUljbXB2NlJyUm1PcmRpbmFs",
            "GLoBIAEoDRIdChRJY21wdjZSclJtTWF0Y2hlZGxlbhi7ASABKA0SIQoYSWNt",
            "cHY2UnJSbUludGVyZmFjZWluZGV4GLwBIAEoDRIgChdJY21wdjZSclJtTWF0",
            "Y2hlZHByZWZpeBi9ASABKAwSHQoUSWNtcHY2TWlwNklkZW50aWZpZXIYvgEg",
            "ASgNEiMKGkljbXB2Nk1pcDZIb21lQWdlbnRBZGRyZXNzGL8BIAEoDBIXCg5J",
            "Y21wdjZNaXA2RmxhZxjAASABKA0SGAoPSWNtcHY2TWlwNkZsYWdNGMEBIAEo",
            "CBIYCg9JY21wdjZNaXA2RmxhZ08YwgEgASgIEhoKEUljbXB2Nk1pcDZGbGFn",
            "UnN2GMMBIAEoDRIlChxJY21wdjZNbGRNYXhpbXVtUmVzcG9uc2VDb2RlGMQB",
            "IAEoDRIWCg1JY21wdjZNbGRGbGFnGMUBIAEoDRIXCg5JY21wdjZNbGRGbGFn",
            "UxjGASABKAgSGQoQSWNtcHY2TWxkRmxhZ1FydhjHASABKA0SHgoVSWNtcHY2",
            "TWxkRmxhZ1Jlc2VydmVkGMgBIAEoDRIVCgxJY21wdjZNbGRRcWkYyQEgASgN",
            "EhsKEkljbXB2Nk1sZE5iU291cmNlcxjKASABKA0SHwoWSWNtcHY2TWxkU291",
            "cmNlQWRkcmVzcxjLASABKAwSIQoYSWNtcHY2TWxkck5iTWNhc3RSZWNvcmRz",
            "GMwBIAEoDRIWCg1JY21wdjZNbGRyTWFyGM0BIAEoBRIgChdJY21wdjZNbGRy",
            "TWFyUmVjb3JkVHlwZRjOASABKA0SIAoXSWNtcHY2TWxkck1hckF1eERhdGFM",
            "ZW4YzwEgASgNEh8KFkljbXB2Nk1sZHJNYXJOYlNvdXJjZXMY0AEgASgNEiYK",
            "HUljbXB2Nk1sZHJNYXJNdWx0aWNhc3RBZGRyZXNzGNEBIAEoDBIjChpJY21w",
            "djZNbGRyTWFyU291cmNlQWRkcmVzcxjSASABKAwSIwoaSWNtcHY2TWxkck1h",
            "ckF1eGlsaWFyeURhdGEY0wEgASgMEhsKEkljbXB2NkZtaXA2U3VidHlwZRjU",
            "ASABKA0SGgoRSWNtcHY2Rm1pcDZIaUZsYWcY1QEgASgNEhsKEkljbXB2NkZt",
            "aXA2SGlGbGFnUxjWASABKAgSGwoSSWNtcHY2Rm1pcDZIaUZsYWdBGNcBIAEo",
            "CBIiChlJY21wdjZGbWlwNkhpRmxhZ1Jlc2VydmVkGNgBIAEoDRIeChVJY21w",
            "djZGbWlwNklkZW50aWZpZXIY2QEgASgNEiMKGkljbXB2Nk1jYXN0UmFRdWVy",
            "eUludGVydmFsGNoBIAEoDRIoCh9JY21wdjZNY2FzdFJhUm9idXN0bmVzc1Zh",
            "cmlhYmxlGNsBIAEoDRIWCg1JY21wdjZOaVF0eXBlGNwBIAEoDRIVCgxJY21w",
            "djZOaUZsYWcY3QEgASgNEhYKDUljbXB2Nk5pRmxhZ0cY3gEgASgIEhYKDUlj",
            "bXB2Nk5pRmxhZ1MY3wEgASgIEhYKDUljbXB2Nk5pRmxhZ0wY4AEgASgIEhYK",
            "DUljbXB2Nk5pRmxhZ0MY4QEgASgIEhYKDUljbXB2Nk5pRmxhZ0EY4gEgASgI",
            "EhYKDUljbXB2Nk5pRmxhZ1QY4wEgASgIEhgKD0ljbXB2Nk5pRmxhZ1Jzdhjk",
            "ASABKA0SFgoNSWNtcHY2TmlOb25jZRjlASABKAQSIQoYSWNtcHY2TmlRdWVy",
            "eVN1YmplY3RJcHY2GOYBIAEoDBIhChhJY21wdjZOaVF1ZXJ5U3ViamVjdEZx",
            "ZG4Y5wEgASgJEiEKGEljbXB2Nk5pUXVlcnlTdWJqZWN0SXB2NBjoASABKAwS",
            "HQoUSWNtcHY2TmlSZXBseU5vZGVUdGwY6QEgASgNEh4KFUljbXB2Nk5pUmVw",
            "bHlOb2RlTmFtZRjqASABKAkSIQoYSWNtcHY2TmlSZXBseU5vZGVBZGRyZXNz",
            "GOsBIAEoDBIhChhJY21wdjZOaVJlcGx5SXB2NEFkZHJlc3MY7AEgASgMEhoK",
            "EUljbXB2NlJwbERpc0ZsYWdzGO0BIAEoDRIdChRJY21wdjZScGxEaW9JbnN0",
            "YW5jZRjuASABKA0SHAoTSWNtcHY2UnBsRGlvVmVyc2lvbhjvASABKA0SGQoQ",
            "SWNtcHY2UnBsRGlvUmFuaxjwASABKA0SGQoQSWNtcHY2UnBsRGlvRmxhZxjx",
            "ASABKA0SGgoRSWNtcHY2UnBsRGlvRmxhZ0cY8gEgASgIEhoKEUljbXB2NlJw",
            "bERpb0ZsYWcwGPMBIAEoCBIcChNJY21wdjZScGxEaW9GbGFnTW9wGPQBIAEo",
            "DRIjChpJY21wdjZScGxEaW9GbGFnUHJlZmVyZW5jZRj1ASABKA0SGQoQSWNt",
            "cHY2UnBsRGlvRHRzbhj2ASABKA0SGgoRSWNtcHY2UnBsRGlvRGFnaWQY9wEg",
            "ASgMEh0KFEljbXB2NlJwbERhb0luc3RhbmNlGPgBIAEoDRIZChBJY21wdjZS",
            "cGxEYW9GbGFnGPkBIAEoDRIaChFJY21wdjZScGxEYW9GbGFnSxj6ASABKAgS",
            "GgoRSWNtcHY2UnBsRGFvRmxhZ0QY+wEgASgIEhwKE0ljbXB2NlJwbERhb0Zs",
            "YWdSc3YY/AEgASgNEh0KFEljbXB2NlJwbERhb1NlcXVlbmNlGP0BIAEoDRIc",
            "ChNJY21wdjZScGxEYW9Eb2RhZ2lkGP4BIAEoDBIgChdJY21wdjZScGxEYW9h",
            "Y2tJbnN0YW5jZRj/ASABKA0SHAoTSWNtcHY2UnBsRGFvYWNrRmxhZxiAAiAB",
            "KA0SHQoUSWNtcHY2UnBsRGFvYWNrRmxhZ0QYgQIgASgIEh8KFkljbXB2NlJw",
            "bERhb2Fja0ZsYWdSc3YYggIgASgNEiAKF0ljbXB2NlJwbERhb2Fja1NlcXVl",
            "bmNlGIMCIAEoDRIeChVJY21wdjZScGxEYW9hY2tTdGF0dXMYhAIgASgNEh8K",
            "FkljbXB2NlJwbERhb2Fja0RvZGFnaWQYhQIgASgMEhwKE0ljbXB2NlJwbENj",
            "SW5zdGFuY2UYhgIgASgNEhgKD0ljbXB2NlJwbENjRmxhZxiHAiABKA0SGQoQ",
            "SWNtcHY2UnBsQ2NGbGFnUhiIAiABKAgSGwoSSWNtcHY2UnBsQ2NGbGFnUnN2",
            "GIkCIAEoDRIZChBJY21wdjZScGxDY05vbmNlGIoCIAEoDRIbChJJY21wdjZS",
            "cGxDY0RvZGFnaWQYiwIgASgMEiYKHUljbXB2NlJwbENjRGVzdGluYXRpb25D",
            "b3VudGVyGIwCIAEoDRIcChNJY21wdjZScGxTZWN1cmVGbGFnGI0CIAEoDRId",
            "ChRJY21wdjZScGxTZWN1cmVGbGFnVBiOAiABKAgSHwoWSWNtcHY2UnBsU2Vj",
            "dXJlRmxhZ1JzdhiPAiABKA0SIQoYSWNtcHY2UnBsU2VjdXJlQWxnb3JpdGht",
            "GJACIAEoDRIbChJJY21wdjZScGxTZWN1cmVLaW0YkQIgASgNEhsKEkljbXB2",
            "NlJwbFNlY3VyZUx2bBiSAiABKA0SGwoSSWNtcHY2UnBsU2VjdXJlUnN2GJMC",
            "IAEoDRIfChZJY21wdjZScGxTZWN1cmVDb3VudGVyGJQCIAEoDRIhChhJY21w",
            "djZScGxTZWN1cmVLZXlTb3VyY2UYlQIgASgMEiAKF0ljbXB2NlJwbFNlY3Vy",
            "ZUtleUluZGV4GJYCIAEoDRIZChBJY21wdjZScGxPcHRUeXBlGJcCIAEoDRIb",
            "ChJJY21wdjZScGxPcHRMZW5ndGgYmAIgASgNEh0KFEljbXB2NlJwbE9wdFJl",
            "c2VydmVkGJkCIAEoBRIZChBJY21wdjZScGxPcHRQYWRuGJoCIAEoBRIfChZJ",
            "Y21wdjZScGxPcHRNZXRyaWNUeXBlGJsCIAEoDRIgChdJY21wdjZScGxPcHRN",
            "ZXRyaWNGbGFncxicAiABKA0SIwoaSWNtcHY2UnBsT3B0TWV0cmljUmVzZXJ2",
            "ZWQYnQIgASgNEiAKF0ljbXB2NlJwbE9wdE1ldHJpY0ZsYWdQGJ4CIAEoCBIg",
            "ChdJY21wdjZScGxPcHRNZXRyaWNGbGFnQxifAiABKAgSIAoXSWNtcHY2UnBs",
            "T3B0TWV0cmljRmxhZ08YoAIgASgIEiAKF0ljbXB2NlJwbE9wdE1ldHJpY0Zs",
            "YWdSGKECIAEoCBIgChdJY21wdjZScGxPcHRNZXRyaWNGbGFnQRiiAiABKA0S",
            "HwoWSWNtcHY2UnBsT3B0TWV0cmljUHJlYxijAiABKA0SIQoYSWNtcHY2UnBs",
            "T3B0TWV0cmljTGVuZ3RoGKQCIAEoDRIkChtJY21wdjZScGxPcHRNZXRyaWNO",
            "c2FPYmplY3QYpQIgASgNEiwKI0ljbXB2NlJwbE9wdE1ldHJpY05zYU9iamVj",
            "dFJlc2VydmVkGKYCIAEoDRIpCiBJY21wdjZScGxPcHRNZXRyaWNOc2FPYmpl",
            "Y3RGbGFncxinAiABKA0SKQogSWNtcHY2UnBsT3B0TWV0cmljTnNhT2JqZWN0",
            "RmxhZ0EYqAIgASgIEikKIEljbXB2NlJwbE9wdE1ldHJpY05zYU9iamVjdEZs",
            "YWdPGKkCIAEoCBIjChpJY21wdjZScGxPcHRNZXRyaWNOZU9iamVjdBiqAiAB",
            "KA0SKAofSWNtcHY2UnBsT3B0TWV0cmljTmVPYmplY3RGbGFncxirAiABKA0S",
            "KAofSWNtcHY2UnBsT3B0TWV0cmljTmVPYmplY3RGbGFnSRisAiABKAgSJwoe",
            "SWNtcHY2UnBsT3B0TWV0cmljTmVPYmplY3RUeXBlGK0CIAEoDRIoCh9JY21w",
            "djZScGxPcHRNZXRyaWNOZU9iamVjdEZsYWdFGK4CIAEoCBIpCiBJY21wdjZS",
            "cGxPcHRNZXRyaWNOZU9iamVjdEVuZXJneRivAiABKA0SIwoaSWNtcHY2UnBs",
            "T3B0TWV0cmljSHBPYmplY3QYsAIgASgNEisKIkljbXB2NlJwbE9wdE1ldHJp",
            "Y0hwT2JqZWN0UmVzZXJ2ZWQYsQIgASgNEigKH0ljbXB2NlJwbE9wdE1ldHJp",
            "Y0hwT2JqZWN0RmxhZ3MYsgIgASgNEiUKHEljbXB2NlJwbE9wdE1ldHJpY0hw",
            "T2JqZWN0SHAYswIgASgNEiUKHEljbXB2NlJwbE9wdE1ldHJpY0x0T2JqZWN0",
            "THQYtAIgASgNEiUKHEljbXB2NlJwbE9wdE1ldHJpY0xsT2JqZWN0TGwYtQIg",
            "ASgNEiQKG0ljbXB2NlJwbE9wdE1ldHJpY0xxbE9iamVjdBi2AiABKA0SJwoe",
            "SWNtcHY2UnBsT3B0TWV0cmljTHFsT2JqZWN0UmVzGLcCIAEoDRInCh5JY21w",
            "djZScGxPcHRNZXRyaWNMcWxPYmplY3RWYWwYuAIgASgNEisKIkljbXB2NlJw",
            "bE9wdE1ldHJpY0xxbE9iamVjdENvdW50ZXIYuQIgASgNEicKHkljbXB2NlJw",
            "bE9wdE1ldHJpY0V0eE9iamVjdEV0eBi6AiABKA0SIwoaSWNtcHY2UnBsT3B0",
            "TWV0cmljTGNPYmplY3QYuwIgASgFEiYKHUljbXB2NlJwbE9wdE1ldHJpY0xj",
            "T2JqZWN0UmVzGLwCIAEoDRIlChxJY21wdjZScGxPcHRNZXRyaWNMY09iamVj",
            "dExjGL0CIAEoDRIqCiFJY21wdjZScGxPcHRNZXRyaWNMY09iamVjdENvdW50",
            "ZXIYvgIgASgNEisKIkljbXB2NlJwbE9wdE1ldHJpY0xjT2JqZWN0UmVzZXJ2",
            "ZWQYvwIgASgNEigKH0ljbXB2NlJwbE9wdE1ldHJpY0xjT2JqZWN0RmxhZ0kY",
            "wAIgASgNEiYKHUljbXB2NlJwbE9wdFJvdXRlUHJlZml4TGVuZ3RoGMECIAEo",
            "DRIeChVJY21wdjZScGxPcHRSb3V0ZUZsYWcYwgIgASgNEh4KFUljbXB2NlJw",
            "bE9wdFJvdXRlUHJlZhjDAiABKA0SIgoZSWNtcHY2UnBsT3B0Um91dGVSZXNl",
            "cnZlZBjEAiABKA0SIgoZSWNtcHY2UnBsT3B0Um91dGVMaWZldGltZRjFAiAB",
            "KA0SIAoXSWNtcHY2UnBsT3B0Um91dGVQcmVmaXgYxgIgASgMEh8KFkljbXB2",
            "NlJwbE9wdENvbmZpZ0ZsYWcYxwIgASgNEiMKGkljbXB2NlJwbE9wdENvbmZp",
            "Z1Jlc2VydmVkGMgCIAEoDRIfChZJY21wdjZScGxPcHRDb25maWdBdXRoGMkC",
            "IAEoCBIeChVJY21wdjZScGxPcHRDb25maWdQY3MYygIgASgNEikKIEljbXB2",
            "NlJwbE9wdENvbmZpZ0ludGVydmFsRG91YmxlGMsCIAEoDRImCh1JY21wdjZS",
            "cGxPcHRDb25maWdJbnRlcnZhbE1pbhjMAiABKA0SJQocSWNtcHY2UnBsT3B0",
            "Q29uZmlnUmVkdW5kYW5jeRjNAiABKA0SJQocSWNtcHY2UnBsT3B0Q29uZmln",
            "TWF4UmFua0luYxjOAiABKA0SKAofSWNtcHY2UnBsT3B0Q29uZmlnTWluSG9w",
            "UmFua0luYxjPAiABKA0SHgoVSWNtcHY2UnBsT3B0Q29uZmlnT2NwGNACIAEo",
            "DRIeChVJY21wdjZScGxPcHRDb25maWdSc3YY0QIgASgNEiYKHUljbXB2NlJw",
            "bE9wdENvbmZpZ0RlZkxpZmV0aW1lGNICIAEoDRInCh5JY21wdjZScGxPcHRD",
            "b25maWdMaWZldGltZVVuaXQY0wIgASgNEh8KFkljbXB2NlJwbE9wdFRhcmdl",
            "dEZsYWcY1AIgASgFEicKHkljbXB2NlJwbE9wdFRhcmdldFByZWZpeExlbmd0",
            "aBjVAiABKA0SIQoYSWNtcHY2UnBsT3B0VGFyZ2V0UHJlZml4GNYCIAEoDBIg",
            "ChdJY21wdjZScGxPcHRUcmFuc2l0RmxhZxjXAiABKA0SIQoYSWNtcHY2UnBs",
            "T3B0VHJhbnNpdEZsYWdFGNgCIAEoCBIjChpJY21wdjZScGxPcHRUcmFuc2l0",
            "RmxhZ1JzdhjZAiABKA0SIwoaSWNtcHY2UnBsT3B0VHJhbnNpdFBhdGhjdGwY",
            "2gIgASgNEiMKGkljbXB2NlJwbE9wdFRyYW5zaXRQYXRoc2VxGNsCIAEoDRIo",
            "Ch9JY21wdjZScGxPcHRUcmFuc2l0UGF0aGxpZmV0aW1lGNwCIAEoDRIiChlJ",
            "Y21wdjZScGxPcHRUcmFuc2l0UGFyZW50GN0CIAEoDBImCh1JY21wdjZScGxP",
            "cHRTb2xpY2l0ZWRJbnN0YW5jZRjeAiABKA0SIgoZSWNtcHY2UnBsT3B0U29s",
            "aWNpdGVkRmxhZxjfAiABKA0SIwoaSWNtcHY2UnBsT3B0U29saWNpdGVkRmxh",
            "Z1YY4AIgASgIEiMKGkljbXB2NlJwbE9wdFNvbGljaXRlZEZsYWdJGOECIAEo",
            "CBIjChpJY21wdjZScGxPcHRTb2xpY2l0ZWRGbGFnRBjiAiABKAgSJQocSWNt",
            "cHY2UnBsT3B0U29saWNpdGVkRmxhZ1JzdhjjAiABKA0SJQocSWNtcHY2UnBs",
            "T3B0U29saWNpdGVkRG9kYWdpZBjkAiABKAwSJQocSWNtcHY2UnBsT3B0U29s",
            "aWNpdGVkVmVyc2lvbhjlAiABKA0SIQoYSWNtcHY2UnBsT3B0UHJlZml4TGVu",
            "Z3RoGOYCIAEoDRIfChZJY21wdjZScGxPcHRQcmVmaXhGbGFnGOcCIAEoDRIg",
            "ChdJY21wdjZScGxPcHRQcmVmaXhGbGFnTBjoAiABKAgSIAoXSWNtcHY2UnBs",
            "T3B0Q29uZmlnRmxhZ0EY6QIgASgIEiAKF0ljbXB2NlJwbE9wdENvbmZpZ0Zs",
            "YWdSGOoCIAEoCBIiChlJY21wdjZScGxPcHRDb25maWdGbGFnUnN2GOsCIAEo",
            "DRIoCh9JY21wdjZScGxPcHRQcmVmaXhWYWxpZExpZmV0aW1lGOwCIAEoDRIs",
            "CiNJY21wdjZScGxPcHRQcmVmaXhQcmVmZXJyZWRMaWZldGltZRjtAiABKA0S",
            "GwoSSWNtcHY2UnBsT3B0UHJlZml4GO4CIAEoDBIpCiBJY21wdjZScGxPcHRU",
            "YXJnZXRkZXNjRGVzY3JpcHRvchjvAiABKA0SJwoeSWNtcHY2UnBsT3B0Um91",
            "dGVkaXNjb3ZlcnlGbGFnGPACIAEoBRIsCiNJY21wdjZScGxPcHRSb3V0ZWRp",
            "c2NvdmVyeUZsYWdSZXBseRjxAiABKAgSLwomSWNtcHY2UnBsT3B0Um91dGVk",
            "aXNjb3ZlcnlGbGFnSG9wYnlob3AY8gIgASgIEjIKKUljbXB2NlJwbE9wdFJv",
            "dXRlZGlzY292ZXJ5RmxhZ051bW9mcm91dGVzGPMCIAEoDRIsCiNJY21wdjZS",
            "cGxPcHRSb3V0ZWRpc2NvdmVyeUZsYWdDb21wchj0AiABKA0SKwoiSWNtcHY2",
            "UnBsT3B0Um91dGVkaXNjb3ZlcnlMaWZldGltZRj1AiABKA0SKgohSWNtcHY2",
            "UnBsT3B0Um91dGVkaXNjb3ZlcnlNYXhyYW5rGPYCIAEoDRIlChxJY21wdjZS",
            "cGxPcHRSb3V0ZWRpc2NvdmVyeU5oGPcCIAEoDRItCiRJY21wdjZScGxPcHRS",
            "b3V0ZWRpc2NvdmVyeVRhcmdldGFkZHIY+AIgASgMEioKIUljbXB2NlJwbE9w",
            "dFJvdXRlZGlzY292ZXJ5QWRkclZlYxj5AiABKAUSLgolSWNtcHY2UnBsT3B0",
            "Um91dGVkaXNjb3ZlcnlBZGRydmVjQWRkchj6AiABKAwSIAoXSWNtcHY2UnBs",
            "UDJwRHJvSW5zdGFuY2UY+wIgASgNEh8KFkljbXB2NlJwbFAycERyb1ZlcnNp",
            "b24Y/AIgASgNEhwKE0ljbXB2NlJwbFAycERyb0ZsYWcY/QIgASgNEiAKF0lj",
            "bXB2NlJwbFAycERyb0ZsYWdTdG9wGP4CIAEoCBIfChZJY21wdjZScGxQMnBE",
            "cm9GbGFnQWNrGP8CIAEoCBIfChZJY21wdjZScGxQMnBEcm9GbGFnU2VxGIAD",
            "IAEoDRIkChtJY21wdjZScGxQMnBEcm9GbGFnUmVzZXJ2ZWQYgQMgASgNEh0K",
            "FEljbXB2NlJwbFAycERyb0RhZ2lkGIIDIAEoDBIfChZJY21wdjZScGxQMnBE",
            "cm9hY2tGbGFnGIMDIAEoDRIiChlJY21wdjZScGxQMnBEcm9hY2tGbGFnU2Vx",
            "GIQDIAEoDRInCh5JY21wdjZScGxQMnBEcm9hY2tGbGFnUmVzZXJ2ZWQYhQMg",
            "ASgNEhkKEEljbXB2NklsbnBOYkxvY3MYhgMgASgNEhwKE0ljbXB2NklsbnBO",
            "YkxvY2F0b3IYhwMgASgEEh8KFkljbXB2NklsbnBOYlByZWZlcmVuY2UYiAMg",
            "ASgNEh0KFEljbXB2NklsbnBOYkxpZmV0aW1lGIkDIAEoDRIgChdJY21wdjY2",
            "TG93cGFubmREYVN0YXR1cxiKAyABKA0SHQoUSWNtcHY2Nkxvd3Bhbm5kRGFS",
            "c3YYiwMgASgNEiIKGUljbXB2NjZMb3dwYW5uZERhTGlmZXRpbWUYjAMgASgN",
            "Eh8KFkljbXB2NjZMb3dwYW5uZERhRXVpNjQYjQMgASgMEiEKGEljbXB2NjZM",
            "b3dwYW5uZERhUmVnQWRkchiOAyABKAwSFQoMSWNtcHY2UmVzcEluGI8DIAEo",
            "AxIVCgxJY21wdjZOb1Jlc3AYkAMgASgFEhUKDEljbXB2NlJlc3BUbxiRAyAB",
            "KAMSFwoOSWNtcHY2UmVzcHRpbWUYkgMgASgBEiUKHEljbXB2Nk1wbFNlZWRJ",
            "bmZvTWluU2VxdWVuY2UYkwMgASgNEh8KFkljbXB2Nk1wbFNlZWRJbmZvQm1M",
            "ZW4YlAMgASgNEhsKEkljbXB2Nk1wbFNlZWRJbmZvUxiVAyABKA0SIAoXSWNt",
            "cHY2TXBsU2VlZEluZm9TZWVkSWQYlgMgASgJEiIKGUljbXB2Nk1wbFNlZWRJ",
            "bmZvU2VxdWVuY2UYlwMgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Icmpv6), global::Ndx.Decoders.Core.Icmpv6.Parser, new[]{ "Icmpv6Type", "Icmpv6Code", "Icmpv6Checksum", "Icmpv6ChecksumStatus", "Icmpv6Reserved", "Icmpv6Data", "Icmpv6UnknownData", "Icmpv6Mtu", "Icmpv6Pointer", "Icmpv6EchoIdentifier", "Icmpv6EchoSequenceNumber", "Icmpv6Nonce", "Icmpv6NdRaCurHopLimit", "Icmpv6NdRaFlag", "Icmpv6NdRaFlagM", "Icmpv6NdRaFlagO", "Icmpv6NdRaFlagH", "Icmpv6NdRaFlagPrf", "Icmpv6NdRaFlagP", "Icmpv6NdRaFlagRsv", "Icmpv6NdRaRouterLifetime", "Icmpv6NdRaReachableTime", "Icmpv6NdRaRetransTimer", "Icmpv6NdNsTargetAddress", "Icmpv6NdNaFlag", "Icmpv6NdNaFlagR", "Icmpv6NdNaFlagS", "Icmpv6NdNaFlagO", "Icmpv6NdNaFlagRsv", "Icmpv6NdNaTargetAddress", "Icmpv6NdRdTargetAddress", "Icmpv6RdNaDestinationAddress", "Icmpv6Opt", "Icmpv6OptType", "Icmpv6OptLength", "Icmpv6OptReserved", "Icmpv6OptPadding", "Icmpv6OptLinkaddr", "Icmpv6OptSrcLinkaddr", "Icmpv6OptTargetLinkaddr", "Icmpv6OptLinkaddrEui64", "Icmpv6OptSrcLinkaddrEui64", "Icmpv6OptTargetLinkaddrEui64", "Icmpv6OptPrefixLength", "Icmpv6OptPrefixFlag", "Icmpv6OptPrefixFlagL", "Icmpv6OptPrefixFlagA", "Icmpv6OptPrefixFlagR", "Icmpv6OptPrefixFlagReserved", "Icmpv6OptPrefixValidLifetime", "Icmpv6OptPrefixPreferredLifetime", "Icmpv6OptPrefix", "Icmpv6OptCgaPadLength", "Icmpv6OptCga", "Icmpv6OptCgaModifier", "Icmpv6OptCgaSubnetPrefix", "Icmpv6OptCgaCount", "Icmpv6OptCgaExtType", "Icmpv6OptCgaExtLength", "Icmpv6OptCgaExtData", "Icmpv6OptRsaKeyHash", "Icmpv6OptDigitalSignaturePadding", "Icmpv6OptPsKeyHash", "Icmpv6OptTimestamp", "Icmpv6OptNonce", "Icmpv6OptCertificatePadding", "Icmpv6OptIpaOptionCode", "Icmpv6OptIpaPrefixLen", "Icmpv6OptIpaIpv6Address", "Icmpv6OptNrpiOptionCode", "Icmpv6OptNrpiPrefixLen", "Icmpv6OptNrpiPrefix", "Icmpv6OptLlaOptionCode", "Icmpv6OptLlaBytes", "Icmpv6OptNaackOptionCode", "Icmpv6OptNaackStatus", "Icmpv6OptNaackSuppliedNcoa", "Icmpv6OptMapDistance", "Icmpv6OptMapPreference", "Icmpv6OptMapFlag", "Icmpv6OptMapFlagR", "Icmpv6OptMapFlagReserved", "Icmpv6OptMapValidLifetime", "Icmpv6OptMapGlobalAddress", "Icmpv6OptRouteInfoFlag", "Icmpv6OptRouteInfoFlagRoutePreference", "Icmpv6OptRouteInfoFlagReserved", "Icmpv6OptRouteLifetime", "Icmpv6OptNameType", "Icmpv6OptNameX501", "Icmpv6OptNameTypeFqdn", "Icmpv6SendIdentifier", "Icmpv6SendAllComponents", "Icmpv6SendComponent", "Icmpv6X509Name", "Icmpv6X509Certificate", "Icmpv6OptRedirectedPacket", "Icmpv6OptMtu", "Icmpv6OptNbmaShortcutLimit", "Icmpv6OptAdvertisementInterval", "Icmpv6OptHomeAgentPreference", "Icmpv6OptHomeAgentLifetime", "Icmpv6OptIpv6Address", "Icmpv6OptRdnssLifetime", "Icmpv6OptRdnss", "Icmpv6OptEfo", "Icmpv6OptEfoM", "Icmpv6OptEfoO", "Icmpv6OptEfoH", "Icmpv6OptEfoPrf", "Icmpv6OptEfoP", "Icmpv6OptEfoRsv", "Icmpv6OptHkrPadLength", "Icmpv6OptHkrAt", "Icmpv6OptHkrReserved", "Icmpv6OptHkrEncryptionPublicKey", "Icmpv6OptHkrPadding", "Icmpv6OptHkrLifetime", "Icmpv6OptHkrEncryptedHandoverKey", "Icmpv6OptHaiOptionCode", "Icmpv6OptHaiLength", "Icmpv6OptHaiValue", "Icmpv6OptMnOptionCode", "Icmpv6OptMnLength", "Icmpv6OptMnValue", "Icmpv6OptDnsslLifetime", "Icmpv6OptDnssl", "Icmpv6OptAroStatus", "Icmpv6OptAroRegistrationLifetime", "Icmpv6OptAroEui64", "Icmpv6Opt6CoContextLength", "Icmpv6Opt6CoFlag", "Icmpv6Opt6CoFlagC", "Icmpv6Opt6CoFlagCid", "Icmpv6Opt6CoFlagReserved", "Icmpv6Opt6CoValidLifetime", "Icmpv6Opt6CoContextPrefix", "Icmpv6OptAbroVersionLow", "Icmpv6OptAbroVersionHigh", "Icmpv6OptAbroValidLifetime", "Icmpv6OptAbro6LbrAddress", "Icmpv6Opt6CioUnassigned1", "Icmpv6Opt6CioFlagG", "Icmpv6Opt6CioUnassigned2", "Icmpv6OptCaptivePortal", "Icmpv6MldMaximumResponseDelay", "Icmpv6MldMulticastAddress", "Icmpv6RrSequenceNumber", "Icmpv6RrSegmentNumber", "Icmpv6RrFlag", "Icmpv6RrFlagT", "Icmpv6RrFlagR", "Icmpv6RrFlagA", "Icmpv6RrFlagS", "Icmpv6RrFlagP", "Icmpv6RrFlagRsv", "Icmpv6RrMaxdelay", "Icmpv6RrPcoMp", "Icmpv6RrPcoMpOpcode", "Icmpv6RrPcoMpOplength", "Icmpv6RrPcoMpOrdinal", "Icmpv6RrPcoMpMatchlen", "Icmpv6RrPcoMpMinlen", "Icmpv6RrPcoMpMaxlen", "Icmpv6RrPcoMpMatchprefix", "Icmpv6RrPcoUp", "Icmpv6RrPcoUpUselen", "Icmpv6RrPcoUpKeeplen", "Icmpv6RrPcoUpFlagmask", "Icmpv6RrPcoUpFlagmaskL", "Icmpv6RrPcoUpFlagmaskA", "Icmpv6RrPcoUpFlagmaskReserved", "Icmpv6RrPcoUpRaflags", "Icmpv6RrPcoUpValidlifetime", "Icmpv6RrPcoUpPreferredlifetime", "Icmpv6RrPcoUpFlag", "Icmpv6RrPcoUpFlagV", "Icmpv6RrPcoUpFlagP", "Icmpv6RrPcoUpFlagReserved", "Icmpv6RrPcoUpUseprefix", "Icmpv6RrRm", "Icmpv6RrRmFlag", "Icmpv6RrRmFlagB", "Icmpv6RrRmFlagF", "Icmpv6RrRmFlagReserved", "Icmpv6RrRmOrdinal", "Icmpv6RrRmMatchedlen", "Icmpv6RrRmInterfaceindex", "Icmpv6RrRmMatchedprefix", "Icmpv6Mip6Identifier", "Icmpv6Mip6HomeAgentAddress", "Icmpv6Mip6Flag", "Icmpv6Mip6FlagM", "Icmpv6Mip6FlagO", "Icmpv6Mip6FlagRsv", "Icmpv6MldMaximumResponseCode", "Icmpv6MldFlag", "Icmpv6MldFlagS", "Icmpv6MldFlagQrv", "Icmpv6MldFlagReserved", "Icmpv6MldQqi", "Icmpv6MldNbSources", "Icmpv6MldSourceAddress", "Icmpv6MldrNbMcastRecords", "Icmpv6MldrMar", "Icmpv6MldrMarRecordType", "Icmpv6MldrMarAuxDataLen", "Icmpv6MldrMarNbSources", "Icmpv6MldrMarMulticastAddress", "Icmpv6MldrMarSourceAddress", "Icmpv6MldrMarAuxiliaryData", "Icmpv6Fmip6Subtype", "Icmpv6Fmip6HiFlag", "Icmpv6Fmip6HiFlagS", "Icmpv6Fmip6HiFlagA", "Icmpv6Fmip6HiFlagReserved", "Icmpv6Fmip6Identifier", "Icmpv6McastRaQueryInterval", "Icmpv6McastRaRobustnessVariable", "Icmpv6NiQtype", "Icmpv6NiFlag", "Icmpv6NiFlagG", "Icmpv6NiFlagS", "Icmpv6NiFlagL", "Icmpv6NiFlagC", "Icmpv6NiFlagA", "Icmpv6NiFlagT", "Icmpv6NiFlagRsv", "Icmpv6NiNonce", "Icmpv6NiQuerySubjectIpv6", "Icmpv6NiQuerySubjectFqdn", "Icmpv6NiQuerySubjectIpv4", "Icmpv6NiReplyNodeTtl", "Icmpv6NiReplyNodeName", "Icmpv6NiReplyNodeAddress", "Icmpv6NiReplyIpv4Address", "Icmpv6RplDisFlags", "Icmpv6RplDioInstance", "Icmpv6RplDioVersion", "Icmpv6RplDioRank", "Icmpv6RplDioFlag", "Icmpv6RplDioFlagG", "Icmpv6RplDioFlag0", "Icmpv6RplDioFlagMop", "Icmpv6RplDioFlagPreference", "Icmpv6RplDioDtsn", "Icmpv6RplDioDagid", "Icmpv6RplDaoInstance", "Icmpv6RplDaoFlag", "Icmpv6RplDaoFlagK", "Icmpv6RplDaoFlagD", "Icmpv6RplDaoFlagRsv", "Icmpv6RplDaoSequence", "Icmpv6RplDaoDodagid", "Icmpv6RplDaoackInstance", "Icmpv6RplDaoackFlag", "Icmpv6RplDaoackFlagD", "Icmpv6RplDaoackFlagRsv", "Icmpv6RplDaoackSequence", "Icmpv6RplDaoackStatus", "Icmpv6RplDaoackDodagid", "Icmpv6RplCcInstance", "Icmpv6RplCcFlag", "Icmpv6RplCcFlagR", "Icmpv6RplCcFlagRsv", "Icmpv6RplCcNonce", "Icmpv6RplCcDodagid", "Icmpv6RplCcDestinationCounter", "Icmpv6RplSecureFlag", "Icmpv6RplSecureFlagT", "Icmpv6RplSecureFlagRsv", "Icmpv6RplSecureAlgorithm", "Icmpv6RplSecureKim", "Icmpv6RplSecureLvl", "Icmpv6RplSecureRsv", "Icmpv6RplSecureCounter", "Icmpv6RplSecureKeySource", "Icmpv6RplSecureKeyIndex", "Icmpv6RplOptType", "Icmpv6RplOptLength", "Icmpv6RplOptReserved", "Icmpv6RplOptPadn", "Icmpv6RplOptMetricType", "Icmpv6RplOptMetricFlags", "Icmpv6RplOptMetricReserved", "Icmpv6RplOptMetricFlagP", "Icmpv6RplOptMetricFlagC", "Icmpv6RplOptMetricFlagO", "Icmpv6RplOptMetricFlagR", "Icmpv6RplOptMetricFlagA", "Icmpv6RplOptMetricPrec", "Icmpv6RplOptMetricLength", "Icmpv6RplOptMetricNsaObject", "Icmpv6RplOptMetricNsaObjectReserved", "Icmpv6RplOptMetricNsaObjectFlags", "Icmpv6RplOptMetricNsaObjectFlagA", "Icmpv6RplOptMetricNsaObjectFlagO", "Icmpv6RplOptMetricNeObject", "Icmpv6RplOptMetricNeObjectFlags", "Icmpv6RplOptMetricNeObjectFlagI", "Icmpv6RplOptMetricNeObjectType", "Icmpv6RplOptMetricNeObjectFlagE", "Icmpv6RplOptMetricNeObjectEnergy", "Icmpv6RplOptMetricHpObject", "Icmpv6RplOptMetricHpObjectReserved", "Icmpv6RplOptMetricHpObjectFlags", "Icmpv6RplOptMetricHpObjectHp", "Icmpv6RplOptMetricLtObjectLt", "Icmpv6RplOptMetricLlObjectLl", "Icmpv6RplOptMetricLqlObject", "Icmpv6RplOptMetricLqlObjectRes", "Icmpv6RplOptMetricLqlObjectVal", "Icmpv6RplOptMetricLqlObjectCounter", "Icmpv6RplOptMetricEtxObjectEtx", "Icmpv6RplOptMetricLcObject", "Icmpv6RplOptMetricLcObjectRes", "Icmpv6RplOptMetricLcObjectLc", "Icmpv6RplOptMetricLcObjectCounter", "Icmpv6RplOptMetricLcObjectReserved", "Icmpv6RplOptMetricLcObjectFlagI", "Icmpv6RplOptRoutePrefixLength", "Icmpv6RplOptRouteFlag", "Icmpv6RplOptRoutePref", "Icmpv6RplOptRouteReserved", "Icmpv6RplOptRouteLifetime", "Icmpv6RplOptRoutePrefix", "Icmpv6RplOptConfigFlag", "Icmpv6RplOptConfigReserved", "Icmpv6RplOptConfigAuth", "Icmpv6RplOptConfigPcs", "Icmpv6RplOptConfigIntervalDouble", "Icmpv6RplOptConfigIntervalMin", "Icmpv6RplOptConfigRedundancy", "Icmpv6RplOptConfigMaxRankInc", "Icmpv6RplOptConfigMinHopRankInc", "Icmpv6RplOptConfigOcp", "Icmpv6RplOptConfigRsv", "Icmpv6RplOptConfigDefLifetime", "Icmpv6RplOptConfigLifetimeUnit", "Icmpv6RplOptTargetFlag", "Icmpv6RplOptTargetPrefixLength", "Icmpv6RplOptTargetPrefix", "Icmpv6RplOptTransitFlag", "Icmpv6RplOptTransitFlagE", "Icmpv6RplOptTransitFlagRsv", "Icmpv6RplOptTransitPathctl", "Icmpv6RplOptTransitPathseq", "Icmpv6RplOptTransitPathlifetime", "Icmpv6RplOptTransitParent", "Icmpv6RplOptSolicitedInstance", "Icmpv6RplOptSolicitedFlag", "Icmpv6RplOptSolicitedFlagV", "Icmpv6RplOptSolicitedFlagI", "Icmpv6RplOptSolicitedFlagD", "Icmpv6RplOptSolicitedFlagRsv", "Icmpv6RplOptSolicitedDodagid", "Icmpv6RplOptSolicitedVersion", "Icmpv6RplOptPrefixLength", "Icmpv6RplOptPrefixFlag", "Icmpv6RplOptPrefixFlagL", "Icmpv6RplOptConfigFlagA", "Icmpv6RplOptConfigFlagR", "Icmpv6RplOptConfigFlagRsv", "Icmpv6RplOptPrefixValidLifetime", "Icmpv6RplOptPrefixPreferredLifetime", "Icmpv6RplOptPrefix", "Icmpv6RplOptTargetdescDescriptor", "Icmpv6RplOptRoutediscoveryFlag", "Icmpv6RplOptRoutediscoveryFlagReply", "Icmpv6RplOptRoutediscoveryFlagHopbyhop", "Icmpv6RplOptRoutediscoveryFlagNumofroutes", "Icmpv6RplOptRoutediscoveryFlagCompr", "Icmpv6RplOptRoutediscoveryLifetime", "Icmpv6RplOptRoutediscoveryMaxrank", "Icmpv6RplOptRoutediscoveryNh", "Icmpv6RplOptRoutediscoveryTargetaddr", "Icmpv6RplOptRoutediscoveryAddrVec", "Icmpv6RplOptRoutediscoveryAddrvecAddr", "Icmpv6RplP2PDroInstance", "Icmpv6RplP2PDroVersion", "Icmpv6RplP2PDroFlag", "Icmpv6RplP2PDroFlagStop", "Icmpv6RplP2PDroFlagAck", "Icmpv6RplP2PDroFlagSeq", "Icmpv6RplP2PDroFlagReserved", "Icmpv6RplP2PDroDagid", "Icmpv6RplP2PDroackFlag", "Icmpv6RplP2PDroackFlagSeq", "Icmpv6RplP2PDroackFlagReserved", "Icmpv6IlnpNbLocs", "Icmpv6IlnpNbLocator", "Icmpv6IlnpNbPreference", "Icmpv6IlnpNbLifetime", "Icmpv66LowpanndDaStatus", "Icmpv66LowpanndDaRsv", "Icmpv66LowpanndDaLifetime", "Icmpv66LowpanndDaEui64", "Icmpv66LowpanndDaRegAddr", "Icmpv6RespIn", "Icmpv6NoResp", "Icmpv6RespTo", "Icmpv6Resptime", "Icmpv6MplSeedInfoMinSequence", "Icmpv6MplSeedInfoBmLen", "Icmpv6MplSeedInfoS", "Icmpv6MplSeedInfoSeedId", "Icmpv6MplSeedInfoSequence" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Icmpv6 : pb::IMessage<Icmpv6> {
    private static readonly pb::MessageParser<Icmpv6> _parser = new pb::MessageParser<Icmpv6>(() => new Icmpv6());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Icmpv6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketIcmpv6Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmpv6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmpv6(Icmpv6 other) : this() {
      icmpv6Type_ = other.icmpv6Type_;
      icmpv6Code_ = other.icmpv6Code_;
      icmpv6Checksum_ = other.icmpv6Checksum_;
      icmpv6ChecksumStatus_ = other.icmpv6ChecksumStatus_;
      icmpv6Reserved_ = other.icmpv6Reserved_;
      icmpv6Data_ = other.icmpv6Data_;
      icmpv6UnknownData_ = other.icmpv6UnknownData_;
      icmpv6Mtu_ = other.icmpv6Mtu_;
      icmpv6Pointer_ = other.icmpv6Pointer_;
      icmpv6EchoIdentifier_ = other.icmpv6EchoIdentifier_;
      icmpv6EchoSequenceNumber_ = other.icmpv6EchoSequenceNumber_;
      icmpv6Nonce_ = other.icmpv6Nonce_;
      icmpv6NdRaCurHopLimit_ = other.icmpv6NdRaCurHopLimit_;
      icmpv6NdRaFlag_ = other.icmpv6NdRaFlag_;
      icmpv6NdRaFlagM_ = other.icmpv6NdRaFlagM_;
      icmpv6NdRaFlagO_ = other.icmpv6NdRaFlagO_;
      icmpv6NdRaFlagH_ = other.icmpv6NdRaFlagH_;
      icmpv6NdRaFlagPrf_ = other.icmpv6NdRaFlagPrf_;
      icmpv6NdRaFlagP_ = other.icmpv6NdRaFlagP_;
      icmpv6NdRaFlagRsv_ = other.icmpv6NdRaFlagRsv_;
      icmpv6NdRaRouterLifetime_ = other.icmpv6NdRaRouterLifetime_;
      icmpv6NdRaReachableTime_ = other.icmpv6NdRaReachableTime_;
      icmpv6NdRaRetransTimer_ = other.icmpv6NdRaRetransTimer_;
      icmpv6NdNsTargetAddress_ = other.icmpv6NdNsTargetAddress_;
      icmpv6NdNaFlag_ = other.icmpv6NdNaFlag_;
      icmpv6NdNaFlagR_ = other.icmpv6NdNaFlagR_;
      icmpv6NdNaFlagS_ = other.icmpv6NdNaFlagS_;
      icmpv6NdNaFlagO_ = other.icmpv6NdNaFlagO_;
      icmpv6NdNaFlagRsv_ = other.icmpv6NdNaFlagRsv_;
      icmpv6NdNaTargetAddress_ = other.icmpv6NdNaTargetAddress_;
      icmpv6NdRdTargetAddress_ = other.icmpv6NdRdTargetAddress_;
      icmpv6RdNaDestinationAddress_ = other.icmpv6RdNaDestinationAddress_;
      icmpv6Opt_ = other.icmpv6Opt_;
      icmpv6OptType_ = other.icmpv6OptType_;
      icmpv6OptLength_ = other.icmpv6OptLength_;
      icmpv6OptReserved_ = other.icmpv6OptReserved_;
      icmpv6OptPadding_ = other.icmpv6OptPadding_;
      icmpv6OptLinkaddr_ = other.icmpv6OptLinkaddr_;
      icmpv6OptSrcLinkaddr_ = other.icmpv6OptSrcLinkaddr_;
      icmpv6OptTargetLinkaddr_ = other.icmpv6OptTargetLinkaddr_;
      icmpv6OptLinkaddrEui64_ = other.icmpv6OptLinkaddrEui64_;
      icmpv6OptSrcLinkaddrEui64_ = other.icmpv6OptSrcLinkaddrEui64_;
      icmpv6OptTargetLinkaddrEui64_ = other.icmpv6OptTargetLinkaddrEui64_;
      icmpv6OptPrefixLength_ = other.icmpv6OptPrefixLength_;
      icmpv6OptPrefixFlag_ = other.icmpv6OptPrefixFlag_;
      icmpv6OptPrefixFlagL_ = other.icmpv6OptPrefixFlagL_;
      icmpv6OptPrefixFlagA_ = other.icmpv6OptPrefixFlagA_;
      icmpv6OptPrefixFlagR_ = other.icmpv6OptPrefixFlagR_;
      icmpv6OptPrefixFlagReserved_ = other.icmpv6OptPrefixFlagReserved_;
      icmpv6OptPrefixValidLifetime_ = other.icmpv6OptPrefixValidLifetime_;
      icmpv6OptPrefixPreferredLifetime_ = other.icmpv6OptPrefixPreferredLifetime_;
      icmpv6OptPrefix_ = other.icmpv6OptPrefix_;
      icmpv6OptCgaPadLength_ = other.icmpv6OptCgaPadLength_;
      icmpv6OptCga_ = other.icmpv6OptCga_;
      icmpv6OptCgaModifier_ = other.icmpv6OptCgaModifier_;
      icmpv6OptCgaSubnetPrefix_ = other.icmpv6OptCgaSubnetPrefix_;
      icmpv6OptCgaCount_ = other.icmpv6OptCgaCount_;
      icmpv6OptCgaExtType_ = other.icmpv6OptCgaExtType_;
      icmpv6OptCgaExtLength_ = other.icmpv6OptCgaExtLength_;
      icmpv6OptCgaExtData_ = other.icmpv6OptCgaExtData_;
      icmpv6OptRsaKeyHash_ = other.icmpv6OptRsaKeyHash_;
      icmpv6OptDigitalSignaturePadding_ = other.icmpv6OptDigitalSignaturePadding_;
      icmpv6OptPsKeyHash_ = other.icmpv6OptPsKeyHash_;
      icmpv6OptTimestamp_ = other.icmpv6OptTimestamp_;
      icmpv6OptNonce_ = other.icmpv6OptNonce_;
      icmpv6OptCertificatePadding_ = other.icmpv6OptCertificatePadding_;
      icmpv6OptIpaOptionCode_ = other.icmpv6OptIpaOptionCode_;
      icmpv6OptIpaPrefixLen_ = other.icmpv6OptIpaPrefixLen_;
      icmpv6OptIpaIpv6Address_ = other.icmpv6OptIpaIpv6Address_;
      icmpv6OptNrpiOptionCode_ = other.icmpv6OptNrpiOptionCode_;
      icmpv6OptNrpiPrefixLen_ = other.icmpv6OptNrpiPrefixLen_;
      icmpv6OptNrpiPrefix_ = other.icmpv6OptNrpiPrefix_;
      icmpv6OptLlaOptionCode_ = other.icmpv6OptLlaOptionCode_;
      icmpv6OptLlaBytes_ = other.icmpv6OptLlaBytes_;
      icmpv6OptNaackOptionCode_ = other.icmpv6OptNaackOptionCode_;
      icmpv6OptNaackStatus_ = other.icmpv6OptNaackStatus_;
      icmpv6OptNaackSuppliedNcoa_ = other.icmpv6OptNaackSuppliedNcoa_;
      icmpv6OptMapDistance_ = other.icmpv6OptMapDistance_;
      icmpv6OptMapPreference_ = other.icmpv6OptMapPreference_;
      icmpv6OptMapFlag_ = other.icmpv6OptMapFlag_;
      icmpv6OptMapFlagR_ = other.icmpv6OptMapFlagR_;
      icmpv6OptMapFlagReserved_ = other.icmpv6OptMapFlagReserved_;
      icmpv6OptMapValidLifetime_ = other.icmpv6OptMapValidLifetime_;
      icmpv6OptMapGlobalAddress_ = other.icmpv6OptMapGlobalAddress_;
      icmpv6OptRouteInfoFlag_ = other.icmpv6OptRouteInfoFlag_;
      icmpv6OptRouteInfoFlagRoutePreference_ = other.icmpv6OptRouteInfoFlagRoutePreference_;
      icmpv6OptRouteInfoFlagReserved_ = other.icmpv6OptRouteInfoFlagReserved_;
      icmpv6OptRouteLifetime_ = other.icmpv6OptRouteLifetime_;
      icmpv6OptNameType_ = other.icmpv6OptNameType_;
      icmpv6OptNameX501_ = other.icmpv6OptNameX501_;
      icmpv6OptNameTypeFqdn_ = other.icmpv6OptNameTypeFqdn_;
      icmpv6SendIdentifier_ = other.icmpv6SendIdentifier_;
      icmpv6SendAllComponents_ = other.icmpv6SendAllComponents_;
      icmpv6SendComponent_ = other.icmpv6SendComponent_;
      icmpv6X509Name_ = other.icmpv6X509Name_;
      icmpv6X509Certificate_ = other.icmpv6X509Certificate_;
      icmpv6OptRedirectedPacket_ = other.icmpv6OptRedirectedPacket_;
      icmpv6OptMtu_ = other.icmpv6OptMtu_;
      icmpv6OptNbmaShortcutLimit_ = other.icmpv6OptNbmaShortcutLimit_;
      icmpv6OptAdvertisementInterval_ = other.icmpv6OptAdvertisementInterval_;
      icmpv6OptHomeAgentPreference_ = other.icmpv6OptHomeAgentPreference_;
      icmpv6OptHomeAgentLifetime_ = other.icmpv6OptHomeAgentLifetime_;
      icmpv6OptIpv6Address_ = other.icmpv6OptIpv6Address_;
      icmpv6OptRdnssLifetime_ = other.icmpv6OptRdnssLifetime_;
      icmpv6OptRdnss_ = other.icmpv6OptRdnss_;
      icmpv6OptEfo_ = other.icmpv6OptEfo_;
      icmpv6OptEfoM_ = other.icmpv6OptEfoM_;
      icmpv6OptEfoO_ = other.icmpv6OptEfoO_;
      icmpv6OptEfoH_ = other.icmpv6OptEfoH_;
      icmpv6OptEfoPrf_ = other.icmpv6OptEfoPrf_;
      icmpv6OptEfoP_ = other.icmpv6OptEfoP_;
      icmpv6OptEfoRsv_ = other.icmpv6OptEfoRsv_;
      icmpv6OptHkrPadLength_ = other.icmpv6OptHkrPadLength_;
      icmpv6OptHkrAt_ = other.icmpv6OptHkrAt_;
      icmpv6OptHkrReserved_ = other.icmpv6OptHkrReserved_;
      icmpv6OptHkrEncryptionPublicKey_ = other.icmpv6OptHkrEncryptionPublicKey_;
      icmpv6OptHkrPadding_ = other.icmpv6OptHkrPadding_;
      icmpv6OptHkrLifetime_ = other.icmpv6OptHkrLifetime_;
      icmpv6OptHkrEncryptedHandoverKey_ = other.icmpv6OptHkrEncryptedHandoverKey_;
      icmpv6OptHaiOptionCode_ = other.icmpv6OptHaiOptionCode_;
      icmpv6OptHaiLength_ = other.icmpv6OptHaiLength_;
      icmpv6OptHaiValue_ = other.icmpv6OptHaiValue_;
      icmpv6OptMnOptionCode_ = other.icmpv6OptMnOptionCode_;
      icmpv6OptMnLength_ = other.icmpv6OptMnLength_;
      icmpv6OptMnValue_ = other.icmpv6OptMnValue_;
      icmpv6OptDnsslLifetime_ = other.icmpv6OptDnsslLifetime_;
      icmpv6OptDnssl_ = other.icmpv6OptDnssl_;
      icmpv6OptAroStatus_ = other.icmpv6OptAroStatus_;
      icmpv6OptAroRegistrationLifetime_ = other.icmpv6OptAroRegistrationLifetime_;
      icmpv6OptAroEui64_ = other.icmpv6OptAroEui64_;
      icmpv6Opt6CoContextLength_ = other.icmpv6Opt6CoContextLength_;
      icmpv6Opt6CoFlag_ = other.icmpv6Opt6CoFlag_;
      icmpv6Opt6CoFlagC_ = other.icmpv6Opt6CoFlagC_;
      icmpv6Opt6CoFlagCid_ = other.icmpv6Opt6CoFlagCid_;
      icmpv6Opt6CoFlagReserved_ = other.icmpv6Opt6CoFlagReserved_;
      icmpv6Opt6CoValidLifetime_ = other.icmpv6Opt6CoValidLifetime_;
      icmpv6Opt6CoContextPrefix_ = other.icmpv6Opt6CoContextPrefix_;
      icmpv6OptAbroVersionLow_ = other.icmpv6OptAbroVersionLow_;
      icmpv6OptAbroVersionHigh_ = other.icmpv6OptAbroVersionHigh_;
      icmpv6OptAbroValidLifetime_ = other.icmpv6OptAbroValidLifetime_;
      icmpv6OptAbro6LbrAddress_ = other.icmpv6OptAbro6LbrAddress_;
      icmpv6Opt6CioUnassigned1_ = other.icmpv6Opt6CioUnassigned1_;
      icmpv6Opt6CioFlagG_ = other.icmpv6Opt6CioFlagG_;
      icmpv6Opt6CioUnassigned2_ = other.icmpv6Opt6CioUnassigned2_;
      icmpv6OptCaptivePortal_ = other.icmpv6OptCaptivePortal_;
      icmpv6MldMaximumResponseDelay_ = other.icmpv6MldMaximumResponseDelay_;
      icmpv6MldMulticastAddress_ = other.icmpv6MldMulticastAddress_;
      icmpv6RrSequenceNumber_ = other.icmpv6RrSequenceNumber_;
      icmpv6RrSegmentNumber_ = other.icmpv6RrSegmentNumber_;
      icmpv6RrFlag_ = other.icmpv6RrFlag_;
      icmpv6RrFlagT_ = other.icmpv6RrFlagT_;
      icmpv6RrFlagR_ = other.icmpv6RrFlagR_;
      icmpv6RrFlagA_ = other.icmpv6RrFlagA_;
      icmpv6RrFlagS_ = other.icmpv6RrFlagS_;
      icmpv6RrFlagP_ = other.icmpv6RrFlagP_;
      icmpv6RrFlagRsv_ = other.icmpv6RrFlagRsv_;
      icmpv6RrMaxdelay_ = other.icmpv6RrMaxdelay_;
      icmpv6RrPcoMp_ = other.icmpv6RrPcoMp_;
      icmpv6RrPcoMpOpcode_ = other.icmpv6RrPcoMpOpcode_;
      icmpv6RrPcoMpOplength_ = other.icmpv6RrPcoMpOplength_;
      icmpv6RrPcoMpOrdinal_ = other.icmpv6RrPcoMpOrdinal_;
      icmpv6RrPcoMpMatchlen_ = other.icmpv6RrPcoMpMatchlen_;
      icmpv6RrPcoMpMinlen_ = other.icmpv6RrPcoMpMinlen_;
      icmpv6RrPcoMpMaxlen_ = other.icmpv6RrPcoMpMaxlen_;
      icmpv6RrPcoMpMatchprefix_ = other.icmpv6RrPcoMpMatchprefix_;
      icmpv6RrPcoUp_ = other.icmpv6RrPcoUp_;
      icmpv6RrPcoUpUselen_ = other.icmpv6RrPcoUpUselen_;
      icmpv6RrPcoUpKeeplen_ = other.icmpv6RrPcoUpKeeplen_;
      icmpv6RrPcoUpFlagmask_ = other.icmpv6RrPcoUpFlagmask_;
      icmpv6RrPcoUpFlagmaskL_ = other.icmpv6RrPcoUpFlagmaskL_;
      icmpv6RrPcoUpFlagmaskA_ = other.icmpv6RrPcoUpFlagmaskA_;
      icmpv6RrPcoUpFlagmaskReserved_ = other.icmpv6RrPcoUpFlagmaskReserved_;
      icmpv6RrPcoUpRaflags_ = other.icmpv6RrPcoUpRaflags_;
      icmpv6RrPcoUpValidlifetime_ = other.icmpv6RrPcoUpValidlifetime_;
      icmpv6RrPcoUpPreferredlifetime_ = other.icmpv6RrPcoUpPreferredlifetime_;
      icmpv6RrPcoUpFlag_ = other.icmpv6RrPcoUpFlag_;
      icmpv6RrPcoUpFlagV_ = other.icmpv6RrPcoUpFlagV_;
      icmpv6RrPcoUpFlagP_ = other.icmpv6RrPcoUpFlagP_;
      icmpv6RrPcoUpFlagReserved_ = other.icmpv6RrPcoUpFlagReserved_;
      icmpv6RrPcoUpUseprefix_ = other.icmpv6RrPcoUpUseprefix_;
      icmpv6RrRm_ = other.icmpv6RrRm_;
      icmpv6RrRmFlag_ = other.icmpv6RrRmFlag_;
      icmpv6RrRmFlagB_ = other.icmpv6RrRmFlagB_;
      icmpv6RrRmFlagF_ = other.icmpv6RrRmFlagF_;
      icmpv6RrRmFlagReserved_ = other.icmpv6RrRmFlagReserved_;
      icmpv6RrRmOrdinal_ = other.icmpv6RrRmOrdinal_;
      icmpv6RrRmMatchedlen_ = other.icmpv6RrRmMatchedlen_;
      icmpv6RrRmInterfaceindex_ = other.icmpv6RrRmInterfaceindex_;
      icmpv6RrRmMatchedprefix_ = other.icmpv6RrRmMatchedprefix_;
      icmpv6Mip6Identifier_ = other.icmpv6Mip6Identifier_;
      icmpv6Mip6HomeAgentAddress_ = other.icmpv6Mip6HomeAgentAddress_;
      icmpv6Mip6Flag_ = other.icmpv6Mip6Flag_;
      icmpv6Mip6FlagM_ = other.icmpv6Mip6FlagM_;
      icmpv6Mip6FlagO_ = other.icmpv6Mip6FlagO_;
      icmpv6Mip6FlagRsv_ = other.icmpv6Mip6FlagRsv_;
      icmpv6MldMaximumResponseCode_ = other.icmpv6MldMaximumResponseCode_;
      icmpv6MldFlag_ = other.icmpv6MldFlag_;
      icmpv6MldFlagS_ = other.icmpv6MldFlagS_;
      icmpv6MldFlagQrv_ = other.icmpv6MldFlagQrv_;
      icmpv6MldFlagReserved_ = other.icmpv6MldFlagReserved_;
      icmpv6MldQqi_ = other.icmpv6MldQqi_;
      icmpv6MldNbSources_ = other.icmpv6MldNbSources_;
      icmpv6MldSourceAddress_ = other.icmpv6MldSourceAddress_;
      icmpv6MldrNbMcastRecords_ = other.icmpv6MldrNbMcastRecords_;
      icmpv6MldrMar_ = other.icmpv6MldrMar_;
      icmpv6MldrMarRecordType_ = other.icmpv6MldrMarRecordType_;
      icmpv6MldrMarAuxDataLen_ = other.icmpv6MldrMarAuxDataLen_;
      icmpv6MldrMarNbSources_ = other.icmpv6MldrMarNbSources_;
      icmpv6MldrMarMulticastAddress_ = other.icmpv6MldrMarMulticastAddress_;
      icmpv6MldrMarSourceAddress_ = other.icmpv6MldrMarSourceAddress_;
      icmpv6MldrMarAuxiliaryData_ = other.icmpv6MldrMarAuxiliaryData_;
      icmpv6Fmip6Subtype_ = other.icmpv6Fmip6Subtype_;
      icmpv6Fmip6HiFlag_ = other.icmpv6Fmip6HiFlag_;
      icmpv6Fmip6HiFlagS_ = other.icmpv6Fmip6HiFlagS_;
      icmpv6Fmip6HiFlagA_ = other.icmpv6Fmip6HiFlagA_;
      icmpv6Fmip6HiFlagReserved_ = other.icmpv6Fmip6HiFlagReserved_;
      icmpv6Fmip6Identifier_ = other.icmpv6Fmip6Identifier_;
      icmpv6McastRaQueryInterval_ = other.icmpv6McastRaQueryInterval_;
      icmpv6McastRaRobustnessVariable_ = other.icmpv6McastRaRobustnessVariable_;
      icmpv6NiQtype_ = other.icmpv6NiQtype_;
      icmpv6NiFlag_ = other.icmpv6NiFlag_;
      icmpv6NiFlagG_ = other.icmpv6NiFlagG_;
      icmpv6NiFlagS_ = other.icmpv6NiFlagS_;
      icmpv6NiFlagL_ = other.icmpv6NiFlagL_;
      icmpv6NiFlagC_ = other.icmpv6NiFlagC_;
      icmpv6NiFlagA_ = other.icmpv6NiFlagA_;
      icmpv6NiFlagT_ = other.icmpv6NiFlagT_;
      icmpv6NiFlagRsv_ = other.icmpv6NiFlagRsv_;
      icmpv6NiNonce_ = other.icmpv6NiNonce_;
      icmpv6NiQuerySubjectIpv6_ = other.icmpv6NiQuerySubjectIpv6_;
      icmpv6NiQuerySubjectFqdn_ = other.icmpv6NiQuerySubjectFqdn_;
      icmpv6NiQuerySubjectIpv4_ = other.icmpv6NiQuerySubjectIpv4_;
      icmpv6NiReplyNodeTtl_ = other.icmpv6NiReplyNodeTtl_;
      icmpv6NiReplyNodeName_ = other.icmpv6NiReplyNodeName_;
      icmpv6NiReplyNodeAddress_ = other.icmpv6NiReplyNodeAddress_;
      icmpv6NiReplyIpv4Address_ = other.icmpv6NiReplyIpv4Address_;
      icmpv6RplDisFlags_ = other.icmpv6RplDisFlags_;
      icmpv6RplDioInstance_ = other.icmpv6RplDioInstance_;
      icmpv6RplDioVersion_ = other.icmpv6RplDioVersion_;
      icmpv6RplDioRank_ = other.icmpv6RplDioRank_;
      icmpv6RplDioFlag_ = other.icmpv6RplDioFlag_;
      icmpv6RplDioFlagG_ = other.icmpv6RplDioFlagG_;
      icmpv6RplDioFlag0_ = other.icmpv6RplDioFlag0_;
      icmpv6RplDioFlagMop_ = other.icmpv6RplDioFlagMop_;
      icmpv6RplDioFlagPreference_ = other.icmpv6RplDioFlagPreference_;
      icmpv6RplDioDtsn_ = other.icmpv6RplDioDtsn_;
      icmpv6RplDioDagid_ = other.icmpv6RplDioDagid_;
      icmpv6RplDaoInstance_ = other.icmpv6RplDaoInstance_;
      icmpv6RplDaoFlag_ = other.icmpv6RplDaoFlag_;
      icmpv6RplDaoFlagK_ = other.icmpv6RplDaoFlagK_;
      icmpv6RplDaoFlagD_ = other.icmpv6RplDaoFlagD_;
      icmpv6RplDaoFlagRsv_ = other.icmpv6RplDaoFlagRsv_;
      icmpv6RplDaoSequence_ = other.icmpv6RplDaoSequence_;
      icmpv6RplDaoDodagid_ = other.icmpv6RplDaoDodagid_;
      icmpv6RplDaoackInstance_ = other.icmpv6RplDaoackInstance_;
      icmpv6RplDaoackFlag_ = other.icmpv6RplDaoackFlag_;
      icmpv6RplDaoackFlagD_ = other.icmpv6RplDaoackFlagD_;
      icmpv6RplDaoackFlagRsv_ = other.icmpv6RplDaoackFlagRsv_;
      icmpv6RplDaoackSequence_ = other.icmpv6RplDaoackSequence_;
      icmpv6RplDaoackStatus_ = other.icmpv6RplDaoackStatus_;
      icmpv6RplDaoackDodagid_ = other.icmpv6RplDaoackDodagid_;
      icmpv6RplCcInstance_ = other.icmpv6RplCcInstance_;
      icmpv6RplCcFlag_ = other.icmpv6RplCcFlag_;
      icmpv6RplCcFlagR_ = other.icmpv6RplCcFlagR_;
      icmpv6RplCcFlagRsv_ = other.icmpv6RplCcFlagRsv_;
      icmpv6RplCcNonce_ = other.icmpv6RplCcNonce_;
      icmpv6RplCcDodagid_ = other.icmpv6RplCcDodagid_;
      icmpv6RplCcDestinationCounter_ = other.icmpv6RplCcDestinationCounter_;
      icmpv6RplSecureFlag_ = other.icmpv6RplSecureFlag_;
      icmpv6RplSecureFlagT_ = other.icmpv6RplSecureFlagT_;
      icmpv6RplSecureFlagRsv_ = other.icmpv6RplSecureFlagRsv_;
      icmpv6RplSecureAlgorithm_ = other.icmpv6RplSecureAlgorithm_;
      icmpv6RplSecureKim_ = other.icmpv6RplSecureKim_;
      icmpv6RplSecureLvl_ = other.icmpv6RplSecureLvl_;
      icmpv6RplSecureRsv_ = other.icmpv6RplSecureRsv_;
      icmpv6RplSecureCounter_ = other.icmpv6RplSecureCounter_;
      icmpv6RplSecureKeySource_ = other.icmpv6RplSecureKeySource_;
      icmpv6RplSecureKeyIndex_ = other.icmpv6RplSecureKeyIndex_;
      icmpv6RplOptType_ = other.icmpv6RplOptType_;
      icmpv6RplOptLength_ = other.icmpv6RplOptLength_;
      icmpv6RplOptReserved_ = other.icmpv6RplOptReserved_;
      icmpv6RplOptPadn_ = other.icmpv6RplOptPadn_;
      icmpv6RplOptMetricType_ = other.icmpv6RplOptMetricType_;
      icmpv6RplOptMetricFlags_ = other.icmpv6RplOptMetricFlags_;
      icmpv6RplOptMetricReserved_ = other.icmpv6RplOptMetricReserved_;
      icmpv6RplOptMetricFlagP_ = other.icmpv6RplOptMetricFlagP_;
      icmpv6RplOptMetricFlagC_ = other.icmpv6RplOptMetricFlagC_;
      icmpv6RplOptMetricFlagO_ = other.icmpv6RplOptMetricFlagO_;
      icmpv6RplOptMetricFlagR_ = other.icmpv6RplOptMetricFlagR_;
      icmpv6RplOptMetricFlagA_ = other.icmpv6RplOptMetricFlagA_;
      icmpv6RplOptMetricPrec_ = other.icmpv6RplOptMetricPrec_;
      icmpv6RplOptMetricLength_ = other.icmpv6RplOptMetricLength_;
      icmpv6RplOptMetricNsaObject_ = other.icmpv6RplOptMetricNsaObject_;
      icmpv6RplOptMetricNsaObjectReserved_ = other.icmpv6RplOptMetricNsaObjectReserved_;
      icmpv6RplOptMetricNsaObjectFlags_ = other.icmpv6RplOptMetricNsaObjectFlags_;
      icmpv6RplOptMetricNsaObjectFlagA_ = other.icmpv6RplOptMetricNsaObjectFlagA_;
      icmpv6RplOptMetricNsaObjectFlagO_ = other.icmpv6RplOptMetricNsaObjectFlagO_;
      icmpv6RplOptMetricNeObject_ = other.icmpv6RplOptMetricNeObject_;
      icmpv6RplOptMetricNeObjectFlags_ = other.icmpv6RplOptMetricNeObjectFlags_;
      icmpv6RplOptMetricNeObjectFlagI_ = other.icmpv6RplOptMetricNeObjectFlagI_;
      icmpv6RplOptMetricNeObjectType_ = other.icmpv6RplOptMetricNeObjectType_;
      icmpv6RplOptMetricNeObjectFlagE_ = other.icmpv6RplOptMetricNeObjectFlagE_;
      icmpv6RplOptMetricNeObjectEnergy_ = other.icmpv6RplOptMetricNeObjectEnergy_;
      icmpv6RplOptMetricHpObject_ = other.icmpv6RplOptMetricHpObject_;
      icmpv6RplOptMetricHpObjectReserved_ = other.icmpv6RplOptMetricHpObjectReserved_;
      icmpv6RplOptMetricHpObjectFlags_ = other.icmpv6RplOptMetricHpObjectFlags_;
      icmpv6RplOptMetricHpObjectHp_ = other.icmpv6RplOptMetricHpObjectHp_;
      icmpv6RplOptMetricLtObjectLt_ = other.icmpv6RplOptMetricLtObjectLt_;
      icmpv6RplOptMetricLlObjectLl_ = other.icmpv6RplOptMetricLlObjectLl_;
      icmpv6RplOptMetricLqlObject_ = other.icmpv6RplOptMetricLqlObject_;
      icmpv6RplOptMetricLqlObjectRes_ = other.icmpv6RplOptMetricLqlObjectRes_;
      icmpv6RplOptMetricLqlObjectVal_ = other.icmpv6RplOptMetricLqlObjectVal_;
      icmpv6RplOptMetricLqlObjectCounter_ = other.icmpv6RplOptMetricLqlObjectCounter_;
      icmpv6RplOptMetricEtxObjectEtx_ = other.icmpv6RplOptMetricEtxObjectEtx_;
      icmpv6RplOptMetricLcObject_ = other.icmpv6RplOptMetricLcObject_;
      icmpv6RplOptMetricLcObjectRes_ = other.icmpv6RplOptMetricLcObjectRes_;
      icmpv6RplOptMetricLcObjectLc_ = other.icmpv6RplOptMetricLcObjectLc_;
      icmpv6RplOptMetricLcObjectCounter_ = other.icmpv6RplOptMetricLcObjectCounter_;
      icmpv6RplOptMetricLcObjectReserved_ = other.icmpv6RplOptMetricLcObjectReserved_;
      icmpv6RplOptMetricLcObjectFlagI_ = other.icmpv6RplOptMetricLcObjectFlagI_;
      icmpv6RplOptRoutePrefixLength_ = other.icmpv6RplOptRoutePrefixLength_;
      icmpv6RplOptRouteFlag_ = other.icmpv6RplOptRouteFlag_;
      icmpv6RplOptRoutePref_ = other.icmpv6RplOptRoutePref_;
      icmpv6RplOptRouteReserved_ = other.icmpv6RplOptRouteReserved_;
      icmpv6RplOptRouteLifetime_ = other.icmpv6RplOptRouteLifetime_;
      icmpv6RplOptRoutePrefix_ = other.icmpv6RplOptRoutePrefix_;
      icmpv6RplOptConfigFlag_ = other.icmpv6RplOptConfigFlag_;
      icmpv6RplOptConfigReserved_ = other.icmpv6RplOptConfigReserved_;
      icmpv6RplOptConfigAuth_ = other.icmpv6RplOptConfigAuth_;
      icmpv6RplOptConfigPcs_ = other.icmpv6RplOptConfigPcs_;
      icmpv6RplOptConfigIntervalDouble_ = other.icmpv6RplOptConfigIntervalDouble_;
      icmpv6RplOptConfigIntervalMin_ = other.icmpv6RplOptConfigIntervalMin_;
      icmpv6RplOptConfigRedundancy_ = other.icmpv6RplOptConfigRedundancy_;
      icmpv6RplOptConfigMaxRankInc_ = other.icmpv6RplOptConfigMaxRankInc_;
      icmpv6RplOptConfigMinHopRankInc_ = other.icmpv6RplOptConfigMinHopRankInc_;
      icmpv6RplOptConfigOcp_ = other.icmpv6RplOptConfigOcp_;
      icmpv6RplOptConfigRsv_ = other.icmpv6RplOptConfigRsv_;
      icmpv6RplOptConfigDefLifetime_ = other.icmpv6RplOptConfigDefLifetime_;
      icmpv6RplOptConfigLifetimeUnit_ = other.icmpv6RplOptConfigLifetimeUnit_;
      icmpv6RplOptTargetFlag_ = other.icmpv6RplOptTargetFlag_;
      icmpv6RplOptTargetPrefixLength_ = other.icmpv6RplOptTargetPrefixLength_;
      icmpv6RplOptTargetPrefix_ = other.icmpv6RplOptTargetPrefix_;
      icmpv6RplOptTransitFlag_ = other.icmpv6RplOptTransitFlag_;
      icmpv6RplOptTransitFlagE_ = other.icmpv6RplOptTransitFlagE_;
      icmpv6RplOptTransitFlagRsv_ = other.icmpv6RplOptTransitFlagRsv_;
      icmpv6RplOptTransitPathctl_ = other.icmpv6RplOptTransitPathctl_;
      icmpv6RplOptTransitPathseq_ = other.icmpv6RplOptTransitPathseq_;
      icmpv6RplOptTransitPathlifetime_ = other.icmpv6RplOptTransitPathlifetime_;
      icmpv6RplOptTransitParent_ = other.icmpv6RplOptTransitParent_;
      icmpv6RplOptSolicitedInstance_ = other.icmpv6RplOptSolicitedInstance_;
      icmpv6RplOptSolicitedFlag_ = other.icmpv6RplOptSolicitedFlag_;
      icmpv6RplOptSolicitedFlagV_ = other.icmpv6RplOptSolicitedFlagV_;
      icmpv6RplOptSolicitedFlagI_ = other.icmpv6RplOptSolicitedFlagI_;
      icmpv6RplOptSolicitedFlagD_ = other.icmpv6RplOptSolicitedFlagD_;
      icmpv6RplOptSolicitedFlagRsv_ = other.icmpv6RplOptSolicitedFlagRsv_;
      icmpv6RplOptSolicitedDodagid_ = other.icmpv6RplOptSolicitedDodagid_;
      icmpv6RplOptSolicitedVersion_ = other.icmpv6RplOptSolicitedVersion_;
      icmpv6RplOptPrefixLength_ = other.icmpv6RplOptPrefixLength_;
      icmpv6RplOptPrefixFlag_ = other.icmpv6RplOptPrefixFlag_;
      icmpv6RplOptPrefixFlagL_ = other.icmpv6RplOptPrefixFlagL_;
      icmpv6RplOptConfigFlagA_ = other.icmpv6RplOptConfigFlagA_;
      icmpv6RplOptConfigFlagR_ = other.icmpv6RplOptConfigFlagR_;
      icmpv6RplOptConfigFlagRsv_ = other.icmpv6RplOptConfigFlagRsv_;
      icmpv6RplOptPrefixValidLifetime_ = other.icmpv6RplOptPrefixValidLifetime_;
      icmpv6RplOptPrefixPreferredLifetime_ = other.icmpv6RplOptPrefixPreferredLifetime_;
      icmpv6RplOptPrefix_ = other.icmpv6RplOptPrefix_;
      icmpv6RplOptTargetdescDescriptor_ = other.icmpv6RplOptTargetdescDescriptor_;
      icmpv6RplOptRoutediscoveryFlag_ = other.icmpv6RplOptRoutediscoveryFlag_;
      icmpv6RplOptRoutediscoveryFlagReply_ = other.icmpv6RplOptRoutediscoveryFlagReply_;
      icmpv6RplOptRoutediscoveryFlagHopbyhop_ = other.icmpv6RplOptRoutediscoveryFlagHopbyhop_;
      icmpv6RplOptRoutediscoveryFlagNumofroutes_ = other.icmpv6RplOptRoutediscoveryFlagNumofroutes_;
      icmpv6RplOptRoutediscoveryFlagCompr_ = other.icmpv6RplOptRoutediscoveryFlagCompr_;
      icmpv6RplOptRoutediscoveryLifetime_ = other.icmpv6RplOptRoutediscoveryLifetime_;
      icmpv6RplOptRoutediscoveryMaxrank_ = other.icmpv6RplOptRoutediscoveryMaxrank_;
      icmpv6RplOptRoutediscoveryNh_ = other.icmpv6RplOptRoutediscoveryNh_;
      icmpv6RplOptRoutediscoveryTargetaddr_ = other.icmpv6RplOptRoutediscoveryTargetaddr_;
      icmpv6RplOptRoutediscoveryAddrVec_ = other.icmpv6RplOptRoutediscoveryAddrVec_;
      icmpv6RplOptRoutediscoveryAddrvecAddr_ = other.icmpv6RplOptRoutediscoveryAddrvecAddr_;
      icmpv6RplP2PDroInstance_ = other.icmpv6RplP2PDroInstance_;
      icmpv6RplP2PDroVersion_ = other.icmpv6RplP2PDroVersion_;
      icmpv6RplP2PDroFlag_ = other.icmpv6RplP2PDroFlag_;
      icmpv6RplP2PDroFlagStop_ = other.icmpv6RplP2PDroFlagStop_;
      icmpv6RplP2PDroFlagAck_ = other.icmpv6RplP2PDroFlagAck_;
      icmpv6RplP2PDroFlagSeq_ = other.icmpv6RplP2PDroFlagSeq_;
      icmpv6RplP2PDroFlagReserved_ = other.icmpv6RplP2PDroFlagReserved_;
      icmpv6RplP2PDroDagid_ = other.icmpv6RplP2PDroDagid_;
      icmpv6RplP2PDroackFlag_ = other.icmpv6RplP2PDroackFlag_;
      icmpv6RplP2PDroackFlagSeq_ = other.icmpv6RplP2PDroackFlagSeq_;
      icmpv6RplP2PDroackFlagReserved_ = other.icmpv6RplP2PDroackFlagReserved_;
      icmpv6IlnpNbLocs_ = other.icmpv6IlnpNbLocs_;
      icmpv6IlnpNbLocator_ = other.icmpv6IlnpNbLocator_;
      icmpv6IlnpNbPreference_ = other.icmpv6IlnpNbPreference_;
      icmpv6IlnpNbLifetime_ = other.icmpv6IlnpNbLifetime_;
      icmpv66LowpanndDaStatus_ = other.icmpv66LowpanndDaStatus_;
      icmpv66LowpanndDaRsv_ = other.icmpv66LowpanndDaRsv_;
      icmpv66LowpanndDaLifetime_ = other.icmpv66LowpanndDaLifetime_;
      icmpv66LowpanndDaEui64_ = other.icmpv66LowpanndDaEui64_;
      icmpv66LowpanndDaRegAddr_ = other.icmpv66LowpanndDaRegAddr_;
      icmpv6RespIn_ = other.icmpv6RespIn_;
      icmpv6NoResp_ = other.icmpv6NoResp_;
      icmpv6RespTo_ = other.icmpv6RespTo_;
      icmpv6Resptime_ = other.icmpv6Resptime_;
      icmpv6MplSeedInfoMinSequence_ = other.icmpv6MplSeedInfoMinSequence_;
      icmpv6MplSeedInfoBmLen_ = other.icmpv6MplSeedInfoBmLen_;
      icmpv6MplSeedInfoS_ = other.icmpv6MplSeedInfoS_;
      icmpv6MplSeedInfoSeedId_ = other.icmpv6MplSeedInfoSeedId_;
      icmpv6MplSeedInfoSequence_ = other.icmpv6MplSeedInfoSequence_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmpv6 Clone() {
      return new Icmpv6(this);
    }

    /// <summary>Field number for the "Icmpv6Type" field.</summary>
    public const int Icmpv6TypeFieldNumber = 1;
    private uint icmpv6Type_;
    /// <summary>
    /// Type ('icmpv6_icmpv6_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Type {
      get { return icmpv6Type_; }
      set {
        icmpv6Type_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Code" field.</summary>
    public const int Icmpv6CodeFieldNumber = 2;
    private uint icmpv6Code_;
    /// <summary>
    /// Code ('icmpv6_icmpv6_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Code {
      get { return icmpv6Code_; }
      set {
        icmpv6Code_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Checksum" field.</summary>
    public const int Icmpv6ChecksumFieldNumber = 3;
    private uint icmpv6Checksum_;
    /// <summary>
    /// Checksum ('icmpv6_icmpv6_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Checksum {
      get { return icmpv6Checksum_; }
      set {
        icmpv6Checksum_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6ChecksumStatus" field.</summary>
    public const int Icmpv6ChecksumStatusFieldNumber = 4;
    private uint icmpv6ChecksumStatus_;
    /// <summary>
    /// Checksum Status ('icmpv6_checksum_icmpv6_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6ChecksumStatus {
      get { return icmpv6ChecksumStatus_; }
      set {
        icmpv6ChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Reserved" field.</summary>
    public const int Icmpv6ReservedFieldNumber = 5;
    private pb::ByteString icmpv6Reserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6Reserved {
      get { return icmpv6Reserved_; }
      set {
        icmpv6Reserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Data" field.</summary>
    public const int Icmpv6DataFieldNumber = 6;
    private pb::ByteString icmpv6Data_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('icmpv6_icmpv6_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6Data {
      get { return icmpv6Data_; }
      set {
        icmpv6Data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6UnknownData" field.</summary>
    public const int Icmpv6UnknownDataFieldNumber = 7;
    private pb::ByteString icmpv6UnknownData_ = pb::ByteString.Empty;
    /// <summary>
    /// Unknown Data ('icmpv6_icmpv6_unknown_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6UnknownData {
      get { return icmpv6UnknownData_; }
      set {
        icmpv6UnknownData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Mtu" field.</summary>
    public const int Icmpv6MtuFieldNumber = 8;
    private uint icmpv6Mtu_;
    /// <summary>
    /// MTU ('icmpv6_icmpv6_mtu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Mtu {
      get { return icmpv6Mtu_; }
      set {
        icmpv6Mtu_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Pointer" field.</summary>
    public const int Icmpv6PointerFieldNumber = 9;
    private uint icmpv6Pointer_;
    /// <summary>
    /// Pointer ('icmpv6_icmpv6_pointer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Pointer {
      get { return icmpv6Pointer_; }
      set {
        icmpv6Pointer_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6EchoIdentifier" field.</summary>
    public const int Icmpv6EchoIdentifierFieldNumber = 10;
    private uint icmpv6EchoIdentifier_;
    /// <summary>
    /// Identifier ('icmpv6_icmpv6_echo_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6EchoIdentifier {
      get { return icmpv6EchoIdentifier_; }
      set {
        icmpv6EchoIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6EchoSequenceNumber" field.</summary>
    public const int Icmpv6EchoSequenceNumberFieldNumber = 11;
    private uint icmpv6EchoSequenceNumber_;
    /// <summary>
    /// Sequence ('icmpv6_icmpv6_echo_sequence_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6EchoSequenceNumber {
      get { return icmpv6EchoSequenceNumber_; }
      set {
        icmpv6EchoSequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Nonce" field.</summary>
    public const int Icmpv6NonceFieldNumber = 12;
    private pb::ByteString icmpv6Nonce_ = pb::ByteString.Empty;
    /// <summary>
    /// Nonce ('icmpv6_icmpv6_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6Nonce {
      get { return icmpv6Nonce_; }
      set {
        icmpv6Nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaCurHopLimit" field.</summary>
    public const int Icmpv6NdRaCurHopLimitFieldNumber = 13;
    private uint icmpv6NdRaCurHopLimit_;
    /// <summary>
    /// Cur hop limit ('icmpv6_icmpv6_nd_ra_cur_hop_limit')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaCurHopLimit {
      get { return icmpv6NdRaCurHopLimit_; }
      set {
        icmpv6NdRaCurHopLimit_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlag" field.</summary>
    public const int Icmpv6NdRaFlagFieldNumber = 14;
    private uint icmpv6NdRaFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_nd_ra_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaFlag {
      get { return icmpv6NdRaFlag_; }
      set {
        icmpv6NdRaFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagM" field.</summary>
    public const int Icmpv6NdRaFlagMFieldNumber = 15;
    private bool icmpv6NdRaFlagM_;
    /// <summary>
    /// Managed address configuration ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_m')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdRaFlagM {
      get { return icmpv6NdRaFlagM_; }
      set {
        icmpv6NdRaFlagM_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagO" field.</summary>
    public const int Icmpv6NdRaFlagOFieldNumber = 16;
    private bool icmpv6NdRaFlagO_;
    /// <summary>
    /// Other configuration ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdRaFlagO {
      get { return icmpv6NdRaFlagO_; }
      set {
        icmpv6NdRaFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagH" field.</summary>
    public const int Icmpv6NdRaFlagHFieldNumber = 17;
    private bool icmpv6NdRaFlagH_;
    /// <summary>
    /// Home Agent ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_h')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdRaFlagH {
      get { return icmpv6NdRaFlagH_; }
      set {
        icmpv6NdRaFlagH_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagPrf" field.</summary>
    public const int Icmpv6NdRaFlagPrfFieldNumber = 18;
    private uint icmpv6NdRaFlagPrf_;
    /// <summary>
    /// Prf (Default Router Preference) ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_prf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaFlagPrf {
      get { return icmpv6NdRaFlagPrf_; }
      set {
        icmpv6NdRaFlagPrf_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagP" field.</summary>
    public const int Icmpv6NdRaFlagPFieldNumber = 19;
    private bool icmpv6NdRaFlagP_;
    /// <summary>
    /// Proxy ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdRaFlagP {
      get { return icmpv6NdRaFlagP_; }
      set {
        icmpv6NdRaFlagP_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaFlagRsv" field.</summary>
    public const int Icmpv6NdRaFlagRsvFieldNumber = 20;
    private uint icmpv6NdRaFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_nd_ra_flag_icmpv6_nd_ra_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaFlagRsv {
      get { return icmpv6NdRaFlagRsv_; }
      set {
        icmpv6NdRaFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaRouterLifetime" field.</summary>
    public const int Icmpv6NdRaRouterLifetimeFieldNumber = 21;
    private uint icmpv6NdRaRouterLifetime_;
    /// <summary>
    /// Router lifetime (s) ('icmpv6_icmpv6_nd_ra_router_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaRouterLifetime {
      get { return icmpv6NdRaRouterLifetime_; }
      set {
        icmpv6NdRaRouterLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaReachableTime" field.</summary>
    public const int Icmpv6NdRaReachableTimeFieldNumber = 22;
    private uint icmpv6NdRaReachableTime_;
    /// <summary>
    /// Reachable time (ms) ('icmpv6_icmpv6_nd_ra_reachable_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaReachableTime {
      get { return icmpv6NdRaReachableTime_; }
      set {
        icmpv6NdRaReachableTime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdRaRetransTimer" field.</summary>
    public const int Icmpv6NdRaRetransTimerFieldNumber = 23;
    private uint icmpv6NdRaRetransTimer_;
    /// <summary>
    /// Retrans timer (ms) ('icmpv6_icmpv6_nd_ra_retrans_timer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdRaRetransTimer {
      get { return icmpv6NdRaRetransTimer_; }
      set {
        icmpv6NdRaRetransTimer_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNsTargetAddress" field.</summary>
    public const int Icmpv6NdNsTargetAddressFieldNumber = 24;
    private pb::ByteString icmpv6NdNsTargetAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Address ('icmpv6_icmpv6_nd_ns_target_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NdNsTargetAddress {
      get { return icmpv6NdNsTargetAddress_; }
      set {
        icmpv6NdNsTargetAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaFlag" field.</summary>
    public const int Icmpv6NdNaFlagFieldNumber = 25;
    private uint icmpv6NdNaFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_nd_na_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdNaFlag {
      get { return icmpv6NdNaFlag_; }
      set {
        icmpv6NdNaFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaFlagR" field.</summary>
    public const int Icmpv6NdNaFlagRFieldNumber = 26;
    private bool icmpv6NdNaFlagR_;
    /// <summary>
    /// Router ('icmpv6_nd_na_flag_icmpv6_nd_na_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdNaFlagR {
      get { return icmpv6NdNaFlagR_; }
      set {
        icmpv6NdNaFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaFlagS" field.</summary>
    public const int Icmpv6NdNaFlagSFieldNumber = 27;
    private bool icmpv6NdNaFlagS_;
    /// <summary>
    /// Solicited ('icmpv6_nd_na_flag_icmpv6_nd_na_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdNaFlagS {
      get { return icmpv6NdNaFlagS_; }
      set {
        icmpv6NdNaFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaFlagO" field.</summary>
    public const int Icmpv6NdNaFlagOFieldNumber = 28;
    private bool icmpv6NdNaFlagO_;
    /// <summary>
    /// Override ('icmpv6_nd_na_flag_icmpv6_nd_na_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NdNaFlagO {
      get { return icmpv6NdNaFlagO_; }
      set {
        icmpv6NdNaFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaFlagRsv" field.</summary>
    public const int Icmpv6NdNaFlagRsvFieldNumber = 29;
    private uint icmpv6NdNaFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_nd_na_flag_icmpv6_nd_na_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NdNaFlagRsv {
      get { return icmpv6NdNaFlagRsv_; }
      set {
        icmpv6NdNaFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NdNaTargetAddress" field.</summary>
    public const int Icmpv6NdNaTargetAddressFieldNumber = 30;
    private pb::ByteString icmpv6NdNaTargetAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Address ('icmpv6_icmpv6_nd_na_target_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NdNaTargetAddress {
      get { return icmpv6NdNaTargetAddress_; }
      set {
        icmpv6NdNaTargetAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NdRdTargetAddress" field.</summary>
    public const int Icmpv6NdRdTargetAddressFieldNumber = 31;
    private pb::ByteString icmpv6NdRdTargetAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Address ('icmpv6_icmpv6_nd_rd_target_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NdRdTargetAddress {
      get { return icmpv6NdRdTargetAddress_; }
      set {
        icmpv6NdRdTargetAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RdNaDestinationAddress" field.</summary>
    public const int Icmpv6RdNaDestinationAddressFieldNumber = 32;
    private pb::ByteString icmpv6RdNaDestinationAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Address ('icmpv6_icmpv6_rd_na_destination_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RdNaDestinationAddress {
      get { return icmpv6RdNaDestinationAddress_; }
      set {
        icmpv6RdNaDestinationAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Opt" field.</summary>
    public const int Icmpv6OptFieldNumber = 33;
    private int icmpv6Opt_;
    /// <summary>
    /// ICMPv6 Option ('icmpv6_icmpv6_opt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6Opt {
      get { return icmpv6Opt_; }
      set {
        icmpv6Opt_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptType" field.</summary>
    public const int Icmpv6OptTypeFieldNumber = 34;
    private uint icmpv6OptType_;
    /// <summary>
    /// Type ('icmpv6_opt_icmpv6_opt_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptType {
      get { return icmpv6OptType_; }
      set {
        icmpv6OptType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptLength" field.</summary>
    public const int Icmpv6OptLengthFieldNumber = 35;
    private uint icmpv6OptLength_;
    /// <summary>
    /// Length ('icmpv6_opt_icmpv6_opt_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptLength {
      get { return icmpv6OptLength_; }
      set {
        icmpv6OptLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptReserved" field.</summary>
    public const int Icmpv6OptReservedFieldNumber = 36;
    private int icmpv6OptReserved_;
    /// <summary>
    /// Reserved ('icmpv6_opt_icmpv6_opt_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6OptReserved {
      get { return icmpv6OptReserved_; }
      set {
        icmpv6OptReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPadding" field.</summary>
    public const int Icmpv6OptPaddingFieldNumber = 37;
    private int icmpv6OptPadding_;
    /// <summary>
    /// Padding ('icmpv6_opt_icmpv6_opt_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6OptPadding {
      get { return icmpv6OptPadding_; }
      set {
        icmpv6OptPadding_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptLinkaddr" field.</summary>
    public const int Icmpv6OptLinkaddrFieldNumber = 38;
    private pb::ByteString icmpv6OptLinkaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Link-layer address ('icmpv6_opt_icmpv6_opt_linkaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptLinkaddr {
      get { return icmpv6OptLinkaddr_; }
      set {
        icmpv6OptLinkaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptSrcLinkaddr" field.</summary>
    public const int Icmpv6OptSrcLinkaddrFieldNumber = 39;
    private pb::ByteString icmpv6OptSrcLinkaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Link-layer address ('icmpv6_opt_icmpv6_opt_src_linkaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptSrcLinkaddr {
      get { return icmpv6OptSrcLinkaddr_; }
      set {
        icmpv6OptSrcLinkaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptTargetLinkaddr" field.</summary>
    public const int Icmpv6OptTargetLinkaddrFieldNumber = 40;
    private pb::ByteString icmpv6OptTargetLinkaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Link-layer address ('icmpv6_opt_icmpv6_opt_target_linkaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptTargetLinkaddr {
      get { return icmpv6OptTargetLinkaddr_; }
      set {
        icmpv6OptTargetLinkaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptLinkaddrEui64" field.</summary>
    public const int Icmpv6OptLinkaddrEui64FieldNumber = 41;
    private pb::ByteString icmpv6OptLinkaddrEui64_ = pb::ByteString.Empty;
    /// <summary>
    /// Link-layer address ('icmpv6_opt_icmpv6_opt_linkaddr_eui64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptLinkaddrEui64 {
      get { return icmpv6OptLinkaddrEui64_; }
      set {
        icmpv6OptLinkaddrEui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptSrcLinkaddrEui64" field.</summary>
    public const int Icmpv6OptSrcLinkaddrEui64FieldNumber = 42;
    private pb::ByteString icmpv6OptSrcLinkaddrEui64_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Link-layer address ('icmpv6_opt_icmpv6_opt_src_linkaddr_eui64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptSrcLinkaddrEui64 {
      get { return icmpv6OptSrcLinkaddrEui64_; }
      set {
        icmpv6OptSrcLinkaddrEui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptTargetLinkaddrEui64" field.</summary>
    public const int Icmpv6OptTargetLinkaddrEui64FieldNumber = 43;
    private pb::ByteString icmpv6OptTargetLinkaddrEui64_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Link-layer address ('icmpv6_opt_icmpv6_opt_target_linkaddr_eui64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptTargetLinkaddrEui64 {
      get { return icmpv6OptTargetLinkaddrEui64_; }
      set {
        icmpv6OptTargetLinkaddrEui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixLength" field.</summary>
    public const int Icmpv6OptPrefixLengthFieldNumber = 44;
    private uint icmpv6OptPrefixLength_;
    /// <summary>
    /// Prefix Length ('icmpv6_opt_prefix_icmpv6_opt_prefix_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptPrefixLength {
      get { return icmpv6OptPrefixLength_; }
      set {
        icmpv6OptPrefixLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixFlag" field.</summary>
    public const int Icmpv6OptPrefixFlagFieldNumber = 45;
    private uint icmpv6OptPrefixFlag_;
    /// <summary>
    /// Flag ('icmpv6_opt_prefix_icmpv6_opt_prefix_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptPrefixFlag {
      get { return icmpv6OptPrefixFlag_; }
      set {
        icmpv6OptPrefixFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixFlagL" field.</summary>
    public const int Icmpv6OptPrefixFlagLFieldNumber = 46;
    private bool icmpv6OptPrefixFlagL_;
    /// <summary>
    /// On-link flag(L) ('icmpv6_opt_prefix_flag_icmpv6_opt_prefix_flag_l')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptPrefixFlagL {
      get { return icmpv6OptPrefixFlagL_; }
      set {
        icmpv6OptPrefixFlagL_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixFlagA" field.</summary>
    public const int Icmpv6OptPrefixFlagAFieldNumber = 47;
    private bool icmpv6OptPrefixFlagA_;
    /// <summary>
    /// Autonomous address-configuration flag(A) ('icmpv6_opt_prefix_flag_icmpv6_opt_prefix_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptPrefixFlagA {
      get { return icmpv6OptPrefixFlagA_; }
      set {
        icmpv6OptPrefixFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixFlagR" field.</summary>
    public const int Icmpv6OptPrefixFlagRFieldNumber = 48;
    private bool icmpv6OptPrefixFlagR_;
    /// <summary>
    /// Router address flag(R) ('icmpv6_opt_prefix_flag_icmpv6_opt_prefix_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptPrefixFlagR {
      get { return icmpv6OptPrefixFlagR_; }
      set {
        icmpv6OptPrefixFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixFlagReserved" field.</summary>
    public const int Icmpv6OptPrefixFlagReservedFieldNumber = 49;
    private uint icmpv6OptPrefixFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_opt_prefix_flag_icmpv6_opt_prefix_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptPrefixFlagReserved {
      get { return icmpv6OptPrefixFlagReserved_; }
      set {
        icmpv6OptPrefixFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixValidLifetime" field.</summary>
    public const int Icmpv6OptPrefixValidLifetimeFieldNumber = 50;
    private uint icmpv6OptPrefixValidLifetime_;
    /// <summary>
    /// Valid Lifetime ('icmpv6_opt_prefix_icmpv6_opt_prefix_valid_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptPrefixValidLifetime {
      get { return icmpv6OptPrefixValidLifetime_; }
      set {
        icmpv6OptPrefixValidLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefixPreferredLifetime" field.</summary>
    public const int Icmpv6OptPrefixPreferredLifetimeFieldNumber = 51;
    private uint icmpv6OptPrefixPreferredLifetime_;
    /// <summary>
    /// Preferred Lifetime ('icmpv6_opt_prefix_icmpv6_opt_prefix_preferred_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptPrefixPreferredLifetime {
      get { return icmpv6OptPrefixPreferredLifetime_; }
      set {
        icmpv6OptPrefixPreferredLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPrefix" field.</summary>
    public const int Icmpv6OptPrefixFieldNumber = 52;
    private pb::ByteString icmpv6OptPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Prefix ('icmpv6_opt_icmpv6_opt_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptPrefix {
      get { return icmpv6OptPrefix_; }
      set {
        icmpv6OptPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaPadLength" field.</summary>
    public const int Icmpv6OptCgaPadLengthFieldNumber = 53;
    private uint icmpv6OptCgaPadLength_;
    /// <summary>
    /// Pad Length ('icmpv6_opt_cga_icmpv6_opt_cga_pad_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptCgaPadLength {
      get { return icmpv6OptCgaPadLength_; }
      set {
        icmpv6OptCgaPadLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptCga" field.</summary>
    public const int Icmpv6OptCgaFieldNumber = 54;
    private pb::ByteString icmpv6OptCga_ = pb::ByteString.Empty;
    /// <summary>
    /// CGA ('icmpv6_opt_icmpv6_opt_cga')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptCga {
      get { return icmpv6OptCga_; }
      set {
        icmpv6OptCga_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaModifier" field.</summary>
    public const int Icmpv6OptCgaModifierFieldNumber = 55;
    private pb::ByteString icmpv6OptCgaModifier_ = pb::ByteString.Empty;
    /// <summary>
    /// Modifier ('icmpv6_opt_cga_icmpv6_opt_cga_modifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptCgaModifier {
      get { return icmpv6OptCgaModifier_; }
      set {
        icmpv6OptCgaModifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaSubnetPrefix" field.</summary>
    public const int Icmpv6OptCgaSubnetPrefixFieldNumber = 56;
    private pb::ByteString icmpv6OptCgaSubnetPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Subnet Prefix ('icmpv6_opt_cga_icmpv6_opt_cga_subnet_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptCgaSubnetPrefix {
      get { return icmpv6OptCgaSubnetPrefix_; }
      set {
        icmpv6OptCgaSubnetPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaCount" field.</summary>
    public const int Icmpv6OptCgaCountFieldNumber = 57;
    private pb::ByteString icmpv6OptCgaCount_ = pb::ByteString.Empty;
    /// <summary>
    /// Count ('icmpv6_opt_cga_icmpv6_opt_cga_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptCgaCount {
      get { return icmpv6OptCgaCount_; }
      set {
        icmpv6OptCgaCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaExtType" field.</summary>
    public const int Icmpv6OptCgaExtTypeFieldNumber = 58;
    private uint icmpv6OptCgaExtType_;
    /// <summary>
    /// Ext Type ('icmpv6_opt_cga_icmpv6_opt_cga_ext_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptCgaExtType {
      get { return icmpv6OptCgaExtType_; }
      set {
        icmpv6OptCgaExtType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaExtLength" field.</summary>
    public const int Icmpv6OptCgaExtLengthFieldNumber = 59;
    private uint icmpv6OptCgaExtLength_;
    /// <summary>
    /// Ext Length ('icmpv6_opt_cga_icmpv6_opt_cga_ext_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptCgaExtLength {
      get { return icmpv6OptCgaExtLength_; }
      set {
        icmpv6OptCgaExtLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptCgaExtData" field.</summary>
    public const int Icmpv6OptCgaExtDataFieldNumber = 60;
    private pb::ByteString icmpv6OptCgaExtData_ = pb::ByteString.Empty;
    /// <summary>
    /// Ext Data ('icmpv6_opt_cga_icmpv6_opt_cga_ext_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptCgaExtData {
      get { return icmpv6OptCgaExtData_; }
      set {
        icmpv6OptCgaExtData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptRsaKeyHash" field.</summary>
    public const int Icmpv6OptRsaKeyHashFieldNumber = 61;
    private pb::ByteString icmpv6OptRsaKeyHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Key Hash ('icmpv6_icmpv6_opt_rsa_key_hash')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptRsaKeyHash {
      get { return icmpv6OptRsaKeyHash_; }
      set {
        icmpv6OptRsaKeyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptDigitalSignaturePadding" field.</summary>
    public const int Icmpv6OptDigitalSignaturePaddingFieldNumber = 62;
    private int icmpv6OptDigitalSignaturePadding_;
    /// <summary>
    /// Digital Signature and Padding ('icmpv6_opt_icmpv6_opt_digital_signature_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6OptDigitalSignaturePadding {
      get { return icmpv6OptDigitalSignaturePadding_; }
      set {
        icmpv6OptDigitalSignaturePadding_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptPsKeyHash" field.</summary>
    public const int Icmpv6OptPsKeyHashFieldNumber = 63;
    private pb::ByteString icmpv6OptPsKeyHash_ = pb::ByteString.Empty;
    /// <summary>
    /// Key Hash ('icmpv6_icmpv6_opt_ps_key_hash')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptPsKeyHash {
      get { return icmpv6OptPsKeyHash_; }
      set {
        icmpv6OptPsKeyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptTimestamp" field.</summary>
    public const int Icmpv6OptTimestampFieldNumber = 64;
    private long icmpv6OptTimestamp_;
    /// <summary>
    /// Timestamp ('icmpv6_opt_icmpv6_opt_timestamp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Icmpv6OptTimestamp {
      get { return icmpv6OptTimestamp_; }
      set {
        icmpv6OptTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNonce" field.</summary>
    public const int Icmpv6OptNonceFieldNumber = 65;
    private pb::ByteString icmpv6OptNonce_ = pb::ByteString.Empty;
    /// <summary>
    /// Nonce ('icmpv6_opt_icmpv6_opt_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptNonce {
      get { return icmpv6OptNonce_; }
      set {
        icmpv6OptNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptCertificatePadding" field.</summary>
    public const int Icmpv6OptCertificatePaddingFieldNumber = 66;
    private int icmpv6OptCertificatePadding_;
    /// <summary>
    /// Certificate and Padding ('icmpv6_opt_icmpv6_opt_certificate_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6OptCertificatePadding {
      get { return icmpv6OptCertificatePadding_; }
      set {
        icmpv6OptCertificatePadding_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptIpaOptionCode" field.</summary>
    public const int Icmpv6OptIpaOptionCodeFieldNumber = 67;
    private uint icmpv6OptIpaOptionCode_;
    /// <summary>
    /// Option-code ('icmpv6_icmpv6_opt_ipa_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptIpaOptionCode {
      get { return icmpv6OptIpaOptionCode_; }
      set {
        icmpv6OptIpaOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptIpaPrefixLen" field.</summary>
    public const int Icmpv6OptIpaPrefixLenFieldNumber = 68;
    private uint icmpv6OptIpaPrefixLen_;
    /// <summary>
    /// Prefix Length ('icmpv6_icmpv6_opt_ipa_prefix_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptIpaPrefixLen {
      get { return icmpv6OptIpaPrefixLen_; }
      set {
        icmpv6OptIpaPrefixLen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptIpaIpv6Address" field.</summary>
    public const int Icmpv6OptIpaIpv6AddressFieldNumber = 69;
    private pb::ByteString icmpv6OptIpaIpv6Address_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv6 Address ('icmpv6_icmpv6_opt_ipa_ipv6_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptIpaIpv6Address {
      get { return icmpv6OptIpaIpv6Address_; }
      set {
        icmpv6OptIpaIpv6Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptNrpiOptionCode" field.</summary>
    public const int Icmpv6OptNrpiOptionCodeFieldNumber = 70;
    private uint icmpv6OptNrpiOptionCode_;
    /// <summary>
    /// Option-code ('icmpv6_icmpv6_opt_nrpi_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNrpiOptionCode {
      get { return icmpv6OptNrpiOptionCode_; }
      set {
        icmpv6OptNrpiOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNrpiPrefixLen" field.</summary>
    public const int Icmpv6OptNrpiPrefixLenFieldNumber = 71;
    private uint icmpv6OptNrpiPrefixLen_;
    /// <summary>
    /// Prefix Length ('icmpv6_icmpv6_opt_nrpi_prefix_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNrpiPrefixLen {
      get { return icmpv6OptNrpiPrefixLen_; }
      set {
        icmpv6OptNrpiPrefixLen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNrpiPrefix" field.</summary>
    public const int Icmpv6OptNrpiPrefixFieldNumber = 72;
    private pb::ByteString icmpv6OptNrpiPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Prefix ('icmpv6_icmpv6_opt_nrpi_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptNrpiPrefix {
      get { return icmpv6OptNrpiPrefix_; }
      set {
        icmpv6OptNrpiPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptLlaOptionCode" field.</summary>
    public const int Icmpv6OptLlaOptionCodeFieldNumber = 73;
    private uint icmpv6OptLlaOptionCode_;
    /// <summary>
    /// Option-code ('icmpv6_icmpv6_opt_lla_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptLlaOptionCode {
      get { return icmpv6OptLlaOptionCode_; }
      set {
        icmpv6OptLlaOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptLlaBytes" field.</summary>
    public const int Icmpv6OptLlaBytesFieldNumber = 74;
    private pb::ByteString icmpv6OptLlaBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// Link-Layer Address ('icmpv6_icmpv6_opt_lla_bytes')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptLlaBytes {
      get { return icmpv6OptLlaBytes_; }
      set {
        icmpv6OptLlaBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptNaackOptionCode" field.</summary>
    public const int Icmpv6OptNaackOptionCodeFieldNumber = 75;
    private uint icmpv6OptNaackOptionCode_;
    /// <summary>
    /// Option-Code ('icmpv6_icmpv6_opt_naack_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNaackOptionCode {
      get { return icmpv6OptNaackOptionCode_; }
      set {
        icmpv6OptNaackOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNaackStatus" field.</summary>
    public const int Icmpv6OptNaackStatusFieldNumber = 76;
    private uint icmpv6OptNaackStatus_;
    /// <summary>
    /// Status ('icmpv6_icmpv6_opt_naack_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNaackStatus {
      get { return icmpv6OptNaackStatus_; }
      set {
        icmpv6OptNaackStatus_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNaackSuppliedNcoa" field.</summary>
    public const int Icmpv6OptNaackSuppliedNcoaFieldNumber = 77;
    private pb::ByteString icmpv6OptNaackSuppliedNcoa_ = pb::ByteString.Empty;
    /// <summary>
    /// Supplied NCoA ('icmpv6_icmpv6_opt_naack_supplied_ncoa')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptNaackSuppliedNcoa {
      get { return icmpv6OptNaackSuppliedNcoa_; }
      set {
        icmpv6OptNaackSuppliedNcoa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapDistance" field.</summary>
    public const int Icmpv6OptMapDistanceFieldNumber = 78;
    private uint icmpv6OptMapDistance_;
    /// <summary>
    /// Distance ('icmpv6_icmpv6_opt_map_distance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMapDistance {
      get { return icmpv6OptMapDistance_; }
      set {
        icmpv6OptMapDistance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapPreference" field.</summary>
    public const int Icmpv6OptMapPreferenceFieldNumber = 79;
    private uint icmpv6OptMapPreference_;
    /// <summary>
    /// Preference ('icmpv6_icmpv6_opt_map_preference')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMapPreference {
      get { return icmpv6OptMapPreference_; }
      set {
        icmpv6OptMapPreference_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapFlag" field.</summary>
    public const int Icmpv6OptMapFlagFieldNumber = 80;
    private uint icmpv6OptMapFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_opt_map_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMapFlag {
      get { return icmpv6OptMapFlag_; }
      set {
        icmpv6OptMapFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapFlagR" field.</summary>
    public const int Icmpv6OptMapFlagRFieldNumber = 81;
    private bool icmpv6OptMapFlagR_;
    /// <summary>
    /// RCoA Flag ('icmpv6_opt_map_flag_icmpv6_opt_map_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptMapFlagR {
      get { return icmpv6OptMapFlagR_; }
      set {
        icmpv6OptMapFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapFlagReserved" field.</summary>
    public const int Icmpv6OptMapFlagReservedFieldNumber = 82;
    private uint icmpv6OptMapFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_opt_map_flag_icmpv6_opt_map_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMapFlagReserved {
      get { return icmpv6OptMapFlagReserved_; }
      set {
        icmpv6OptMapFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapValidLifetime" field.</summary>
    public const int Icmpv6OptMapValidLifetimeFieldNumber = 83;
    private uint icmpv6OptMapValidLifetime_;
    /// <summary>
    /// Valid Lifetime ('icmpv6_icmpv6_opt_map_valid_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMapValidLifetime {
      get { return icmpv6OptMapValidLifetime_; }
      set {
        icmpv6OptMapValidLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMapGlobalAddress" field.</summary>
    public const int Icmpv6OptMapGlobalAddressFieldNumber = 84;
    private pb::ByteString icmpv6OptMapGlobalAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Global Address ('icmpv6_icmpv6_opt_map_global_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptMapGlobalAddress {
      get { return icmpv6OptMapGlobalAddress_; }
      set {
        icmpv6OptMapGlobalAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptRouteInfoFlag" field.</summary>
    public const int Icmpv6OptRouteInfoFlagFieldNumber = 85;
    private uint icmpv6OptRouteInfoFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_opt_route_info_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptRouteInfoFlag {
      get { return icmpv6OptRouteInfoFlag_; }
      set {
        icmpv6OptRouteInfoFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptRouteInfoFlagRoutePreference" field.</summary>
    public const int Icmpv6OptRouteInfoFlagRoutePreferenceFieldNumber = 86;
    private uint icmpv6OptRouteInfoFlagRoutePreference_;
    /// <summary>
    /// Route Preference ('icmpv6_opt_route_info_flag_icmpv6_opt_route_info_flag_route_preference')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptRouteInfoFlagRoutePreference {
      get { return icmpv6OptRouteInfoFlagRoutePreference_; }
      set {
        icmpv6OptRouteInfoFlagRoutePreference_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptRouteInfoFlagReserved" field.</summary>
    public const int Icmpv6OptRouteInfoFlagReservedFieldNumber = 87;
    private uint icmpv6OptRouteInfoFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_opt_route_info_flag_icmpv6_opt_route_info_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptRouteInfoFlagReserved {
      get { return icmpv6OptRouteInfoFlagReserved_; }
      set {
        icmpv6OptRouteInfoFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptRouteLifetime" field.</summary>
    public const int Icmpv6OptRouteLifetimeFieldNumber = 88;
    private uint icmpv6OptRouteLifetime_;
    /// <summary>
    /// Route Lifetime ('icmpv6_opt_icmpv6_opt_route_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptRouteLifetime {
      get { return icmpv6OptRouteLifetime_; }
      set {
        icmpv6OptRouteLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNameType" field.</summary>
    public const int Icmpv6OptNameTypeFieldNumber = 89;
    private uint icmpv6OptNameType_;
    /// <summary>
    /// Name Type ('icmpv6_opt_icmpv6_opt_name_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNameType {
      get { return icmpv6OptNameType_; }
      set {
        icmpv6OptNameType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNameX501" field.</summary>
    public const int Icmpv6OptNameX501FieldNumber = 90;
    private pb::ByteString icmpv6OptNameX501_ = pb::ByteString.Empty;
    /// <summary>
    /// DER Encoded X.501 Name ('icmpv6_opt_icmpv6_opt_name_x501')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptNameX501 {
      get { return icmpv6OptNameX501_; }
      set {
        icmpv6OptNameX501_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptNameTypeFqdn" field.</summary>
    public const int Icmpv6OptNameTypeFqdnFieldNumber = 91;
    private string icmpv6OptNameTypeFqdn_ = "";
    /// <summary>
    /// FQDN ('icmpv6_opt_name_type_icmpv6_opt_name_type_fqdn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6OptNameTypeFqdn {
      get { return icmpv6OptNameTypeFqdn_; }
      set {
        icmpv6OptNameTypeFqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6SendIdentifier" field.</summary>
    public const int Icmpv6SendIdentifierFieldNumber = 92;
    private uint icmpv6SendIdentifier_;
    /// <summary>
    /// Identifier ('icmpv6_icmpv6_send_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6SendIdentifier {
      get { return icmpv6SendIdentifier_; }
      set {
        icmpv6SendIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6SendAllComponents" field.</summary>
    public const int Icmpv6SendAllComponentsFieldNumber = 93;
    private uint icmpv6SendAllComponents_;
    /// <summary>
    /// All Components ('icmpv6_icmpv6_send_all_components')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6SendAllComponents {
      get { return icmpv6SendAllComponents_; }
      set {
        icmpv6SendAllComponents_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6SendComponent" field.</summary>
    public const int Icmpv6SendComponentFieldNumber = 94;
    private uint icmpv6SendComponent_;
    /// <summary>
    /// Component ('icmpv6_icmpv6_send_component')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6SendComponent {
      get { return icmpv6SendComponent_; }
      set {
        icmpv6SendComponent_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6X509Name" field.</summary>
    public const int Icmpv6X509NameFieldNumber = 95;
    private uint icmpv6X509Name_;
    /// <summary>
    /// Name ('icmpv6_icmpv6_x509_Name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6X509Name {
      get { return icmpv6X509Name_; }
      set {
        icmpv6X509Name_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6X509Certificate" field.</summary>
    public const int Icmpv6X509CertificateFieldNumber = 96;
    private int icmpv6X509Certificate_;
    /// <summary>
    /// Certificate ('icmpv6_icmpv6_x509_Certificate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6X509Certificate {
      get { return icmpv6X509Certificate_; }
      set {
        icmpv6X509Certificate_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptRedirectedPacket" field.</summary>
    public const int Icmpv6OptRedirectedPacketFieldNumber = 97;
    private int icmpv6OptRedirectedPacket_;
    /// <summary>
    /// Redirected Packet ('icmpv6_opt_icmpv6_opt_redirected_packet')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6OptRedirectedPacket {
      get { return icmpv6OptRedirectedPacket_; }
      set {
        icmpv6OptRedirectedPacket_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMtu" field.</summary>
    public const int Icmpv6OptMtuFieldNumber = 98;
    private uint icmpv6OptMtu_;
    /// <summary>
    /// MTU ('icmpv6_opt_icmpv6_opt_mtu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMtu {
      get { return icmpv6OptMtu_; }
      set {
        icmpv6OptMtu_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptNbmaShortcutLimit" field.</summary>
    public const int Icmpv6OptNbmaShortcutLimitFieldNumber = 99;
    private uint icmpv6OptNbmaShortcutLimit_;
    /// <summary>
    /// Shortcut Limit ('icmpv6_icmpv6_opt_nbma_shortcut_limit')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptNbmaShortcutLimit {
      get { return icmpv6OptNbmaShortcutLimit_; }
      set {
        icmpv6OptNbmaShortcutLimit_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAdvertisementInterval" field.</summary>
    public const int Icmpv6OptAdvertisementIntervalFieldNumber = 100;
    private uint icmpv6OptAdvertisementInterval_;
    /// <summary>
    /// Advertisement Interval ('icmpv6_opt_icmpv6_opt_advertisement_interval')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAdvertisementInterval {
      get { return icmpv6OptAdvertisementInterval_; }
      set {
        icmpv6OptAdvertisementInterval_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHomeAgentPreference" field.</summary>
    public const int Icmpv6OptHomeAgentPreferenceFieldNumber = 101;
    private uint icmpv6OptHomeAgentPreference_;
    /// <summary>
    /// Home Agent Preference ('icmpv6_opt_icmpv6_opt_home_agent_preference')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHomeAgentPreference {
      get { return icmpv6OptHomeAgentPreference_; }
      set {
        icmpv6OptHomeAgentPreference_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHomeAgentLifetime" field.</summary>
    public const int Icmpv6OptHomeAgentLifetimeFieldNumber = 102;
    private uint icmpv6OptHomeAgentLifetime_;
    /// <summary>
    /// Home Agent Preference ('icmpv6_opt_icmpv6_opt_home_agent_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHomeAgentLifetime {
      get { return icmpv6OptHomeAgentLifetime_; }
      set {
        icmpv6OptHomeAgentLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptIpv6Address" field.</summary>
    public const int Icmpv6OptIpv6AddressFieldNumber = 103;
    private pb::ByteString icmpv6OptIpv6Address_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv6 Address ('icmpv6_opt_icmpv6_opt_ipv6_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptIpv6Address {
      get { return icmpv6OptIpv6Address_; }
      set {
        icmpv6OptIpv6Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptRdnssLifetime" field.</summary>
    public const int Icmpv6OptRdnssLifetimeFieldNumber = 104;
    private uint icmpv6OptRdnssLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_opt_rdnss_icmpv6_opt_rdnss_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptRdnssLifetime {
      get { return icmpv6OptRdnssLifetime_; }
      set {
        icmpv6OptRdnssLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptRdnss" field.</summary>
    public const int Icmpv6OptRdnssFieldNumber = 105;
    private pb::ByteString icmpv6OptRdnss_ = pb::ByteString.Empty;
    /// <summary>
    /// Recursive DNS Servers ('icmpv6_opt_icmpv6_opt_rdnss')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptRdnss {
      get { return icmpv6OptRdnss_; }
      set {
        icmpv6OptRdnss_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfo" field.</summary>
    public const int Icmpv6OptEfoFieldNumber = 106;
    private uint icmpv6OptEfo_;
    /// <summary>
    /// Flags Expansion Option ('icmpv6_opt_icmpv6_opt_efo')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptEfo {
      get { return icmpv6OptEfo_; }
      set {
        icmpv6OptEfo_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoM" field.</summary>
    public const int Icmpv6OptEfoMFieldNumber = 107;
    private bool icmpv6OptEfoM_;
    /// <summary>
    /// Managed address configuration ('icmpv6_opt_efo_icmpv6_opt_efo_m')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptEfoM {
      get { return icmpv6OptEfoM_; }
      set {
        icmpv6OptEfoM_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoO" field.</summary>
    public const int Icmpv6OptEfoOFieldNumber = 108;
    private bool icmpv6OptEfoO_;
    /// <summary>
    /// Other configuration ('icmpv6_opt_efo_icmpv6_opt_efo_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptEfoO {
      get { return icmpv6OptEfoO_; }
      set {
        icmpv6OptEfoO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoH" field.</summary>
    public const int Icmpv6OptEfoHFieldNumber = 109;
    private bool icmpv6OptEfoH_;
    /// <summary>
    /// Home Agent ('icmpv6_opt_efo_icmpv6_opt_efo_h')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptEfoH {
      get { return icmpv6OptEfoH_; }
      set {
        icmpv6OptEfoH_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoPrf" field.</summary>
    public const int Icmpv6OptEfoPrfFieldNumber = 110;
    private uint icmpv6OptEfoPrf_;
    /// <summary>
    /// Prf (Default Router Preference) ('icmpv6_opt_efo_icmpv6_opt_efo_prf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptEfoPrf {
      get { return icmpv6OptEfoPrf_; }
      set {
        icmpv6OptEfoPrf_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoP" field.</summary>
    public const int Icmpv6OptEfoPFieldNumber = 111;
    private bool icmpv6OptEfoP_;
    /// <summary>
    /// Proxy ('icmpv6_opt_efo_icmpv6_opt_efo_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6OptEfoP {
      get { return icmpv6OptEfoP_; }
      set {
        icmpv6OptEfoP_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptEfoRsv" field.</summary>
    public const int Icmpv6OptEfoRsvFieldNumber = 112;
    private uint icmpv6OptEfoRsv_;
    /// <summary>
    /// Reserved ('icmpv6_opt_efo_icmpv6_opt_efo_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptEfoRsv {
      get { return icmpv6OptEfoRsv_; }
      set {
        icmpv6OptEfoRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrPadLength" field.</summary>
    public const int Icmpv6OptHkrPadLengthFieldNumber = 113;
    private uint icmpv6OptHkrPadLength_;
    /// <summary>
    /// Pad Length ('icmpv6_icmpv6_opt_hkr_pad_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHkrPadLength {
      get { return icmpv6OptHkrPadLength_; }
      set {
        icmpv6OptHkrPadLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrAt" field.</summary>
    public const int Icmpv6OptHkrAtFieldNumber = 114;
    private uint icmpv6OptHkrAt_;
    /// <summary>
    /// AT ('icmpv6_icmpv6_opt_hkr_at')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHkrAt {
      get { return icmpv6OptHkrAt_; }
      set {
        icmpv6OptHkrAt_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrReserved" field.</summary>
    public const int Icmpv6OptHkrReservedFieldNumber = 115;
    private uint icmpv6OptHkrReserved_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_opt_hkr_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHkrReserved {
      get { return icmpv6OptHkrReserved_; }
      set {
        icmpv6OptHkrReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrEncryptionPublicKey" field.</summary>
    public const int Icmpv6OptHkrEncryptionPublicKeyFieldNumber = 116;
    private pb::ByteString icmpv6OptHkrEncryptionPublicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Handover Key Encryption Public Key ('icmpv6_icmpv6_opt_hkr_encryption_public_key')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptHkrEncryptionPublicKey {
      get { return icmpv6OptHkrEncryptionPublicKey_; }
      set {
        icmpv6OptHkrEncryptionPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrPadding" field.</summary>
    public const int Icmpv6OptHkrPaddingFieldNumber = 117;
    private pb::ByteString icmpv6OptHkrPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('icmpv6_icmpv6_opt_hkr_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptHkrPadding {
      get { return icmpv6OptHkrPadding_; }
      set {
        icmpv6OptHkrPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrLifetime" field.</summary>
    public const int Icmpv6OptHkrLifetimeFieldNumber = 118;
    private uint icmpv6OptHkrLifetime_;
    /// <summary>
    /// Padding ('icmpv6_icmpv6_opt_hkr_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHkrLifetime {
      get { return icmpv6OptHkrLifetime_; }
      set {
        icmpv6OptHkrLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHkrEncryptedHandoverKey" field.</summary>
    public const int Icmpv6OptHkrEncryptedHandoverKeyFieldNumber = 119;
    private pb::ByteString icmpv6OptHkrEncryptedHandoverKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Encrypted Handover Key ('icmpv6_icmpv6_opt_hkr_encrypted_handover_key')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptHkrEncryptedHandoverKey {
      get { return icmpv6OptHkrEncryptedHandoverKey_; }
      set {
        icmpv6OptHkrEncryptedHandoverKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptHaiOptionCode" field.</summary>
    public const int Icmpv6OptHaiOptionCodeFieldNumber = 120;
    private uint icmpv6OptHaiOptionCode_;
    /// <summary>
    /// Option-Code ('icmpv6_icmpv6_opt_hai_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHaiOptionCode {
      get { return icmpv6OptHaiOptionCode_; }
      set {
        icmpv6OptHaiOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHaiLength" field.</summary>
    public const int Icmpv6OptHaiLengthFieldNumber = 121;
    private uint icmpv6OptHaiLength_;
    /// <summary>
    /// HAI-Length ('icmpv6_icmpv6_opt_hai_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptHaiLength {
      get { return icmpv6OptHaiLength_; }
      set {
        icmpv6OptHaiLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptHaiValue" field.</summary>
    public const int Icmpv6OptHaiValueFieldNumber = 122;
    private pb::ByteString icmpv6OptHaiValue_ = pb::ByteString.Empty;
    /// <summary>
    /// HAI-Value ('icmpv6_icmpv6_opt_hai_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptHaiValue {
      get { return icmpv6OptHaiValue_; }
      set {
        icmpv6OptHaiValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptMnOptionCode" field.</summary>
    public const int Icmpv6OptMnOptionCodeFieldNumber = 123;
    private uint icmpv6OptMnOptionCode_;
    /// <summary>
    /// Option-Code ('icmpv6_icmpv6_opt_mn_option_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMnOptionCode {
      get { return icmpv6OptMnOptionCode_; }
      set {
        icmpv6OptMnOptionCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMnLength" field.</summary>
    public const int Icmpv6OptMnLengthFieldNumber = 124;
    private uint icmpv6OptMnLength_;
    /// <summary>
    /// MN-Length ('icmpv6_icmpv6_opt_mn_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptMnLength {
      get { return icmpv6OptMnLength_; }
      set {
        icmpv6OptMnLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptMnValue" field.</summary>
    public const int Icmpv6OptMnValueFieldNumber = 125;
    private pb::ByteString icmpv6OptMnValue_ = pb::ByteString.Empty;
    /// <summary>
    /// MN-Value ('icmpv6_icmpv6_opt_mn_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptMnValue {
      get { return icmpv6OptMnValue_; }
      set {
        icmpv6OptMnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptDnsslLifetime" field.</summary>
    public const int Icmpv6OptDnsslLifetimeFieldNumber = 126;
    private uint icmpv6OptDnsslLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_opt_dnssl_icmpv6_opt_dnssl_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptDnsslLifetime {
      get { return icmpv6OptDnsslLifetime_; }
      set {
        icmpv6OptDnsslLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptDnssl" field.</summary>
    public const int Icmpv6OptDnsslFieldNumber = 127;
    private string icmpv6OptDnssl_ = "";
    /// <summary>
    /// Domain Names ('icmpv6_opt_icmpv6_opt_dnssl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6OptDnssl {
      get { return icmpv6OptDnssl_; }
      set {
        icmpv6OptDnssl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptAroStatus" field.</summary>
    public const int Icmpv6OptAroStatusFieldNumber = 128;
    private uint icmpv6OptAroStatus_;
    /// <summary>
    /// Status ('icmpv6_icmpv6_opt_aro_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAroStatus {
      get { return icmpv6OptAroStatus_; }
      set {
        icmpv6OptAroStatus_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAroRegistrationLifetime" field.</summary>
    public const int Icmpv6OptAroRegistrationLifetimeFieldNumber = 129;
    private uint icmpv6OptAroRegistrationLifetime_;
    /// <summary>
    /// Registration  Lifetime ('icmpv6_icmpv6_opt_aro_registration_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAroRegistrationLifetime {
      get { return icmpv6OptAroRegistrationLifetime_; }
      set {
        icmpv6OptAroRegistrationLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAroEui64" field.</summary>
    public const int Icmpv6OptAroEui64FieldNumber = 130;
    private pb::ByteString icmpv6OptAroEui64_ = pb::ByteString.Empty;
    /// <summary>
    /// EUI-64 ('icmpv6_icmpv6_opt_aro_eui64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptAroEui64 {
      get { return icmpv6OptAroEui64_; }
      set {
        icmpv6OptAroEui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoContextLength" field.</summary>
    public const int Icmpv6Opt6CoContextLengthFieldNumber = 131;
    private uint icmpv6Opt6CoContextLength_;
    /// <summary>
    /// Context Length ('icmpv6_icmpv6_opt_6co_context_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CoContextLength {
      get { return icmpv6Opt6CoContextLength_; }
      set {
        icmpv6Opt6CoContextLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoFlag" field.</summary>
    public const int Icmpv6Opt6CoFlagFieldNumber = 132;
    private uint icmpv6Opt6CoFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_opt_6co_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CoFlag {
      get { return icmpv6Opt6CoFlag_; }
      set {
        icmpv6Opt6CoFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoFlagC" field.</summary>
    public const int Icmpv6Opt6CoFlagCFieldNumber = 133;
    private bool icmpv6Opt6CoFlagC_;
    /// <summary>
    /// Compression Flag ('icmpv6_opt_6co_flag_icmpv6_opt_6co_flag_c')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6Opt6CoFlagC {
      get { return icmpv6Opt6CoFlagC_; }
      set {
        icmpv6Opt6CoFlagC_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoFlagCid" field.</summary>
    public const int Icmpv6Opt6CoFlagCidFieldNumber = 134;
    private uint icmpv6Opt6CoFlagCid_;
    /// <summary>
    /// CID ('icmpv6_opt_6co_flag_icmpv6_opt_6co_flag_cid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CoFlagCid {
      get { return icmpv6Opt6CoFlagCid_; }
      set {
        icmpv6Opt6CoFlagCid_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoFlagReserved" field.</summary>
    public const int Icmpv6Opt6CoFlagReservedFieldNumber = 135;
    private uint icmpv6Opt6CoFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_opt_6co_flag_icmpv6_opt_6co_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CoFlagReserved {
      get { return icmpv6Opt6CoFlagReserved_; }
      set {
        icmpv6Opt6CoFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoValidLifetime" field.</summary>
    public const int Icmpv6Opt6CoValidLifetimeFieldNumber = 136;
    private uint icmpv6Opt6CoValidLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_icmpv6_opt_6co_valid_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CoValidLifetime {
      get { return icmpv6Opt6CoValidLifetime_; }
      set {
        icmpv6Opt6CoValidLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CoContextPrefix" field.</summary>
    public const int Icmpv6Opt6CoContextPrefixFieldNumber = 137;
    private pb::ByteString icmpv6Opt6CoContextPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Context Prefix ('icmpv6_icmpv6_opt_6co_context_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6Opt6CoContextPrefix {
      get { return icmpv6Opt6CoContextPrefix_; }
      set {
        icmpv6Opt6CoContextPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6OptAbroVersionLow" field.</summary>
    public const int Icmpv6OptAbroVersionLowFieldNumber = 138;
    private uint icmpv6OptAbroVersionLow_;
    /// <summary>
    /// Version Low ('icmpv6_icmpv6_opt_abro_version_low')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAbroVersionLow {
      get { return icmpv6OptAbroVersionLow_; }
      set {
        icmpv6OptAbroVersionLow_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAbroVersionHigh" field.</summary>
    public const int Icmpv6OptAbroVersionHighFieldNumber = 139;
    private uint icmpv6OptAbroVersionHigh_;
    /// <summary>
    /// Version ('icmpv6_icmpv6_opt_abro_version_high')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAbroVersionHigh {
      get { return icmpv6OptAbroVersionHigh_; }
      set {
        icmpv6OptAbroVersionHigh_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAbroValidLifetime" field.</summary>
    public const int Icmpv6OptAbroValidLifetimeFieldNumber = 140;
    private uint icmpv6OptAbroValidLifetime_;
    /// <summary>
    /// Valid Lifetime ('icmpv6_icmpv6_opt_abro_valid_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6OptAbroValidLifetime {
      get { return icmpv6OptAbroValidLifetime_; }
      set {
        icmpv6OptAbroValidLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptAbro6LbrAddress" field.</summary>
    public const int Icmpv6OptAbro6LbrAddressFieldNumber = 141;
    private pb::ByteString icmpv6OptAbro6LbrAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// 6LBR Address ('icmpv6_icmpv6_opt_abro_6lbr_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6OptAbro6LbrAddress {
      get { return icmpv6OptAbro6LbrAddress_; }
      set {
        icmpv6OptAbro6LbrAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CioUnassigned1" field.</summary>
    public const int Icmpv6Opt6CioUnassigned1FieldNumber = 142;
    private uint icmpv6Opt6CioUnassigned1_;
    /// <summary>
    /// Unassigned ('icmpv6_icmpv6_opt_6cio_unassigned1')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CioUnassigned1 {
      get { return icmpv6Opt6CioUnassigned1_; }
      set {
        icmpv6Opt6CioUnassigned1_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CioFlagG" field.</summary>
    public const int Icmpv6Opt6CioFlagGFieldNumber = 143;
    private uint icmpv6Opt6CioFlagG_;
    /// <summary>
    /// G ('icmpv6_icmpv6_opt_6cio_flag_g')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CioFlagG {
      get { return icmpv6Opt6CioFlagG_; }
      set {
        icmpv6Opt6CioFlagG_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Opt6CioUnassigned2" field.</summary>
    public const int Icmpv6Opt6CioUnassigned2FieldNumber = 144;
    private uint icmpv6Opt6CioUnassigned2_;
    /// <summary>
    /// Unassigned ('icmpv6_icmpv6_opt_6cio_unassigned2')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Opt6CioUnassigned2 {
      get { return icmpv6Opt6CioUnassigned2_; }
      set {
        icmpv6Opt6CioUnassigned2_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6OptCaptivePortal" field.</summary>
    public const int Icmpv6OptCaptivePortalFieldNumber = 145;
    private string icmpv6OptCaptivePortal_ = "";
    /// <summary>
    /// Captive Portal ('icmpv6_opt_icmpv6_opt_captive_portal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6OptCaptivePortal {
      get { return icmpv6OptCaptivePortal_; }
      set {
        icmpv6OptCaptivePortal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6MldMaximumResponseDelay" field.</summary>
    public const int Icmpv6MldMaximumResponseDelayFieldNumber = 146;
    private uint icmpv6MldMaximumResponseDelay_;
    /// <summary>
    /// Maximum Response Delay [ms] ('icmpv6_icmpv6_mld_maximum_response_delay')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldMaximumResponseDelay {
      get { return icmpv6MldMaximumResponseDelay_; }
      set {
        icmpv6MldMaximumResponseDelay_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldMulticastAddress" field.</summary>
    public const int Icmpv6MldMulticastAddressFieldNumber = 147;
    private pb::ByteString icmpv6MldMulticastAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Multicast Address ('icmpv6_icmpv6_mld_multicast_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6MldMulticastAddress {
      get { return icmpv6MldMulticastAddress_; }
      set {
        icmpv6MldMulticastAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RrSequenceNumber" field.</summary>
    public const int Icmpv6RrSequenceNumberFieldNumber = 148;
    private uint icmpv6RrSequenceNumber_;
    /// <summary>
    /// Sequence Number ('icmpv6_icmpv6_rr_sequence_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrSequenceNumber {
      get { return icmpv6RrSequenceNumber_; }
      set {
        icmpv6RrSequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrSegmentNumber" field.</summary>
    public const int Icmpv6RrSegmentNumberFieldNumber = 149;
    private uint icmpv6RrSegmentNumber_;
    /// <summary>
    /// Segment Number ('icmpv6_icmpv6_rr_segment_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrSegmentNumber {
      get { return icmpv6RrSegmentNumber_; }
      set {
        icmpv6RrSegmentNumber_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlag" field.</summary>
    public const int Icmpv6RrFlagFieldNumber = 150;
    private uint icmpv6RrFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rr_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrFlag {
      get { return icmpv6RrFlag_; }
      set {
        icmpv6RrFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagT" field.</summary>
    public const int Icmpv6RrFlagTFieldNumber = 151;
    private bool icmpv6RrFlagT_;
    /// <summary>
    /// Test Command ('icmpv6_rr_flag_icmpv6_rr_flag_t')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrFlagT {
      get { return icmpv6RrFlagT_; }
      set {
        icmpv6RrFlagT_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagR" field.</summary>
    public const int Icmpv6RrFlagRFieldNumber = 152;
    private bool icmpv6RrFlagR_;
    /// <summary>
    /// Result requested ('icmpv6_rr_flag_icmpv6_rr_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrFlagR {
      get { return icmpv6RrFlagR_; }
      set {
        icmpv6RrFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagA" field.</summary>
    public const int Icmpv6RrFlagAFieldNumber = 153;
    private bool icmpv6RrFlagA_;
    /// <summary>
    /// All Interfaces ('icmpv6_rr_flag_icmpv6_rr_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrFlagA {
      get { return icmpv6RrFlagA_; }
      set {
        icmpv6RrFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagS" field.</summary>
    public const int Icmpv6RrFlagSFieldNumber = 154;
    private bool icmpv6RrFlagS_;
    /// <summary>
    /// Site-specific ('icmpv6_rr_flag_icmpv6_rr_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrFlagS {
      get { return icmpv6RrFlagS_; }
      set {
        icmpv6RrFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagP" field.</summary>
    public const int Icmpv6RrFlagPFieldNumber = 155;
    private bool icmpv6RrFlagP_;
    /// <summary>
    /// Processed previously ('icmpv6_rr_flag_icmpv6_rr_flag_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrFlagP {
      get { return icmpv6RrFlagP_; }
      set {
        icmpv6RrFlagP_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrFlagRsv" field.</summary>
    public const int Icmpv6RrFlagRsvFieldNumber = 156;
    private uint icmpv6RrFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rr_flag_icmpv6_rr_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrFlagRsv {
      get { return icmpv6RrFlagRsv_; }
      set {
        icmpv6RrFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrMaxdelay" field.</summary>
    public const int Icmpv6RrMaxdelayFieldNumber = 157;
    private uint icmpv6RrMaxdelay_;
    /// <summary>
    /// Max Delay ('icmpv6_icmpv6_rr_maxdelay')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrMaxdelay {
      get { return icmpv6RrMaxdelay_; }
      set {
        icmpv6RrMaxdelay_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMp" field.</summary>
    public const int Icmpv6RrPcoMpFieldNumber = 158;
    private int icmpv6RrPcoMp_;
    /// <summary>
    /// Match-Prefix Part ('icmpv6_icmpv6_rr_pco_mp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RrPcoMp {
      get { return icmpv6RrPcoMp_; }
      set {
        icmpv6RrPcoMp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpOpcode" field.</summary>
    public const int Icmpv6RrPcoMpOpcodeFieldNumber = 159;
    private uint icmpv6RrPcoMpOpcode_;
    /// <summary>
    /// OpCode ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_opcode')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpOpcode {
      get { return icmpv6RrPcoMpOpcode_; }
      set {
        icmpv6RrPcoMpOpcode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpOplength" field.</summary>
    public const int Icmpv6RrPcoMpOplengthFieldNumber = 160;
    private uint icmpv6RrPcoMpOplength_;
    /// <summary>
    /// OpLength ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_oplength')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpOplength {
      get { return icmpv6RrPcoMpOplength_; }
      set {
        icmpv6RrPcoMpOplength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpOrdinal" field.</summary>
    public const int Icmpv6RrPcoMpOrdinalFieldNumber = 161;
    private uint icmpv6RrPcoMpOrdinal_;
    /// <summary>
    /// Ordinal ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_ordinal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpOrdinal {
      get { return icmpv6RrPcoMpOrdinal_; }
      set {
        icmpv6RrPcoMpOrdinal_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpMatchlen" field.</summary>
    public const int Icmpv6RrPcoMpMatchlenFieldNumber = 162;
    private uint icmpv6RrPcoMpMatchlen_;
    /// <summary>
    /// MatchLen ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_matchlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpMatchlen {
      get { return icmpv6RrPcoMpMatchlen_; }
      set {
        icmpv6RrPcoMpMatchlen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpMinlen" field.</summary>
    public const int Icmpv6RrPcoMpMinlenFieldNumber = 163;
    private uint icmpv6RrPcoMpMinlen_;
    /// <summary>
    /// MinLen ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_minlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpMinlen {
      get { return icmpv6RrPcoMpMinlen_; }
      set {
        icmpv6RrPcoMpMinlen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpMaxlen" field.</summary>
    public const int Icmpv6RrPcoMpMaxlenFieldNumber = 164;
    private uint icmpv6RrPcoMpMaxlen_;
    /// <summary>
    /// MaxLen ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_maxlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoMpMaxlen {
      get { return icmpv6RrPcoMpMaxlen_; }
      set {
        icmpv6RrPcoMpMaxlen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoMpMatchprefix" field.</summary>
    public const int Icmpv6RrPcoMpMatchprefixFieldNumber = 165;
    private pb::ByteString icmpv6RrPcoMpMatchprefix_ = pb::ByteString.Empty;
    /// <summary>
    /// MatchPrefix ('icmpv6_rr_pco_mp_icmpv6_rr_pco_mp_matchprefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RrPcoMpMatchprefix {
      get { return icmpv6RrPcoMpMatchprefix_; }
      set {
        icmpv6RrPcoMpMatchprefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUp" field.</summary>
    public const int Icmpv6RrPcoUpFieldNumber = 166;
    private int icmpv6RrPcoUp_;
    /// <summary>
    /// Use-Prefix Part ('icmpv6_icmpv6_rr_pco_up')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RrPcoUp {
      get { return icmpv6RrPcoUp_; }
      set {
        icmpv6RrPcoUp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpUselen" field.</summary>
    public const int Icmpv6RrPcoUpUselenFieldNumber = 167;
    private uint icmpv6RrPcoUpUselen_;
    /// <summary>
    /// UseLen ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_uselen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpUselen {
      get { return icmpv6RrPcoUpUselen_; }
      set {
        icmpv6RrPcoUpUselen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpKeeplen" field.</summary>
    public const int Icmpv6RrPcoUpKeeplenFieldNumber = 168;
    private uint icmpv6RrPcoUpKeeplen_;
    /// <summary>
    /// KeepLen ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_keeplen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpKeeplen {
      get { return icmpv6RrPcoUpKeeplen_; }
      set {
        icmpv6RrPcoUpKeeplen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagmask" field.</summary>
    public const int Icmpv6RrPcoUpFlagmaskFieldNumber = 169;
    private uint icmpv6RrPcoUpFlagmask_;
    /// <summary>
    /// FlagMask ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_flagmask')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpFlagmask {
      get { return icmpv6RrPcoUpFlagmask_; }
      set {
        icmpv6RrPcoUpFlagmask_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagmaskL" field.</summary>
    public const int Icmpv6RrPcoUpFlagmaskLFieldNumber = 170;
    private bool icmpv6RrPcoUpFlagmaskL_;
    /// <summary>
    /// On-link flag(L) ('icmpv6_rr_pco_up_flagmask_icmpv6_rr_pco_up_flagmask_l')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrPcoUpFlagmaskL {
      get { return icmpv6RrPcoUpFlagmaskL_; }
      set {
        icmpv6RrPcoUpFlagmaskL_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagmaskA" field.</summary>
    public const int Icmpv6RrPcoUpFlagmaskAFieldNumber = 171;
    private bool icmpv6RrPcoUpFlagmaskA_;
    /// <summary>
    /// Autonomous address-configuration flag(A) ('icmpv6_rr_pco_up_flagmask_icmpv6_rr_pco_up_flagmask_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrPcoUpFlagmaskA {
      get { return icmpv6RrPcoUpFlagmaskA_; }
      set {
        icmpv6RrPcoUpFlagmaskA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagmaskReserved" field.</summary>
    public const int Icmpv6RrPcoUpFlagmaskReservedFieldNumber = 172;
    private uint icmpv6RrPcoUpFlagmaskReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rr_pco_up_flagmask_icmpv6_rr_pco_up_flagmask_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpFlagmaskReserved {
      get { return icmpv6RrPcoUpFlagmaskReserved_; }
      set {
        icmpv6RrPcoUpFlagmaskReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpRaflags" field.</summary>
    public const int Icmpv6RrPcoUpRaflagsFieldNumber = 173;
    private uint icmpv6RrPcoUpRaflags_;
    /// <summary>
    /// RAFlags ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_raflags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpRaflags {
      get { return icmpv6RrPcoUpRaflags_; }
      set {
        icmpv6RrPcoUpRaflags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpValidlifetime" field.</summary>
    public const int Icmpv6RrPcoUpValidlifetimeFieldNumber = 174;
    private uint icmpv6RrPcoUpValidlifetime_;
    /// <summary>
    /// Valid Lifetime ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_validlifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpValidlifetime {
      get { return icmpv6RrPcoUpValidlifetime_; }
      set {
        icmpv6RrPcoUpValidlifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpPreferredlifetime" field.</summary>
    public const int Icmpv6RrPcoUpPreferredlifetimeFieldNumber = 175;
    private uint icmpv6RrPcoUpPreferredlifetime_;
    /// <summary>
    /// Preferred Lifetime ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_preferredlifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpPreferredlifetime {
      get { return icmpv6RrPcoUpPreferredlifetime_; }
      set {
        icmpv6RrPcoUpPreferredlifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlag" field.</summary>
    public const int Icmpv6RrPcoUpFlagFieldNumber = 176;
    private uint icmpv6RrPcoUpFlag_;
    /// <summary>
    /// Flags ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpFlag {
      get { return icmpv6RrPcoUpFlag_; }
      set {
        icmpv6RrPcoUpFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagV" field.</summary>
    public const int Icmpv6RrPcoUpFlagVFieldNumber = 177;
    private bool icmpv6RrPcoUpFlagV_;
    /// <summary>
    /// Decrement valid lifetime ('icmpv6_rr_pco_up_flag_icmpv6_rr_pco_up_flag_v')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrPcoUpFlagV {
      get { return icmpv6RrPcoUpFlagV_; }
      set {
        icmpv6RrPcoUpFlagV_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagP" field.</summary>
    public const int Icmpv6RrPcoUpFlagPFieldNumber = 178;
    private bool icmpv6RrPcoUpFlagP_;
    /// <summary>
    /// Decrement preferred lifetime ('icmpv6_rr_pco_up_flag_icmpv6_rr_pco_up_flag_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrPcoUpFlagP {
      get { return icmpv6RrPcoUpFlagP_; }
      set {
        icmpv6RrPcoUpFlagP_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpFlagReserved" field.</summary>
    public const int Icmpv6RrPcoUpFlagReservedFieldNumber = 179;
    private uint icmpv6RrPcoUpFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rr_pco_up_flag_icmpv6_rr_pco_up_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrPcoUpFlagReserved {
      get { return icmpv6RrPcoUpFlagReserved_; }
      set {
        icmpv6RrPcoUpFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrPcoUpUseprefix" field.</summary>
    public const int Icmpv6RrPcoUpUseprefixFieldNumber = 180;
    private pb::ByteString icmpv6RrPcoUpUseprefix_ = pb::ByteString.Empty;
    /// <summary>
    /// UsePrefix ('icmpv6_rr_pco_up_icmpv6_rr_pco_up_useprefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RrPcoUpUseprefix {
      get { return icmpv6RrPcoUpUseprefix_; }
      set {
        icmpv6RrPcoUpUseprefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RrRm" field.</summary>
    public const int Icmpv6RrRmFieldNumber = 181;
    private int icmpv6RrRm_;
    /// <summary>
    /// Result Message ('icmpv6_icmpv6_rr_rm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RrRm {
      get { return icmpv6RrRm_; }
      set {
        icmpv6RrRm_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmFlag" field.</summary>
    public const int Icmpv6RrRmFlagFieldNumber = 182;
    private uint icmpv6RrRmFlag_;
    /// <summary>
    /// Flags ('icmpv6_rr_rm_icmpv6_rr_rm_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrRmFlag {
      get { return icmpv6RrRmFlag_; }
      set {
        icmpv6RrRmFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmFlagB" field.</summary>
    public const int Icmpv6RrRmFlagBFieldNumber = 183;
    private bool icmpv6RrRmFlagB_;
    /// <summary>
    /// Bounds ('icmpv6_rr_rm_flag_icmpv6_rr_rm_flag_b')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrRmFlagB {
      get { return icmpv6RrRmFlagB_; }
      set {
        icmpv6RrRmFlagB_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmFlagF" field.</summary>
    public const int Icmpv6RrRmFlagFFieldNumber = 184;
    private bool icmpv6RrRmFlagF_;
    /// <summary>
    /// Forbidden ('icmpv6_rr_rm_flag_icmpv6_rr_rm_flag_f')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RrRmFlagF {
      get { return icmpv6RrRmFlagF_; }
      set {
        icmpv6RrRmFlagF_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmFlagReserved" field.</summary>
    public const int Icmpv6RrRmFlagReservedFieldNumber = 185;
    private uint icmpv6RrRmFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rr_rm_flag_icmpv6_rr_rm_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrRmFlagReserved {
      get { return icmpv6RrRmFlagReserved_; }
      set {
        icmpv6RrRmFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmOrdinal" field.</summary>
    public const int Icmpv6RrRmOrdinalFieldNumber = 186;
    private uint icmpv6RrRmOrdinal_;
    /// <summary>
    /// Ordinal ('icmpv6_rr_rm_icmpv6_rr_rm_ordinal')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrRmOrdinal {
      get { return icmpv6RrRmOrdinal_; }
      set {
        icmpv6RrRmOrdinal_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmMatchedlen" field.</summary>
    public const int Icmpv6RrRmMatchedlenFieldNumber = 187;
    private uint icmpv6RrRmMatchedlen_;
    /// <summary>
    /// MatchedLen ('icmpv6_rr_rm_icmpv6_rr_rm_matchedlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrRmMatchedlen {
      get { return icmpv6RrRmMatchedlen_; }
      set {
        icmpv6RrRmMatchedlen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmInterfaceindex" field.</summary>
    public const int Icmpv6RrRmInterfaceindexFieldNumber = 188;
    private uint icmpv6RrRmInterfaceindex_;
    /// <summary>
    /// InterfaceIndex ('icmpv6_rr_rm_icmpv6_rr_rm_interfaceindex')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RrRmInterfaceindex {
      get { return icmpv6RrRmInterfaceindex_; }
      set {
        icmpv6RrRmInterfaceindex_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RrRmMatchedprefix" field.</summary>
    public const int Icmpv6RrRmMatchedprefixFieldNumber = 189;
    private pb::ByteString icmpv6RrRmMatchedprefix_ = pb::ByteString.Empty;
    /// <summary>
    /// MatchedPrefix ('icmpv6_rr_rm_icmpv6_rr_rm_matchedprefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RrRmMatchedprefix {
      get { return icmpv6RrRmMatchedprefix_; }
      set {
        icmpv6RrRmMatchedprefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6Identifier" field.</summary>
    public const int Icmpv6Mip6IdentifierFieldNumber = 190;
    private uint icmpv6Mip6Identifier_;
    /// <summary>
    /// Identifier ('icmpv6_icmpv6_mip6_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Mip6Identifier {
      get { return icmpv6Mip6Identifier_; }
      set {
        icmpv6Mip6Identifier_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6HomeAgentAddress" field.</summary>
    public const int Icmpv6Mip6HomeAgentAddressFieldNumber = 191;
    private pb::ByteString icmpv6Mip6HomeAgentAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Home Agent Address ('icmpv6_icmpv6_mip6_home_agent_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6Mip6HomeAgentAddress {
      get { return icmpv6Mip6HomeAgentAddress_; }
      set {
        icmpv6Mip6HomeAgentAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6Flag" field.</summary>
    public const int Icmpv6Mip6FlagFieldNumber = 192;
    private uint icmpv6Mip6Flag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_mip6_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Mip6Flag {
      get { return icmpv6Mip6Flag_; }
      set {
        icmpv6Mip6Flag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6FlagM" field.</summary>
    public const int Icmpv6Mip6FlagMFieldNumber = 193;
    private bool icmpv6Mip6FlagM_;
    /// <summary>
    /// Managed address configuration ('icmpv6_mip6_flag_icmpv6_mip6_flag_m')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6Mip6FlagM {
      get { return icmpv6Mip6FlagM_; }
      set {
        icmpv6Mip6FlagM_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6FlagO" field.</summary>
    public const int Icmpv6Mip6FlagOFieldNumber = 194;
    private bool icmpv6Mip6FlagO_;
    /// <summary>
    /// Other configuration ('icmpv6_mip6_flag_icmpv6_mip6_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6Mip6FlagO {
      get { return icmpv6Mip6FlagO_; }
      set {
        icmpv6Mip6FlagO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Mip6FlagRsv" field.</summary>
    public const int Icmpv6Mip6FlagRsvFieldNumber = 195;
    private uint icmpv6Mip6FlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_mip6_flag_icmpv6_mip6_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Mip6FlagRsv {
      get { return icmpv6Mip6FlagRsv_; }
      set {
        icmpv6Mip6FlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldMaximumResponseCode" field.</summary>
    public const int Icmpv6MldMaximumResponseCodeFieldNumber = 196;
    private uint icmpv6MldMaximumResponseCode_;
    /// <summary>
    /// Maximum Response Code ('icmpv6_icmpv6_mld_maximum_response_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldMaximumResponseCode {
      get { return icmpv6MldMaximumResponseCode_; }
      set {
        icmpv6MldMaximumResponseCode_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldFlag" field.</summary>
    public const int Icmpv6MldFlagFieldNumber = 197;
    private uint icmpv6MldFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_mld_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldFlag {
      get { return icmpv6MldFlag_; }
      set {
        icmpv6MldFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldFlagS" field.</summary>
    public const int Icmpv6MldFlagSFieldNumber = 198;
    private bool icmpv6MldFlagS_;
    /// <summary>
    /// Suppress Router-Side Processing ('icmpv6_mld_flag_icmpv6_mld_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6MldFlagS {
      get { return icmpv6MldFlagS_; }
      set {
        icmpv6MldFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldFlagQrv" field.</summary>
    public const int Icmpv6MldFlagQrvFieldNumber = 199;
    private uint icmpv6MldFlagQrv_;
    /// <summary>
    /// QRV (Querier's Robustness Variable) ('icmpv6_mld_flag_icmpv6_mld_flag_qrv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldFlagQrv {
      get { return icmpv6MldFlagQrv_; }
      set {
        icmpv6MldFlagQrv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldFlagReserved" field.</summary>
    public const int Icmpv6MldFlagReservedFieldNumber = 200;
    private uint icmpv6MldFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_mld_flag_icmpv6_mld_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldFlagReserved {
      get { return icmpv6MldFlagReserved_; }
      set {
        icmpv6MldFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldQqi" field.</summary>
    public const int Icmpv6MldQqiFieldNumber = 201;
    private uint icmpv6MldQqi_;
    /// <summary>
    /// QQIC (Querier's Query Interval Code) ('icmpv6_icmpv6_mld_qqi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldQqi {
      get { return icmpv6MldQqi_; }
      set {
        icmpv6MldQqi_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldNbSources" field.</summary>
    public const int Icmpv6MldNbSourcesFieldNumber = 202;
    private uint icmpv6MldNbSources_;
    /// <summary>
    /// Number of Sources ('icmpv6_icmpv6_mld_nb_sources')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldNbSources {
      get { return icmpv6MldNbSources_; }
      set {
        icmpv6MldNbSources_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldSourceAddress" field.</summary>
    public const int Icmpv6MldSourceAddressFieldNumber = 203;
    private pb::ByteString icmpv6MldSourceAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Address ('icmpv6_icmpv6_mld_source_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6MldSourceAddress {
      get { return icmpv6MldSourceAddress_; }
      set {
        icmpv6MldSourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6MldrNbMcastRecords" field.</summary>
    public const int Icmpv6MldrNbMcastRecordsFieldNumber = 204;
    private uint icmpv6MldrNbMcastRecords_;
    /// <summary>
    /// Number of Multicast Address Records ('icmpv6_icmpv6_mldr_nb_mcast_records')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldrNbMcastRecords {
      get { return icmpv6MldrNbMcastRecords_; }
      set {
        icmpv6MldrNbMcastRecords_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMar" field.</summary>
    public const int Icmpv6MldrMarFieldNumber = 205;
    private int icmpv6MldrMar_;
    /// <summary>
    /// Multicast Address Record ('icmpv6_icmpv6_mldr_mar')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6MldrMar {
      get { return icmpv6MldrMar_; }
      set {
        icmpv6MldrMar_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarRecordType" field.</summary>
    public const int Icmpv6MldrMarRecordTypeFieldNumber = 206;
    private uint icmpv6MldrMarRecordType_;
    /// <summary>
    /// Record Type ('icmpv6_mldr_mar_icmpv6_mldr_mar_record_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldrMarRecordType {
      get { return icmpv6MldrMarRecordType_; }
      set {
        icmpv6MldrMarRecordType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarAuxDataLen" field.</summary>
    public const int Icmpv6MldrMarAuxDataLenFieldNumber = 207;
    private uint icmpv6MldrMarAuxDataLen_;
    /// <summary>
    /// Aux Data Len ('icmpv6_mldr_mar_icmpv6_mldr_mar_aux_data_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldrMarAuxDataLen {
      get { return icmpv6MldrMarAuxDataLen_; }
      set {
        icmpv6MldrMarAuxDataLen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarNbSources" field.</summary>
    public const int Icmpv6MldrMarNbSourcesFieldNumber = 208;
    private uint icmpv6MldrMarNbSources_;
    /// <summary>
    /// Number of Sources ('icmpv6_mldr_mar_icmpv6_mldr_mar_nb_sources')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MldrMarNbSources {
      get { return icmpv6MldrMarNbSources_; }
      set {
        icmpv6MldrMarNbSources_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarMulticastAddress" field.</summary>
    public const int Icmpv6MldrMarMulticastAddressFieldNumber = 209;
    private pb::ByteString icmpv6MldrMarMulticastAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Multicast Address ('icmpv6_mldr_mar_icmpv6_mldr_mar_multicast_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6MldrMarMulticastAddress {
      get { return icmpv6MldrMarMulticastAddress_; }
      set {
        icmpv6MldrMarMulticastAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarSourceAddress" field.</summary>
    public const int Icmpv6MldrMarSourceAddressFieldNumber = 210;
    private pb::ByteString icmpv6MldrMarSourceAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Address ('icmpv6_mldr_mar_icmpv6_mldr_mar_source_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6MldrMarSourceAddress {
      get { return icmpv6MldrMarSourceAddress_; }
      set {
        icmpv6MldrMarSourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6MldrMarAuxiliaryData" field.</summary>
    public const int Icmpv6MldrMarAuxiliaryDataFieldNumber = 211;
    private pb::ByteString icmpv6MldrMarAuxiliaryData_ = pb::ByteString.Empty;
    /// <summary>
    /// Auxiliary Data ('icmpv6_mldr_mar_icmpv6_mldr_mar_auxiliary_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6MldrMarAuxiliaryData {
      get { return icmpv6MldrMarAuxiliaryData_; }
      set {
        icmpv6MldrMarAuxiliaryData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6Subtype" field.</summary>
    public const int Icmpv6Fmip6SubtypeFieldNumber = 212;
    private uint icmpv6Fmip6Subtype_;
    /// <summary>
    /// Subtype ('icmpv6_icmpv6_fmip6_subtype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Fmip6Subtype {
      get { return icmpv6Fmip6Subtype_; }
      set {
        icmpv6Fmip6Subtype_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6HiFlag" field.</summary>
    public const int Icmpv6Fmip6HiFlagFieldNumber = 213;
    private uint icmpv6Fmip6HiFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_fmip6_hi_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Fmip6HiFlag {
      get { return icmpv6Fmip6HiFlag_; }
      set {
        icmpv6Fmip6HiFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6HiFlagS" field.</summary>
    public const int Icmpv6Fmip6HiFlagSFieldNumber = 214;
    private bool icmpv6Fmip6HiFlagS_;
    /// <summary>
    /// Assigned address configuration ('icmpv6_fmip6_hi_flag_icmpv6_fmip6_hi_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6Fmip6HiFlagS {
      get { return icmpv6Fmip6HiFlagS_; }
      set {
        icmpv6Fmip6HiFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6HiFlagA" field.</summary>
    public const int Icmpv6Fmip6HiFlagAFieldNumber = 215;
    private bool icmpv6Fmip6HiFlagA_;
    /// <summary>
    /// Buffer ('icmpv6_fmip6_hi_flag_icmpv6_fmip6_hi_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6Fmip6HiFlagA {
      get { return icmpv6Fmip6HiFlagA_; }
      set {
        icmpv6Fmip6HiFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6HiFlagReserved" field.</summary>
    public const int Icmpv6Fmip6HiFlagReservedFieldNumber = 216;
    private uint icmpv6Fmip6HiFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_fmip6_hi_flag_icmpv6_fmip6_hi_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Fmip6HiFlagReserved {
      get { return icmpv6Fmip6HiFlagReserved_; }
      set {
        icmpv6Fmip6HiFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Fmip6Identifier" field.</summary>
    public const int Icmpv6Fmip6IdentifierFieldNumber = 217;
    private uint icmpv6Fmip6Identifier_;
    /// <summary>
    /// Identifier ('icmpv6_icmpv6_fmip6_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6Fmip6Identifier {
      get { return icmpv6Fmip6Identifier_; }
      set {
        icmpv6Fmip6Identifier_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6McastRaQueryInterval" field.</summary>
    public const int Icmpv6McastRaQueryIntervalFieldNumber = 218;
    private uint icmpv6McastRaQueryInterval_;
    /// <summary>
    /// Query Interval ('icmpv6_icmpv6_mcast_ra_query_interval')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6McastRaQueryInterval {
      get { return icmpv6McastRaQueryInterval_; }
      set {
        icmpv6McastRaQueryInterval_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6McastRaRobustnessVariable" field.</summary>
    public const int Icmpv6McastRaRobustnessVariableFieldNumber = 219;
    private uint icmpv6McastRaRobustnessVariable_;
    /// <summary>
    /// Robustness Variable ('icmpv6_icmpv6_mcast_ra_robustness_variable')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6McastRaRobustnessVariable {
      get { return icmpv6McastRaRobustnessVariable_; }
      set {
        icmpv6McastRaRobustnessVariable_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiQtype" field.</summary>
    public const int Icmpv6NiQtypeFieldNumber = 220;
    private uint icmpv6NiQtype_;
    /// <summary>
    /// Qtype ('icmpv6_icmpv6_ni_qtype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NiQtype {
      get { return icmpv6NiQtype_; }
      set {
        icmpv6NiQtype_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlag" field.</summary>
    public const int Icmpv6NiFlagFieldNumber = 221;
    private uint icmpv6NiFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_ni_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NiFlag {
      get { return icmpv6NiFlag_; }
      set {
        icmpv6NiFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagG" field.</summary>
    public const int Icmpv6NiFlagGFieldNumber = 222;
    private bool icmpv6NiFlagG_;
    /// <summary>
    /// Global-scope addresses ('icmpv6_ni_flag_icmpv6_ni_flag_g')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagG {
      get { return icmpv6NiFlagG_; }
      set {
        icmpv6NiFlagG_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagS" field.</summary>
    public const int Icmpv6NiFlagSFieldNumber = 223;
    private bool icmpv6NiFlagS_;
    /// <summary>
    /// Site-local addresses ('icmpv6_ni_flag_icmpv6_ni_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagS {
      get { return icmpv6NiFlagS_; }
      set {
        icmpv6NiFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagL" field.</summary>
    public const int Icmpv6NiFlagLFieldNumber = 224;
    private bool icmpv6NiFlagL_;
    /// <summary>
    /// Link-local addresses ('icmpv6_ni_flag_icmpv6_ni_flag_l')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagL {
      get { return icmpv6NiFlagL_; }
      set {
        icmpv6NiFlagL_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagC" field.</summary>
    public const int Icmpv6NiFlagCFieldNumber = 225;
    private bool icmpv6NiFlagC_;
    /// <summary>
    /// Compression ('icmpv6_ni_flag_icmpv6_ni_flag_c')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagC {
      get { return icmpv6NiFlagC_; }
      set {
        icmpv6NiFlagC_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagA" field.</summary>
    public const int Icmpv6NiFlagAFieldNumber = 226;
    private bool icmpv6NiFlagA_;
    /// <summary>
    /// Unicast Addresses ('icmpv6_ni_flag_icmpv6_ni_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagA {
      get { return icmpv6NiFlagA_; }
      set {
        icmpv6NiFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagT" field.</summary>
    public const int Icmpv6NiFlagTFieldNumber = 227;
    private bool icmpv6NiFlagT_;
    /// <summary>
    /// Truncated ('icmpv6_ni_flag_icmpv6_ni_flag_t')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6NiFlagT {
      get { return icmpv6NiFlagT_; }
      set {
        icmpv6NiFlagT_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiFlagRsv" field.</summary>
    public const int Icmpv6NiFlagRsvFieldNumber = 228;
    private uint icmpv6NiFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_ni_flag_icmpv6_ni_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NiFlagRsv {
      get { return icmpv6NiFlagRsv_; }
      set {
        icmpv6NiFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiNonce" field.</summary>
    public const int Icmpv6NiNonceFieldNumber = 229;
    private ulong icmpv6NiNonce_;
    /// <summary>
    /// Nonce ('icmpv6_icmpv6_ni_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Icmpv6NiNonce {
      get { return icmpv6NiNonce_; }
      set {
        icmpv6NiNonce_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiQuerySubjectIpv6" field.</summary>
    public const int Icmpv6NiQuerySubjectIpv6FieldNumber = 230;
    private pb::ByteString icmpv6NiQuerySubjectIpv6_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv6 subject address ('icmpv6_icmpv6_ni_query_subject_ipv6')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NiQuerySubjectIpv6 {
      get { return icmpv6NiQuerySubjectIpv6_; }
      set {
        icmpv6NiQuerySubjectIpv6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NiQuerySubjectFqdn" field.</summary>
    public const int Icmpv6NiQuerySubjectFqdnFieldNumber = 231;
    private string icmpv6NiQuerySubjectFqdn_ = "";
    /// <summary>
    /// FQDN subject ('icmpv6_icmpv6_ni_query_subject_fqdn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6NiQuerySubjectFqdn {
      get { return icmpv6NiQuerySubjectFqdn_; }
      set {
        icmpv6NiQuerySubjectFqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NiQuerySubjectIpv4" field.</summary>
    public const int Icmpv6NiQuerySubjectIpv4FieldNumber = 232;
    private pb::ByteString icmpv6NiQuerySubjectIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 subject address ('icmpv6_icmpv6_ni_query_subject_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NiQuerySubjectIpv4 {
      get { return icmpv6NiQuerySubjectIpv4_; }
      set {
        icmpv6NiQuerySubjectIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NiReplyNodeTtl" field.</summary>
    public const int Icmpv6NiReplyNodeTtlFieldNumber = 233;
    private uint icmpv6NiReplyNodeTtl_;
    /// <summary>
    /// TTL ('icmpv6_icmpv6_ni_reply_node_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6NiReplyNodeTtl {
      get { return icmpv6NiReplyNodeTtl_; }
      set {
        icmpv6NiReplyNodeTtl_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NiReplyNodeName" field.</summary>
    public const int Icmpv6NiReplyNodeNameFieldNumber = 234;
    private string icmpv6NiReplyNodeName_ = "";
    /// <summary>
    /// Name Node ('icmpv6_icmpv6_ni_reply_node_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6NiReplyNodeName {
      get { return icmpv6NiReplyNodeName_; }
      set {
        icmpv6NiReplyNodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NiReplyNodeAddress" field.</summary>
    public const int Icmpv6NiReplyNodeAddressFieldNumber = 235;
    private pb::ByteString icmpv6NiReplyNodeAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv6 Node address ('icmpv6_icmpv6_ni_reply_node_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NiReplyNodeAddress {
      get { return icmpv6NiReplyNodeAddress_; }
      set {
        icmpv6NiReplyNodeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6NiReplyIpv4Address" field.</summary>
    public const int Icmpv6NiReplyIpv4AddressFieldNumber = 236;
    private pb::ByteString icmpv6NiReplyIpv4Address_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 Node address ('icmpv6_icmpv6_ni_reply_ipv4_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6NiReplyIpv4Address {
      get { return icmpv6NiReplyIpv4Address_; }
      set {
        icmpv6NiReplyIpv4Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplDisFlags" field.</summary>
    public const int Icmpv6RplDisFlagsFieldNumber = 237;
    private uint icmpv6RplDisFlags_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_dis_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDisFlags {
      get { return icmpv6RplDisFlags_; }
      set {
        icmpv6RplDisFlags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioInstance" field.</summary>
    public const int Icmpv6RplDioInstanceFieldNumber = 238;
    private uint icmpv6RplDioInstance_;
    /// <summary>
    /// RPLInstanceID ('icmpv6_icmpv6_rpl_dio_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioInstance {
      get { return icmpv6RplDioInstance_; }
      set {
        icmpv6RplDioInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioVersion" field.</summary>
    public const int Icmpv6RplDioVersionFieldNumber = 239;
    private uint icmpv6RplDioVersion_;
    /// <summary>
    /// Version ('icmpv6_icmpv6_rpl_dio_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioVersion {
      get { return icmpv6RplDioVersion_; }
      set {
        icmpv6RplDioVersion_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioRank" field.</summary>
    public const int Icmpv6RplDioRankFieldNumber = 240;
    private uint icmpv6RplDioRank_;
    /// <summary>
    /// Rank ('icmpv6_icmpv6_rpl_dio_rank')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioRank {
      get { return icmpv6RplDioRank_; }
      set {
        icmpv6RplDioRank_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioFlag" field.</summary>
    public const int Icmpv6RplDioFlagFieldNumber = 241;
    private uint icmpv6RplDioFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_dio_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioFlag {
      get { return icmpv6RplDioFlag_; }
      set {
        icmpv6RplDioFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioFlagG" field.</summary>
    public const int Icmpv6RplDioFlagGFieldNumber = 242;
    private bool icmpv6RplDioFlagG_;
    /// <summary>
    /// Grounded (G) ('icmpv6_rpl_dio_flag_icmpv6_rpl_dio_flag_g')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplDioFlagG {
      get { return icmpv6RplDioFlagG_; }
      set {
        icmpv6RplDioFlagG_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioFlag0" field.</summary>
    public const int Icmpv6RplDioFlag0FieldNumber = 243;
    private bool icmpv6RplDioFlag0_;
    /// <summary>
    /// Zero ('icmpv6_rpl_dio_flag_icmpv6_rpl_dio_flag_0')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplDioFlag0 {
      get { return icmpv6RplDioFlag0_; }
      set {
        icmpv6RplDioFlag0_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioFlagMop" field.</summary>
    public const int Icmpv6RplDioFlagMopFieldNumber = 244;
    private uint icmpv6RplDioFlagMop_;
    /// <summary>
    /// Mode of Operation (MOP) ('icmpv6_rpl_dio_flag_icmpv6_rpl_dio_flag_mop')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioFlagMop {
      get { return icmpv6RplDioFlagMop_; }
      set {
        icmpv6RplDioFlagMop_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioFlagPreference" field.</summary>
    public const int Icmpv6RplDioFlagPreferenceFieldNumber = 245;
    private uint icmpv6RplDioFlagPreference_;
    /// <summary>
    /// DODAG Preference ('icmpv6_rpl_dio_flag_icmpv6_rpl_dio_flag_preference')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioFlagPreference {
      get { return icmpv6RplDioFlagPreference_; }
      set {
        icmpv6RplDioFlagPreference_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioDtsn" field.</summary>
    public const int Icmpv6RplDioDtsnFieldNumber = 246;
    private uint icmpv6RplDioDtsn_;
    /// <summary>
    /// Destination Advertisement Trigger Sequence Number (DTSN) ('icmpv6_icmpv6_rpl_dio_dtsn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDioDtsn {
      get { return icmpv6RplDioDtsn_; }
      set {
        icmpv6RplDioDtsn_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDioDagid" field.</summary>
    public const int Icmpv6RplDioDagidFieldNumber = 247;
    private pb::ByteString icmpv6RplDioDagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_dio_dagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplDioDagid {
      get { return icmpv6RplDioDagid_; }
      set {
        icmpv6RplDioDagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoInstance" field.</summary>
    public const int Icmpv6RplDaoInstanceFieldNumber = 248;
    private uint icmpv6RplDaoInstance_;
    /// <summary>
    /// RPLInstanceID ('icmpv6_icmpv6_rpl_dao_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoInstance {
      get { return icmpv6RplDaoInstance_; }
      set {
        icmpv6RplDaoInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoFlag" field.</summary>
    public const int Icmpv6RplDaoFlagFieldNumber = 249;
    private uint icmpv6RplDaoFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_dao_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoFlag {
      get { return icmpv6RplDaoFlag_; }
      set {
        icmpv6RplDaoFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoFlagK" field.</summary>
    public const int Icmpv6RplDaoFlagKFieldNumber = 250;
    private bool icmpv6RplDaoFlagK_;
    /// <summary>
    /// DAO-ACK Request (K) ('icmpv6_rpl_dao_flag_icmpv6_rpl_dao_flag_k')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplDaoFlagK {
      get { return icmpv6RplDaoFlagK_; }
      set {
        icmpv6RplDaoFlagK_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoFlagD" field.</summary>
    public const int Icmpv6RplDaoFlagDFieldNumber = 251;
    private bool icmpv6RplDaoFlagD_;
    /// <summary>
    /// DODAGID Present (D) ('icmpv6_rpl_dao_flag_icmpv6_rpl_dao_flag_d')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplDaoFlagD {
      get { return icmpv6RplDaoFlagD_; }
      set {
        icmpv6RplDaoFlagD_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoFlagRsv" field.</summary>
    public const int Icmpv6RplDaoFlagRsvFieldNumber = 252;
    private uint icmpv6RplDaoFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_dao_flag_icmpv6_rpl_dao_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoFlagRsv {
      get { return icmpv6RplDaoFlagRsv_; }
      set {
        icmpv6RplDaoFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoSequence" field.</summary>
    public const int Icmpv6RplDaoSequenceFieldNumber = 253;
    private uint icmpv6RplDaoSequence_;
    /// <summary>
    /// DAO Sequence ('icmpv6_icmpv6_rpl_dao_sequence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoSequence {
      get { return icmpv6RplDaoSequence_; }
      set {
        icmpv6RplDaoSequence_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoDodagid" field.</summary>
    public const int Icmpv6RplDaoDodagidFieldNumber = 254;
    private pb::ByteString icmpv6RplDaoDodagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_dao_dodagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplDaoDodagid {
      get { return icmpv6RplDaoDodagid_; }
      set {
        icmpv6RplDaoDodagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackInstance" field.</summary>
    public const int Icmpv6RplDaoackInstanceFieldNumber = 255;
    private uint icmpv6RplDaoackInstance_;
    /// <summary>
    /// RPLInstanceID ('icmpv6_icmpv6_rpl_daoack_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoackInstance {
      get { return icmpv6RplDaoackInstance_; }
      set {
        icmpv6RplDaoackInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackFlag" field.</summary>
    public const int Icmpv6RplDaoackFlagFieldNumber = 256;
    private uint icmpv6RplDaoackFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_rpl_daoack_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoackFlag {
      get { return icmpv6RplDaoackFlag_; }
      set {
        icmpv6RplDaoackFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackFlagD" field.</summary>
    public const int Icmpv6RplDaoackFlagDFieldNumber = 257;
    private bool icmpv6RplDaoackFlagD_;
    /// <summary>
    /// DODAGID Present (D) ('icmpv6_rpl_daoack_flag_icmpv6_rpl_daoack_flag_d')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplDaoackFlagD {
      get { return icmpv6RplDaoackFlagD_; }
      set {
        icmpv6RplDaoackFlagD_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackFlagRsv" field.</summary>
    public const int Icmpv6RplDaoackFlagRsvFieldNumber = 258;
    private uint icmpv6RplDaoackFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_daoack_flag_icmpv6_rpl_daoack_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoackFlagRsv {
      get { return icmpv6RplDaoackFlagRsv_; }
      set {
        icmpv6RplDaoackFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackSequence" field.</summary>
    public const int Icmpv6RplDaoackSequenceFieldNumber = 259;
    private uint icmpv6RplDaoackSequence_;
    /// <summary>
    /// DAO-ACK Sequence ('icmpv6_icmpv6_rpl_daoack_sequence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoackSequence {
      get { return icmpv6RplDaoackSequence_; }
      set {
        icmpv6RplDaoackSequence_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackStatus" field.</summary>
    public const int Icmpv6RplDaoackStatusFieldNumber = 260;
    private uint icmpv6RplDaoackStatus_;
    /// <summary>
    /// Status ('icmpv6_icmpv6_rpl_daoack_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplDaoackStatus {
      get { return icmpv6RplDaoackStatus_; }
      set {
        icmpv6RplDaoackStatus_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplDaoackDodagid" field.</summary>
    public const int Icmpv6RplDaoackDodagidFieldNumber = 261;
    private pb::ByteString icmpv6RplDaoackDodagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_daoack_dodagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplDaoackDodagid {
      get { return icmpv6RplDaoackDodagid_; }
      set {
        icmpv6RplDaoackDodagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcInstance" field.</summary>
    public const int Icmpv6RplCcInstanceFieldNumber = 262;
    private uint icmpv6RplCcInstance_;
    /// <summary>
    /// RPLInstanceID ('icmpv6_icmpv6_rpl_cc_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplCcInstance {
      get { return icmpv6RplCcInstance_; }
      set {
        icmpv6RplCcInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcFlag" field.</summary>
    public const int Icmpv6RplCcFlagFieldNumber = 263;
    private uint icmpv6RplCcFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_rpl_cc_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplCcFlag {
      get { return icmpv6RplCcFlag_; }
      set {
        icmpv6RplCcFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcFlagR" field.</summary>
    public const int Icmpv6RplCcFlagRFieldNumber = 264;
    private bool icmpv6RplCcFlagR_;
    /// <summary>
    /// Response (R) ('icmpv6_rpl_cc_flag_icmpv6_rpl_cc_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplCcFlagR {
      get { return icmpv6RplCcFlagR_; }
      set {
        icmpv6RplCcFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcFlagRsv" field.</summary>
    public const int Icmpv6RplCcFlagRsvFieldNumber = 265;
    private uint icmpv6RplCcFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_cc_flag_icmpv6_rpl_cc_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplCcFlagRsv {
      get { return icmpv6RplCcFlagRsv_; }
      set {
        icmpv6RplCcFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcNonce" field.</summary>
    public const int Icmpv6RplCcNonceFieldNumber = 266;
    private uint icmpv6RplCcNonce_;
    /// <summary>
    /// CC Nonce ('icmpv6_icmpv6_rpl_cc_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplCcNonce {
      get { return icmpv6RplCcNonce_; }
      set {
        icmpv6RplCcNonce_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcDodagid" field.</summary>
    public const int Icmpv6RplCcDodagidFieldNumber = 267;
    private pb::ByteString icmpv6RplCcDodagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_cc_dodagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplCcDodagid {
      get { return icmpv6RplCcDodagid_; }
      set {
        icmpv6RplCcDodagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplCcDestinationCounter" field.</summary>
    public const int Icmpv6RplCcDestinationCounterFieldNumber = 268;
    private uint icmpv6RplCcDestinationCounter_;
    /// <summary>
    /// Destination Counter ('icmpv6_icmpv6_rpl_cc_destination_counter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplCcDestinationCounter {
      get { return icmpv6RplCcDestinationCounter_; }
      set {
        icmpv6RplCcDestinationCounter_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureFlag" field.</summary>
    public const int Icmpv6RplSecureFlagFieldNumber = 269;
    private uint icmpv6RplSecureFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_secure_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureFlag {
      get { return icmpv6RplSecureFlag_; }
      set {
        icmpv6RplSecureFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureFlagT" field.</summary>
    public const int Icmpv6RplSecureFlagTFieldNumber = 270;
    private bool icmpv6RplSecureFlagT_;
    /// <summary>
    /// Counter is Time (T) ('icmpv6_rpl_secure_flag_icmpv6_rpl_secure_flag_t')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplSecureFlagT {
      get { return icmpv6RplSecureFlagT_; }
      set {
        icmpv6RplSecureFlagT_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureFlagRsv" field.</summary>
    public const int Icmpv6RplSecureFlagRsvFieldNumber = 271;
    private uint icmpv6RplSecureFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_secure_flag_icmpv6_rpl_secure_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureFlagRsv {
      get { return icmpv6RplSecureFlagRsv_; }
      set {
        icmpv6RplSecureFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureAlgorithm" field.</summary>
    public const int Icmpv6RplSecureAlgorithmFieldNumber = 272;
    private uint icmpv6RplSecureAlgorithm_;
    /// <summary>
    /// Algorithm ('icmpv6_icmpv6_rpl_secure_algorithm')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureAlgorithm {
      get { return icmpv6RplSecureAlgorithm_; }
      set {
        icmpv6RplSecureAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureKim" field.</summary>
    public const int Icmpv6RplSecureKimFieldNumber = 273;
    private uint icmpv6RplSecureKim_;
    /// <summary>
    /// Key Identifier Mode (KIM) ('icmpv6_icmpv6_rpl_secure_kim')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureKim {
      get { return icmpv6RplSecureKim_; }
      set {
        icmpv6RplSecureKim_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureLvl" field.</summary>
    public const int Icmpv6RplSecureLvlFieldNumber = 274;
    private uint icmpv6RplSecureLvl_;
    /// <summary>
    /// Security Level (LVL) ('icmpv6_icmpv6_rpl_secure_lvl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureLvl {
      get { return icmpv6RplSecureLvl_; }
      set {
        icmpv6RplSecureLvl_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureRsv" field.</summary>
    public const int Icmpv6RplSecureRsvFieldNumber = 275;
    private uint icmpv6RplSecureRsv_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_secure_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureRsv {
      get { return icmpv6RplSecureRsv_; }
      set {
        icmpv6RplSecureRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureCounter" field.</summary>
    public const int Icmpv6RplSecureCounterFieldNumber = 276;
    private uint icmpv6RplSecureCounter_;
    /// <summary>
    /// Counter ('icmpv6_icmpv6_rpl_secure_counter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureCounter {
      get { return icmpv6RplSecureCounter_; }
      set {
        icmpv6RplSecureCounter_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureKeySource" field.</summary>
    public const int Icmpv6RplSecureKeySourceFieldNumber = 277;
    private pb::ByteString icmpv6RplSecureKeySource_ = pb::ByteString.Empty;
    /// <summary>
    /// Key Source ('icmpv6_icmpv6_rpl_secure_key_source')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplSecureKeySource {
      get { return icmpv6RplSecureKeySource_; }
      set {
        icmpv6RplSecureKeySource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplSecureKeyIndex" field.</summary>
    public const int Icmpv6RplSecureKeyIndexFieldNumber = 278;
    private uint icmpv6RplSecureKeyIndex_;
    /// <summary>
    /// Key Source ('icmpv6_icmpv6_rpl_secure_key_index')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplSecureKeyIndex {
      get { return icmpv6RplSecureKeyIndex_; }
      set {
        icmpv6RplSecureKeyIndex_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptType" field.</summary>
    public const int Icmpv6RplOptTypeFieldNumber = 279;
    private uint icmpv6RplOptType_;
    /// <summary>
    /// Type ('icmpv6_icmpv6_rpl_opt_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptType {
      get { return icmpv6RplOptType_; }
      set {
        icmpv6RplOptType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptLength" field.</summary>
    public const int Icmpv6RplOptLengthFieldNumber = 280;
    private uint icmpv6RplOptLength_;
    /// <summary>
    /// Length ('icmpv6_icmpv6_rpl_opt_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptLength {
      get { return icmpv6RplOptLength_; }
      set {
        icmpv6RplOptLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptReserved" field.</summary>
    public const int Icmpv6RplOptReservedFieldNumber = 281;
    private int icmpv6RplOptReserved_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_opt_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptReserved {
      get { return icmpv6RplOptReserved_; }
      set {
        icmpv6RplOptReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPadn" field.</summary>
    public const int Icmpv6RplOptPadnFieldNumber = 282;
    private int icmpv6RplOptPadn_;
    /// <summary>
    /// Paddn ('icmpv6_icmpv6_rpl_opt_padn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptPadn {
      get { return icmpv6RplOptPadn_; }
      set {
        icmpv6RplOptPadn_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricType" field.</summary>
    public const int Icmpv6RplOptMetricTypeFieldNumber = 283;
    private uint icmpv6RplOptMetricType_;
    /// <summary>
    /// Routing Metric/Constraint Type ('icmpv6_icmpv6_rpl_opt_metric_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricType {
      get { return icmpv6RplOptMetricType_; }
      set {
        icmpv6RplOptMetricType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlags" field.</summary>
    public const int Icmpv6RplOptMetricFlagsFieldNumber = 284;
    private uint icmpv6RplOptMetricFlags_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_opt_metric_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricFlags {
      get { return icmpv6RplOptMetricFlags_; }
      set {
        icmpv6RplOptMetricFlags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricReserved" field.</summary>
    public const int Icmpv6RplOptMetricReservedFieldNumber = 285;
    private uint icmpv6RplOptMetricReserved_;
    /// <summary>
    /// Reserved Flags ('icmpv6_icmpv6_rpl_opt_metric_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricReserved {
      get { return icmpv6RplOptMetricReserved_; }
      set {
        icmpv6RplOptMetricReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlagP" field.</summary>
    public const int Icmpv6RplOptMetricFlagPFieldNumber = 286;
    private bool icmpv6RplOptMetricFlagP_;
    /// <summary>
    /// Flag P ('icmpv6_icmpv6_rpl_opt_metric_flag_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricFlagP {
      get { return icmpv6RplOptMetricFlagP_; }
      set {
        icmpv6RplOptMetricFlagP_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlagC" field.</summary>
    public const int Icmpv6RplOptMetricFlagCFieldNumber = 287;
    private bool icmpv6RplOptMetricFlagC_;
    /// <summary>
    /// Flag C ('icmpv6_icmpv6_rpl_opt_metric_flag_c')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricFlagC {
      get { return icmpv6RplOptMetricFlagC_; }
      set {
        icmpv6RplOptMetricFlagC_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlagO" field.</summary>
    public const int Icmpv6RplOptMetricFlagOFieldNumber = 288;
    private bool icmpv6RplOptMetricFlagO_;
    /// <summary>
    /// Flag O ('icmpv6_icmpv6_rpl_opt_metric_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricFlagO {
      get { return icmpv6RplOptMetricFlagO_; }
      set {
        icmpv6RplOptMetricFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlagR" field.</summary>
    public const int Icmpv6RplOptMetricFlagRFieldNumber = 289;
    private bool icmpv6RplOptMetricFlagR_;
    /// <summary>
    /// Flag R ('icmpv6_icmpv6_rpl_opt_metric_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricFlagR {
      get { return icmpv6RplOptMetricFlagR_; }
      set {
        icmpv6RplOptMetricFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricFlagA" field.</summary>
    public const int Icmpv6RplOptMetricFlagAFieldNumber = 290;
    private uint icmpv6RplOptMetricFlagA_;
    /// <summary>
    /// A Field ('icmpv6_icmpv6_rpl_opt_metric_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricFlagA {
      get { return icmpv6RplOptMetricFlagA_; }
      set {
        icmpv6RplOptMetricFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricPrec" field.</summary>
    public const int Icmpv6RplOptMetricPrecFieldNumber = 291;
    private uint icmpv6RplOptMetricPrec_;
    /// <summary>
    /// Precedence field ('icmpv6_icmpv6_rpl_opt_metric_prec')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricPrec {
      get { return icmpv6RplOptMetricPrec_; }
      set {
        icmpv6RplOptMetricPrec_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLength" field.</summary>
    public const int Icmpv6RplOptMetricLengthFieldNumber = 292;
    private uint icmpv6RplOptMetricLength_;
    /// <summary>
    /// Metric Length ('icmpv6_icmpv6_rpl_opt_metric_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLength {
      get { return icmpv6RplOptMetricLength_; }
      set {
        icmpv6RplOptMetricLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNsaObject" field.</summary>
    public const int Icmpv6RplOptMetricNsaObjectFieldNumber = 293;
    private uint icmpv6RplOptMetricNsaObject_;
    /// <summary>
    /// Node Sate and Attribute Object ('icmpv6_icmpv6_rpl_opt_metric_nsa_object')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNsaObject {
      get { return icmpv6RplOptMetricNsaObject_; }
      set {
        icmpv6RplOptMetricNsaObject_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNsaObjectReserved" field.</summary>
    public const int Icmpv6RplOptMetricNsaObjectReservedFieldNumber = 294;
    private uint icmpv6RplOptMetricNsaObjectReserved_;
    /// <summary>
    /// Reserved field ('icmpv6_rpl_opt_metric_nsa_object_icmpv6_rpl_opt_metric_nsa_object_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNsaObjectReserved {
      get { return icmpv6RplOptMetricNsaObjectReserved_; }
      set {
        icmpv6RplOptMetricNsaObjectReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNsaObjectFlags" field.</summary>
    public const int Icmpv6RplOptMetricNsaObjectFlagsFieldNumber = 295;
    private uint icmpv6RplOptMetricNsaObjectFlags_;
    /// <summary>
    /// Flags ('icmpv6_rpl_opt_metric_nsa_object_icmpv6_rpl_opt_metric_nsa_object_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNsaObjectFlags {
      get { return icmpv6RplOptMetricNsaObjectFlags_; }
      set {
        icmpv6RplOptMetricNsaObjectFlags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNsaObjectFlagA" field.</summary>
    public const int Icmpv6RplOptMetricNsaObjectFlagAFieldNumber = 296;
    private bool icmpv6RplOptMetricNsaObjectFlagA_;
    /// <summary>
    /// Flag A ('icmpv6_icmpv6_rpl_opt_metric_nsa_object_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricNsaObjectFlagA {
      get { return icmpv6RplOptMetricNsaObjectFlagA_; }
      set {
        icmpv6RplOptMetricNsaObjectFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNsaObjectFlagO" field.</summary>
    public const int Icmpv6RplOptMetricNsaObjectFlagOFieldNumber = 297;
    private bool icmpv6RplOptMetricNsaObjectFlagO_;
    /// <summary>
    /// Flag O ('icmpv6_icmpv6_rpl_opt_metric_nsa_object_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricNsaObjectFlagO {
      get { return icmpv6RplOptMetricNsaObjectFlagO_; }
      set {
        icmpv6RplOptMetricNsaObjectFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObject" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectFieldNumber = 298;
    private uint icmpv6RplOptMetricNeObject_;
    /// <summary>
    /// Node Energy Object ('icmpv6_icmpv6_rpl_opt_metric_ne_object')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNeObject {
      get { return icmpv6RplOptMetricNeObject_; }
      set {
        icmpv6RplOptMetricNeObject_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObjectFlags" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectFlagsFieldNumber = 299;
    private uint icmpv6RplOptMetricNeObjectFlags_;
    /// <summary>
    /// Flags field ('icmpv6_rpl_opt_metric_ne_object_icmpv6_rpl_opt_metric_ne_object_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNeObjectFlags {
      get { return icmpv6RplOptMetricNeObjectFlags_; }
      set {
        icmpv6RplOptMetricNeObjectFlags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObjectFlagI" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectFlagIFieldNumber = 300;
    private bool icmpv6RplOptMetricNeObjectFlagI_;
    /// <summary>
    /// Flag I ('icmpv6_icmpv6_rpl_opt_metric_ne_object_flag_i')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricNeObjectFlagI {
      get { return icmpv6RplOptMetricNeObjectFlagI_; }
      set {
        icmpv6RplOptMetricNeObjectFlagI_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObjectType" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectTypeFieldNumber = 301;
    private uint icmpv6RplOptMetricNeObjectType_;
    /// <summary>
    /// Type ('icmpv6_rpl_opt_metric_ne_object_icmpv6_rpl_opt_metric_ne_object_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNeObjectType {
      get { return icmpv6RplOptMetricNeObjectType_; }
      set {
        icmpv6RplOptMetricNeObjectType_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObjectFlagE" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectFlagEFieldNumber = 302;
    private bool icmpv6RplOptMetricNeObjectFlagE_;
    /// <summary>
    /// Flag E ('icmpv6_icmpv6_rpl_opt_metric_ne_object_flag_e')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptMetricNeObjectFlagE {
      get { return icmpv6RplOptMetricNeObjectFlagE_; }
      set {
        icmpv6RplOptMetricNeObjectFlagE_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricNeObjectEnergy" field.</summary>
    public const int Icmpv6RplOptMetricNeObjectEnergyFieldNumber = 303;
    private uint icmpv6RplOptMetricNeObjectEnergy_;
    /// <summary>
    /// Energy ('icmpv6_rpl_opt_metric_ne_object_icmpv6_rpl_opt_metric_ne_object_energy')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricNeObjectEnergy {
      get { return icmpv6RplOptMetricNeObjectEnergy_; }
      set {
        icmpv6RplOptMetricNeObjectEnergy_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricHpObject" field.</summary>
    public const int Icmpv6RplOptMetricHpObjectFieldNumber = 304;
    private uint icmpv6RplOptMetricHpObject_;
    /// <summary>
    /// Hop Count Object ('icmpv6_icmpv6_rpl_opt_metric_hp_object')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricHpObject {
      get { return icmpv6RplOptMetricHpObject_; }
      set {
        icmpv6RplOptMetricHpObject_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricHpObjectReserved" field.</summary>
    public const int Icmpv6RplOptMetricHpObjectReservedFieldNumber = 305;
    private uint icmpv6RplOptMetricHpObjectReserved_;
    /// <summary>
    /// Reserved field ('icmpv6_rpl_opt_metric_hp_object_icmpv6_rpl_opt_metric_hp_object_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricHpObjectReserved {
      get { return icmpv6RplOptMetricHpObjectReserved_; }
      set {
        icmpv6RplOptMetricHpObjectReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricHpObjectFlags" field.</summary>
    public const int Icmpv6RplOptMetricHpObjectFlagsFieldNumber = 306;
    private uint icmpv6RplOptMetricHpObjectFlags_;
    /// <summary>
    /// Flags ('icmpv6_rpl_opt_metric_hp_object_icmpv6_rpl_opt_metric_hp_object_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricHpObjectFlags {
      get { return icmpv6RplOptMetricHpObjectFlags_; }
      set {
        icmpv6RplOptMetricHpObjectFlags_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricHpObjectHp" field.</summary>
    public const int Icmpv6RplOptMetricHpObjectHpFieldNumber = 307;
    private uint icmpv6RplOptMetricHpObjectHp_;
    /// <summary>
    /// Hop Count ('icmpv6_rpl_opt_metric_hp_object_icmpv6_rpl_opt_metric_hp_object_hp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricHpObjectHp {
      get { return icmpv6RplOptMetricHpObjectHp_; }
      set {
        icmpv6RplOptMetricHpObjectHp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLtObjectLt" field.</summary>
    public const int Icmpv6RplOptMetricLtObjectLtFieldNumber = 308;
    private uint icmpv6RplOptMetricLtObjectLt_;
    /// <summary>
    /// Link Throughput ('icmpv6_icmpv6_rpl_opt_metric_lt_object_lt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLtObjectLt {
      get { return icmpv6RplOptMetricLtObjectLt_; }
      set {
        icmpv6RplOptMetricLtObjectLt_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLlObjectLl" field.</summary>
    public const int Icmpv6RplOptMetricLlObjectLlFieldNumber = 309;
    private uint icmpv6RplOptMetricLlObjectLl_;
    /// <summary>
    /// Link Latency ('icmpv6_icmpv6_rpl_opt_metric_ll_object_ll')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLlObjectLl {
      get { return icmpv6RplOptMetricLlObjectLl_; }
      set {
        icmpv6RplOptMetricLlObjectLl_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLqlObject" field.</summary>
    public const int Icmpv6RplOptMetricLqlObjectFieldNumber = 310;
    private uint icmpv6RplOptMetricLqlObject_;
    /// <summary>
    /// Link Quality Level Object ('icmpv6_icmpv6_rpl_opt_metric_lql_object')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLqlObject {
      get { return icmpv6RplOptMetricLqlObject_; }
      set {
        icmpv6RplOptMetricLqlObject_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLqlObjectRes" field.</summary>
    public const int Icmpv6RplOptMetricLqlObjectResFieldNumber = 311;
    private uint icmpv6RplOptMetricLqlObjectRes_;
    /// <summary>
    /// Reserved field ('icmpv6_rpl_opt_metric_lql_object_icmpv6_rpl_opt_metric_lql_object_res')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLqlObjectRes {
      get { return icmpv6RplOptMetricLqlObjectRes_; }
      set {
        icmpv6RplOptMetricLqlObjectRes_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLqlObjectVal" field.</summary>
    public const int Icmpv6RplOptMetricLqlObjectValFieldNumber = 312;
    private uint icmpv6RplOptMetricLqlObjectVal_;
    /// <summary>
    /// Val(ue) ('icmpv6_rpl_opt_metric_lql_object_icmpv6_rpl_opt_metric_lql_object_val')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLqlObjectVal {
      get { return icmpv6RplOptMetricLqlObjectVal_; }
      set {
        icmpv6RplOptMetricLqlObjectVal_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLqlObjectCounter" field.</summary>
    public const int Icmpv6RplOptMetricLqlObjectCounterFieldNumber = 313;
    private uint icmpv6RplOptMetricLqlObjectCounter_;
    /// <summary>
    /// Counter ('icmpv6_rpl_opt_metric_lql_object_icmpv6_rpl_opt_metric_lql_object_counter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLqlObjectCounter {
      get { return icmpv6RplOptMetricLqlObjectCounter_; }
      set {
        icmpv6RplOptMetricLqlObjectCounter_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricEtxObjectEtx" field.</summary>
    public const int Icmpv6RplOptMetricEtxObjectEtxFieldNumber = 314;
    private uint icmpv6RplOptMetricEtxObjectEtx_;
    /// <summary>
    /// ETX ('icmpv6_icmpv6_rpl_opt_metric_etx_object_etx')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricEtxObjectEtx {
      get { return icmpv6RplOptMetricEtxObjectEtx_; }
      set {
        icmpv6RplOptMetricEtxObjectEtx_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObject" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectFieldNumber = 315;
    private int icmpv6RplOptMetricLcObject_;
    /// <summary>
    /// Link Color Object ('icmpv6_icmpv6_rpl_opt_metric_lc_object')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptMetricLcObject {
      get { return icmpv6RplOptMetricLcObject_; }
      set {
        icmpv6RplOptMetricLcObject_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObjectRes" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectResFieldNumber = 316;
    private uint icmpv6RplOptMetricLcObjectRes_;
    /// <summary>
    /// Reserved field ('icmpv6_rpl_opt_metric_lc_object_icmpv6_rpl_opt_metric_lc_object_res')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLcObjectRes {
      get { return icmpv6RplOptMetricLcObjectRes_; }
      set {
        icmpv6RplOptMetricLcObjectRes_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObjectLc" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectLcFieldNumber = 317;
    private uint icmpv6RplOptMetricLcObjectLc_;
    /// <summary>
    /// Link Color ('icmpv6_rpl_opt_metric_lc_object_icmpv6_rpl_opt_metric_lc_object_lc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLcObjectLc {
      get { return icmpv6RplOptMetricLcObjectLc_; }
      set {
        icmpv6RplOptMetricLcObjectLc_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObjectCounter" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectCounterFieldNumber = 318;
    private uint icmpv6RplOptMetricLcObjectCounter_;
    /// <summary>
    /// Counter ('icmpv6_rpl_opt_metric_lc_object_icmpv6_rpl_opt_metric_lc_object_counter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLcObjectCounter {
      get { return icmpv6RplOptMetricLcObjectCounter_; }
      set {
        icmpv6RplOptMetricLcObjectCounter_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObjectReserved" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectReservedFieldNumber = 319;
    private uint icmpv6RplOptMetricLcObjectReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_opt_metric_lc_object_icmpv6_rpl_opt_metric_lc_object_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLcObjectReserved {
      get { return icmpv6RplOptMetricLcObjectReserved_; }
      set {
        icmpv6RplOptMetricLcObjectReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptMetricLcObjectFlagI" field.</summary>
    public const int Icmpv6RplOptMetricLcObjectFlagIFieldNumber = 320;
    private uint icmpv6RplOptMetricLcObjectFlagI_;
    /// <summary>
    /// Flag I ('icmpv6_icmpv6_rpl_opt_metric_lc_object_flag_i')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptMetricLcObjectFlagI {
      get { return icmpv6RplOptMetricLcObjectFlagI_; }
      set {
        icmpv6RplOptMetricLcObjectFlagI_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutePrefixLength" field.</summary>
    public const int Icmpv6RplOptRoutePrefixLengthFieldNumber = 321;
    private uint icmpv6RplOptRoutePrefixLength_;
    /// <summary>
    /// Prefix Length ('icmpv6_icmpv6_rpl_opt_route_prefix_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutePrefixLength {
      get { return icmpv6RplOptRoutePrefixLength_; }
      set {
        icmpv6RplOptRoutePrefixLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRouteFlag" field.</summary>
    public const int Icmpv6RplOptRouteFlagFieldNumber = 322;
    private uint icmpv6RplOptRouteFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_rpl_opt_route_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRouteFlag {
      get { return icmpv6RplOptRouteFlag_; }
      set {
        icmpv6RplOptRouteFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutePref" field.</summary>
    public const int Icmpv6RplOptRoutePrefFieldNumber = 323;
    private uint icmpv6RplOptRoutePref_;
    /// <summary>
    /// Preference ('icmpv6_icmpv6_rpl_opt_route_pref')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutePref {
      get { return icmpv6RplOptRoutePref_; }
      set {
        icmpv6RplOptRoutePref_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRouteReserved" field.</summary>
    public const int Icmpv6RplOptRouteReservedFieldNumber = 324;
    private uint icmpv6RplOptRouteReserved_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_opt_route_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRouteReserved {
      get { return icmpv6RplOptRouteReserved_; }
      set {
        icmpv6RplOptRouteReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRouteLifetime" field.</summary>
    public const int Icmpv6RplOptRouteLifetimeFieldNumber = 325;
    private uint icmpv6RplOptRouteLifetime_;
    /// <summary>
    /// Route Lifetime ('icmpv6_icmpv6_rpl_opt_route_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRouteLifetime {
      get { return icmpv6RplOptRouteLifetime_; }
      set {
        icmpv6RplOptRouteLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutePrefix" field.</summary>
    public const int Icmpv6RplOptRoutePrefixFieldNumber = 326;
    private pb::ByteString icmpv6RplOptRoutePrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Prefix ('icmpv6_icmpv6_rpl_opt_route_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptRoutePrefix {
      get { return icmpv6RplOptRoutePrefix_; }
      set {
        icmpv6RplOptRoutePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigFlag" field.</summary>
    public const int Icmpv6RplOptConfigFlagFieldNumber = 327;
    private uint icmpv6RplOptConfigFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_rpl_opt_config_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigFlag {
      get { return icmpv6RplOptConfigFlag_; }
      set {
        icmpv6RplOptConfigFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigReserved" field.</summary>
    public const int Icmpv6RplOptConfigReservedFieldNumber = 328;
    private uint icmpv6RplOptConfigReserved_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_opt_config_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigReserved {
      get { return icmpv6RplOptConfigReserved_; }
      set {
        icmpv6RplOptConfigReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigAuth" field.</summary>
    public const int Icmpv6RplOptConfigAuthFieldNumber = 329;
    private bool icmpv6RplOptConfigAuth_;
    /// <summary>
    /// Authentication Enabled ('icmpv6_icmpv6_rpl_opt_config_auth')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptConfigAuth {
      get { return icmpv6RplOptConfigAuth_; }
      set {
        icmpv6RplOptConfigAuth_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigPcs" field.</summary>
    public const int Icmpv6RplOptConfigPcsFieldNumber = 330;
    private uint icmpv6RplOptConfigPcs_;
    /// <summary>
    /// Path Control Size ('icmpv6_icmpv6_rpl_opt_config_pcs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigPcs {
      get { return icmpv6RplOptConfigPcs_; }
      set {
        icmpv6RplOptConfigPcs_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigIntervalDouble" field.</summary>
    public const int Icmpv6RplOptConfigIntervalDoubleFieldNumber = 331;
    private uint icmpv6RplOptConfigIntervalDouble_;
    /// <summary>
    /// DIOIntervalDoublings ('icmpv6_icmpv6_rpl_opt_config_interval_double')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigIntervalDouble {
      get { return icmpv6RplOptConfigIntervalDouble_; }
      set {
        icmpv6RplOptConfigIntervalDouble_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigIntervalMin" field.</summary>
    public const int Icmpv6RplOptConfigIntervalMinFieldNumber = 332;
    private uint icmpv6RplOptConfigIntervalMin_;
    /// <summary>
    /// DIOIntervalMin ('icmpv6_icmpv6_rpl_opt_config_interval_min')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigIntervalMin {
      get { return icmpv6RplOptConfigIntervalMin_; }
      set {
        icmpv6RplOptConfigIntervalMin_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigRedundancy" field.</summary>
    public const int Icmpv6RplOptConfigRedundancyFieldNumber = 333;
    private uint icmpv6RplOptConfigRedundancy_;
    /// <summary>
    /// DIORedundancyConstant ('icmpv6_icmpv6_rpl_opt_config_redundancy')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigRedundancy {
      get { return icmpv6RplOptConfigRedundancy_; }
      set {
        icmpv6RplOptConfigRedundancy_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigMaxRankInc" field.</summary>
    public const int Icmpv6RplOptConfigMaxRankIncFieldNumber = 334;
    private uint icmpv6RplOptConfigMaxRankInc_;
    /// <summary>
    /// MaxRankInc ('icmpv6_icmpv6_rpl_opt_config_max_rank_inc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigMaxRankInc {
      get { return icmpv6RplOptConfigMaxRankInc_; }
      set {
        icmpv6RplOptConfigMaxRankInc_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigMinHopRankInc" field.</summary>
    public const int Icmpv6RplOptConfigMinHopRankIncFieldNumber = 335;
    private uint icmpv6RplOptConfigMinHopRankInc_;
    /// <summary>
    /// MinHopRankInc ('icmpv6_icmpv6_rpl_opt_config_min_hop_rank_inc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigMinHopRankInc {
      get { return icmpv6RplOptConfigMinHopRankInc_; }
      set {
        icmpv6RplOptConfigMinHopRankInc_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigOcp" field.</summary>
    public const int Icmpv6RplOptConfigOcpFieldNumber = 336;
    private uint icmpv6RplOptConfigOcp_;
    /// <summary>
    /// OCP (Objective Code Point) ('icmpv6_icmpv6_rpl_opt_config_ocp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigOcp {
      get { return icmpv6RplOptConfigOcp_; }
      set {
        icmpv6RplOptConfigOcp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigRsv" field.</summary>
    public const int Icmpv6RplOptConfigRsvFieldNumber = 337;
    private uint icmpv6RplOptConfigRsv_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_opt_config_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigRsv {
      get { return icmpv6RplOptConfigRsv_; }
      set {
        icmpv6RplOptConfigRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigDefLifetime" field.</summary>
    public const int Icmpv6RplOptConfigDefLifetimeFieldNumber = 338;
    private uint icmpv6RplOptConfigDefLifetime_;
    /// <summary>
    /// Default Lifetime ('icmpv6_icmpv6_rpl_opt_config_def_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigDefLifetime {
      get { return icmpv6RplOptConfigDefLifetime_; }
      set {
        icmpv6RplOptConfigDefLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigLifetimeUnit" field.</summary>
    public const int Icmpv6RplOptConfigLifetimeUnitFieldNumber = 339;
    private uint icmpv6RplOptConfigLifetimeUnit_;
    /// <summary>
    /// Lifetime Unit ('icmpv6_icmpv6_rpl_opt_config_lifetime_unit')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigLifetimeUnit {
      get { return icmpv6RplOptConfigLifetimeUnit_; }
      set {
        icmpv6RplOptConfigLifetimeUnit_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTargetFlag" field.</summary>
    public const int Icmpv6RplOptTargetFlagFieldNumber = 340;
    private int icmpv6RplOptTargetFlag_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_rpl_opt_target_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptTargetFlag {
      get { return icmpv6RplOptTargetFlag_; }
      set {
        icmpv6RplOptTargetFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTargetPrefixLength" field.</summary>
    public const int Icmpv6RplOptTargetPrefixLengthFieldNumber = 341;
    private uint icmpv6RplOptTargetPrefixLength_;
    /// <summary>
    /// Target Length ('icmpv6_icmpv6_rpl_opt_target_prefix_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTargetPrefixLength {
      get { return icmpv6RplOptTargetPrefixLength_; }
      set {
        icmpv6RplOptTargetPrefixLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTargetPrefix" field.</summary>
    public const int Icmpv6RplOptTargetPrefixFieldNumber = 342;
    private pb::ByteString icmpv6RplOptTargetPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Target ('icmpv6_icmpv6_rpl_opt_target_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptTargetPrefix {
      get { return icmpv6RplOptTargetPrefix_; }
      set {
        icmpv6RplOptTargetPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitFlag" field.</summary>
    public const int Icmpv6RplOptTransitFlagFieldNumber = 343;
    private uint icmpv6RplOptTransitFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_opt_transit_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTransitFlag {
      get { return icmpv6RplOptTransitFlag_; }
      set {
        icmpv6RplOptTransitFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitFlagE" field.</summary>
    public const int Icmpv6RplOptTransitFlagEFieldNumber = 344;
    private bool icmpv6RplOptTransitFlagE_;
    /// <summary>
    /// External ('icmpv6_rpl_opt_transit_flag_icmpv6_rpl_opt_transit_flag_e')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptTransitFlagE {
      get { return icmpv6RplOptTransitFlagE_; }
      set {
        icmpv6RplOptTransitFlagE_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitFlagRsv" field.</summary>
    public const int Icmpv6RplOptTransitFlagRsvFieldNumber = 345;
    private uint icmpv6RplOptTransitFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_opt_transit_flag_icmpv6_rpl_opt_transit_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTransitFlagRsv {
      get { return icmpv6RplOptTransitFlagRsv_; }
      set {
        icmpv6RplOptTransitFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitPathctl" field.</summary>
    public const int Icmpv6RplOptTransitPathctlFieldNumber = 346;
    private uint icmpv6RplOptTransitPathctl_;
    /// <summary>
    /// Path Control ('icmpv6_icmpv6_rpl_opt_transit_pathctl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTransitPathctl {
      get { return icmpv6RplOptTransitPathctl_; }
      set {
        icmpv6RplOptTransitPathctl_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitPathseq" field.</summary>
    public const int Icmpv6RplOptTransitPathseqFieldNumber = 347;
    private uint icmpv6RplOptTransitPathseq_;
    /// <summary>
    /// Path Sequence ('icmpv6_icmpv6_rpl_opt_transit_pathseq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTransitPathseq {
      get { return icmpv6RplOptTransitPathseq_; }
      set {
        icmpv6RplOptTransitPathseq_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitPathlifetime" field.</summary>
    public const int Icmpv6RplOptTransitPathlifetimeFieldNumber = 348;
    private uint icmpv6RplOptTransitPathlifetime_;
    /// <summary>
    /// Path Lifetime ('icmpv6_icmpv6_rpl_opt_transit_pathlifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTransitPathlifetime {
      get { return icmpv6RplOptTransitPathlifetime_; }
      set {
        icmpv6RplOptTransitPathlifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTransitParent" field.</summary>
    public const int Icmpv6RplOptTransitParentFieldNumber = 349;
    private pb::ByteString icmpv6RplOptTransitParent_ = pb::ByteString.Empty;
    /// <summary>
    /// Parent Address ('icmpv6_icmpv6_rpl_opt_transit_parent')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptTransitParent {
      get { return icmpv6RplOptTransitParent_; }
      set {
        icmpv6RplOptTransitParent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedInstance" field.</summary>
    public const int Icmpv6RplOptSolicitedInstanceFieldNumber = 350;
    private uint icmpv6RplOptSolicitedInstance_;
    /// <summary>
    /// Instance ('icmpv6_icmpv6_rpl_opt_solicited_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptSolicitedInstance {
      get { return icmpv6RplOptSolicitedInstance_; }
      set {
        icmpv6RplOptSolicitedInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedFlag" field.</summary>
    public const int Icmpv6RplOptSolicitedFlagFieldNumber = 351;
    private uint icmpv6RplOptSolicitedFlag_;
    /// <summary>
    /// Flag ('icmpv6_icmpv6_rpl_opt_solicited_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptSolicitedFlag {
      get { return icmpv6RplOptSolicitedFlag_; }
      set {
        icmpv6RplOptSolicitedFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedFlagV" field.</summary>
    public const int Icmpv6RplOptSolicitedFlagVFieldNumber = 352;
    private bool icmpv6RplOptSolicitedFlagV_;
    /// <summary>
    /// Version predicate ('icmpv6_rpl_opt_solicited_flag_icmpv6_rpl_opt_solicited_flag_v')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptSolicitedFlagV {
      get { return icmpv6RplOptSolicitedFlagV_; }
      set {
        icmpv6RplOptSolicitedFlagV_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedFlagI" field.</summary>
    public const int Icmpv6RplOptSolicitedFlagIFieldNumber = 353;
    private bool icmpv6RplOptSolicitedFlagI_;
    /// <summary>
    /// InstanceID predicate ('icmpv6_rpl_opt_solicited_flag_icmpv6_rpl_opt_solicited_flag_i')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptSolicitedFlagI {
      get { return icmpv6RplOptSolicitedFlagI_; }
      set {
        icmpv6RplOptSolicitedFlagI_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedFlagD" field.</summary>
    public const int Icmpv6RplOptSolicitedFlagDFieldNumber = 354;
    private bool icmpv6RplOptSolicitedFlagD_;
    /// <summary>
    /// DODAGID predicate ('icmpv6_rpl_opt_solicited_flag_icmpv6_rpl_opt_solicited_flag_d')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptSolicitedFlagD {
      get { return icmpv6RplOptSolicitedFlagD_; }
      set {
        icmpv6RplOptSolicitedFlagD_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedFlagRsv" field.</summary>
    public const int Icmpv6RplOptSolicitedFlagRsvFieldNumber = 355;
    private uint icmpv6RplOptSolicitedFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_opt_solicited_flag_icmpv6_rpl_opt_solicited_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptSolicitedFlagRsv {
      get { return icmpv6RplOptSolicitedFlagRsv_; }
      set {
        icmpv6RplOptSolicitedFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedDodagid" field.</summary>
    public const int Icmpv6RplOptSolicitedDodagidFieldNumber = 356;
    private pb::ByteString icmpv6RplOptSolicitedDodagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_opt_solicited_dodagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptSolicitedDodagid {
      get { return icmpv6RplOptSolicitedDodagid_; }
      set {
        icmpv6RplOptSolicitedDodagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptSolicitedVersion" field.</summary>
    public const int Icmpv6RplOptSolicitedVersionFieldNumber = 357;
    private uint icmpv6RplOptSolicitedVersion_;
    /// <summary>
    /// Version ('icmpv6_icmpv6_rpl_opt_solicited_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptSolicitedVersion {
      get { return icmpv6RplOptSolicitedVersion_; }
      set {
        icmpv6RplOptSolicitedVersion_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefixLength" field.</summary>
    public const int Icmpv6RplOptPrefixLengthFieldNumber = 358;
    private uint icmpv6RplOptPrefixLength_;
    /// <summary>
    /// Prefix Length ('icmpv6_rpl_opt_prefix_icmpv6_rpl_opt_prefix_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptPrefixLength {
      get { return icmpv6RplOptPrefixLength_; }
      set {
        icmpv6RplOptPrefixLength_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefixFlag" field.</summary>
    public const int Icmpv6RplOptPrefixFlagFieldNumber = 359;
    private uint icmpv6RplOptPrefixFlag_;
    /// <summary>
    /// Flag ('icmpv6_rpl_opt_prefix_icmpv6_rpl_opt_prefix_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptPrefixFlag {
      get { return icmpv6RplOptPrefixFlag_; }
      set {
        icmpv6RplOptPrefixFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefixFlagL" field.</summary>
    public const int Icmpv6RplOptPrefixFlagLFieldNumber = 360;
    private bool icmpv6RplOptPrefixFlagL_;
    /// <summary>
    /// On Link ('icmpv6_rpl_opt_prefix_flag_icmpv6_rpl_opt_prefix_flag_l')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptPrefixFlagL {
      get { return icmpv6RplOptPrefixFlagL_; }
      set {
        icmpv6RplOptPrefixFlagL_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigFlagA" field.</summary>
    public const int Icmpv6RplOptConfigFlagAFieldNumber = 361;
    private bool icmpv6RplOptConfigFlagA_;
    /// <summary>
    /// Auto Address Config ('icmpv6_rpl_opt_config_flag_icmpv6_rpl_opt_config_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptConfigFlagA {
      get { return icmpv6RplOptConfigFlagA_; }
      set {
        icmpv6RplOptConfigFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigFlagR" field.</summary>
    public const int Icmpv6RplOptConfigFlagRFieldNumber = 362;
    private bool icmpv6RplOptConfigFlagR_;
    /// <summary>
    /// Router Address ('icmpv6_rpl_opt_config_flag_icmpv6_rpl_opt_config_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptConfigFlagR {
      get { return icmpv6RplOptConfigFlagR_; }
      set {
        icmpv6RplOptConfigFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptConfigFlagRsv" field.</summary>
    public const int Icmpv6RplOptConfigFlagRsvFieldNumber = 363;
    private uint icmpv6RplOptConfigFlagRsv_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_opt_config_flag_icmpv6_rpl_opt_config_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptConfigFlagRsv {
      get { return icmpv6RplOptConfigFlagRsv_; }
      set {
        icmpv6RplOptConfigFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefixValidLifetime" field.</summary>
    public const int Icmpv6RplOptPrefixValidLifetimeFieldNumber = 364;
    private uint icmpv6RplOptPrefixValidLifetime_;
    /// <summary>
    /// Valid Lifetime ('icmpv6_rpl_opt_prefix_icmpv6_rpl_opt_prefix_valid_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptPrefixValidLifetime {
      get { return icmpv6RplOptPrefixValidLifetime_; }
      set {
        icmpv6RplOptPrefixValidLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefixPreferredLifetime" field.</summary>
    public const int Icmpv6RplOptPrefixPreferredLifetimeFieldNumber = 365;
    private uint icmpv6RplOptPrefixPreferredLifetime_;
    /// <summary>
    /// Preferred Lifetime ('icmpv6_rpl_opt_prefix_icmpv6_rpl_opt_prefix_preferred_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptPrefixPreferredLifetime {
      get { return icmpv6RplOptPrefixPreferredLifetime_; }
      set {
        icmpv6RplOptPrefixPreferredLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptPrefix" field.</summary>
    public const int Icmpv6RplOptPrefixFieldNumber = 366;
    private pb::ByteString icmpv6RplOptPrefix_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Prefix ('icmpv6_icmpv6_rpl_opt_prefix')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptPrefix {
      get { return icmpv6RplOptPrefix_; }
      set {
        icmpv6RplOptPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptTargetdescDescriptor" field.</summary>
    public const int Icmpv6RplOptTargetdescDescriptorFieldNumber = 367;
    private uint icmpv6RplOptTargetdescDescriptor_;
    /// <summary>
    /// Descriptor ('icmpv6_icmpv6_rpl_opt_targetdesc_descriptor')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptTargetdescDescriptor {
      get { return icmpv6RplOptTargetdescDescriptor_; }
      set {
        icmpv6RplOptTargetdescDescriptor_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryFlag" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryFlagFieldNumber = 368;
    private int icmpv6RplOptRoutediscoveryFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_opt_routediscovery_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptRoutediscoveryFlag {
      get { return icmpv6RplOptRoutediscoveryFlag_; }
      set {
        icmpv6RplOptRoutediscoveryFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryFlagReply" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryFlagReplyFieldNumber = 369;
    private bool icmpv6RplOptRoutediscoveryFlagReply_;
    /// <summary>
    /// Reply ('icmpv6_rpl_opt_routediscovery_flag_icmpv6_rpl_opt_routediscovery_flag_reply')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptRoutediscoveryFlagReply {
      get { return icmpv6RplOptRoutediscoveryFlagReply_; }
      set {
        icmpv6RplOptRoutediscoveryFlagReply_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryFlagHopbyhop" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryFlagHopbyhopFieldNumber = 370;
    private bool icmpv6RplOptRoutediscoveryFlagHopbyhop_;
    /// <summary>
    /// Hop-by-Hop ('icmpv6_rpl_opt_routediscovery_flag_icmpv6_rpl_opt_routediscovery_flag_hopbyhop')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplOptRoutediscoveryFlagHopbyhop {
      get { return icmpv6RplOptRoutediscoveryFlagHopbyhop_; }
      set {
        icmpv6RplOptRoutediscoveryFlagHopbyhop_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryFlagNumofroutes" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryFlagNumofroutesFieldNumber = 371;
    private uint icmpv6RplOptRoutediscoveryFlagNumofroutes_;
    /// <summary>
    /// Number of Routes ('icmpv6_rpl_opt_routediscovery_flag_icmpv6_rpl_opt_routediscovery_flag_numofroutes')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutediscoveryFlagNumofroutes {
      get { return icmpv6RplOptRoutediscoveryFlagNumofroutes_; }
      set {
        icmpv6RplOptRoutediscoveryFlagNumofroutes_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryFlagCompr" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryFlagComprFieldNumber = 372;
    private uint icmpv6RplOptRoutediscoveryFlagCompr_;
    /// <summary>
    /// Compr ('icmpv6_rpl_opt_routediscovery_flag_icmpv6_rpl_opt_routediscovery_flag_compr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutediscoveryFlagCompr {
      get { return icmpv6RplOptRoutediscoveryFlagCompr_; }
      set {
        icmpv6RplOptRoutediscoveryFlagCompr_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryLifetime" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryLifetimeFieldNumber = 373;
    private uint icmpv6RplOptRoutediscoveryLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_icmpv6_rpl_opt_routediscovery_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutediscoveryLifetime {
      get { return icmpv6RplOptRoutediscoveryLifetime_; }
      set {
        icmpv6RplOptRoutediscoveryLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryMaxrank" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryMaxrankFieldNumber = 374;
    private uint icmpv6RplOptRoutediscoveryMaxrank_;
    /// <summary>
    /// MaxRank ('icmpv6_icmpv6_rpl_opt_routediscovery_maxrank')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutediscoveryMaxrank {
      get { return icmpv6RplOptRoutediscoveryMaxrank_; }
      set {
        icmpv6RplOptRoutediscoveryMaxrank_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryNh" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryNhFieldNumber = 375;
    private uint icmpv6RplOptRoutediscoveryNh_;
    /// <summary>
    /// NH ('icmpv6_icmpv6_rpl_opt_routediscovery_nh')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplOptRoutediscoveryNh {
      get { return icmpv6RplOptRoutediscoveryNh_; }
      set {
        icmpv6RplOptRoutediscoveryNh_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryTargetaddr" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryTargetaddrFieldNumber = 376;
    private pb::ByteString icmpv6RplOptRoutediscoveryTargetaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Target Address ('icmpv6_icmpv6_rpl_opt_routediscovery_targetaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptRoutediscoveryTargetaddr {
      get { return icmpv6RplOptRoutediscoveryTargetaddr_; }
      set {
        icmpv6RplOptRoutediscoveryTargetaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryAddrVec" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryAddrVecFieldNumber = 377;
    private int icmpv6RplOptRoutediscoveryAddrVec_;
    /// <summary>
    /// Address Vector ('icmpv6_icmpv6_rpl_opt_routediscovery_addr_vec')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6RplOptRoutediscoveryAddrVec {
      get { return icmpv6RplOptRoutediscoveryAddrVec_; }
      set {
        icmpv6RplOptRoutediscoveryAddrVec_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplOptRoutediscoveryAddrvecAddr" field.</summary>
    public const int Icmpv6RplOptRoutediscoveryAddrvecAddrFieldNumber = 378;
    private pb::ByteString icmpv6RplOptRoutediscoveryAddrvecAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Address ('icmpv6_icmpv6_rpl_opt_routediscovery_addrvec_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplOptRoutediscoveryAddrvecAddr {
      get { return icmpv6RplOptRoutediscoveryAddrvecAddr_; }
      set {
        icmpv6RplOptRoutediscoveryAddrvecAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroInstance" field.</summary>
    public const int Icmpv6RplP2PDroInstanceFieldNumber = 379;
    private uint icmpv6RplP2PDroInstance_;
    /// <summary>
    /// RPLInstanceID ('icmpv6_icmpv6_rpl_p2p_dro_instance')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroInstance {
      get { return icmpv6RplP2PDroInstance_; }
      set {
        icmpv6RplP2PDroInstance_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroVersion" field.</summary>
    public const int Icmpv6RplP2PDroVersionFieldNumber = 380;
    private uint icmpv6RplP2PDroVersion_;
    /// <summary>
    /// Version ('icmpv6_icmpv6_rpl_p2p_dro_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroVersion {
      get { return icmpv6RplP2PDroVersion_; }
      set {
        icmpv6RplP2PDroVersion_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroFlag" field.</summary>
    public const int Icmpv6RplP2PDroFlagFieldNumber = 381;
    private uint icmpv6RplP2PDroFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_p2p_dro_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroFlag {
      get { return icmpv6RplP2PDroFlag_; }
      set {
        icmpv6RplP2PDroFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroFlagStop" field.</summary>
    public const int Icmpv6RplP2PDroFlagStopFieldNumber = 382;
    private bool icmpv6RplP2PDroFlagStop_;
    /// <summary>
    /// Stop ('icmpv6_rpl_p2p_dro_flag_icmpv6_rpl_p2p_dro_flag_stop')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplP2PDroFlagStop {
      get { return icmpv6RplP2PDroFlagStop_; }
      set {
        icmpv6RplP2PDroFlagStop_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroFlagAck" field.</summary>
    public const int Icmpv6RplP2PDroFlagAckFieldNumber = 383;
    private bool icmpv6RplP2PDroFlagAck_;
    /// <summary>
    /// Ack ('icmpv6_rpl_p2p_dro_flag_icmpv6_rpl_p2p_dro_flag_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Icmpv6RplP2PDroFlagAck {
      get { return icmpv6RplP2PDroFlagAck_; }
      set {
        icmpv6RplP2PDroFlagAck_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroFlagSeq" field.</summary>
    public const int Icmpv6RplP2PDroFlagSeqFieldNumber = 384;
    private uint icmpv6RplP2PDroFlagSeq_;
    /// <summary>
    /// Seq ('icmpv6_rpl_p2p_dro_flag_icmpv6_rpl_p2p_dro_flag_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroFlagSeq {
      get { return icmpv6RplP2PDroFlagSeq_; }
      set {
        icmpv6RplP2PDroFlagSeq_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroFlagReserved" field.</summary>
    public const int Icmpv6RplP2PDroFlagReservedFieldNumber = 385;
    private uint icmpv6RplP2PDroFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_p2p_dro_flag_icmpv6_rpl_p2p_dro_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroFlagReserved {
      get { return icmpv6RplP2PDroFlagReserved_; }
      set {
        icmpv6RplP2PDroFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroDagid" field.</summary>
    public const int Icmpv6RplP2PDroDagidFieldNumber = 386;
    private pb::ByteString icmpv6RplP2PDroDagid_ = pb::ByteString.Empty;
    /// <summary>
    /// DODAGID ('icmpv6_icmpv6_rpl_p2p_dro_dagid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv6RplP2PDroDagid {
      get { return icmpv6RplP2PDroDagid_; }
      set {
        icmpv6RplP2PDroDagid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroackFlag" field.</summary>
    public const int Icmpv6RplP2PDroackFlagFieldNumber = 387;
    private uint icmpv6RplP2PDroackFlag_;
    /// <summary>
    /// Flags ('icmpv6_icmpv6_rpl_p2p_droack_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroackFlag {
      get { return icmpv6RplP2PDroackFlag_; }
      set {
        icmpv6RplP2PDroackFlag_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroackFlagSeq" field.</summary>
    public const int Icmpv6RplP2PDroackFlagSeqFieldNumber = 388;
    private uint icmpv6RplP2PDroackFlagSeq_;
    /// <summary>
    /// Seq ('icmpv6_rpl_p2p_droack_flag_icmpv6_rpl_p2p_droack_flag_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroackFlagSeq {
      get { return icmpv6RplP2PDroackFlagSeq_; }
      set {
        icmpv6RplP2PDroackFlagSeq_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RplP2pDroackFlagReserved" field.</summary>
    public const int Icmpv6RplP2PDroackFlagReservedFieldNumber = 389;
    private uint icmpv6RplP2PDroackFlagReserved_;
    /// <summary>
    /// Reserved ('icmpv6_rpl_p2p_droack_flag_icmpv6_rpl_p2p_droack_flag_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6RplP2PDroackFlagReserved {
      get { return icmpv6RplP2PDroackFlagReserved_; }
      set {
        icmpv6RplP2PDroackFlagReserved_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6IlnpNbLocs" field.</summary>
    public const int Icmpv6IlnpNbLocsFieldNumber = 390;
    private uint icmpv6IlnpNbLocs_;
    /// <summary>
    /// Num of Locs ('icmpv6_icmpv6_ilnp_nb_locs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6IlnpNbLocs {
      get { return icmpv6IlnpNbLocs_; }
      set {
        icmpv6IlnpNbLocs_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6IlnpNbLocator" field.</summary>
    public const int Icmpv6IlnpNbLocatorFieldNumber = 391;
    private ulong icmpv6IlnpNbLocator_;
    /// <summary>
    /// Locator ('icmpv6_icmpv6_ilnp_nb_locator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Icmpv6IlnpNbLocator {
      get { return icmpv6IlnpNbLocator_; }
      set {
        icmpv6IlnpNbLocator_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6IlnpNbPreference" field.</summary>
    public const int Icmpv6IlnpNbPreferenceFieldNumber = 392;
    private uint icmpv6IlnpNbPreference_;
    /// <summary>
    /// Preference ('icmpv6_icmpv6_ilnp_nb_preference')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6IlnpNbPreference {
      get { return icmpv6IlnpNbPreference_; }
      set {
        icmpv6IlnpNbPreference_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6IlnpNbLifetime" field.</summary>
    public const int Icmpv6IlnpNbLifetimeFieldNumber = 393;
    private uint icmpv6IlnpNbLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_icmpv6_ilnp_nb_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6IlnpNbLifetime {
      get { return icmpv6IlnpNbLifetime_; }
      set {
        icmpv6IlnpNbLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv66LowpanndDaStatus" field.</summary>
    public const int Icmpv66LowpanndDaStatusFieldNumber = 394;
    private uint icmpv66LowpanndDaStatus_;
    /// <summary>
    /// Status ('icmpv6_icmpv6_6lowpannd_da_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv66LowpanndDaStatus {
      get { return icmpv66LowpanndDaStatus_; }
      set {
        icmpv66LowpanndDaStatus_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv66LowpanndDaRsv" field.</summary>
    public const int Icmpv66LowpanndDaRsvFieldNumber = 395;
    private uint icmpv66LowpanndDaRsv_;
    /// <summary>
    /// Reserved ('icmpv6_icmpv6_6lowpannd_da_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv66LowpanndDaRsv {
      get { return icmpv66LowpanndDaRsv_; }
      set {
        icmpv66LowpanndDaRsv_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv66LowpanndDaLifetime" field.</summary>
    public const int Icmpv66LowpanndDaLifetimeFieldNumber = 396;
    private uint icmpv66LowpanndDaLifetime_;
    /// <summary>
    /// Lifetime ('icmpv6_icmpv6_6lowpannd_da_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv66LowpanndDaLifetime {
      get { return icmpv66LowpanndDaLifetime_; }
      set {
        icmpv66LowpanndDaLifetime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv66LowpanndDaEui64" field.</summary>
    public const int Icmpv66LowpanndDaEui64FieldNumber = 397;
    private pb::ByteString icmpv66LowpanndDaEui64_ = pb::ByteString.Empty;
    /// <summary>
    /// EUI-64 ('icmpv6_icmpv6_6lowpannd_da_eui64')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv66LowpanndDaEui64 {
      get { return icmpv66LowpanndDaEui64_; }
      set {
        icmpv66LowpanndDaEui64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv66LowpanndDaRegAddr" field.</summary>
    public const int Icmpv66LowpanndDaRegAddrFieldNumber = 398;
    private pb::ByteString icmpv66LowpanndDaRegAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Registered Address ('icmpv6_icmpv6_6lowpannd_da_reg_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icmpv66LowpanndDaRegAddr {
      get { return icmpv66LowpanndDaRegAddr_; }
      set {
        icmpv66LowpanndDaRegAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6RespIn" field.</summary>
    public const int Icmpv6RespInFieldNumber = 399;
    private long icmpv6RespIn_;
    /// <summary>
    /// Response In ('icmpv6_icmpv6_resp_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Icmpv6RespIn {
      get { return icmpv6RespIn_; }
      set {
        icmpv6RespIn_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6NoResp" field.</summary>
    public const int Icmpv6NoRespFieldNumber = 400;
    private int icmpv6NoResp_;
    /// <summary>
    /// No response seen ('icmpv6_icmpv6_no_resp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icmpv6NoResp {
      get { return icmpv6NoResp_; }
      set {
        icmpv6NoResp_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6RespTo" field.</summary>
    public const int Icmpv6RespToFieldNumber = 401;
    private long icmpv6RespTo_;
    /// <summary>
    /// Response To ('icmpv6_icmpv6_resp_to')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Icmpv6RespTo {
      get { return icmpv6RespTo_; }
      set {
        icmpv6RespTo_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6Resptime" field.</summary>
    public const int Icmpv6ResptimeFieldNumber = 402;
    private double icmpv6Resptime_;
    /// <summary>
    /// Response Time ('icmpv6_icmpv6_resptime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Icmpv6Resptime {
      get { return icmpv6Resptime_; }
      set {
        icmpv6Resptime_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MplSeedInfoMinSequence" field.</summary>
    public const int Icmpv6MplSeedInfoMinSequenceFieldNumber = 403;
    private uint icmpv6MplSeedInfoMinSequence_;
    /// <summary>
    /// MinSequence ('icmpv6_icmpv6_mpl_seed_info_min_sequence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MplSeedInfoMinSequence {
      get { return icmpv6MplSeedInfoMinSequence_; }
      set {
        icmpv6MplSeedInfoMinSequence_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MplSeedInfoBmLen" field.</summary>
    public const int Icmpv6MplSeedInfoBmLenFieldNumber = 404;
    private uint icmpv6MplSeedInfoBmLen_;
    /// <summary>
    /// Buffered Messages Length ('icmpv6_icmpv6_mpl_seed_info_bm_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MplSeedInfoBmLen {
      get { return icmpv6MplSeedInfoBmLen_; }
      set {
        icmpv6MplSeedInfoBmLen_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MplSeedInfoS" field.</summary>
    public const int Icmpv6MplSeedInfoSFieldNumber = 405;
    private uint icmpv6MplSeedInfoS_;
    /// <summary>
    /// Seed ID Length ('icmpv6_icmpv6_mpl_seed_info_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MplSeedInfoS {
      get { return icmpv6MplSeedInfoS_; }
      set {
        icmpv6MplSeedInfoS_ = value;
      }
    }

    /// <summary>Field number for the "Icmpv6MplSeedInfoSeedId" field.</summary>
    public const int Icmpv6MplSeedInfoSeedIdFieldNumber = 406;
    private string icmpv6MplSeedInfoSeedId_ = "";
    /// <summary>
    /// Seed ID ('icmpv6_icmpv6_mpl_seed_info_seed_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icmpv6MplSeedInfoSeedId {
      get { return icmpv6MplSeedInfoSeedId_; }
      set {
        icmpv6MplSeedInfoSeedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icmpv6MplSeedInfoSequence" field.</summary>
    public const int Icmpv6MplSeedInfoSequenceFieldNumber = 407;
    private uint icmpv6MplSeedInfoSequence_;
    /// <summary>
    /// Sequence ('icmpv6_icmpv6_mpl_seed_info_sequence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icmpv6MplSeedInfoSequence {
      get { return icmpv6MplSeedInfoSequence_; }
      set {
        icmpv6MplSeedInfoSequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Icmpv6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Icmpv6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Icmpv6Type != other.Icmpv6Type) return false;
      if (Icmpv6Code != other.Icmpv6Code) return false;
      if (Icmpv6Checksum != other.Icmpv6Checksum) return false;
      if (Icmpv6ChecksumStatus != other.Icmpv6ChecksumStatus) return false;
      if (Icmpv6Reserved != other.Icmpv6Reserved) return false;
      if (Icmpv6Data != other.Icmpv6Data) return false;
      if (Icmpv6UnknownData != other.Icmpv6UnknownData) return false;
      if (Icmpv6Mtu != other.Icmpv6Mtu) return false;
      if (Icmpv6Pointer != other.Icmpv6Pointer) return false;
      if (Icmpv6EchoIdentifier != other.Icmpv6EchoIdentifier) return false;
      if (Icmpv6EchoSequenceNumber != other.Icmpv6EchoSequenceNumber) return false;
      if (Icmpv6Nonce != other.Icmpv6Nonce) return false;
      if (Icmpv6NdRaCurHopLimit != other.Icmpv6NdRaCurHopLimit) return false;
      if (Icmpv6NdRaFlag != other.Icmpv6NdRaFlag) return false;
      if (Icmpv6NdRaFlagM != other.Icmpv6NdRaFlagM) return false;
      if (Icmpv6NdRaFlagO != other.Icmpv6NdRaFlagO) return false;
      if (Icmpv6NdRaFlagH != other.Icmpv6NdRaFlagH) return false;
      if (Icmpv6NdRaFlagPrf != other.Icmpv6NdRaFlagPrf) return false;
      if (Icmpv6NdRaFlagP != other.Icmpv6NdRaFlagP) return false;
      if (Icmpv6NdRaFlagRsv != other.Icmpv6NdRaFlagRsv) return false;
      if (Icmpv6NdRaRouterLifetime != other.Icmpv6NdRaRouterLifetime) return false;
      if (Icmpv6NdRaReachableTime != other.Icmpv6NdRaReachableTime) return false;
      if (Icmpv6NdRaRetransTimer != other.Icmpv6NdRaRetransTimer) return false;
      if (Icmpv6NdNsTargetAddress != other.Icmpv6NdNsTargetAddress) return false;
      if (Icmpv6NdNaFlag != other.Icmpv6NdNaFlag) return false;
      if (Icmpv6NdNaFlagR != other.Icmpv6NdNaFlagR) return false;
      if (Icmpv6NdNaFlagS != other.Icmpv6NdNaFlagS) return false;
      if (Icmpv6NdNaFlagO != other.Icmpv6NdNaFlagO) return false;
      if (Icmpv6NdNaFlagRsv != other.Icmpv6NdNaFlagRsv) return false;
      if (Icmpv6NdNaTargetAddress != other.Icmpv6NdNaTargetAddress) return false;
      if (Icmpv6NdRdTargetAddress != other.Icmpv6NdRdTargetAddress) return false;
      if (Icmpv6RdNaDestinationAddress != other.Icmpv6RdNaDestinationAddress) return false;
      if (Icmpv6Opt != other.Icmpv6Opt) return false;
      if (Icmpv6OptType != other.Icmpv6OptType) return false;
      if (Icmpv6OptLength != other.Icmpv6OptLength) return false;
      if (Icmpv6OptReserved != other.Icmpv6OptReserved) return false;
      if (Icmpv6OptPadding != other.Icmpv6OptPadding) return false;
      if (Icmpv6OptLinkaddr != other.Icmpv6OptLinkaddr) return false;
      if (Icmpv6OptSrcLinkaddr != other.Icmpv6OptSrcLinkaddr) return false;
      if (Icmpv6OptTargetLinkaddr != other.Icmpv6OptTargetLinkaddr) return false;
      if (Icmpv6OptLinkaddrEui64 != other.Icmpv6OptLinkaddrEui64) return false;
      if (Icmpv6OptSrcLinkaddrEui64 != other.Icmpv6OptSrcLinkaddrEui64) return false;
      if (Icmpv6OptTargetLinkaddrEui64 != other.Icmpv6OptTargetLinkaddrEui64) return false;
      if (Icmpv6OptPrefixLength != other.Icmpv6OptPrefixLength) return false;
      if (Icmpv6OptPrefixFlag != other.Icmpv6OptPrefixFlag) return false;
      if (Icmpv6OptPrefixFlagL != other.Icmpv6OptPrefixFlagL) return false;
      if (Icmpv6OptPrefixFlagA != other.Icmpv6OptPrefixFlagA) return false;
      if (Icmpv6OptPrefixFlagR != other.Icmpv6OptPrefixFlagR) return false;
      if (Icmpv6OptPrefixFlagReserved != other.Icmpv6OptPrefixFlagReserved) return false;
      if (Icmpv6OptPrefixValidLifetime != other.Icmpv6OptPrefixValidLifetime) return false;
      if (Icmpv6OptPrefixPreferredLifetime != other.Icmpv6OptPrefixPreferredLifetime) return false;
      if (Icmpv6OptPrefix != other.Icmpv6OptPrefix) return false;
      if (Icmpv6OptCgaPadLength != other.Icmpv6OptCgaPadLength) return false;
      if (Icmpv6OptCga != other.Icmpv6OptCga) return false;
      if (Icmpv6OptCgaModifier != other.Icmpv6OptCgaModifier) return false;
      if (Icmpv6OptCgaSubnetPrefix != other.Icmpv6OptCgaSubnetPrefix) return false;
      if (Icmpv6OptCgaCount != other.Icmpv6OptCgaCount) return false;
      if (Icmpv6OptCgaExtType != other.Icmpv6OptCgaExtType) return false;
      if (Icmpv6OptCgaExtLength != other.Icmpv6OptCgaExtLength) return false;
      if (Icmpv6OptCgaExtData != other.Icmpv6OptCgaExtData) return false;
      if (Icmpv6OptRsaKeyHash != other.Icmpv6OptRsaKeyHash) return false;
      if (Icmpv6OptDigitalSignaturePadding != other.Icmpv6OptDigitalSignaturePadding) return false;
      if (Icmpv6OptPsKeyHash != other.Icmpv6OptPsKeyHash) return false;
      if (Icmpv6OptTimestamp != other.Icmpv6OptTimestamp) return false;
      if (Icmpv6OptNonce != other.Icmpv6OptNonce) return false;
      if (Icmpv6OptCertificatePadding != other.Icmpv6OptCertificatePadding) return false;
      if (Icmpv6OptIpaOptionCode != other.Icmpv6OptIpaOptionCode) return false;
      if (Icmpv6OptIpaPrefixLen != other.Icmpv6OptIpaPrefixLen) return false;
      if (Icmpv6OptIpaIpv6Address != other.Icmpv6OptIpaIpv6Address) return false;
      if (Icmpv6OptNrpiOptionCode != other.Icmpv6OptNrpiOptionCode) return false;
      if (Icmpv6OptNrpiPrefixLen != other.Icmpv6OptNrpiPrefixLen) return false;
      if (Icmpv6OptNrpiPrefix != other.Icmpv6OptNrpiPrefix) return false;
      if (Icmpv6OptLlaOptionCode != other.Icmpv6OptLlaOptionCode) return false;
      if (Icmpv6OptLlaBytes != other.Icmpv6OptLlaBytes) return false;
      if (Icmpv6OptNaackOptionCode != other.Icmpv6OptNaackOptionCode) return false;
      if (Icmpv6OptNaackStatus != other.Icmpv6OptNaackStatus) return false;
      if (Icmpv6OptNaackSuppliedNcoa != other.Icmpv6OptNaackSuppliedNcoa) return false;
      if (Icmpv6OptMapDistance != other.Icmpv6OptMapDistance) return false;
      if (Icmpv6OptMapPreference != other.Icmpv6OptMapPreference) return false;
      if (Icmpv6OptMapFlag != other.Icmpv6OptMapFlag) return false;
      if (Icmpv6OptMapFlagR != other.Icmpv6OptMapFlagR) return false;
      if (Icmpv6OptMapFlagReserved != other.Icmpv6OptMapFlagReserved) return false;
      if (Icmpv6OptMapValidLifetime != other.Icmpv6OptMapValidLifetime) return false;
      if (Icmpv6OptMapGlobalAddress != other.Icmpv6OptMapGlobalAddress) return false;
      if (Icmpv6OptRouteInfoFlag != other.Icmpv6OptRouteInfoFlag) return false;
      if (Icmpv6OptRouteInfoFlagRoutePreference != other.Icmpv6OptRouteInfoFlagRoutePreference) return false;
      if (Icmpv6OptRouteInfoFlagReserved != other.Icmpv6OptRouteInfoFlagReserved) return false;
      if (Icmpv6OptRouteLifetime != other.Icmpv6OptRouteLifetime) return false;
      if (Icmpv6OptNameType != other.Icmpv6OptNameType) return false;
      if (Icmpv6OptNameX501 != other.Icmpv6OptNameX501) return false;
      if (Icmpv6OptNameTypeFqdn != other.Icmpv6OptNameTypeFqdn) return false;
      if (Icmpv6SendIdentifier != other.Icmpv6SendIdentifier) return false;
      if (Icmpv6SendAllComponents != other.Icmpv6SendAllComponents) return false;
      if (Icmpv6SendComponent != other.Icmpv6SendComponent) return false;
      if (Icmpv6X509Name != other.Icmpv6X509Name) return false;
      if (Icmpv6X509Certificate != other.Icmpv6X509Certificate) return false;
      if (Icmpv6OptRedirectedPacket != other.Icmpv6OptRedirectedPacket) return false;
      if (Icmpv6OptMtu != other.Icmpv6OptMtu) return false;
      if (Icmpv6OptNbmaShortcutLimit != other.Icmpv6OptNbmaShortcutLimit) return false;
      if (Icmpv6OptAdvertisementInterval != other.Icmpv6OptAdvertisementInterval) return false;
      if (Icmpv6OptHomeAgentPreference != other.Icmpv6OptHomeAgentPreference) return false;
      if (Icmpv6OptHomeAgentLifetime != other.Icmpv6OptHomeAgentLifetime) return false;
      if (Icmpv6OptIpv6Address != other.Icmpv6OptIpv6Address) return false;
      if (Icmpv6OptRdnssLifetime != other.Icmpv6OptRdnssLifetime) return false;
      if (Icmpv6OptRdnss != other.Icmpv6OptRdnss) return false;
      if (Icmpv6OptEfo != other.Icmpv6OptEfo) return false;
      if (Icmpv6OptEfoM != other.Icmpv6OptEfoM) return false;
      if (Icmpv6OptEfoO != other.Icmpv6OptEfoO) return false;
      if (Icmpv6OptEfoH != other.Icmpv6OptEfoH) return false;
      if (Icmpv6OptEfoPrf != other.Icmpv6OptEfoPrf) return false;
      if (Icmpv6OptEfoP != other.Icmpv6OptEfoP) return false;
      if (Icmpv6OptEfoRsv != other.Icmpv6OptEfoRsv) return false;
      if (Icmpv6OptHkrPadLength != other.Icmpv6OptHkrPadLength) return false;
      if (Icmpv6OptHkrAt != other.Icmpv6OptHkrAt) return false;
      if (Icmpv6OptHkrReserved != other.Icmpv6OptHkrReserved) return false;
      if (Icmpv6OptHkrEncryptionPublicKey != other.Icmpv6OptHkrEncryptionPublicKey) return false;
      if (Icmpv6OptHkrPadding != other.Icmpv6OptHkrPadding) return false;
      if (Icmpv6OptHkrLifetime != other.Icmpv6OptHkrLifetime) return false;
      if (Icmpv6OptHkrEncryptedHandoverKey != other.Icmpv6OptHkrEncryptedHandoverKey) return false;
      if (Icmpv6OptHaiOptionCode != other.Icmpv6OptHaiOptionCode) return false;
      if (Icmpv6OptHaiLength != other.Icmpv6OptHaiLength) return false;
      if (Icmpv6OptHaiValue != other.Icmpv6OptHaiValue) return false;
      if (Icmpv6OptMnOptionCode != other.Icmpv6OptMnOptionCode) return false;
      if (Icmpv6OptMnLength != other.Icmpv6OptMnLength) return false;
      if (Icmpv6OptMnValue != other.Icmpv6OptMnValue) return false;
      if (Icmpv6OptDnsslLifetime != other.Icmpv6OptDnsslLifetime) return false;
      if (Icmpv6OptDnssl != other.Icmpv6OptDnssl) return false;
      if (Icmpv6OptAroStatus != other.Icmpv6OptAroStatus) return false;
      if (Icmpv6OptAroRegistrationLifetime != other.Icmpv6OptAroRegistrationLifetime) return false;
      if (Icmpv6OptAroEui64 != other.Icmpv6OptAroEui64) return false;
      if (Icmpv6Opt6CoContextLength != other.Icmpv6Opt6CoContextLength) return false;
      if (Icmpv6Opt6CoFlag != other.Icmpv6Opt6CoFlag) return false;
      if (Icmpv6Opt6CoFlagC != other.Icmpv6Opt6CoFlagC) return false;
      if (Icmpv6Opt6CoFlagCid != other.Icmpv6Opt6CoFlagCid) return false;
      if (Icmpv6Opt6CoFlagReserved != other.Icmpv6Opt6CoFlagReserved) return false;
      if (Icmpv6Opt6CoValidLifetime != other.Icmpv6Opt6CoValidLifetime) return false;
      if (Icmpv6Opt6CoContextPrefix != other.Icmpv6Opt6CoContextPrefix) return false;
      if (Icmpv6OptAbroVersionLow != other.Icmpv6OptAbroVersionLow) return false;
      if (Icmpv6OptAbroVersionHigh != other.Icmpv6OptAbroVersionHigh) return false;
      if (Icmpv6OptAbroValidLifetime != other.Icmpv6OptAbroValidLifetime) return false;
      if (Icmpv6OptAbro6LbrAddress != other.Icmpv6OptAbro6LbrAddress) return false;
      if (Icmpv6Opt6CioUnassigned1 != other.Icmpv6Opt6CioUnassigned1) return false;
      if (Icmpv6Opt6CioFlagG != other.Icmpv6Opt6CioFlagG) return false;
      if (Icmpv6Opt6CioUnassigned2 != other.Icmpv6Opt6CioUnassigned2) return false;
      if (Icmpv6OptCaptivePortal != other.Icmpv6OptCaptivePortal) return false;
      if (Icmpv6MldMaximumResponseDelay != other.Icmpv6MldMaximumResponseDelay) return false;
      if (Icmpv6MldMulticastAddress != other.Icmpv6MldMulticastAddress) return false;
      if (Icmpv6RrSequenceNumber != other.Icmpv6RrSequenceNumber) return false;
      if (Icmpv6RrSegmentNumber != other.Icmpv6RrSegmentNumber) return false;
      if (Icmpv6RrFlag != other.Icmpv6RrFlag) return false;
      if (Icmpv6RrFlagT != other.Icmpv6RrFlagT) return false;
      if (Icmpv6RrFlagR != other.Icmpv6RrFlagR) return false;
      if (Icmpv6RrFlagA != other.Icmpv6RrFlagA) return false;
      if (Icmpv6RrFlagS != other.Icmpv6RrFlagS) return false;
      if (Icmpv6RrFlagP != other.Icmpv6RrFlagP) return false;
      if (Icmpv6RrFlagRsv != other.Icmpv6RrFlagRsv) return false;
      if (Icmpv6RrMaxdelay != other.Icmpv6RrMaxdelay) return false;
      if (Icmpv6RrPcoMp != other.Icmpv6RrPcoMp) return false;
      if (Icmpv6RrPcoMpOpcode != other.Icmpv6RrPcoMpOpcode) return false;
      if (Icmpv6RrPcoMpOplength != other.Icmpv6RrPcoMpOplength) return false;
      if (Icmpv6RrPcoMpOrdinal != other.Icmpv6RrPcoMpOrdinal) return false;
      if (Icmpv6RrPcoMpMatchlen != other.Icmpv6RrPcoMpMatchlen) return false;
      if (Icmpv6RrPcoMpMinlen != other.Icmpv6RrPcoMpMinlen) return false;
      if (Icmpv6RrPcoMpMaxlen != other.Icmpv6RrPcoMpMaxlen) return false;
      if (Icmpv6RrPcoMpMatchprefix != other.Icmpv6RrPcoMpMatchprefix) return false;
      if (Icmpv6RrPcoUp != other.Icmpv6RrPcoUp) return false;
      if (Icmpv6RrPcoUpUselen != other.Icmpv6RrPcoUpUselen) return false;
      if (Icmpv6RrPcoUpKeeplen != other.Icmpv6RrPcoUpKeeplen) return false;
      if (Icmpv6RrPcoUpFlagmask != other.Icmpv6RrPcoUpFlagmask) return false;
      if (Icmpv6RrPcoUpFlagmaskL != other.Icmpv6RrPcoUpFlagmaskL) return false;
      if (Icmpv6RrPcoUpFlagmaskA != other.Icmpv6RrPcoUpFlagmaskA) return false;
      if (Icmpv6RrPcoUpFlagmaskReserved != other.Icmpv6RrPcoUpFlagmaskReserved) return false;
      if (Icmpv6RrPcoUpRaflags != other.Icmpv6RrPcoUpRaflags) return false;
      if (Icmpv6RrPcoUpValidlifetime != other.Icmpv6RrPcoUpValidlifetime) return false;
      if (Icmpv6RrPcoUpPreferredlifetime != other.Icmpv6RrPcoUpPreferredlifetime) return false;
      if (Icmpv6RrPcoUpFlag != other.Icmpv6RrPcoUpFlag) return false;
      if (Icmpv6RrPcoUpFlagV != other.Icmpv6RrPcoUpFlagV) return false;
      if (Icmpv6RrPcoUpFlagP != other.Icmpv6RrPcoUpFlagP) return false;
      if (Icmpv6RrPcoUpFlagReserved != other.Icmpv6RrPcoUpFlagReserved) return false;
      if (Icmpv6RrPcoUpUseprefix != other.Icmpv6RrPcoUpUseprefix) return false;
      if (Icmpv6RrRm != other.Icmpv6RrRm) return false;
      if (Icmpv6RrRmFlag != other.Icmpv6RrRmFlag) return false;
      if (Icmpv6RrRmFlagB != other.Icmpv6RrRmFlagB) return false;
      if (Icmpv6RrRmFlagF != other.Icmpv6RrRmFlagF) return false;
      if (Icmpv6RrRmFlagReserved != other.Icmpv6RrRmFlagReserved) return false;
      if (Icmpv6RrRmOrdinal != other.Icmpv6RrRmOrdinal) return false;
      if (Icmpv6RrRmMatchedlen != other.Icmpv6RrRmMatchedlen) return false;
      if (Icmpv6RrRmInterfaceindex != other.Icmpv6RrRmInterfaceindex) return false;
      if (Icmpv6RrRmMatchedprefix != other.Icmpv6RrRmMatchedprefix) return false;
      if (Icmpv6Mip6Identifier != other.Icmpv6Mip6Identifier) return false;
      if (Icmpv6Mip6HomeAgentAddress != other.Icmpv6Mip6HomeAgentAddress) return false;
      if (Icmpv6Mip6Flag != other.Icmpv6Mip6Flag) return false;
      if (Icmpv6Mip6FlagM != other.Icmpv6Mip6FlagM) return false;
      if (Icmpv6Mip6FlagO != other.Icmpv6Mip6FlagO) return false;
      if (Icmpv6Mip6FlagRsv != other.Icmpv6Mip6FlagRsv) return false;
      if (Icmpv6MldMaximumResponseCode != other.Icmpv6MldMaximumResponseCode) return false;
      if (Icmpv6MldFlag != other.Icmpv6MldFlag) return false;
      if (Icmpv6MldFlagS != other.Icmpv6MldFlagS) return false;
      if (Icmpv6MldFlagQrv != other.Icmpv6MldFlagQrv) return false;
      if (Icmpv6MldFlagReserved != other.Icmpv6MldFlagReserved) return false;
      if (Icmpv6MldQqi != other.Icmpv6MldQqi) return false;
      if (Icmpv6MldNbSources != other.Icmpv6MldNbSources) return false;
      if (Icmpv6MldSourceAddress != other.Icmpv6MldSourceAddress) return false;
      if (Icmpv6MldrNbMcastRecords != other.Icmpv6MldrNbMcastRecords) return false;
      if (Icmpv6MldrMar != other.Icmpv6MldrMar) return false;
      if (Icmpv6MldrMarRecordType != other.Icmpv6MldrMarRecordType) return false;
      if (Icmpv6MldrMarAuxDataLen != other.Icmpv6MldrMarAuxDataLen) return false;
      if (Icmpv6MldrMarNbSources != other.Icmpv6MldrMarNbSources) return false;
      if (Icmpv6MldrMarMulticastAddress != other.Icmpv6MldrMarMulticastAddress) return false;
      if (Icmpv6MldrMarSourceAddress != other.Icmpv6MldrMarSourceAddress) return false;
      if (Icmpv6MldrMarAuxiliaryData != other.Icmpv6MldrMarAuxiliaryData) return false;
      if (Icmpv6Fmip6Subtype != other.Icmpv6Fmip6Subtype) return false;
      if (Icmpv6Fmip6HiFlag != other.Icmpv6Fmip6HiFlag) return false;
      if (Icmpv6Fmip6HiFlagS != other.Icmpv6Fmip6HiFlagS) return false;
      if (Icmpv6Fmip6HiFlagA != other.Icmpv6Fmip6HiFlagA) return false;
      if (Icmpv6Fmip6HiFlagReserved != other.Icmpv6Fmip6HiFlagReserved) return false;
      if (Icmpv6Fmip6Identifier != other.Icmpv6Fmip6Identifier) return false;
      if (Icmpv6McastRaQueryInterval != other.Icmpv6McastRaQueryInterval) return false;
      if (Icmpv6McastRaRobustnessVariable != other.Icmpv6McastRaRobustnessVariable) return false;
      if (Icmpv6NiQtype != other.Icmpv6NiQtype) return false;
      if (Icmpv6NiFlag != other.Icmpv6NiFlag) return false;
      if (Icmpv6NiFlagG != other.Icmpv6NiFlagG) return false;
      if (Icmpv6NiFlagS != other.Icmpv6NiFlagS) return false;
      if (Icmpv6NiFlagL != other.Icmpv6NiFlagL) return false;
      if (Icmpv6NiFlagC != other.Icmpv6NiFlagC) return false;
      if (Icmpv6NiFlagA != other.Icmpv6NiFlagA) return false;
      if (Icmpv6NiFlagT != other.Icmpv6NiFlagT) return false;
      if (Icmpv6NiFlagRsv != other.Icmpv6NiFlagRsv) return false;
      if (Icmpv6NiNonce != other.Icmpv6NiNonce) return false;
      if (Icmpv6NiQuerySubjectIpv6 != other.Icmpv6NiQuerySubjectIpv6) return false;
      if (Icmpv6NiQuerySubjectFqdn != other.Icmpv6NiQuerySubjectFqdn) return false;
      if (Icmpv6NiQuerySubjectIpv4 != other.Icmpv6NiQuerySubjectIpv4) return false;
      if (Icmpv6NiReplyNodeTtl != other.Icmpv6NiReplyNodeTtl) return false;
      if (Icmpv6NiReplyNodeName != other.Icmpv6NiReplyNodeName) return false;
      if (Icmpv6NiReplyNodeAddress != other.Icmpv6NiReplyNodeAddress) return false;
      if (Icmpv6NiReplyIpv4Address != other.Icmpv6NiReplyIpv4Address) return false;
      if (Icmpv6RplDisFlags != other.Icmpv6RplDisFlags) return false;
      if (Icmpv6RplDioInstance != other.Icmpv6RplDioInstance) return false;
      if (Icmpv6RplDioVersion != other.Icmpv6RplDioVersion) return false;
      if (Icmpv6RplDioRank != other.Icmpv6RplDioRank) return false;
      if (Icmpv6RplDioFlag != other.Icmpv6RplDioFlag) return false;
      if (Icmpv6RplDioFlagG != other.Icmpv6RplDioFlagG) return false;
      if (Icmpv6RplDioFlag0 != other.Icmpv6RplDioFlag0) return false;
      if (Icmpv6RplDioFlagMop != other.Icmpv6RplDioFlagMop) return false;
      if (Icmpv6RplDioFlagPreference != other.Icmpv6RplDioFlagPreference) return false;
      if (Icmpv6RplDioDtsn != other.Icmpv6RplDioDtsn) return false;
      if (Icmpv6RplDioDagid != other.Icmpv6RplDioDagid) return false;
      if (Icmpv6RplDaoInstance != other.Icmpv6RplDaoInstance) return false;
      if (Icmpv6RplDaoFlag != other.Icmpv6RplDaoFlag) return false;
      if (Icmpv6RplDaoFlagK != other.Icmpv6RplDaoFlagK) return false;
      if (Icmpv6RplDaoFlagD != other.Icmpv6RplDaoFlagD) return false;
      if (Icmpv6RplDaoFlagRsv != other.Icmpv6RplDaoFlagRsv) return false;
      if (Icmpv6RplDaoSequence != other.Icmpv6RplDaoSequence) return false;
      if (Icmpv6RplDaoDodagid != other.Icmpv6RplDaoDodagid) return false;
      if (Icmpv6RplDaoackInstance != other.Icmpv6RplDaoackInstance) return false;
      if (Icmpv6RplDaoackFlag != other.Icmpv6RplDaoackFlag) return false;
      if (Icmpv6RplDaoackFlagD != other.Icmpv6RplDaoackFlagD) return false;
      if (Icmpv6RplDaoackFlagRsv != other.Icmpv6RplDaoackFlagRsv) return false;
      if (Icmpv6RplDaoackSequence != other.Icmpv6RplDaoackSequence) return false;
      if (Icmpv6RplDaoackStatus != other.Icmpv6RplDaoackStatus) return false;
      if (Icmpv6RplDaoackDodagid != other.Icmpv6RplDaoackDodagid) return false;
      if (Icmpv6RplCcInstance != other.Icmpv6RplCcInstance) return false;
      if (Icmpv6RplCcFlag != other.Icmpv6RplCcFlag) return false;
      if (Icmpv6RplCcFlagR != other.Icmpv6RplCcFlagR) return false;
      if (Icmpv6RplCcFlagRsv != other.Icmpv6RplCcFlagRsv) return false;
      if (Icmpv6RplCcNonce != other.Icmpv6RplCcNonce) return false;
      if (Icmpv6RplCcDodagid != other.Icmpv6RplCcDodagid) return false;
      if (Icmpv6RplCcDestinationCounter != other.Icmpv6RplCcDestinationCounter) return false;
      if (Icmpv6RplSecureFlag != other.Icmpv6RplSecureFlag) return false;
      if (Icmpv6RplSecureFlagT != other.Icmpv6RplSecureFlagT) return false;
      if (Icmpv6RplSecureFlagRsv != other.Icmpv6RplSecureFlagRsv) return false;
      if (Icmpv6RplSecureAlgorithm != other.Icmpv6RplSecureAlgorithm) return false;
      if (Icmpv6RplSecureKim != other.Icmpv6RplSecureKim) return false;
      if (Icmpv6RplSecureLvl != other.Icmpv6RplSecureLvl) return false;
      if (Icmpv6RplSecureRsv != other.Icmpv6RplSecureRsv) return false;
      if (Icmpv6RplSecureCounter != other.Icmpv6RplSecureCounter) return false;
      if (Icmpv6RplSecureKeySource != other.Icmpv6RplSecureKeySource) return false;
      if (Icmpv6RplSecureKeyIndex != other.Icmpv6RplSecureKeyIndex) return false;
      if (Icmpv6RplOptType != other.Icmpv6RplOptType) return false;
      if (Icmpv6RplOptLength != other.Icmpv6RplOptLength) return false;
      if (Icmpv6RplOptReserved != other.Icmpv6RplOptReserved) return false;
      if (Icmpv6RplOptPadn != other.Icmpv6RplOptPadn) return false;
      if (Icmpv6RplOptMetricType != other.Icmpv6RplOptMetricType) return false;
      if (Icmpv6RplOptMetricFlags != other.Icmpv6RplOptMetricFlags) return false;
      if (Icmpv6RplOptMetricReserved != other.Icmpv6RplOptMetricReserved) return false;
      if (Icmpv6RplOptMetricFlagP != other.Icmpv6RplOptMetricFlagP) return false;
      if (Icmpv6RplOptMetricFlagC != other.Icmpv6RplOptMetricFlagC) return false;
      if (Icmpv6RplOptMetricFlagO != other.Icmpv6RplOptMetricFlagO) return false;
      if (Icmpv6RplOptMetricFlagR != other.Icmpv6RplOptMetricFlagR) return false;
      if (Icmpv6RplOptMetricFlagA != other.Icmpv6RplOptMetricFlagA) return false;
      if (Icmpv6RplOptMetricPrec != other.Icmpv6RplOptMetricPrec) return false;
      if (Icmpv6RplOptMetricLength != other.Icmpv6RplOptMetricLength) return false;
      if (Icmpv6RplOptMetricNsaObject != other.Icmpv6RplOptMetricNsaObject) return false;
      if (Icmpv6RplOptMetricNsaObjectReserved != other.Icmpv6RplOptMetricNsaObjectReserved) return false;
      if (Icmpv6RplOptMetricNsaObjectFlags != other.Icmpv6RplOptMetricNsaObjectFlags) return false;
      if (Icmpv6RplOptMetricNsaObjectFlagA != other.Icmpv6RplOptMetricNsaObjectFlagA) return false;
      if (Icmpv6RplOptMetricNsaObjectFlagO != other.Icmpv6RplOptMetricNsaObjectFlagO) return false;
      if (Icmpv6RplOptMetricNeObject != other.Icmpv6RplOptMetricNeObject) return false;
      if (Icmpv6RplOptMetricNeObjectFlags != other.Icmpv6RplOptMetricNeObjectFlags) return false;
      if (Icmpv6RplOptMetricNeObjectFlagI != other.Icmpv6RplOptMetricNeObjectFlagI) return false;
      if (Icmpv6RplOptMetricNeObjectType != other.Icmpv6RplOptMetricNeObjectType) return false;
      if (Icmpv6RplOptMetricNeObjectFlagE != other.Icmpv6RplOptMetricNeObjectFlagE) return false;
      if (Icmpv6RplOptMetricNeObjectEnergy != other.Icmpv6RplOptMetricNeObjectEnergy) return false;
      if (Icmpv6RplOptMetricHpObject != other.Icmpv6RplOptMetricHpObject) return false;
      if (Icmpv6RplOptMetricHpObjectReserved != other.Icmpv6RplOptMetricHpObjectReserved) return false;
      if (Icmpv6RplOptMetricHpObjectFlags != other.Icmpv6RplOptMetricHpObjectFlags) return false;
      if (Icmpv6RplOptMetricHpObjectHp != other.Icmpv6RplOptMetricHpObjectHp) return false;
      if (Icmpv6RplOptMetricLtObjectLt != other.Icmpv6RplOptMetricLtObjectLt) return false;
      if (Icmpv6RplOptMetricLlObjectLl != other.Icmpv6RplOptMetricLlObjectLl) return false;
      if (Icmpv6RplOptMetricLqlObject != other.Icmpv6RplOptMetricLqlObject) return false;
      if (Icmpv6RplOptMetricLqlObjectRes != other.Icmpv6RplOptMetricLqlObjectRes) return false;
      if (Icmpv6RplOptMetricLqlObjectVal != other.Icmpv6RplOptMetricLqlObjectVal) return false;
      if (Icmpv6RplOptMetricLqlObjectCounter != other.Icmpv6RplOptMetricLqlObjectCounter) return false;
      if (Icmpv6RplOptMetricEtxObjectEtx != other.Icmpv6RplOptMetricEtxObjectEtx) return false;
      if (Icmpv6RplOptMetricLcObject != other.Icmpv6RplOptMetricLcObject) return false;
      if (Icmpv6RplOptMetricLcObjectRes != other.Icmpv6RplOptMetricLcObjectRes) return false;
      if (Icmpv6RplOptMetricLcObjectLc != other.Icmpv6RplOptMetricLcObjectLc) return false;
      if (Icmpv6RplOptMetricLcObjectCounter != other.Icmpv6RplOptMetricLcObjectCounter) return false;
      if (Icmpv6RplOptMetricLcObjectReserved != other.Icmpv6RplOptMetricLcObjectReserved) return false;
      if (Icmpv6RplOptMetricLcObjectFlagI != other.Icmpv6RplOptMetricLcObjectFlagI) return false;
      if (Icmpv6RplOptRoutePrefixLength != other.Icmpv6RplOptRoutePrefixLength) return false;
      if (Icmpv6RplOptRouteFlag != other.Icmpv6RplOptRouteFlag) return false;
      if (Icmpv6RplOptRoutePref != other.Icmpv6RplOptRoutePref) return false;
      if (Icmpv6RplOptRouteReserved != other.Icmpv6RplOptRouteReserved) return false;
      if (Icmpv6RplOptRouteLifetime != other.Icmpv6RplOptRouteLifetime) return false;
      if (Icmpv6RplOptRoutePrefix != other.Icmpv6RplOptRoutePrefix) return false;
      if (Icmpv6RplOptConfigFlag != other.Icmpv6RplOptConfigFlag) return false;
      if (Icmpv6RplOptConfigReserved != other.Icmpv6RplOptConfigReserved) return false;
      if (Icmpv6RplOptConfigAuth != other.Icmpv6RplOptConfigAuth) return false;
      if (Icmpv6RplOptConfigPcs != other.Icmpv6RplOptConfigPcs) return false;
      if (Icmpv6RplOptConfigIntervalDouble != other.Icmpv6RplOptConfigIntervalDouble) return false;
      if (Icmpv6RplOptConfigIntervalMin != other.Icmpv6RplOptConfigIntervalMin) return false;
      if (Icmpv6RplOptConfigRedundancy != other.Icmpv6RplOptConfigRedundancy) return false;
      if (Icmpv6RplOptConfigMaxRankInc != other.Icmpv6RplOptConfigMaxRankInc) return false;
      if (Icmpv6RplOptConfigMinHopRankInc != other.Icmpv6RplOptConfigMinHopRankInc) return false;
      if (Icmpv6RplOptConfigOcp != other.Icmpv6RplOptConfigOcp) return false;
      if (Icmpv6RplOptConfigRsv != other.Icmpv6RplOptConfigRsv) return false;
      if (Icmpv6RplOptConfigDefLifetime != other.Icmpv6RplOptConfigDefLifetime) return false;
      if (Icmpv6RplOptConfigLifetimeUnit != other.Icmpv6RplOptConfigLifetimeUnit) return false;
      if (Icmpv6RplOptTargetFlag != other.Icmpv6RplOptTargetFlag) return false;
      if (Icmpv6RplOptTargetPrefixLength != other.Icmpv6RplOptTargetPrefixLength) return false;
      if (Icmpv6RplOptTargetPrefix != other.Icmpv6RplOptTargetPrefix) return false;
      if (Icmpv6RplOptTransitFlag != other.Icmpv6RplOptTransitFlag) return false;
      if (Icmpv6RplOptTransitFlagE != other.Icmpv6RplOptTransitFlagE) return false;
      if (Icmpv6RplOptTransitFlagRsv != other.Icmpv6RplOptTransitFlagRsv) return false;
      if (Icmpv6RplOptTransitPathctl != other.Icmpv6RplOptTransitPathctl) return false;
      if (Icmpv6RplOptTransitPathseq != other.Icmpv6RplOptTransitPathseq) return false;
      if (Icmpv6RplOptTransitPathlifetime != other.Icmpv6RplOptTransitPathlifetime) return false;
      if (Icmpv6RplOptTransitParent != other.Icmpv6RplOptTransitParent) return false;
      if (Icmpv6RplOptSolicitedInstance != other.Icmpv6RplOptSolicitedInstance) return false;
      if (Icmpv6RplOptSolicitedFlag != other.Icmpv6RplOptSolicitedFlag) return false;
      if (Icmpv6RplOptSolicitedFlagV != other.Icmpv6RplOptSolicitedFlagV) return false;
      if (Icmpv6RplOptSolicitedFlagI != other.Icmpv6RplOptSolicitedFlagI) return false;
      if (Icmpv6RplOptSolicitedFlagD != other.Icmpv6RplOptSolicitedFlagD) return false;
      if (Icmpv6RplOptSolicitedFlagRsv != other.Icmpv6RplOptSolicitedFlagRsv) return false;
      if (Icmpv6RplOptSolicitedDodagid != other.Icmpv6RplOptSolicitedDodagid) return false;
      if (Icmpv6RplOptSolicitedVersion != other.Icmpv6RplOptSolicitedVersion) return false;
      if (Icmpv6RplOptPrefixLength != other.Icmpv6RplOptPrefixLength) return false;
      if (Icmpv6RplOptPrefixFlag != other.Icmpv6RplOptPrefixFlag) return false;
      if (Icmpv6RplOptPrefixFlagL != other.Icmpv6RplOptPrefixFlagL) return false;
      if (Icmpv6RplOptConfigFlagA != other.Icmpv6RplOptConfigFlagA) return false;
      if (Icmpv6RplOptConfigFlagR != other.Icmpv6RplOptConfigFlagR) return false;
      if (Icmpv6RplOptConfigFlagRsv != other.Icmpv6RplOptConfigFlagRsv) return false;
      if (Icmpv6RplOptPrefixValidLifetime != other.Icmpv6RplOptPrefixValidLifetime) return false;
      if (Icmpv6RplOptPrefixPreferredLifetime != other.Icmpv6RplOptPrefixPreferredLifetime) return false;
      if (Icmpv6RplOptPrefix != other.Icmpv6RplOptPrefix) return false;
      if (Icmpv6RplOptTargetdescDescriptor != other.Icmpv6RplOptTargetdescDescriptor) return false;
      if (Icmpv6RplOptRoutediscoveryFlag != other.Icmpv6RplOptRoutediscoveryFlag) return false;
      if (Icmpv6RplOptRoutediscoveryFlagReply != other.Icmpv6RplOptRoutediscoveryFlagReply) return false;
      if (Icmpv6RplOptRoutediscoveryFlagHopbyhop != other.Icmpv6RplOptRoutediscoveryFlagHopbyhop) return false;
      if (Icmpv6RplOptRoutediscoveryFlagNumofroutes != other.Icmpv6RplOptRoutediscoveryFlagNumofroutes) return false;
      if (Icmpv6RplOptRoutediscoveryFlagCompr != other.Icmpv6RplOptRoutediscoveryFlagCompr) return false;
      if (Icmpv6RplOptRoutediscoveryLifetime != other.Icmpv6RplOptRoutediscoveryLifetime) return false;
      if (Icmpv6RplOptRoutediscoveryMaxrank != other.Icmpv6RplOptRoutediscoveryMaxrank) return false;
      if (Icmpv6RplOptRoutediscoveryNh != other.Icmpv6RplOptRoutediscoveryNh) return false;
      if (Icmpv6RplOptRoutediscoveryTargetaddr != other.Icmpv6RplOptRoutediscoveryTargetaddr) return false;
      if (Icmpv6RplOptRoutediscoveryAddrVec != other.Icmpv6RplOptRoutediscoveryAddrVec) return false;
      if (Icmpv6RplOptRoutediscoveryAddrvecAddr != other.Icmpv6RplOptRoutediscoveryAddrvecAddr) return false;
      if (Icmpv6RplP2PDroInstance != other.Icmpv6RplP2PDroInstance) return false;
      if (Icmpv6RplP2PDroVersion != other.Icmpv6RplP2PDroVersion) return false;
      if (Icmpv6RplP2PDroFlag != other.Icmpv6RplP2PDroFlag) return false;
      if (Icmpv6RplP2PDroFlagStop != other.Icmpv6RplP2PDroFlagStop) return false;
      if (Icmpv6RplP2PDroFlagAck != other.Icmpv6RplP2PDroFlagAck) return false;
      if (Icmpv6RplP2PDroFlagSeq != other.Icmpv6RplP2PDroFlagSeq) return false;
      if (Icmpv6RplP2PDroFlagReserved != other.Icmpv6RplP2PDroFlagReserved) return false;
      if (Icmpv6RplP2PDroDagid != other.Icmpv6RplP2PDroDagid) return false;
      if (Icmpv6RplP2PDroackFlag != other.Icmpv6RplP2PDroackFlag) return false;
      if (Icmpv6RplP2PDroackFlagSeq != other.Icmpv6RplP2PDroackFlagSeq) return false;
      if (Icmpv6RplP2PDroackFlagReserved != other.Icmpv6RplP2PDroackFlagReserved) return false;
      if (Icmpv6IlnpNbLocs != other.Icmpv6IlnpNbLocs) return false;
      if (Icmpv6IlnpNbLocator != other.Icmpv6IlnpNbLocator) return false;
      if (Icmpv6IlnpNbPreference != other.Icmpv6IlnpNbPreference) return false;
      if (Icmpv6IlnpNbLifetime != other.Icmpv6IlnpNbLifetime) return false;
      if (Icmpv66LowpanndDaStatus != other.Icmpv66LowpanndDaStatus) return false;
      if (Icmpv66LowpanndDaRsv != other.Icmpv66LowpanndDaRsv) return false;
      if (Icmpv66LowpanndDaLifetime != other.Icmpv66LowpanndDaLifetime) return false;
      if (Icmpv66LowpanndDaEui64 != other.Icmpv66LowpanndDaEui64) return false;
      if (Icmpv66LowpanndDaRegAddr != other.Icmpv66LowpanndDaRegAddr) return false;
      if (Icmpv6RespIn != other.Icmpv6RespIn) return false;
      if (Icmpv6NoResp != other.Icmpv6NoResp) return false;
      if (Icmpv6RespTo != other.Icmpv6RespTo) return false;
      if (Icmpv6Resptime != other.Icmpv6Resptime) return false;
      if (Icmpv6MplSeedInfoMinSequence != other.Icmpv6MplSeedInfoMinSequence) return false;
      if (Icmpv6MplSeedInfoBmLen != other.Icmpv6MplSeedInfoBmLen) return false;
      if (Icmpv6MplSeedInfoS != other.Icmpv6MplSeedInfoS) return false;
      if (Icmpv6MplSeedInfoSeedId != other.Icmpv6MplSeedInfoSeedId) return false;
      if (Icmpv6MplSeedInfoSequence != other.Icmpv6MplSeedInfoSequence) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Icmpv6Type != 0) hash ^= Icmpv6Type.GetHashCode();
      if (Icmpv6Code != 0) hash ^= Icmpv6Code.GetHashCode();
      if (Icmpv6Checksum != 0) hash ^= Icmpv6Checksum.GetHashCode();
      if (Icmpv6ChecksumStatus != 0) hash ^= Icmpv6ChecksumStatus.GetHashCode();
      if (Icmpv6Reserved.Length != 0) hash ^= Icmpv6Reserved.GetHashCode();
      if (Icmpv6Data.Length != 0) hash ^= Icmpv6Data.GetHashCode();
      if (Icmpv6UnknownData.Length != 0) hash ^= Icmpv6UnknownData.GetHashCode();
      if (Icmpv6Mtu != 0) hash ^= Icmpv6Mtu.GetHashCode();
      if (Icmpv6Pointer != 0) hash ^= Icmpv6Pointer.GetHashCode();
      if (Icmpv6EchoIdentifier != 0) hash ^= Icmpv6EchoIdentifier.GetHashCode();
      if (Icmpv6EchoSequenceNumber != 0) hash ^= Icmpv6EchoSequenceNumber.GetHashCode();
      if (Icmpv6Nonce.Length != 0) hash ^= Icmpv6Nonce.GetHashCode();
      if (Icmpv6NdRaCurHopLimit != 0) hash ^= Icmpv6NdRaCurHopLimit.GetHashCode();
      if (Icmpv6NdRaFlag != 0) hash ^= Icmpv6NdRaFlag.GetHashCode();
      if (Icmpv6NdRaFlagM != false) hash ^= Icmpv6NdRaFlagM.GetHashCode();
      if (Icmpv6NdRaFlagO != false) hash ^= Icmpv6NdRaFlagO.GetHashCode();
      if (Icmpv6NdRaFlagH != false) hash ^= Icmpv6NdRaFlagH.GetHashCode();
      if (Icmpv6NdRaFlagPrf != 0) hash ^= Icmpv6NdRaFlagPrf.GetHashCode();
      if (Icmpv6NdRaFlagP != false) hash ^= Icmpv6NdRaFlagP.GetHashCode();
      if (Icmpv6NdRaFlagRsv != 0) hash ^= Icmpv6NdRaFlagRsv.GetHashCode();
      if (Icmpv6NdRaRouterLifetime != 0) hash ^= Icmpv6NdRaRouterLifetime.GetHashCode();
      if (Icmpv6NdRaReachableTime != 0) hash ^= Icmpv6NdRaReachableTime.GetHashCode();
      if (Icmpv6NdRaRetransTimer != 0) hash ^= Icmpv6NdRaRetransTimer.GetHashCode();
      if (Icmpv6NdNsTargetAddress.Length != 0) hash ^= Icmpv6NdNsTargetAddress.GetHashCode();
      if (Icmpv6NdNaFlag != 0) hash ^= Icmpv6NdNaFlag.GetHashCode();
      if (Icmpv6NdNaFlagR != false) hash ^= Icmpv6NdNaFlagR.GetHashCode();
      if (Icmpv6NdNaFlagS != false) hash ^= Icmpv6NdNaFlagS.GetHashCode();
      if (Icmpv6NdNaFlagO != false) hash ^= Icmpv6NdNaFlagO.GetHashCode();
      if (Icmpv6NdNaFlagRsv != 0) hash ^= Icmpv6NdNaFlagRsv.GetHashCode();
      if (Icmpv6NdNaTargetAddress.Length != 0) hash ^= Icmpv6NdNaTargetAddress.GetHashCode();
      if (Icmpv6NdRdTargetAddress.Length != 0) hash ^= Icmpv6NdRdTargetAddress.GetHashCode();
      if (Icmpv6RdNaDestinationAddress.Length != 0) hash ^= Icmpv6RdNaDestinationAddress.GetHashCode();
      if (Icmpv6Opt != 0) hash ^= Icmpv6Opt.GetHashCode();
      if (Icmpv6OptType != 0) hash ^= Icmpv6OptType.GetHashCode();
      if (Icmpv6OptLength != 0) hash ^= Icmpv6OptLength.GetHashCode();
      if (Icmpv6OptReserved != 0) hash ^= Icmpv6OptReserved.GetHashCode();
      if (Icmpv6OptPadding != 0) hash ^= Icmpv6OptPadding.GetHashCode();
      if (Icmpv6OptLinkaddr.Length != 0) hash ^= Icmpv6OptLinkaddr.GetHashCode();
      if (Icmpv6OptSrcLinkaddr.Length != 0) hash ^= Icmpv6OptSrcLinkaddr.GetHashCode();
      if (Icmpv6OptTargetLinkaddr.Length != 0) hash ^= Icmpv6OptTargetLinkaddr.GetHashCode();
      if (Icmpv6OptLinkaddrEui64.Length != 0) hash ^= Icmpv6OptLinkaddrEui64.GetHashCode();
      if (Icmpv6OptSrcLinkaddrEui64.Length != 0) hash ^= Icmpv6OptSrcLinkaddrEui64.GetHashCode();
      if (Icmpv6OptTargetLinkaddrEui64.Length != 0) hash ^= Icmpv6OptTargetLinkaddrEui64.GetHashCode();
      if (Icmpv6OptPrefixLength != 0) hash ^= Icmpv6OptPrefixLength.GetHashCode();
      if (Icmpv6OptPrefixFlag != 0) hash ^= Icmpv6OptPrefixFlag.GetHashCode();
      if (Icmpv6OptPrefixFlagL != false) hash ^= Icmpv6OptPrefixFlagL.GetHashCode();
      if (Icmpv6OptPrefixFlagA != false) hash ^= Icmpv6OptPrefixFlagA.GetHashCode();
      if (Icmpv6OptPrefixFlagR != false) hash ^= Icmpv6OptPrefixFlagR.GetHashCode();
      if (Icmpv6OptPrefixFlagReserved != 0) hash ^= Icmpv6OptPrefixFlagReserved.GetHashCode();
      if (Icmpv6OptPrefixValidLifetime != 0) hash ^= Icmpv6OptPrefixValidLifetime.GetHashCode();
      if (Icmpv6OptPrefixPreferredLifetime != 0) hash ^= Icmpv6OptPrefixPreferredLifetime.GetHashCode();
      if (Icmpv6OptPrefix.Length != 0) hash ^= Icmpv6OptPrefix.GetHashCode();
      if (Icmpv6OptCgaPadLength != 0) hash ^= Icmpv6OptCgaPadLength.GetHashCode();
      if (Icmpv6OptCga.Length != 0) hash ^= Icmpv6OptCga.GetHashCode();
      if (Icmpv6OptCgaModifier.Length != 0) hash ^= Icmpv6OptCgaModifier.GetHashCode();
      if (Icmpv6OptCgaSubnetPrefix.Length != 0) hash ^= Icmpv6OptCgaSubnetPrefix.GetHashCode();
      if (Icmpv6OptCgaCount.Length != 0) hash ^= Icmpv6OptCgaCount.GetHashCode();
      if (Icmpv6OptCgaExtType != 0) hash ^= Icmpv6OptCgaExtType.GetHashCode();
      if (Icmpv6OptCgaExtLength != 0) hash ^= Icmpv6OptCgaExtLength.GetHashCode();
      if (Icmpv6OptCgaExtData.Length != 0) hash ^= Icmpv6OptCgaExtData.GetHashCode();
      if (Icmpv6OptRsaKeyHash.Length != 0) hash ^= Icmpv6OptRsaKeyHash.GetHashCode();
      if (Icmpv6OptDigitalSignaturePadding != 0) hash ^= Icmpv6OptDigitalSignaturePadding.GetHashCode();
      if (Icmpv6OptPsKeyHash.Length != 0) hash ^= Icmpv6OptPsKeyHash.GetHashCode();
      if (Icmpv6OptTimestamp != 0L) hash ^= Icmpv6OptTimestamp.GetHashCode();
      if (Icmpv6OptNonce.Length != 0) hash ^= Icmpv6OptNonce.GetHashCode();
      if (Icmpv6OptCertificatePadding != 0) hash ^= Icmpv6OptCertificatePadding.GetHashCode();
      if (Icmpv6OptIpaOptionCode != 0) hash ^= Icmpv6OptIpaOptionCode.GetHashCode();
      if (Icmpv6OptIpaPrefixLen != 0) hash ^= Icmpv6OptIpaPrefixLen.GetHashCode();
      if (Icmpv6OptIpaIpv6Address.Length != 0) hash ^= Icmpv6OptIpaIpv6Address.GetHashCode();
      if (Icmpv6OptNrpiOptionCode != 0) hash ^= Icmpv6OptNrpiOptionCode.GetHashCode();
      if (Icmpv6OptNrpiPrefixLen != 0) hash ^= Icmpv6OptNrpiPrefixLen.GetHashCode();
      if (Icmpv6OptNrpiPrefix.Length != 0) hash ^= Icmpv6OptNrpiPrefix.GetHashCode();
      if (Icmpv6OptLlaOptionCode != 0) hash ^= Icmpv6OptLlaOptionCode.GetHashCode();
      if (Icmpv6OptLlaBytes.Length != 0) hash ^= Icmpv6OptLlaBytes.GetHashCode();
      if (Icmpv6OptNaackOptionCode != 0) hash ^= Icmpv6OptNaackOptionCode.GetHashCode();
      if (Icmpv6OptNaackStatus != 0) hash ^= Icmpv6OptNaackStatus.GetHashCode();
      if (Icmpv6OptNaackSuppliedNcoa.Length != 0) hash ^= Icmpv6OptNaackSuppliedNcoa.GetHashCode();
      if (Icmpv6OptMapDistance != 0) hash ^= Icmpv6OptMapDistance.GetHashCode();
      if (Icmpv6OptMapPreference != 0) hash ^= Icmpv6OptMapPreference.GetHashCode();
      if (Icmpv6OptMapFlag != 0) hash ^= Icmpv6OptMapFlag.GetHashCode();
      if (Icmpv6OptMapFlagR != false) hash ^= Icmpv6OptMapFlagR.GetHashCode();
      if (Icmpv6OptMapFlagReserved != 0) hash ^= Icmpv6OptMapFlagReserved.GetHashCode();
      if (Icmpv6OptMapValidLifetime != 0) hash ^= Icmpv6OptMapValidLifetime.GetHashCode();
      if (Icmpv6OptMapGlobalAddress.Length != 0) hash ^= Icmpv6OptMapGlobalAddress.GetHashCode();
      if (Icmpv6OptRouteInfoFlag != 0) hash ^= Icmpv6OptRouteInfoFlag.GetHashCode();
      if (Icmpv6OptRouteInfoFlagRoutePreference != 0) hash ^= Icmpv6OptRouteInfoFlagRoutePreference.GetHashCode();
      if (Icmpv6OptRouteInfoFlagReserved != 0) hash ^= Icmpv6OptRouteInfoFlagReserved.GetHashCode();
      if (Icmpv6OptRouteLifetime != 0) hash ^= Icmpv6OptRouteLifetime.GetHashCode();
      if (Icmpv6OptNameType != 0) hash ^= Icmpv6OptNameType.GetHashCode();
      if (Icmpv6OptNameX501.Length != 0) hash ^= Icmpv6OptNameX501.GetHashCode();
      if (Icmpv6OptNameTypeFqdn.Length != 0) hash ^= Icmpv6OptNameTypeFqdn.GetHashCode();
      if (Icmpv6SendIdentifier != 0) hash ^= Icmpv6SendIdentifier.GetHashCode();
      if (Icmpv6SendAllComponents != 0) hash ^= Icmpv6SendAllComponents.GetHashCode();
      if (Icmpv6SendComponent != 0) hash ^= Icmpv6SendComponent.GetHashCode();
      if (Icmpv6X509Name != 0) hash ^= Icmpv6X509Name.GetHashCode();
      if (Icmpv6X509Certificate != 0) hash ^= Icmpv6X509Certificate.GetHashCode();
      if (Icmpv6OptRedirectedPacket != 0) hash ^= Icmpv6OptRedirectedPacket.GetHashCode();
      if (Icmpv6OptMtu != 0) hash ^= Icmpv6OptMtu.GetHashCode();
      if (Icmpv6OptNbmaShortcutLimit != 0) hash ^= Icmpv6OptNbmaShortcutLimit.GetHashCode();
      if (Icmpv6OptAdvertisementInterval != 0) hash ^= Icmpv6OptAdvertisementInterval.GetHashCode();
      if (Icmpv6OptHomeAgentPreference != 0) hash ^= Icmpv6OptHomeAgentPreference.GetHashCode();
      if (Icmpv6OptHomeAgentLifetime != 0) hash ^= Icmpv6OptHomeAgentLifetime.GetHashCode();
      if (Icmpv6OptIpv6Address.Length != 0) hash ^= Icmpv6OptIpv6Address.GetHashCode();
      if (Icmpv6OptRdnssLifetime != 0) hash ^= Icmpv6OptRdnssLifetime.GetHashCode();
      if (Icmpv6OptRdnss.Length != 0) hash ^= Icmpv6OptRdnss.GetHashCode();
      if (Icmpv6OptEfo != 0) hash ^= Icmpv6OptEfo.GetHashCode();
      if (Icmpv6OptEfoM != false) hash ^= Icmpv6OptEfoM.GetHashCode();
      if (Icmpv6OptEfoO != false) hash ^= Icmpv6OptEfoO.GetHashCode();
      if (Icmpv6OptEfoH != false) hash ^= Icmpv6OptEfoH.GetHashCode();
      if (Icmpv6OptEfoPrf != 0) hash ^= Icmpv6OptEfoPrf.GetHashCode();
      if (Icmpv6OptEfoP != false) hash ^= Icmpv6OptEfoP.GetHashCode();
      if (Icmpv6OptEfoRsv != 0) hash ^= Icmpv6OptEfoRsv.GetHashCode();
      if (Icmpv6OptHkrPadLength != 0) hash ^= Icmpv6OptHkrPadLength.GetHashCode();
      if (Icmpv6OptHkrAt != 0) hash ^= Icmpv6OptHkrAt.GetHashCode();
      if (Icmpv6OptHkrReserved != 0) hash ^= Icmpv6OptHkrReserved.GetHashCode();
      if (Icmpv6OptHkrEncryptionPublicKey.Length != 0) hash ^= Icmpv6OptHkrEncryptionPublicKey.GetHashCode();
      if (Icmpv6OptHkrPadding.Length != 0) hash ^= Icmpv6OptHkrPadding.GetHashCode();
      if (Icmpv6OptHkrLifetime != 0) hash ^= Icmpv6OptHkrLifetime.GetHashCode();
      if (Icmpv6OptHkrEncryptedHandoverKey.Length != 0) hash ^= Icmpv6OptHkrEncryptedHandoverKey.GetHashCode();
      if (Icmpv6OptHaiOptionCode != 0) hash ^= Icmpv6OptHaiOptionCode.GetHashCode();
      if (Icmpv6OptHaiLength != 0) hash ^= Icmpv6OptHaiLength.GetHashCode();
      if (Icmpv6OptHaiValue.Length != 0) hash ^= Icmpv6OptHaiValue.GetHashCode();
      if (Icmpv6OptMnOptionCode != 0) hash ^= Icmpv6OptMnOptionCode.GetHashCode();
      if (Icmpv6OptMnLength != 0) hash ^= Icmpv6OptMnLength.GetHashCode();
      if (Icmpv6OptMnValue.Length != 0) hash ^= Icmpv6OptMnValue.GetHashCode();
      if (Icmpv6OptDnsslLifetime != 0) hash ^= Icmpv6OptDnsslLifetime.GetHashCode();
      if (Icmpv6OptDnssl.Length != 0) hash ^= Icmpv6OptDnssl.GetHashCode();
      if (Icmpv6OptAroStatus != 0) hash ^= Icmpv6OptAroStatus.GetHashCode();
      if (Icmpv6OptAroRegistrationLifetime != 0) hash ^= Icmpv6OptAroRegistrationLifetime.GetHashCode();
      if (Icmpv6OptAroEui64.Length != 0) hash ^= Icmpv6OptAroEui64.GetHashCode();
      if (Icmpv6Opt6CoContextLength != 0) hash ^= Icmpv6Opt6CoContextLength.GetHashCode();
      if (Icmpv6Opt6CoFlag != 0) hash ^= Icmpv6Opt6CoFlag.GetHashCode();
      if (Icmpv6Opt6CoFlagC != false) hash ^= Icmpv6Opt6CoFlagC.GetHashCode();
      if (Icmpv6Opt6CoFlagCid != 0) hash ^= Icmpv6Opt6CoFlagCid.GetHashCode();
      if (Icmpv6Opt6CoFlagReserved != 0) hash ^= Icmpv6Opt6CoFlagReserved.GetHashCode();
      if (Icmpv6Opt6CoValidLifetime != 0) hash ^= Icmpv6Opt6CoValidLifetime.GetHashCode();
      if (Icmpv6Opt6CoContextPrefix.Length != 0) hash ^= Icmpv6Opt6CoContextPrefix.GetHashCode();
      if (Icmpv6OptAbroVersionLow != 0) hash ^= Icmpv6OptAbroVersionLow.GetHashCode();
      if (Icmpv6OptAbroVersionHigh != 0) hash ^= Icmpv6OptAbroVersionHigh.GetHashCode();
      if (Icmpv6OptAbroValidLifetime != 0) hash ^= Icmpv6OptAbroValidLifetime.GetHashCode();
      if (Icmpv6OptAbro6LbrAddress.Length != 0) hash ^= Icmpv6OptAbro6LbrAddress.GetHashCode();
      if (Icmpv6Opt6CioUnassigned1 != 0) hash ^= Icmpv6Opt6CioUnassigned1.GetHashCode();
      if (Icmpv6Opt6CioFlagG != 0) hash ^= Icmpv6Opt6CioFlagG.GetHashCode();
      if (Icmpv6Opt6CioUnassigned2 != 0) hash ^= Icmpv6Opt6CioUnassigned2.GetHashCode();
      if (Icmpv6OptCaptivePortal.Length != 0) hash ^= Icmpv6OptCaptivePortal.GetHashCode();
      if (Icmpv6MldMaximumResponseDelay != 0) hash ^= Icmpv6MldMaximumResponseDelay.GetHashCode();
      if (Icmpv6MldMulticastAddress.Length != 0) hash ^= Icmpv6MldMulticastAddress.GetHashCode();
      if (Icmpv6RrSequenceNumber != 0) hash ^= Icmpv6RrSequenceNumber.GetHashCode();
      if (Icmpv6RrSegmentNumber != 0) hash ^= Icmpv6RrSegmentNumber.GetHashCode();
      if (Icmpv6RrFlag != 0) hash ^= Icmpv6RrFlag.GetHashCode();
      if (Icmpv6RrFlagT != false) hash ^= Icmpv6RrFlagT.GetHashCode();
      if (Icmpv6RrFlagR != false) hash ^= Icmpv6RrFlagR.GetHashCode();
      if (Icmpv6RrFlagA != false) hash ^= Icmpv6RrFlagA.GetHashCode();
      if (Icmpv6RrFlagS != false) hash ^= Icmpv6RrFlagS.GetHashCode();
      if (Icmpv6RrFlagP != false) hash ^= Icmpv6RrFlagP.GetHashCode();
      if (Icmpv6RrFlagRsv != 0) hash ^= Icmpv6RrFlagRsv.GetHashCode();
      if (Icmpv6RrMaxdelay != 0) hash ^= Icmpv6RrMaxdelay.GetHashCode();
      if (Icmpv6RrPcoMp != 0) hash ^= Icmpv6RrPcoMp.GetHashCode();
      if (Icmpv6RrPcoMpOpcode != 0) hash ^= Icmpv6RrPcoMpOpcode.GetHashCode();
      if (Icmpv6RrPcoMpOplength != 0) hash ^= Icmpv6RrPcoMpOplength.GetHashCode();
      if (Icmpv6RrPcoMpOrdinal != 0) hash ^= Icmpv6RrPcoMpOrdinal.GetHashCode();
      if (Icmpv6RrPcoMpMatchlen != 0) hash ^= Icmpv6RrPcoMpMatchlen.GetHashCode();
      if (Icmpv6RrPcoMpMinlen != 0) hash ^= Icmpv6RrPcoMpMinlen.GetHashCode();
      if (Icmpv6RrPcoMpMaxlen != 0) hash ^= Icmpv6RrPcoMpMaxlen.GetHashCode();
      if (Icmpv6RrPcoMpMatchprefix.Length != 0) hash ^= Icmpv6RrPcoMpMatchprefix.GetHashCode();
      if (Icmpv6RrPcoUp != 0) hash ^= Icmpv6RrPcoUp.GetHashCode();
      if (Icmpv6RrPcoUpUselen != 0) hash ^= Icmpv6RrPcoUpUselen.GetHashCode();
      if (Icmpv6RrPcoUpKeeplen != 0) hash ^= Icmpv6RrPcoUpKeeplen.GetHashCode();
      if (Icmpv6RrPcoUpFlagmask != 0) hash ^= Icmpv6RrPcoUpFlagmask.GetHashCode();
      if (Icmpv6RrPcoUpFlagmaskL != false) hash ^= Icmpv6RrPcoUpFlagmaskL.GetHashCode();
      if (Icmpv6RrPcoUpFlagmaskA != false) hash ^= Icmpv6RrPcoUpFlagmaskA.GetHashCode();
      if (Icmpv6RrPcoUpFlagmaskReserved != 0) hash ^= Icmpv6RrPcoUpFlagmaskReserved.GetHashCode();
      if (Icmpv6RrPcoUpRaflags != 0) hash ^= Icmpv6RrPcoUpRaflags.GetHashCode();
      if (Icmpv6RrPcoUpValidlifetime != 0) hash ^= Icmpv6RrPcoUpValidlifetime.GetHashCode();
      if (Icmpv6RrPcoUpPreferredlifetime != 0) hash ^= Icmpv6RrPcoUpPreferredlifetime.GetHashCode();
      if (Icmpv6RrPcoUpFlag != 0) hash ^= Icmpv6RrPcoUpFlag.GetHashCode();
      if (Icmpv6RrPcoUpFlagV != false) hash ^= Icmpv6RrPcoUpFlagV.GetHashCode();
      if (Icmpv6RrPcoUpFlagP != false) hash ^= Icmpv6RrPcoUpFlagP.GetHashCode();
      if (Icmpv6RrPcoUpFlagReserved != 0) hash ^= Icmpv6RrPcoUpFlagReserved.GetHashCode();
      if (Icmpv6RrPcoUpUseprefix.Length != 0) hash ^= Icmpv6RrPcoUpUseprefix.GetHashCode();
      if (Icmpv6RrRm != 0) hash ^= Icmpv6RrRm.GetHashCode();
      if (Icmpv6RrRmFlag != 0) hash ^= Icmpv6RrRmFlag.GetHashCode();
      if (Icmpv6RrRmFlagB != false) hash ^= Icmpv6RrRmFlagB.GetHashCode();
      if (Icmpv6RrRmFlagF != false) hash ^= Icmpv6RrRmFlagF.GetHashCode();
      if (Icmpv6RrRmFlagReserved != 0) hash ^= Icmpv6RrRmFlagReserved.GetHashCode();
      if (Icmpv6RrRmOrdinal != 0) hash ^= Icmpv6RrRmOrdinal.GetHashCode();
      if (Icmpv6RrRmMatchedlen != 0) hash ^= Icmpv6RrRmMatchedlen.GetHashCode();
      if (Icmpv6RrRmInterfaceindex != 0) hash ^= Icmpv6RrRmInterfaceindex.GetHashCode();
      if (Icmpv6RrRmMatchedprefix.Length != 0) hash ^= Icmpv6RrRmMatchedprefix.GetHashCode();
      if (Icmpv6Mip6Identifier != 0) hash ^= Icmpv6Mip6Identifier.GetHashCode();
      if (Icmpv6Mip6HomeAgentAddress.Length != 0) hash ^= Icmpv6Mip6HomeAgentAddress.GetHashCode();
      if (Icmpv6Mip6Flag != 0) hash ^= Icmpv6Mip6Flag.GetHashCode();
      if (Icmpv6Mip6FlagM != false) hash ^= Icmpv6Mip6FlagM.GetHashCode();
      if (Icmpv6Mip6FlagO != false) hash ^= Icmpv6Mip6FlagO.GetHashCode();
      if (Icmpv6Mip6FlagRsv != 0) hash ^= Icmpv6Mip6FlagRsv.GetHashCode();
      if (Icmpv6MldMaximumResponseCode != 0) hash ^= Icmpv6MldMaximumResponseCode.GetHashCode();
      if (Icmpv6MldFlag != 0) hash ^= Icmpv6MldFlag.GetHashCode();
      if (Icmpv6MldFlagS != false) hash ^= Icmpv6MldFlagS.GetHashCode();
      if (Icmpv6MldFlagQrv != 0) hash ^= Icmpv6MldFlagQrv.GetHashCode();
      if (Icmpv6MldFlagReserved != 0) hash ^= Icmpv6MldFlagReserved.GetHashCode();
      if (Icmpv6MldQqi != 0) hash ^= Icmpv6MldQqi.GetHashCode();
      if (Icmpv6MldNbSources != 0) hash ^= Icmpv6MldNbSources.GetHashCode();
      if (Icmpv6MldSourceAddress.Length != 0) hash ^= Icmpv6MldSourceAddress.GetHashCode();
      if (Icmpv6MldrNbMcastRecords != 0) hash ^= Icmpv6MldrNbMcastRecords.GetHashCode();
      if (Icmpv6MldrMar != 0) hash ^= Icmpv6MldrMar.GetHashCode();
      if (Icmpv6MldrMarRecordType != 0) hash ^= Icmpv6MldrMarRecordType.GetHashCode();
      if (Icmpv6MldrMarAuxDataLen != 0) hash ^= Icmpv6MldrMarAuxDataLen.GetHashCode();
      if (Icmpv6MldrMarNbSources != 0) hash ^= Icmpv6MldrMarNbSources.GetHashCode();
      if (Icmpv6MldrMarMulticastAddress.Length != 0) hash ^= Icmpv6MldrMarMulticastAddress.GetHashCode();
      if (Icmpv6MldrMarSourceAddress.Length != 0) hash ^= Icmpv6MldrMarSourceAddress.GetHashCode();
      if (Icmpv6MldrMarAuxiliaryData.Length != 0) hash ^= Icmpv6MldrMarAuxiliaryData.GetHashCode();
      if (Icmpv6Fmip6Subtype != 0) hash ^= Icmpv6Fmip6Subtype.GetHashCode();
      if (Icmpv6Fmip6HiFlag != 0) hash ^= Icmpv6Fmip6HiFlag.GetHashCode();
      if (Icmpv6Fmip6HiFlagS != false) hash ^= Icmpv6Fmip6HiFlagS.GetHashCode();
      if (Icmpv6Fmip6HiFlagA != false) hash ^= Icmpv6Fmip6HiFlagA.GetHashCode();
      if (Icmpv6Fmip6HiFlagReserved != 0) hash ^= Icmpv6Fmip6HiFlagReserved.GetHashCode();
      if (Icmpv6Fmip6Identifier != 0) hash ^= Icmpv6Fmip6Identifier.GetHashCode();
      if (Icmpv6McastRaQueryInterval != 0) hash ^= Icmpv6McastRaQueryInterval.GetHashCode();
      if (Icmpv6McastRaRobustnessVariable != 0) hash ^= Icmpv6McastRaRobustnessVariable.GetHashCode();
      if (Icmpv6NiQtype != 0) hash ^= Icmpv6NiQtype.GetHashCode();
      if (Icmpv6NiFlag != 0) hash ^= Icmpv6NiFlag.GetHashCode();
      if (Icmpv6NiFlagG != false) hash ^= Icmpv6NiFlagG.GetHashCode();
      if (Icmpv6NiFlagS != false) hash ^= Icmpv6NiFlagS.GetHashCode();
      if (Icmpv6NiFlagL != false) hash ^= Icmpv6NiFlagL.GetHashCode();
      if (Icmpv6NiFlagC != false) hash ^= Icmpv6NiFlagC.GetHashCode();
      if (Icmpv6NiFlagA != false) hash ^= Icmpv6NiFlagA.GetHashCode();
      if (Icmpv6NiFlagT != false) hash ^= Icmpv6NiFlagT.GetHashCode();
      if (Icmpv6NiFlagRsv != 0) hash ^= Icmpv6NiFlagRsv.GetHashCode();
      if (Icmpv6NiNonce != 0UL) hash ^= Icmpv6NiNonce.GetHashCode();
      if (Icmpv6NiQuerySubjectIpv6.Length != 0) hash ^= Icmpv6NiQuerySubjectIpv6.GetHashCode();
      if (Icmpv6NiQuerySubjectFqdn.Length != 0) hash ^= Icmpv6NiQuerySubjectFqdn.GetHashCode();
      if (Icmpv6NiQuerySubjectIpv4.Length != 0) hash ^= Icmpv6NiQuerySubjectIpv4.GetHashCode();
      if (Icmpv6NiReplyNodeTtl != 0) hash ^= Icmpv6NiReplyNodeTtl.GetHashCode();
      if (Icmpv6NiReplyNodeName.Length != 0) hash ^= Icmpv6NiReplyNodeName.GetHashCode();
      if (Icmpv6NiReplyNodeAddress.Length != 0) hash ^= Icmpv6NiReplyNodeAddress.GetHashCode();
      if (Icmpv6NiReplyIpv4Address.Length != 0) hash ^= Icmpv6NiReplyIpv4Address.GetHashCode();
      if (Icmpv6RplDisFlags != 0) hash ^= Icmpv6RplDisFlags.GetHashCode();
      if (Icmpv6RplDioInstance != 0) hash ^= Icmpv6RplDioInstance.GetHashCode();
      if (Icmpv6RplDioVersion != 0) hash ^= Icmpv6RplDioVersion.GetHashCode();
      if (Icmpv6RplDioRank != 0) hash ^= Icmpv6RplDioRank.GetHashCode();
      if (Icmpv6RplDioFlag != 0) hash ^= Icmpv6RplDioFlag.GetHashCode();
      if (Icmpv6RplDioFlagG != false) hash ^= Icmpv6RplDioFlagG.GetHashCode();
      if (Icmpv6RplDioFlag0 != false) hash ^= Icmpv6RplDioFlag0.GetHashCode();
      if (Icmpv6RplDioFlagMop != 0) hash ^= Icmpv6RplDioFlagMop.GetHashCode();
      if (Icmpv6RplDioFlagPreference != 0) hash ^= Icmpv6RplDioFlagPreference.GetHashCode();
      if (Icmpv6RplDioDtsn != 0) hash ^= Icmpv6RplDioDtsn.GetHashCode();
      if (Icmpv6RplDioDagid.Length != 0) hash ^= Icmpv6RplDioDagid.GetHashCode();
      if (Icmpv6RplDaoInstance != 0) hash ^= Icmpv6RplDaoInstance.GetHashCode();
      if (Icmpv6RplDaoFlag != 0) hash ^= Icmpv6RplDaoFlag.GetHashCode();
      if (Icmpv6RplDaoFlagK != false) hash ^= Icmpv6RplDaoFlagK.GetHashCode();
      if (Icmpv6RplDaoFlagD != false) hash ^= Icmpv6RplDaoFlagD.GetHashCode();
      if (Icmpv6RplDaoFlagRsv != 0) hash ^= Icmpv6RplDaoFlagRsv.GetHashCode();
      if (Icmpv6RplDaoSequence != 0) hash ^= Icmpv6RplDaoSequence.GetHashCode();
      if (Icmpv6RplDaoDodagid.Length != 0) hash ^= Icmpv6RplDaoDodagid.GetHashCode();
      if (Icmpv6RplDaoackInstance != 0) hash ^= Icmpv6RplDaoackInstance.GetHashCode();
      if (Icmpv6RplDaoackFlag != 0) hash ^= Icmpv6RplDaoackFlag.GetHashCode();
      if (Icmpv6RplDaoackFlagD != false) hash ^= Icmpv6RplDaoackFlagD.GetHashCode();
      if (Icmpv6RplDaoackFlagRsv != 0) hash ^= Icmpv6RplDaoackFlagRsv.GetHashCode();
      if (Icmpv6RplDaoackSequence != 0) hash ^= Icmpv6RplDaoackSequence.GetHashCode();
      if (Icmpv6RplDaoackStatus != 0) hash ^= Icmpv6RplDaoackStatus.GetHashCode();
      if (Icmpv6RplDaoackDodagid.Length != 0) hash ^= Icmpv6RplDaoackDodagid.GetHashCode();
      if (Icmpv6RplCcInstance != 0) hash ^= Icmpv6RplCcInstance.GetHashCode();
      if (Icmpv6RplCcFlag != 0) hash ^= Icmpv6RplCcFlag.GetHashCode();
      if (Icmpv6RplCcFlagR != false) hash ^= Icmpv6RplCcFlagR.GetHashCode();
      if (Icmpv6RplCcFlagRsv != 0) hash ^= Icmpv6RplCcFlagRsv.GetHashCode();
      if (Icmpv6RplCcNonce != 0) hash ^= Icmpv6RplCcNonce.GetHashCode();
      if (Icmpv6RplCcDodagid.Length != 0) hash ^= Icmpv6RplCcDodagid.GetHashCode();
      if (Icmpv6RplCcDestinationCounter != 0) hash ^= Icmpv6RplCcDestinationCounter.GetHashCode();
      if (Icmpv6RplSecureFlag != 0) hash ^= Icmpv6RplSecureFlag.GetHashCode();
      if (Icmpv6RplSecureFlagT != false) hash ^= Icmpv6RplSecureFlagT.GetHashCode();
      if (Icmpv6RplSecureFlagRsv != 0) hash ^= Icmpv6RplSecureFlagRsv.GetHashCode();
      if (Icmpv6RplSecureAlgorithm != 0) hash ^= Icmpv6RplSecureAlgorithm.GetHashCode();
      if (Icmpv6RplSecureKim != 0) hash ^= Icmpv6RplSecureKim.GetHashCode();
      if (Icmpv6RplSecureLvl != 0) hash ^= Icmpv6RplSecureLvl.GetHashCode();
      if (Icmpv6RplSecureRsv != 0) hash ^= Icmpv6RplSecureRsv.GetHashCode();
      if (Icmpv6RplSecureCounter != 0) hash ^= Icmpv6RplSecureCounter.GetHashCode();
      if (Icmpv6RplSecureKeySource.Length != 0) hash ^= Icmpv6RplSecureKeySource.GetHashCode();
      if (Icmpv6RplSecureKeyIndex != 0) hash ^= Icmpv6RplSecureKeyIndex.GetHashCode();
      if (Icmpv6RplOptType != 0) hash ^= Icmpv6RplOptType.GetHashCode();
      if (Icmpv6RplOptLength != 0) hash ^= Icmpv6RplOptLength.GetHashCode();
      if (Icmpv6RplOptReserved != 0) hash ^= Icmpv6RplOptReserved.GetHashCode();
      if (Icmpv6RplOptPadn != 0) hash ^= Icmpv6RplOptPadn.GetHashCode();
      if (Icmpv6RplOptMetricType != 0) hash ^= Icmpv6RplOptMetricType.GetHashCode();
      if (Icmpv6RplOptMetricFlags != 0) hash ^= Icmpv6RplOptMetricFlags.GetHashCode();
      if (Icmpv6RplOptMetricReserved != 0) hash ^= Icmpv6RplOptMetricReserved.GetHashCode();
      if (Icmpv6RplOptMetricFlagP != false) hash ^= Icmpv6RplOptMetricFlagP.GetHashCode();
      if (Icmpv6RplOptMetricFlagC != false) hash ^= Icmpv6RplOptMetricFlagC.GetHashCode();
      if (Icmpv6RplOptMetricFlagO != false) hash ^= Icmpv6RplOptMetricFlagO.GetHashCode();
      if (Icmpv6RplOptMetricFlagR != false) hash ^= Icmpv6RplOptMetricFlagR.GetHashCode();
      if (Icmpv6RplOptMetricFlagA != 0) hash ^= Icmpv6RplOptMetricFlagA.GetHashCode();
      if (Icmpv6RplOptMetricPrec != 0) hash ^= Icmpv6RplOptMetricPrec.GetHashCode();
      if (Icmpv6RplOptMetricLength != 0) hash ^= Icmpv6RplOptMetricLength.GetHashCode();
      if (Icmpv6RplOptMetricNsaObject != 0) hash ^= Icmpv6RplOptMetricNsaObject.GetHashCode();
      if (Icmpv6RplOptMetricNsaObjectReserved != 0) hash ^= Icmpv6RplOptMetricNsaObjectReserved.GetHashCode();
      if (Icmpv6RplOptMetricNsaObjectFlags != 0) hash ^= Icmpv6RplOptMetricNsaObjectFlags.GetHashCode();
      if (Icmpv6RplOptMetricNsaObjectFlagA != false) hash ^= Icmpv6RplOptMetricNsaObjectFlagA.GetHashCode();
      if (Icmpv6RplOptMetricNsaObjectFlagO != false) hash ^= Icmpv6RplOptMetricNsaObjectFlagO.GetHashCode();
      if (Icmpv6RplOptMetricNeObject != 0) hash ^= Icmpv6RplOptMetricNeObject.GetHashCode();
      if (Icmpv6RplOptMetricNeObjectFlags != 0) hash ^= Icmpv6RplOptMetricNeObjectFlags.GetHashCode();
      if (Icmpv6RplOptMetricNeObjectFlagI != false) hash ^= Icmpv6RplOptMetricNeObjectFlagI.GetHashCode();
      if (Icmpv6RplOptMetricNeObjectType != 0) hash ^= Icmpv6RplOptMetricNeObjectType.GetHashCode();
      if (Icmpv6RplOptMetricNeObjectFlagE != false) hash ^= Icmpv6RplOptMetricNeObjectFlagE.GetHashCode();
      if (Icmpv6RplOptMetricNeObjectEnergy != 0) hash ^= Icmpv6RplOptMetricNeObjectEnergy.GetHashCode();
      if (Icmpv6RplOptMetricHpObject != 0) hash ^= Icmpv6RplOptMetricHpObject.GetHashCode();
      if (Icmpv6RplOptMetricHpObjectReserved != 0) hash ^= Icmpv6RplOptMetricHpObjectReserved.GetHashCode();
      if (Icmpv6RplOptMetricHpObjectFlags != 0) hash ^= Icmpv6RplOptMetricHpObjectFlags.GetHashCode();
      if (Icmpv6RplOptMetricHpObjectHp != 0) hash ^= Icmpv6RplOptMetricHpObjectHp.GetHashCode();
      if (Icmpv6RplOptMetricLtObjectLt != 0) hash ^= Icmpv6RplOptMetricLtObjectLt.GetHashCode();
      if (Icmpv6RplOptMetricLlObjectLl != 0) hash ^= Icmpv6RplOptMetricLlObjectLl.GetHashCode();
      if (Icmpv6RplOptMetricLqlObject != 0) hash ^= Icmpv6RplOptMetricLqlObject.GetHashCode();
      if (Icmpv6RplOptMetricLqlObjectRes != 0) hash ^= Icmpv6RplOptMetricLqlObjectRes.GetHashCode();
      if (Icmpv6RplOptMetricLqlObjectVal != 0) hash ^= Icmpv6RplOptMetricLqlObjectVal.GetHashCode();
      if (Icmpv6RplOptMetricLqlObjectCounter != 0) hash ^= Icmpv6RplOptMetricLqlObjectCounter.GetHashCode();
      if (Icmpv6RplOptMetricEtxObjectEtx != 0) hash ^= Icmpv6RplOptMetricEtxObjectEtx.GetHashCode();
      if (Icmpv6RplOptMetricLcObject != 0) hash ^= Icmpv6RplOptMetricLcObject.GetHashCode();
      if (Icmpv6RplOptMetricLcObjectRes != 0) hash ^= Icmpv6RplOptMetricLcObjectRes.GetHashCode();
      if (Icmpv6RplOptMetricLcObjectLc != 0) hash ^= Icmpv6RplOptMetricLcObjectLc.GetHashCode();
      if (Icmpv6RplOptMetricLcObjectCounter != 0) hash ^= Icmpv6RplOptMetricLcObjectCounter.GetHashCode();
      if (Icmpv6RplOptMetricLcObjectReserved != 0) hash ^= Icmpv6RplOptMetricLcObjectReserved.GetHashCode();
      if (Icmpv6RplOptMetricLcObjectFlagI != 0) hash ^= Icmpv6RplOptMetricLcObjectFlagI.GetHashCode();
      if (Icmpv6RplOptRoutePrefixLength != 0) hash ^= Icmpv6RplOptRoutePrefixLength.GetHashCode();
      if (Icmpv6RplOptRouteFlag != 0) hash ^= Icmpv6RplOptRouteFlag.GetHashCode();
      if (Icmpv6RplOptRoutePref != 0) hash ^= Icmpv6RplOptRoutePref.GetHashCode();
      if (Icmpv6RplOptRouteReserved != 0) hash ^= Icmpv6RplOptRouteReserved.GetHashCode();
      if (Icmpv6RplOptRouteLifetime != 0) hash ^= Icmpv6RplOptRouteLifetime.GetHashCode();
      if (Icmpv6RplOptRoutePrefix.Length != 0) hash ^= Icmpv6RplOptRoutePrefix.GetHashCode();
      if (Icmpv6RplOptConfigFlag != 0) hash ^= Icmpv6RplOptConfigFlag.GetHashCode();
      if (Icmpv6RplOptConfigReserved != 0) hash ^= Icmpv6RplOptConfigReserved.GetHashCode();
      if (Icmpv6RplOptConfigAuth != false) hash ^= Icmpv6RplOptConfigAuth.GetHashCode();
      if (Icmpv6RplOptConfigPcs != 0) hash ^= Icmpv6RplOptConfigPcs.GetHashCode();
      if (Icmpv6RplOptConfigIntervalDouble != 0) hash ^= Icmpv6RplOptConfigIntervalDouble.GetHashCode();
      if (Icmpv6RplOptConfigIntervalMin != 0) hash ^= Icmpv6RplOptConfigIntervalMin.GetHashCode();
      if (Icmpv6RplOptConfigRedundancy != 0) hash ^= Icmpv6RplOptConfigRedundancy.GetHashCode();
      if (Icmpv6RplOptConfigMaxRankInc != 0) hash ^= Icmpv6RplOptConfigMaxRankInc.GetHashCode();
      if (Icmpv6RplOptConfigMinHopRankInc != 0) hash ^= Icmpv6RplOptConfigMinHopRankInc.GetHashCode();
      if (Icmpv6RplOptConfigOcp != 0) hash ^= Icmpv6RplOptConfigOcp.GetHashCode();
      if (Icmpv6RplOptConfigRsv != 0) hash ^= Icmpv6RplOptConfigRsv.GetHashCode();
      if (Icmpv6RplOptConfigDefLifetime != 0) hash ^= Icmpv6RplOptConfigDefLifetime.GetHashCode();
      if (Icmpv6RplOptConfigLifetimeUnit != 0) hash ^= Icmpv6RplOptConfigLifetimeUnit.GetHashCode();
      if (Icmpv6RplOptTargetFlag != 0) hash ^= Icmpv6RplOptTargetFlag.GetHashCode();
      if (Icmpv6RplOptTargetPrefixLength != 0) hash ^= Icmpv6RplOptTargetPrefixLength.GetHashCode();
      if (Icmpv6RplOptTargetPrefix.Length != 0) hash ^= Icmpv6RplOptTargetPrefix.GetHashCode();
      if (Icmpv6RplOptTransitFlag != 0) hash ^= Icmpv6RplOptTransitFlag.GetHashCode();
      if (Icmpv6RplOptTransitFlagE != false) hash ^= Icmpv6RplOptTransitFlagE.GetHashCode();
      if (Icmpv6RplOptTransitFlagRsv != 0) hash ^= Icmpv6RplOptTransitFlagRsv.GetHashCode();
      if (Icmpv6RplOptTransitPathctl != 0) hash ^= Icmpv6RplOptTransitPathctl.GetHashCode();
      if (Icmpv6RplOptTransitPathseq != 0) hash ^= Icmpv6RplOptTransitPathseq.GetHashCode();
      if (Icmpv6RplOptTransitPathlifetime != 0) hash ^= Icmpv6RplOptTransitPathlifetime.GetHashCode();
      if (Icmpv6RplOptTransitParent.Length != 0) hash ^= Icmpv6RplOptTransitParent.GetHashCode();
      if (Icmpv6RplOptSolicitedInstance != 0) hash ^= Icmpv6RplOptSolicitedInstance.GetHashCode();
      if (Icmpv6RplOptSolicitedFlag != 0) hash ^= Icmpv6RplOptSolicitedFlag.GetHashCode();
      if (Icmpv6RplOptSolicitedFlagV != false) hash ^= Icmpv6RplOptSolicitedFlagV.GetHashCode();
      if (Icmpv6RplOptSolicitedFlagI != false) hash ^= Icmpv6RplOptSolicitedFlagI.GetHashCode();
      if (Icmpv6RplOptSolicitedFlagD != false) hash ^= Icmpv6RplOptSolicitedFlagD.GetHashCode();
      if (Icmpv6RplOptSolicitedFlagRsv != 0) hash ^= Icmpv6RplOptSolicitedFlagRsv.GetHashCode();
      if (Icmpv6RplOptSolicitedDodagid.Length != 0) hash ^= Icmpv6RplOptSolicitedDodagid.GetHashCode();
      if (Icmpv6RplOptSolicitedVersion != 0) hash ^= Icmpv6RplOptSolicitedVersion.GetHashCode();
      if (Icmpv6RplOptPrefixLength != 0) hash ^= Icmpv6RplOptPrefixLength.GetHashCode();
      if (Icmpv6RplOptPrefixFlag != 0) hash ^= Icmpv6RplOptPrefixFlag.GetHashCode();
      if (Icmpv6RplOptPrefixFlagL != false) hash ^= Icmpv6RplOptPrefixFlagL.GetHashCode();
      if (Icmpv6RplOptConfigFlagA != false) hash ^= Icmpv6RplOptConfigFlagA.GetHashCode();
      if (Icmpv6RplOptConfigFlagR != false) hash ^= Icmpv6RplOptConfigFlagR.GetHashCode();
      if (Icmpv6RplOptConfigFlagRsv != 0) hash ^= Icmpv6RplOptConfigFlagRsv.GetHashCode();
      if (Icmpv6RplOptPrefixValidLifetime != 0) hash ^= Icmpv6RplOptPrefixValidLifetime.GetHashCode();
      if (Icmpv6RplOptPrefixPreferredLifetime != 0) hash ^= Icmpv6RplOptPrefixPreferredLifetime.GetHashCode();
      if (Icmpv6RplOptPrefix.Length != 0) hash ^= Icmpv6RplOptPrefix.GetHashCode();
      if (Icmpv6RplOptTargetdescDescriptor != 0) hash ^= Icmpv6RplOptTargetdescDescriptor.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryFlag != 0) hash ^= Icmpv6RplOptRoutediscoveryFlag.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryFlagReply != false) hash ^= Icmpv6RplOptRoutediscoveryFlagReply.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryFlagHopbyhop != false) hash ^= Icmpv6RplOptRoutediscoveryFlagHopbyhop.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryFlagNumofroutes != 0) hash ^= Icmpv6RplOptRoutediscoveryFlagNumofroutes.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryFlagCompr != 0) hash ^= Icmpv6RplOptRoutediscoveryFlagCompr.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryLifetime != 0) hash ^= Icmpv6RplOptRoutediscoveryLifetime.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryMaxrank != 0) hash ^= Icmpv6RplOptRoutediscoveryMaxrank.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryNh != 0) hash ^= Icmpv6RplOptRoutediscoveryNh.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryTargetaddr.Length != 0) hash ^= Icmpv6RplOptRoutediscoveryTargetaddr.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryAddrVec != 0) hash ^= Icmpv6RplOptRoutediscoveryAddrVec.GetHashCode();
      if (Icmpv6RplOptRoutediscoveryAddrvecAddr.Length != 0) hash ^= Icmpv6RplOptRoutediscoveryAddrvecAddr.GetHashCode();
      if (Icmpv6RplP2PDroInstance != 0) hash ^= Icmpv6RplP2PDroInstance.GetHashCode();
      if (Icmpv6RplP2PDroVersion != 0) hash ^= Icmpv6RplP2PDroVersion.GetHashCode();
      if (Icmpv6RplP2PDroFlag != 0) hash ^= Icmpv6RplP2PDroFlag.GetHashCode();
      if (Icmpv6RplP2PDroFlagStop != false) hash ^= Icmpv6RplP2PDroFlagStop.GetHashCode();
      if (Icmpv6RplP2PDroFlagAck != false) hash ^= Icmpv6RplP2PDroFlagAck.GetHashCode();
      if (Icmpv6RplP2PDroFlagSeq != 0) hash ^= Icmpv6RplP2PDroFlagSeq.GetHashCode();
      if (Icmpv6RplP2PDroFlagReserved != 0) hash ^= Icmpv6RplP2PDroFlagReserved.GetHashCode();
      if (Icmpv6RplP2PDroDagid.Length != 0) hash ^= Icmpv6RplP2PDroDagid.GetHashCode();
      if (Icmpv6RplP2PDroackFlag != 0) hash ^= Icmpv6RplP2PDroackFlag.GetHashCode();
      if (Icmpv6RplP2PDroackFlagSeq != 0) hash ^= Icmpv6RplP2PDroackFlagSeq.GetHashCode();
      if (Icmpv6RplP2PDroackFlagReserved != 0) hash ^= Icmpv6RplP2PDroackFlagReserved.GetHashCode();
      if (Icmpv6IlnpNbLocs != 0) hash ^= Icmpv6IlnpNbLocs.GetHashCode();
      if (Icmpv6IlnpNbLocator != 0UL) hash ^= Icmpv6IlnpNbLocator.GetHashCode();
      if (Icmpv6IlnpNbPreference != 0) hash ^= Icmpv6IlnpNbPreference.GetHashCode();
      if (Icmpv6IlnpNbLifetime != 0) hash ^= Icmpv6IlnpNbLifetime.GetHashCode();
      if (Icmpv66LowpanndDaStatus != 0) hash ^= Icmpv66LowpanndDaStatus.GetHashCode();
      if (Icmpv66LowpanndDaRsv != 0) hash ^= Icmpv66LowpanndDaRsv.GetHashCode();
      if (Icmpv66LowpanndDaLifetime != 0) hash ^= Icmpv66LowpanndDaLifetime.GetHashCode();
      if (Icmpv66LowpanndDaEui64.Length != 0) hash ^= Icmpv66LowpanndDaEui64.GetHashCode();
      if (Icmpv66LowpanndDaRegAddr.Length != 0) hash ^= Icmpv66LowpanndDaRegAddr.GetHashCode();
      if (Icmpv6RespIn != 0L) hash ^= Icmpv6RespIn.GetHashCode();
      if (Icmpv6NoResp != 0) hash ^= Icmpv6NoResp.GetHashCode();
      if (Icmpv6RespTo != 0L) hash ^= Icmpv6RespTo.GetHashCode();
      if (Icmpv6Resptime != 0D) hash ^= Icmpv6Resptime.GetHashCode();
      if (Icmpv6MplSeedInfoMinSequence != 0) hash ^= Icmpv6MplSeedInfoMinSequence.GetHashCode();
      if (Icmpv6MplSeedInfoBmLen != 0) hash ^= Icmpv6MplSeedInfoBmLen.GetHashCode();
      if (Icmpv6MplSeedInfoS != 0) hash ^= Icmpv6MplSeedInfoS.GetHashCode();
      if (Icmpv6MplSeedInfoSeedId.Length != 0) hash ^= Icmpv6MplSeedInfoSeedId.GetHashCode();
      if (Icmpv6MplSeedInfoSequence != 0) hash ^= Icmpv6MplSeedInfoSequence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Icmpv6Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Icmpv6Type);
      }
      if (Icmpv6Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Icmpv6Code);
      }
      if (Icmpv6Checksum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icmpv6Checksum);
      }
      if (Icmpv6ChecksumStatus != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Icmpv6ChecksumStatus);
      }
      if (Icmpv6Reserved.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Icmpv6Reserved);
      }
      if (Icmpv6Data.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Icmpv6Data);
      }
      if (Icmpv6UnknownData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Icmpv6UnknownData);
      }
      if (Icmpv6Mtu != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Icmpv6Mtu);
      }
      if (Icmpv6Pointer != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Icmpv6Pointer);
      }
      if (Icmpv6EchoIdentifier != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Icmpv6EchoIdentifier);
      }
      if (Icmpv6EchoSequenceNumber != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Icmpv6EchoSequenceNumber);
      }
      if (Icmpv6Nonce.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(Icmpv6Nonce);
      }
      if (Icmpv6NdRaCurHopLimit != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Icmpv6NdRaCurHopLimit);
      }
      if (Icmpv6NdRaFlag != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Icmpv6NdRaFlag);
      }
      if (Icmpv6NdRaFlagM != false) {
        output.WriteRawTag(120);
        output.WriteBool(Icmpv6NdRaFlagM);
      }
      if (Icmpv6NdRaFlagO != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Icmpv6NdRaFlagO);
      }
      if (Icmpv6NdRaFlagH != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Icmpv6NdRaFlagH);
      }
      if (Icmpv6NdRaFlagPrf != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Icmpv6NdRaFlagPrf);
      }
      if (Icmpv6NdRaFlagP != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Icmpv6NdRaFlagP);
      }
      if (Icmpv6NdRaFlagRsv != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Icmpv6NdRaFlagRsv);
      }
      if (Icmpv6NdRaRouterLifetime != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Icmpv6NdRaRouterLifetime);
      }
      if (Icmpv6NdRaReachableTime != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Icmpv6NdRaReachableTime);
      }
      if (Icmpv6NdRaRetransTimer != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Icmpv6NdRaRetransTimer);
      }
      if (Icmpv6NdNsTargetAddress.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(Icmpv6NdNsTargetAddress);
      }
      if (Icmpv6NdNaFlag != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Icmpv6NdNaFlag);
      }
      if (Icmpv6NdNaFlagR != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Icmpv6NdNaFlagR);
      }
      if (Icmpv6NdNaFlagS != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Icmpv6NdNaFlagS);
      }
      if (Icmpv6NdNaFlagO != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Icmpv6NdNaFlagO);
      }
      if (Icmpv6NdNaFlagRsv != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Icmpv6NdNaFlagRsv);
      }
      if (Icmpv6NdNaTargetAddress.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(Icmpv6NdNaTargetAddress);
      }
      if (Icmpv6NdRdTargetAddress.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(Icmpv6NdRdTargetAddress);
      }
      if (Icmpv6RdNaDestinationAddress.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteBytes(Icmpv6RdNaDestinationAddress);
      }
      if (Icmpv6Opt != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Icmpv6Opt);
      }
      if (Icmpv6OptType != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Icmpv6OptType);
      }
      if (Icmpv6OptLength != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Icmpv6OptLength);
      }
      if (Icmpv6OptReserved != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(Icmpv6OptReserved);
      }
      if (Icmpv6OptPadding != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(Icmpv6OptPadding);
      }
      if (Icmpv6OptLinkaddr.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteBytes(Icmpv6OptLinkaddr);
      }
      if (Icmpv6OptSrcLinkaddr.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteBytes(Icmpv6OptSrcLinkaddr);
      }
      if (Icmpv6OptTargetLinkaddr.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(Icmpv6OptTargetLinkaddr);
      }
      if (Icmpv6OptLinkaddrEui64.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteBytes(Icmpv6OptLinkaddrEui64);
      }
      if (Icmpv6OptSrcLinkaddrEui64.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteBytes(Icmpv6OptSrcLinkaddrEui64);
      }
      if (Icmpv6OptTargetLinkaddrEui64.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteBytes(Icmpv6OptTargetLinkaddrEui64);
      }
      if (Icmpv6OptPrefixLength != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Icmpv6OptPrefixLength);
      }
      if (Icmpv6OptPrefixFlag != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Icmpv6OptPrefixFlag);
      }
      if (Icmpv6OptPrefixFlagL != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Icmpv6OptPrefixFlagL);
      }
      if (Icmpv6OptPrefixFlagA != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(Icmpv6OptPrefixFlagA);
      }
      if (Icmpv6OptPrefixFlagR != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(Icmpv6OptPrefixFlagR);
      }
      if (Icmpv6OptPrefixFlagReserved != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(Icmpv6OptPrefixFlagReserved);
      }
      if (Icmpv6OptPrefixValidLifetime != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(Icmpv6OptPrefixValidLifetime);
      }
      if (Icmpv6OptPrefixPreferredLifetime != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(Icmpv6OptPrefixPreferredLifetime);
      }
      if (Icmpv6OptPrefix.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteBytes(Icmpv6OptPrefix);
      }
      if (Icmpv6OptCgaPadLength != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(Icmpv6OptCgaPadLength);
      }
      if (Icmpv6OptCga.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteBytes(Icmpv6OptCga);
      }
      if (Icmpv6OptCgaModifier.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteBytes(Icmpv6OptCgaModifier);
      }
      if (Icmpv6OptCgaSubnetPrefix.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteBytes(Icmpv6OptCgaSubnetPrefix);
      }
      if (Icmpv6OptCgaCount.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteBytes(Icmpv6OptCgaCount);
      }
      if (Icmpv6OptCgaExtType != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(Icmpv6OptCgaExtType);
      }
      if (Icmpv6OptCgaExtLength != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(Icmpv6OptCgaExtLength);
      }
      if (Icmpv6OptCgaExtData.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteBytes(Icmpv6OptCgaExtData);
      }
      if (Icmpv6OptRsaKeyHash.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteBytes(Icmpv6OptRsaKeyHash);
      }
      if (Icmpv6OptDigitalSignaturePadding != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(Icmpv6OptDigitalSignaturePadding);
      }
      if (Icmpv6OptPsKeyHash.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteBytes(Icmpv6OptPsKeyHash);
      }
      if (Icmpv6OptTimestamp != 0L) {
        output.WriteRawTag(128, 4);
        output.WriteInt64(Icmpv6OptTimestamp);
      }
      if (Icmpv6OptNonce.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteBytes(Icmpv6OptNonce);
      }
      if (Icmpv6OptCertificatePadding != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Icmpv6OptCertificatePadding);
      }
      if (Icmpv6OptIpaOptionCode != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(Icmpv6OptIpaOptionCode);
      }
      if (Icmpv6OptIpaPrefixLen != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(Icmpv6OptIpaPrefixLen);
      }
      if (Icmpv6OptIpaIpv6Address.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteBytes(Icmpv6OptIpaIpv6Address);
      }
      if (Icmpv6OptNrpiOptionCode != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(Icmpv6OptNrpiOptionCode);
      }
      if (Icmpv6OptNrpiPrefixLen != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(Icmpv6OptNrpiPrefixLen);
      }
      if (Icmpv6OptNrpiPrefix.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteBytes(Icmpv6OptNrpiPrefix);
      }
      if (Icmpv6OptLlaOptionCode != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(Icmpv6OptLlaOptionCode);
      }
      if (Icmpv6OptLlaBytes.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteBytes(Icmpv6OptLlaBytes);
      }
      if (Icmpv6OptNaackOptionCode != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(Icmpv6OptNaackOptionCode);
      }
      if (Icmpv6OptNaackStatus != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(Icmpv6OptNaackStatus);
      }
      if (Icmpv6OptNaackSuppliedNcoa.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteBytes(Icmpv6OptNaackSuppliedNcoa);
      }
      if (Icmpv6OptMapDistance != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(Icmpv6OptMapDistance);
      }
      if (Icmpv6OptMapPreference != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(Icmpv6OptMapPreference);
      }
      if (Icmpv6OptMapFlag != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(Icmpv6OptMapFlag);
      }
      if (Icmpv6OptMapFlagR != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(Icmpv6OptMapFlagR);
      }
      if (Icmpv6OptMapFlagReserved != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(Icmpv6OptMapFlagReserved);
      }
      if (Icmpv6OptMapValidLifetime != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(Icmpv6OptMapValidLifetime);
      }
      if (Icmpv6OptMapGlobalAddress.Length != 0) {
        output.WriteRawTag(162, 5);
        output.WriteBytes(Icmpv6OptMapGlobalAddress);
      }
      if (Icmpv6OptRouteInfoFlag != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(Icmpv6OptRouteInfoFlag);
      }
      if (Icmpv6OptRouteInfoFlagRoutePreference != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(Icmpv6OptRouteInfoFlagRoutePreference);
      }
      if (Icmpv6OptRouteInfoFlagReserved != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(Icmpv6OptRouteInfoFlagReserved);
      }
      if (Icmpv6OptRouteLifetime != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(Icmpv6OptRouteLifetime);
      }
      if (Icmpv6OptNameType != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(Icmpv6OptNameType);
      }
      if (Icmpv6OptNameX501.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteBytes(Icmpv6OptNameX501);
      }
      if (Icmpv6OptNameTypeFqdn.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(Icmpv6OptNameTypeFqdn);
      }
      if (Icmpv6SendIdentifier != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(Icmpv6SendIdentifier);
      }
      if (Icmpv6SendAllComponents != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(Icmpv6SendAllComponents);
      }
      if (Icmpv6SendComponent != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(Icmpv6SendComponent);
      }
      if (Icmpv6X509Name != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(Icmpv6X509Name);
      }
      if (Icmpv6X509Certificate != 0) {
        output.WriteRawTag(128, 6);
        output.WriteInt32(Icmpv6X509Certificate);
      }
      if (Icmpv6OptRedirectedPacket != 0) {
        output.WriteRawTag(136, 6);
        output.WriteInt32(Icmpv6OptRedirectedPacket);
      }
      if (Icmpv6OptMtu != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(Icmpv6OptMtu);
      }
      if (Icmpv6OptNbmaShortcutLimit != 0) {
        output.WriteRawTag(152, 6);
        output.WriteUInt32(Icmpv6OptNbmaShortcutLimit);
      }
      if (Icmpv6OptAdvertisementInterval != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(Icmpv6OptAdvertisementInterval);
      }
      if (Icmpv6OptHomeAgentPreference != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(Icmpv6OptHomeAgentPreference);
      }
      if (Icmpv6OptHomeAgentLifetime != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(Icmpv6OptHomeAgentLifetime);
      }
      if (Icmpv6OptIpv6Address.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteBytes(Icmpv6OptIpv6Address);
      }
      if (Icmpv6OptRdnssLifetime != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(Icmpv6OptRdnssLifetime);
      }
      if (Icmpv6OptRdnss.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteBytes(Icmpv6OptRdnss);
      }
      if (Icmpv6OptEfo != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(Icmpv6OptEfo);
      }
      if (Icmpv6OptEfoM != false) {
        output.WriteRawTag(216, 6);
        output.WriteBool(Icmpv6OptEfoM);
      }
      if (Icmpv6OptEfoO != false) {
        output.WriteRawTag(224, 6);
        output.WriteBool(Icmpv6OptEfoO);
      }
      if (Icmpv6OptEfoH != false) {
        output.WriteRawTag(232, 6);
        output.WriteBool(Icmpv6OptEfoH);
      }
      if (Icmpv6OptEfoPrf != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(Icmpv6OptEfoPrf);
      }
      if (Icmpv6OptEfoP != false) {
        output.WriteRawTag(248, 6);
        output.WriteBool(Icmpv6OptEfoP);
      }
      if (Icmpv6OptEfoRsv != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(Icmpv6OptEfoRsv);
      }
      if (Icmpv6OptHkrPadLength != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(Icmpv6OptHkrPadLength);
      }
      if (Icmpv6OptHkrAt != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Icmpv6OptHkrAt);
      }
      if (Icmpv6OptHkrReserved != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(Icmpv6OptHkrReserved);
      }
      if (Icmpv6OptHkrEncryptionPublicKey.Length != 0) {
        output.WriteRawTag(162, 7);
        output.WriteBytes(Icmpv6OptHkrEncryptionPublicKey);
      }
      if (Icmpv6OptHkrPadding.Length != 0) {
        output.WriteRawTag(170, 7);
        output.WriteBytes(Icmpv6OptHkrPadding);
      }
      if (Icmpv6OptHkrLifetime != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(Icmpv6OptHkrLifetime);
      }
      if (Icmpv6OptHkrEncryptedHandoverKey.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteBytes(Icmpv6OptHkrEncryptedHandoverKey);
      }
      if (Icmpv6OptHaiOptionCode != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(Icmpv6OptHaiOptionCode);
      }
      if (Icmpv6OptHaiLength != 0) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(Icmpv6OptHaiLength);
      }
      if (Icmpv6OptHaiValue.Length != 0) {
        output.WriteRawTag(210, 7);
        output.WriteBytes(Icmpv6OptHaiValue);
      }
      if (Icmpv6OptMnOptionCode != 0) {
        output.WriteRawTag(216, 7);
        output.WriteUInt32(Icmpv6OptMnOptionCode);
      }
      if (Icmpv6OptMnLength != 0) {
        output.WriteRawTag(224, 7);
        output.WriteUInt32(Icmpv6OptMnLength);
      }
      if (Icmpv6OptMnValue.Length != 0) {
        output.WriteRawTag(234, 7);
        output.WriteBytes(Icmpv6OptMnValue);
      }
      if (Icmpv6OptDnsslLifetime != 0) {
        output.WriteRawTag(240, 7);
        output.WriteUInt32(Icmpv6OptDnsslLifetime);
      }
      if (Icmpv6OptDnssl.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(Icmpv6OptDnssl);
      }
      if (Icmpv6OptAroStatus != 0) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(Icmpv6OptAroStatus);
      }
      if (Icmpv6OptAroRegistrationLifetime != 0) {
        output.WriteRawTag(136, 8);
        output.WriteUInt32(Icmpv6OptAroRegistrationLifetime);
      }
      if (Icmpv6OptAroEui64.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteBytes(Icmpv6OptAroEui64);
      }
      if (Icmpv6Opt6CoContextLength != 0) {
        output.WriteRawTag(152, 8);
        output.WriteUInt32(Icmpv6Opt6CoContextLength);
      }
      if (Icmpv6Opt6CoFlag != 0) {
        output.WriteRawTag(160, 8);
        output.WriteUInt32(Icmpv6Opt6CoFlag);
      }
      if (Icmpv6Opt6CoFlagC != false) {
        output.WriteRawTag(168, 8);
        output.WriteBool(Icmpv6Opt6CoFlagC);
      }
      if (Icmpv6Opt6CoFlagCid != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(Icmpv6Opt6CoFlagCid);
      }
      if (Icmpv6Opt6CoFlagReserved != 0) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(Icmpv6Opt6CoFlagReserved);
      }
      if (Icmpv6Opt6CoValidLifetime != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(Icmpv6Opt6CoValidLifetime);
      }
      if (Icmpv6Opt6CoContextPrefix.Length != 0) {
        output.WriteRawTag(202, 8);
        output.WriteBytes(Icmpv6Opt6CoContextPrefix);
      }
      if (Icmpv6OptAbroVersionLow != 0) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Icmpv6OptAbroVersionLow);
      }
      if (Icmpv6OptAbroVersionHigh != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(Icmpv6OptAbroVersionHigh);
      }
      if (Icmpv6OptAbroValidLifetime != 0) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(Icmpv6OptAbroValidLifetime);
      }
      if (Icmpv6OptAbro6LbrAddress.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteBytes(Icmpv6OptAbro6LbrAddress);
      }
      if (Icmpv6Opt6CioUnassigned1 != 0) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(Icmpv6Opt6CioUnassigned1);
      }
      if (Icmpv6Opt6CioFlagG != 0) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(Icmpv6Opt6CioFlagG);
      }
      if (Icmpv6Opt6CioUnassigned2 != 0) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(Icmpv6Opt6CioUnassigned2);
      }
      if (Icmpv6OptCaptivePortal.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(Icmpv6OptCaptivePortal);
      }
      if (Icmpv6MldMaximumResponseDelay != 0) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(Icmpv6MldMaximumResponseDelay);
      }
      if (Icmpv6MldMulticastAddress.Length != 0) {
        output.WriteRawTag(154, 9);
        output.WriteBytes(Icmpv6MldMulticastAddress);
      }
      if (Icmpv6RrSequenceNumber != 0) {
        output.WriteRawTag(160, 9);
        output.WriteUInt32(Icmpv6RrSequenceNumber);
      }
      if (Icmpv6RrSegmentNumber != 0) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(Icmpv6RrSegmentNumber);
      }
      if (Icmpv6RrFlag != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(Icmpv6RrFlag);
      }
      if (Icmpv6RrFlagT != false) {
        output.WriteRawTag(184, 9);
        output.WriteBool(Icmpv6RrFlagT);
      }
      if (Icmpv6RrFlagR != false) {
        output.WriteRawTag(192, 9);
        output.WriteBool(Icmpv6RrFlagR);
      }
      if (Icmpv6RrFlagA != false) {
        output.WriteRawTag(200, 9);
        output.WriteBool(Icmpv6RrFlagA);
      }
      if (Icmpv6RrFlagS != false) {
        output.WriteRawTag(208, 9);
        output.WriteBool(Icmpv6RrFlagS);
      }
      if (Icmpv6RrFlagP != false) {
        output.WriteRawTag(216, 9);
        output.WriteBool(Icmpv6RrFlagP);
      }
      if (Icmpv6RrFlagRsv != 0) {
        output.WriteRawTag(224, 9);
        output.WriteUInt32(Icmpv6RrFlagRsv);
      }
      if (Icmpv6RrMaxdelay != 0) {
        output.WriteRawTag(232, 9);
        output.WriteUInt32(Icmpv6RrMaxdelay);
      }
      if (Icmpv6RrPcoMp != 0) {
        output.WriteRawTag(240, 9);
        output.WriteInt32(Icmpv6RrPcoMp);
      }
      if (Icmpv6RrPcoMpOpcode != 0) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(Icmpv6RrPcoMpOpcode);
      }
      if (Icmpv6RrPcoMpOplength != 0) {
        output.WriteRawTag(128, 10);
        output.WriteUInt32(Icmpv6RrPcoMpOplength);
      }
      if (Icmpv6RrPcoMpOrdinal != 0) {
        output.WriteRawTag(136, 10);
        output.WriteUInt32(Icmpv6RrPcoMpOrdinal);
      }
      if (Icmpv6RrPcoMpMatchlen != 0) {
        output.WriteRawTag(144, 10);
        output.WriteUInt32(Icmpv6RrPcoMpMatchlen);
      }
      if (Icmpv6RrPcoMpMinlen != 0) {
        output.WriteRawTag(152, 10);
        output.WriteUInt32(Icmpv6RrPcoMpMinlen);
      }
      if (Icmpv6RrPcoMpMaxlen != 0) {
        output.WriteRawTag(160, 10);
        output.WriteUInt32(Icmpv6RrPcoMpMaxlen);
      }
      if (Icmpv6RrPcoMpMatchprefix.Length != 0) {
        output.WriteRawTag(170, 10);
        output.WriteBytes(Icmpv6RrPcoMpMatchprefix);
      }
      if (Icmpv6RrPcoUp != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(Icmpv6RrPcoUp);
      }
      if (Icmpv6RrPcoUpUselen != 0) {
        output.WriteRawTag(184, 10);
        output.WriteUInt32(Icmpv6RrPcoUpUselen);
      }
      if (Icmpv6RrPcoUpKeeplen != 0) {
        output.WriteRawTag(192, 10);
        output.WriteUInt32(Icmpv6RrPcoUpKeeplen);
      }
      if (Icmpv6RrPcoUpFlagmask != 0) {
        output.WriteRawTag(200, 10);
        output.WriteUInt32(Icmpv6RrPcoUpFlagmask);
      }
      if (Icmpv6RrPcoUpFlagmaskL != false) {
        output.WriteRawTag(208, 10);
        output.WriteBool(Icmpv6RrPcoUpFlagmaskL);
      }
      if (Icmpv6RrPcoUpFlagmaskA != false) {
        output.WriteRawTag(216, 10);
        output.WriteBool(Icmpv6RrPcoUpFlagmaskA);
      }
      if (Icmpv6RrPcoUpFlagmaskReserved != 0) {
        output.WriteRawTag(224, 10);
        output.WriteUInt32(Icmpv6RrPcoUpFlagmaskReserved);
      }
      if (Icmpv6RrPcoUpRaflags != 0) {
        output.WriteRawTag(232, 10);
        output.WriteUInt32(Icmpv6RrPcoUpRaflags);
      }
      if (Icmpv6RrPcoUpValidlifetime != 0) {
        output.WriteRawTag(240, 10);
        output.WriteUInt32(Icmpv6RrPcoUpValidlifetime);
      }
      if (Icmpv6RrPcoUpPreferredlifetime != 0) {
        output.WriteRawTag(248, 10);
        output.WriteUInt32(Icmpv6RrPcoUpPreferredlifetime);
      }
      if (Icmpv6RrPcoUpFlag != 0) {
        output.WriteRawTag(128, 11);
        output.WriteUInt32(Icmpv6RrPcoUpFlag);
      }
      if (Icmpv6RrPcoUpFlagV != false) {
        output.WriteRawTag(136, 11);
        output.WriteBool(Icmpv6RrPcoUpFlagV);
      }
      if (Icmpv6RrPcoUpFlagP != false) {
        output.WriteRawTag(144, 11);
        output.WriteBool(Icmpv6RrPcoUpFlagP);
      }
      if (Icmpv6RrPcoUpFlagReserved != 0) {
        output.WriteRawTag(152, 11);
        output.WriteUInt32(Icmpv6RrPcoUpFlagReserved);
      }
      if (Icmpv6RrPcoUpUseprefix.Length != 0) {
        output.WriteRawTag(162, 11);
        output.WriteBytes(Icmpv6RrPcoUpUseprefix);
      }
      if (Icmpv6RrRm != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(Icmpv6RrRm);
      }
      if (Icmpv6RrRmFlag != 0) {
        output.WriteRawTag(176, 11);
        output.WriteUInt32(Icmpv6RrRmFlag);
      }
      if (Icmpv6RrRmFlagB != false) {
        output.WriteRawTag(184, 11);
        output.WriteBool(Icmpv6RrRmFlagB);
      }
      if (Icmpv6RrRmFlagF != false) {
        output.WriteRawTag(192, 11);
        output.WriteBool(Icmpv6RrRmFlagF);
      }
      if (Icmpv6RrRmFlagReserved != 0) {
        output.WriteRawTag(200, 11);
        output.WriteUInt32(Icmpv6RrRmFlagReserved);
      }
      if (Icmpv6RrRmOrdinal != 0) {
        output.WriteRawTag(208, 11);
        output.WriteUInt32(Icmpv6RrRmOrdinal);
      }
      if (Icmpv6RrRmMatchedlen != 0) {
        output.WriteRawTag(216, 11);
        output.WriteUInt32(Icmpv6RrRmMatchedlen);
      }
      if (Icmpv6RrRmInterfaceindex != 0) {
        output.WriteRawTag(224, 11);
        output.WriteUInt32(Icmpv6RrRmInterfaceindex);
      }
      if (Icmpv6RrRmMatchedprefix.Length != 0) {
        output.WriteRawTag(234, 11);
        output.WriteBytes(Icmpv6RrRmMatchedprefix);
      }
      if (Icmpv6Mip6Identifier != 0) {
        output.WriteRawTag(240, 11);
        output.WriteUInt32(Icmpv6Mip6Identifier);
      }
      if (Icmpv6Mip6HomeAgentAddress.Length != 0) {
        output.WriteRawTag(250, 11);
        output.WriteBytes(Icmpv6Mip6HomeAgentAddress);
      }
      if (Icmpv6Mip6Flag != 0) {
        output.WriteRawTag(128, 12);
        output.WriteUInt32(Icmpv6Mip6Flag);
      }
      if (Icmpv6Mip6FlagM != false) {
        output.WriteRawTag(136, 12);
        output.WriteBool(Icmpv6Mip6FlagM);
      }
      if (Icmpv6Mip6FlagO != false) {
        output.WriteRawTag(144, 12);
        output.WriteBool(Icmpv6Mip6FlagO);
      }
      if (Icmpv6Mip6FlagRsv != 0) {
        output.WriteRawTag(152, 12);
        output.WriteUInt32(Icmpv6Mip6FlagRsv);
      }
      if (Icmpv6MldMaximumResponseCode != 0) {
        output.WriteRawTag(160, 12);
        output.WriteUInt32(Icmpv6MldMaximumResponseCode);
      }
      if (Icmpv6MldFlag != 0) {
        output.WriteRawTag(168, 12);
        output.WriteUInt32(Icmpv6MldFlag);
      }
      if (Icmpv6MldFlagS != false) {
        output.WriteRawTag(176, 12);
        output.WriteBool(Icmpv6MldFlagS);
      }
      if (Icmpv6MldFlagQrv != 0) {
        output.WriteRawTag(184, 12);
        output.WriteUInt32(Icmpv6MldFlagQrv);
      }
      if (Icmpv6MldFlagReserved != 0) {
        output.WriteRawTag(192, 12);
        output.WriteUInt32(Icmpv6MldFlagReserved);
      }
      if (Icmpv6MldQqi != 0) {
        output.WriteRawTag(200, 12);
        output.WriteUInt32(Icmpv6MldQqi);
      }
      if (Icmpv6MldNbSources != 0) {
        output.WriteRawTag(208, 12);
        output.WriteUInt32(Icmpv6MldNbSources);
      }
      if (Icmpv6MldSourceAddress.Length != 0) {
        output.WriteRawTag(218, 12);
        output.WriteBytes(Icmpv6MldSourceAddress);
      }
      if (Icmpv6MldrNbMcastRecords != 0) {
        output.WriteRawTag(224, 12);
        output.WriteUInt32(Icmpv6MldrNbMcastRecords);
      }
      if (Icmpv6MldrMar != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(Icmpv6MldrMar);
      }
      if (Icmpv6MldrMarRecordType != 0) {
        output.WriteRawTag(240, 12);
        output.WriteUInt32(Icmpv6MldrMarRecordType);
      }
      if (Icmpv6MldrMarAuxDataLen != 0) {
        output.WriteRawTag(248, 12);
        output.WriteUInt32(Icmpv6MldrMarAuxDataLen);
      }
      if (Icmpv6MldrMarNbSources != 0) {
        output.WriteRawTag(128, 13);
        output.WriteUInt32(Icmpv6MldrMarNbSources);
      }
      if (Icmpv6MldrMarMulticastAddress.Length != 0) {
        output.WriteRawTag(138, 13);
        output.WriteBytes(Icmpv6MldrMarMulticastAddress);
      }
      if (Icmpv6MldrMarSourceAddress.Length != 0) {
        output.WriteRawTag(146, 13);
        output.WriteBytes(Icmpv6MldrMarSourceAddress);
      }
      if (Icmpv6MldrMarAuxiliaryData.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteBytes(Icmpv6MldrMarAuxiliaryData);
      }
      if (Icmpv6Fmip6Subtype != 0) {
        output.WriteRawTag(160, 13);
        output.WriteUInt32(Icmpv6Fmip6Subtype);
      }
      if (Icmpv6Fmip6HiFlag != 0) {
        output.WriteRawTag(168, 13);
        output.WriteUInt32(Icmpv6Fmip6HiFlag);
      }
      if (Icmpv6Fmip6HiFlagS != false) {
        output.WriteRawTag(176, 13);
        output.WriteBool(Icmpv6Fmip6HiFlagS);
      }
      if (Icmpv6Fmip6HiFlagA != false) {
        output.WriteRawTag(184, 13);
        output.WriteBool(Icmpv6Fmip6HiFlagA);
      }
      if (Icmpv6Fmip6HiFlagReserved != 0) {
        output.WriteRawTag(192, 13);
        output.WriteUInt32(Icmpv6Fmip6HiFlagReserved);
      }
      if (Icmpv6Fmip6Identifier != 0) {
        output.WriteRawTag(200, 13);
        output.WriteUInt32(Icmpv6Fmip6Identifier);
      }
      if (Icmpv6McastRaQueryInterval != 0) {
        output.WriteRawTag(208, 13);
        output.WriteUInt32(Icmpv6McastRaQueryInterval);
      }
      if (Icmpv6McastRaRobustnessVariable != 0) {
        output.WriteRawTag(216, 13);
        output.WriteUInt32(Icmpv6McastRaRobustnessVariable);
      }
      if (Icmpv6NiQtype != 0) {
        output.WriteRawTag(224, 13);
        output.WriteUInt32(Icmpv6NiQtype);
      }
      if (Icmpv6NiFlag != 0) {
        output.WriteRawTag(232, 13);
        output.WriteUInt32(Icmpv6NiFlag);
      }
      if (Icmpv6NiFlagG != false) {
        output.WriteRawTag(240, 13);
        output.WriteBool(Icmpv6NiFlagG);
      }
      if (Icmpv6NiFlagS != false) {
        output.WriteRawTag(248, 13);
        output.WriteBool(Icmpv6NiFlagS);
      }
      if (Icmpv6NiFlagL != false) {
        output.WriteRawTag(128, 14);
        output.WriteBool(Icmpv6NiFlagL);
      }
      if (Icmpv6NiFlagC != false) {
        output.WriteRawTag(136, 14);
        output.WriteBool(Icmpv6NiFlagC);
      }
      if (Icmpv6NiFlagA != false) {
        output.WriteRawTag(144, 14);
        output.WriteBool(Icmpv6NiFlagA);
      }
      if (Icmpv6NiFlagT != false) {
        output.WriteRawTag(152, 14);
        output.WriteBool(Icmpv6NiFlagT);
      }
      if (Icmpv6NiFlagRsv != 0) {
        output.WriteRawTag(160, 14);
        output.WriteUInt32(Icmpv6NiFlagRsv);
      }
      if (Icmpv6NiNonce != 0UL) {
        output.WriteRawTag(168, 14);
        output.WriteUInt64(Icmpv6NiNonce);
      }
      if (Icmpv6NiQuerySubjectIpv6.Length != 0) {
        output.WriteRawTag(178, 14);
        output.WriteBytes(Icmpv6NiQuerySubjectIpv6);
      }
      if (Icmpv6NiQuerySubjectFqdn.Length != 0) {
        output.WriteRawTag(186, 14);
        output.WriteString(Icmpv6NiQuerySubjectFqdn);
      }
      if (Icmpv6NiQuerySubjectIpv4.Length != 0) {
        output.WriteRawTag(194, 14);
        output.WriteBytes(Icmpv6NiQuerySubjectIpv4);
      }
      if (Icmpv6NiReplyNodeTtl != 0) {
        output.WriteRawTag(200, 14);
        output.WriteUInt32(Icmpv6NiReplyNodeTtl);
      }
      if (Icmpv6NiReplyNodeName.Length != 0) {
        output.WriteRawTag(210, 14);
        output.WriteString(Icmpv6NiReplyNodeName);
      }
      if (Icmpv6NiReplyNodeAddress.Length != 0) {
        output.WriteRawTag(218, 14);
        output.WriteBytes(Icmpv6NiReplyNodeAddress);
      }
      if (Icmpv6NiReplyIpv4Address.Length != 0) {
        output.WriteRawTag(226, 14);
        output.WriteBytes(Icmpv6NiReplyIpv4Address);
      }
      if (Icmpv6RplDisFlags != 0) {
        output.WriteRawTag(232, 14);
        output.WriteUInt32(Icmpv6RplDisFlags);
      }
      if (Icmpv6RplDioInstance != 0) {
        output.WriteRawTag(240, 14);
        output.WriteUInt32(Icmpv6RplDioInstance);
      }
      if (Icmpv6RplDioVersion != 0) {
        output.WriteRawTag(248, 14);
        output.WriteUInt32(Icmpv6RplDioVersion);
      }
      if (Icmpv6RplDioRank != 0) {
        output.WriteRawTag(128, 15);
        output.WriteUInt32(Icmpv6RplDioRank);
      }
      if (Icmpv6RplDioFlag != 0) {
        output.WriteRawTag(136, 15);
        output.WriteUInt32(Icmpv6RplDioFlag);
      }
      if (Icmpv6RplDioFlagG != false) {
        output.WriteRawTag(144, 15);
        output.WriteBool(Icmpv6RplDioFlagG);
      }
      if (Icmpv6RplDioFlag0 != false) {
        output.WriteRawTag(152, 15);
        output.WriteBool(Icmpv6RplDioFlag0);
      }
      if (Icmpv6RplDioFlagMop != 0) {
        output.WriteRawTag(160, 15);
        output.WriteUInt32(Icmpv6RplDioFlagMop);
      }
      if (Icmpv6RplDioFlagPreference != 0) {
        output.WriteRawTag(168, 15);
        output.WriteUInt32(Icmpv6RplDioFlagPreference);
      }
      if (Icmpv6RplDioDtsn != 0) {
        output.WriteRawTag(176, 15);
        output.WriteUInt32(Icmpv6RplDioDtsn);
      }
      if (Icmpv6RplDioDagid.Length != 0) {
        output.WriteRawTag(186, 15);
        output.WriteBytes(Icmpv6RplDioDagid);
      }
      if (Icmpv6RplDaoInstance != 0) {
        output.WriteRawTag(192, 15);
        output.WriteUInt32(Icmpv6RplDaoInstance);
      }
      if (Icmpv6RplDaoFlag != 0) {
        output.WriteRawTag(200, 15);
        output.WriteUInt32(Icmpv6RplDaoFlag);
      }
      if (Icmpv6RplDaoFlagK != false) {
        output.WriteRawTag(208, 15);
        output.WriteBool(Icmpv6RplDaoFlagK);
      }
      if (Icmpv6RplDaoFlagD != false) {
        output.WriteRawTag(216, 15);
        output.WriteBool(Icmpv6RplDaoFlagD);
      }
      if (Icmpv6RplDaoFlagRsv != 0) {
        output.WriteRawTag(224, 15);
        output.WriteUInt32(Icmpv6RplDaoFlagRsv);
      }
      if (Icmpv6RplDaoSequence != 0) {
        output.WriteRawTag(232, 15);
        output.WriteUInt32(Icmpv6RplDaoSequence);
      }
      if (Icmpv6RplDaoDodagid.Length != 0) {
        output.WriteRawTag(242, 15);
        output.WriteBytes(Icmpv6RplDaoDodagid);
      }
      if (Icmpv6RplDaoackInstance != 0) {
        output.WriteRawTag(248, 15);
        output.WriteUInt32(Icmpv6RplDaoackInstance);
      }
      if (Icmpv6RplDaoackFlag != 0) {
        output.WriteRawTag(128, 16);
        output.WriteUInt32(Icmpv6RplDaoackFlag);
      }
      if (Icmpv6RplDaoackFlagD != false) {
        output.WriteRawTag(136, 16);
        output.WriteBool(Icmpv6RplDaoackFlagD);
      }
      if (Icmpv6RplDaoackFlagRsv != 0) {
        output.WriteRawTag(144, 16);
        output.WriteUInt32(Icmpv6RplDaoackFlagRsv);
      }
      if (Icmpv6RplDaoackSequence != 0) {
        output.WriteRawTag(152, 16);
        output.WriteUInt32(Icmpv6RplDaoackSequence);
      }
      if (Icmpv6RplDaoackStatus != 0) {
        output.WriteRawTag(160, 16);
        output.WriteUInt32(Icmpv6RplDaoackStatus);
      }
      if (Icmpv6RplDaoackDodagid.Length != 0) {
        output.WriteRawTag(170, 16);
        output.WriteBytes(Icmpv6RplDaoackDodagid);
      }
      if (Icmpv6RplCcInstance != 0) {
        output.WriteRawTag(176, 16);
        output.WriteUInt32(Icmpv6RplCcInstance);
      }
      if (Icmpv6RplCcFlag != 0) {
        output.WriteRawTag(184, 16);
        output.WriteUInt32(Icmpv6RplCcFlag);
      }
      if (Icmpv6RplCcFlagR != false) {
        output.WriteRawTag(192, 16);
        output.WriteBool(Icmpv6RplCcFlagR);
      }
      if (Icmpv6RplCcFlagRsv != 0) {
        output.WriteRawTag(200, 16);
        output.WriteUInt32(Icmpv6RplCcFlagRsv);
      }
      if (Icmpv6RplCcNonce != 0) {
        output.WriteRawTag(208, 16);
        output.WriteUInt32(Icmpv6RplCcNonce);
      }
      if (Icmpv6RplCcDodagid.Length != 0) {
        output.WriteRawTag(218, 16);
        output.WriteBytes(Icmpv6RplCcDodagid);
      }
      if (Icmpv6RplCcDestinationCounter != 0) {
        output.WriteRawTag(224, 16);
        output.WriteUInt32(Icmpv6RplCcDestinationCounter);
      }
      if (Icmpv6RplSecureFlag != 0) {
        output.WriteRawTag(232, 16);
        output.WriteUInt32(Icmpv6RplSecureFlag);
      }
      if (Icmpv6RplSecureFlagT != false) {
        output.WriteRawTag(240, 16);
        output.WriteBool(Icmpv6RplSecureFlagT);
      }
      if (Icmpv6RplSecureFlagRsv != 0) {
        output.WriteRawTag(248, 16);
        output.WriteUInt32(Icmpv6RplSecureFlagRsv);
      }
      if (Icmpv6RplSecureAlgorithm != 0) {
        output.WriteRawTag(128, 17);
        output.WriteUInt32(Icmpv6RplSecureAlgorithm);
      }
      if (Icmpv6RplSecureKim != 0) {
        output.WriteRawTag(136, 17);
        output.WriteUInt32(Icmpv6RplSecureKim);
      }
      if (Icmpv6RplSecureLvl != 0) {
        output.WriteRawTag(144, 17);
        output.WriteUInt32(Icmpv6RplSecureLvl);
      }
      if (Icmpv6RplSecureRsv != 0) {
        output.WriteRawTag(152, 17);
        output.WriteUInt32(Icmpv6RplSecureRsv);
      }
      if (Icmpv6RplSecureCounter != 0) {
        output.WriteRawTag(160, 17);
        output.WriteUInt32(Icmpv6RplSecureCounter);
      }
      if (Icmpv6RplSecureKeySource.Length != 0) {
        output.WriteRawTag(170, 17);
        output.WriteBytes(Icmpv6RplSecureKeySource);
      }
      if (Icmpv6RplSecureKeyIndex != 0) {
        output.WriteRawTag(176, 17);
        output.WriteUInt32(Icmpv6RplSecureKeyIndex);
      }
      if (Icmpv6RplOptType != 0) {
        output.WriteRawTag(184, 17);
        output.WriteUInt32(Icmpv6RplOptType);
      }
      if (Icmpv6RplOptLength != 0) {
        output.WriteRawTag(192, 17);
        output.WriteUInt32(Icmpv6RplOptLength);
      }
      if (Icmpv6RplOptReserved != 0) {
        output.WriteRawTag(200, 17);
        output.WriteInt32(Icmpv6RplOptReserved);
      }
      if (Icmpv6RplOptPadn != 0) {
        output.WriteRawTag(208, 17);
        output.WriteInt32(Icmpv6RplOptPadn);
      }
      if (Icmpv6RplOptMetricType != 0) {
        output.WriteRawTag(216, 17);
        output.WriteUInt32(Icmpv6RplOptMetricType);
      }
      if (Icmpv6RplOptMetricFlags != 0) {
        output.WriteRawTag(224, 17);
        output.WriteUInt32(Icmpv6RplOptMetricFlags);
      }
      if (Icmpv6RplOptMetricReserved != 0) {
        output.WriteRawTag(232, 17);
        output.WriteUInt32(Icmpv6RplOptMetricReserved);
      }
      if (Icmpv6RplOptMetricFlagP != false) {
        output.WriteRawTag(240, 17);
        output.WriteBool(Icmpv6RplOptMetricFlagP);
      }
      if (Icmpv6RplOptMetricFlagC != false) {
        output.WriteRawTag(248, 17);
        output.WriteBool(Icmpv6RplOptMetricFlagC);
      }
      if (Icmpv6RplOptMetricFlagO != false) {
        output.WriteRawTag(128, 18);
        output.WriteBool(Icmpv6RplOptMetricFlagO);
      }
      if (Icmpv6RplOptMetricFlagR != false) {
        output.WriteRawTag(136, 18);
        output.WriteBool(Icmpv6RplOptMetricFlagR);
      }
      if (Icmpv6RplOptMetricFlagA != 0) {
        output.WriteRawTag(144, 18);
        output.WriteUInt32(Icmpv6RplOptMetricFlagA);
      }
      if (Icmpv6RplOptMetricPrec != 0) {
        output.WriteRawTag(152, 18);
        output.WriteUInt32(Icmpv6RplOptMetricPrec);
      }
      if (Icmpv6RplOptMetricLength != 0) {
        output.WriteRawTag(160, 18);
        output.WriteUInt32(Icmpv6RplOptMetricLength);
      }
      if (Icmpv6RplOptMetricNsaObject != 0) {
        output.WriteRawTag(168, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNsaObject);
      }
      if (Icmpv6RplOptMetricNsaObjectReserved != 0) {
        output.WriteRawTag(176, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNsaObjectReserved);
      }
      if (Icmpv6RplOptMetricNsaObjectFlags != 0) {
        output.WriteRawTag(184, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNsaObjectFlags);
      }
      if (Icmpv6RplOptMetricNsaObjectFlagA != false) {
        output.WriteRawTag(192, 18);
        output.WriteBool(Icmpv6RplOptMetricNsaObjectFlagA);
      }
      if (Icmpv6RplOptMetricNsaObjectFlagO != false) {
        output.WriteRawTag(200, 18);
        output.WriteBool(Icmpv6RplOptMetricNsaObjectFlagO);
      }
      if (Icmpv6RplOptMetricNeObject != 0) {
        output.WriteRawTag(208, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNeObject);
      }
      if (Icmpv6RplOptMetricNeObjectFlags != 0) {
        output.WriteRawTag(216, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNeObjectFlags);
      }
      if (Icmpv6RplOptMetricNeObjectFlagI != false) {
        output.WriteRawTag(224, 18);
        output.WriteBool(Icmpv6RplOptMetricNeObjectFlagI);
      }
      if (Icmpv6RplOptMetricNeObjectType != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNeObjectType);
      }
      if (Icmpv6RplOptMetricNeObjectFlagE != false) {
        output.WriteRawTag(240, 18);
        output.WriteBool(Icmpv6RplOptMetricNeObjectFlagE);
      }
      if (Icmpv6RplOptMetricNeObjectEnergy != 0) {
        output.WriteRawTag(248, 18);
        output.WriteUInt32(Icmpv6RplOptMetricNeObjectEnergy);
      }
      if (Icmpv6RplOptMetricHpObject != 0) {
        output.WriteRawTag(128, 19);
        output.WriteUInt32(Icmpv6RplOptMetricHpObject);
      }
      if (Icmpv6RplOptMetricHpObjectReserved != 0) {
        output.WriteRawTag(136, 19);
        output.WriteUInt32(Icmpv6RplOptMetricHpObjectReserved);
      }
      if (Icmpv6RplOptMetricHpObjectFlags != 0) {
        output.WriteRawTag(144, 19);
        output.WriteUInt32(Icmpv6RplOptMetricHpObjectFlags);
      }
      if (Icmpv6RplOptMetricHpObjectHp != 0) {
        output.WriteRawTag(152, 19);
        output.WriteUInt32(Icmpv6RplOptMetricHpObjectHp);
      }
      if (Icmpv6RplOptMetricLtObjectLt != 0) {
        output.WriteRawTag(160, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLtObjectLt);
      }
      if (Icmpv6RplOptMetricLlObjectLl != 0) {
        output.WriteRawTag(168, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLlObjectLl);
      }
      if (Icmpv6RplOptMetricLqlObject != 0) {
        output.WriteRawTag(176, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLqlObject);
      }
      if (Icmpv6RplOptMetricLqlObjectRes != 0) {
        output.WriteRawTag(184, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLqlObjectRes);
      }
      if (Icmpv6RplOptMetricLqlObjectVal != 0) {
        output.WriteRawTag(192, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLqlObjectVal);
      }
      if (Icmpv6RplOptMetricLqlObjectCounter != 0) {
        output.WriteRawTag(200, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLqlObjectCounter);
      }
      if (Icmpv6RplOptMetricEtxObjectEtx != 0) {
        output.WriteRawTag(208, 19);
        output.WriteUInt32(Icmpv6RplOptMetricEtxObjectEtx);
      }
      if (Icmpv6RplOptMetricLcObject != 0) {
        output.WriteRawTag(216, 19);
        output.WriteInt32(Icmpv6RplOptMetricLcObject);
      }
      if (Icmpv6RplOptMetricLcObjectRes != 0) {
        output.WriteRawTag(224, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLcObjectRes);
      }
      if (Icmpv6RplOptMetricLcObjectLc != 0) {
        output.WriteRawTag(232, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLcObjectLc);
      }
      if (Icmpv6RplOptMetricLcObjectCounter != 0) {
        output.WriteRawTag(240, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLcObjectCounter);
      }
      if (Icmpv6RplOptMetricLcObjectReserved != 0) {
        output.WriteRawTag(248, 19);
        output.WriteUInt32(Icmpv6RplOptMetricLcObjectReserved);
      }
      if (Icmpv6RplOptMetricLcObjectFlagI != 0) {
        output.WriteRawTag(128, 20);
        output.WriteUInt32(Icmpv6RplOptMetricLcObjectFlagI);
      }
      if (Icmpv6RplOptRoutePrefixLength != 0) {
        output.WriteRawTag(136, 20);
        output.WriteUInt32(Icmpv6RplOptRoutePrefixLength);
      }
      if (Icmpv6RplOptRouteFlag != 0) {
        output.WriteRawTag(144, 20);
        output.WriteUInt32(Icmpv6RplOptRouteFlag);
      }
      if (Icmpv6RplOptRoutePref != 0) {
        output.WriteRawTag(152, 20);
        output.WriteUInt32(Icmpv6RplOptRoutePref);
      }
      if (Icmpv6RplOptRouteReserved != 0) {
        output.WriteRawTag(160, 20);
        output.WriteUInt32(Icmpv6RplOptRouteReserved);
      }
      if (Icmpv6RplOptRouteLifetime != 0) {
        output.WriteRawTag(168, 20);
        output.WriteUInt32(Icmpv6RplOptRouteLifetime);
      }
      if (Icmpv6RplOptRoutePrefix.Length != 0) {
        output.WriteRawTag(178, 20);
        output.WriteBytes(Icmpv6RplOptRoutePrefix);
      }
      if (Icmpv6RplOptConfigFlag != 0) {
        output.WriteRawTag(184, 20);
        output.WriteUInt32(Icmpv6RplOptConfigFlag);
      }
      if (Icmpv6RplOptConfigReserved != 0) {
        output.WriteRawTag(192, 20);
        output.WriteUInt32(Icmpv6RplOptConfigReserved);
      }
      if (Icmpv6RplOptConfigAuth != false) {
        output.WriteRawTag(200, 20);
        output.WriteBool(Icmpv6RplOptConfigAuth);
      }
      if (Icmpv6RplOptConfigPcs != 0) {
        output.WriteRawTag(208, 20);
        output.WriteUInt32(Icmpv6RplOptConfigPcs);
      }
      if (Icmpv6RplOptConfigIntervalDouble != 0) {
        output.WriteRawTag(216, 20);
        output.WriteUInt32(Icmpv6RplOptConfigIntervalDouble);
      }
      if (Icmpv6RplOptConfigIntervalMin != 0) {
        output.WriteRawTag(224, 20);
        output.WriteUInt32(Icmpv6RplOptConfigIntervalMin);
      }
      if (Icmpv6RplOptConfigRedundancy != 0) {
        output.WriteRawTag(232, 20);
        output.WriteUInt32(Icmpv6RplOptConfigRedundancy);
      }
      if (Icmpv6RplOptConfigMaxRankInc != 0) {
        output.WriteRawTag(240, 20);
        output.WriteUInt32(Icmpv6RplOptConfigMaxRankInc);
      }
      if (Icmpv6RplOptConfigMinHopRankInc != 0) {
        output.WriteRawTag(248, 20);
        output.WriteUInt32(Icmpv6RplOptConfigMinHopRankInc);
      }
      if (Icmpv6RplOptConfigOcp != 0) {
        output.WriteRawTag(128, 21);
        output.WriteUInt32(Icmpv6RplOptConfigOcp);
      }
      if (Icmpv6RplOptConfigRsv != 0) {
        output.WriteRawTag(136, 21);
        output.WriteUInt32(Icmpv6RplOptConfigRsv);
      }
      if (Icmpv6RplOptConfigDefLifetime != 0) {
        output.WriteRawTag(144, 21);
        output.WriteUInt32(Icmpv6RplOptConfigDefLifetime);
      }
      if (Icmpv6RplOptConfigLifetimeUnit != 0) {
        output.WriteRawTag(152, 21);
        output.WriteUInt32(Icmpv6RplOptConfigLifetimeUnit);
      }
      if (Icmpv6RplOptTargetFlag != 0) {
        output.WriteRawTag(160, 21);
        output.WriteInt32(Icmpv6RplOptTargetFlag);
      }
      if (Icmpv6RplOptTargetPrefixLength != 0) {
        output.WriteRawTag(168, 21);
        output.WriteUInt32(Icmpv6RplOptTargetPrefixLength);
      }
      if (Icmpv6RplOptTargetPrefix.Length != 0) {
        output.WriteRawTag(178, 21);
        output.WriteBytes(Icmpv6RplOptTargetPrefix);
      }
      if (Icmpv6RplOptTransitFlag != 0) {
        output.WriteRawTag(184, 21);
        output.WriteUInt32(Icmpv6RplOptTransitFlag);
      }
      if (Icmpv6RplOptTransitFlagE != false) {
        output.WriteRawTag(192, 21);
        output.WriteBool(Icmpv6RplOptTransitFlagE);
      }
      if (Icmpv6RplOptTransitFlagRsv != 0) {
        output.WriteRawTag(200, 21);
        output.WriteUInt32(Icmpv6RplOptTransitFlagRsv);
      }
      if (Icmpv6RplOptTransitPathctl != 0) {
        output.WriteRawTag(208, 21);
        output.WriteUInt32(Icmpv6RplOptTransitPathctl);
      }
      if (Icmpv6RplOptTransitPathseq != 0) {
        output.WriteRawTag(216, 21);
        output.WriteUInt32(Icmpv6RplOptTransitPathseq);
      }
      if (Icmpv6RplOptTransitPathlifetime != 0) {
        output.WriteRawTag(224, 21);
        output.WriteUInt32(Icmpv6RplOptTransitPathlifetime);
      }
      if (Icmpv6RplOptTransitParent.Length != 0) {
        output.WriteRawTag(234, 21);
        output.WriteBytes(Icmpv6RplOptTransitParent);
      }
      if (Icmpv6RplOptSolicitedInstance != 0) {
        output.WriteRawTag(240, 21);
        output.WriteUInt32(Icmpv6RplOptSolicitedInstance);
      }
      if (Icmpv6RplOptSolicitedFlag != 0) {
        output.WriteRawTag(248, 21);
        output.WriteUInt32(Icmpv6RplOptSolicitedFlag);
      }
      if (Icmpv6RplOptSolicitedFlagV != false) {
        output.WriteRawTag(128, 22);
        output.WriteBool(Icmpv6RplOptSolicitedFlagV);
      }
      if (Icmpv6RplOptSolicitedFlagI != false) {
        output.WriteRawTag(136, 22);
        output.WriteBool(Icmpv6RplOptSolicitedFlagI);
      }
      if (Icmpv6RplOptSolicitedFlagD != false) {
        output.WriteRawTag(144, 22);
        output.WriteBool(Icmpv6RplOptSolicitedFlagD);
      }
      if (Icmpv6RplOptSolicitedFlagRsv != 0) {
        output.WriteRawTag(152, 22);
        output.WriteUInt32(Icmpv6RplOptSolicitedFlagRsv);
      }
      if (Icmpv6RplOptSolicitedDodagid.Length != 0) {
        output.WriteRawTag(162, 22);
        output.WriteBytes(Icmpv6RplOptSolicitedDodagid);
      }
      if (Icmpv6RplOptSolicitedVersion != 0) {
        output.WriteRawTag(168, 22);
        output.WriteUInt32(Icmpv6RplOptSolicitedVersion);
      }
      if (Icmpv6RplOptPrefixLength != 0) {
        output.WriteRawTag(176, 22);
        output.WriteUInt32(Icmpv6RplOptPrefixLength);
      }
      if (Icmpv6RplOptPrefixFlag != 0) {
        output.WriteRawTag(184, 22);
        output.WriteUInt32(Icmpv6RplOptPrefixFlag);
      }
      if (Icmpv6RplOptPrefixFlagL != false) {
        output.WriteRawTag(192, 22);
        output.WriteBool(Icmpv6RplOptPrefixFlagL);
      }
      if (Icmpv6RplOptConfigFlagA != false) {
        output.WriteRawTag(200, 22);
        output.WriteBool(Icmpv6RplOptConfigFlagA);
      }
      if (Icmpv6RplOptConfigFlagR != false) {
        output.WriteRawTag(208, 22);
        output.WriteBool(Icmpv6RplOptConfigFlagR);
      }
      if (Icmpv6RplOptConfigFlagRsv != 0) {
        output.WriteRawTag(216, 22);
        output.WriteUInt32(Icmpv6RplOptConfigFlagRsv);
      }
      if (Icmpv6RplOptPrefixValidLifetime != 0) {
        output.WriteRawTag(224, 22);
        output.WriteUInt32(Icmpv6RplOptPrefixValidLifetime);
      }
      if (Icmpv6RplOptPrefixPreferredLifetime != 0) {
        output.WriteRawTag(232, 22);
        output.WriteUInt32(Icmpv6RplOptPrefixPreferredLifetime);
      }
      if (Icmpv6RplOptPrefix.Length != 0) {
        output.WriteRawTag(242, 22);
        output.WriteBytes(Icmpv6RplOptPrefix);
      }
      if (Icmpv6RplOptTargetdescDescriptor != 0) {
        output.WriteRawTag(248, 22);
        output.WriteUInt32(Icmpv6RplOptTargetdescDescriptor);
      }
      if (Icmpv6RplOptRoutediscoveryFlag != 0) {
        output.WriteRawTag(128, 23);
        output.WriteInt32(Icmpv6RplOptRoutediscoveryFlag);
      }
      if (Icmpv6RplOptRoutediscoveryFlagReply != false) {
        output.WriteRawTag(136, 23);
        output.WriteBool(Icmpv6RplOptRoutediscoveryFlagReply);
      }
      if (Icmpv6RplOptRoutediscoveryFlagHopbyhop != false) {
        output.WriteRawTag(144, 23);
        output.WriteBool(Icmpv6RplOptRoutediscoveryFlagHopbyhop);
      }
      if (Icmpv6RplOptRoutediscoveryFlagNumofroutes != 0) {
        output.WriteRawTag(152, 23);
        output.WriteUInt32(Icmpv6RplOptRoutediscoveryFlagNumofroutes);
      }
      if (Icmpv6RplOptRoutediscoveryFlagCompr != 0) {
        output.WriteRawTag(160, 23);
        output.WriteUInt32(Icmpv6RplOptRoutediscoveryFlagCompr);
      }
      if (Icmpv6RplOptRoutediscoveryLifetime != 0) {
        output.WriteRawTag(168, 23);
        output.WriteUInt32(Icmpv6RplOptRoutediscoveryLifetime);
      }
      if (Icmpv6RplOptRoutediscoveryMaxrank != 0) {
        output.WriteRawTag(176, 23);
        output.WriteUInt32(Icmpv6RplOptRoutediscoveryMaxrank);
      }
      if (Icmpv6RplOptRoutediscoveryNh != 0) {
        output.WriteRawTag(184, 23);
        output.WriteUInt32(Icmpv6RplOptRoutediscoveryNh);
      }
      if (Icmpv6RplOptRoutediscoveryTargetaddr.Length != 0) {
        output.WriteRawTag(194, 23);
        output.WriteBytes(Icmpv6RplOptRoutediscoveryTargetaddr);
      }
      if (Icmpv6RplOptRoutediscoveryAddrVec != 0) {
        output.WriteRawTag(200, 23);
        output.WriteInt32(Icmpv6RplOptRoutediscoveryAddrVec);
      }
      if (Icmpv6RplOptRoutediscoveryAddrvecAddr.Length != 0) {
        output.WriteRawTag(210, 23);
        output.WriteBytes(Icmpv6RplOptRoutediscoveryAddrvecAddr);
      }
      if (Icmpv6RplP2PDroInstance != 0) {
        output.WriteRawTag(216, 23);
        output.WriteUInt32(Icmpv6RplP2PDroInstance);
      }
      if (Icmpv6RplP2PDroVersion != 0) {
        output.WriteRawTag(224, 23);
        output.WriteUInt32(Icmpv6RplP2PDroVersion);
      }
      if (Icmpv6RplP2PDroFlag != 0) {
        output.WriteRawTag(232, 23);
        output.WriteUInt32(Icmpv6RplP2PDroFlag);
      }
      if (Icmpv6RplP2PDroFlagStop != false) {
        output.WriteRawTag(240, 23);
        output.WriteBool(Icmpv6RplP2PDroFlagStop);
      }
      if (Icmpv6RplP2PDroFlagAck != false) {
        output.WriteRawTag(248, 23);
        output.WriteBool(Icmpv6RplP2PDroFlagAck);
      }
      if (Icmpv6RplP2PDroFlagSeq != 0) {
        output.WriteRawTag(128, 24);
        output.WriteUInt32(Icmpv6RplP2PDroFlagSeq);
      }
      if (Icmpv6RplP2PDroFlagReserved != 0) {
        output.WriteRawTag(136, 24);
        output.WriteUInt32(Icmpv6RplP2PDroFlagReserved);
      }
      if (Icmpv6RplP2PDroDagid.Length != 0) {
        output.WriteRawTag(146, 24);
        output.WriteBytes(Icmpv6RplP2PDroDagid);
      }
      if (Icmpv6RplP2PDroackFlag != 0) {
        output.WriteRawTag(152, 24);
        output.WriteUInt32(Icmpv6RplP2PDroackFlag);
      }
      if (Icmpv6RplP2PDroackFlagSeq != 0) {
        output.WriteRawTag(160, 24);
        output.WriteUInt32(Icmpv6RplP2PDroackFlagSeq);
      }
      if (Icmpv6RplP2PDroackFlagReserved != 0) {
        output.WriteRawTag(168, 24);
        output.WriteUInt32(Icmpv6RplP2PDroackFlagReserved);
      }
      if (Icmpv6IlnpNbLocs != 0) {
        output.WriteRawTag(176, 24);
        output.WriteUInt32(Icmpv6IlnpNbLocs);
      }
      if (Icmpv6IlnpNbLocator != 0UL) {
        output.WriteRawTag(184, 24);
        output.WriteUInt64(Icmpv6IlnpNbLocator);
      }
      if (Icmpv6IlnpNbPreference != 0) {
        output.WriteRawTag(192, 24);
        output.WriteUInt32(Icmpv6IlnpNbPreference);
      }
      if (Icmpv6IlnpNbLifetime != 0) {
        output.WriteRawTag(200, 24);
        output.WriteUInt32(Icmpv6IlnpNbLifetime);
      }
      if (Icmpv66LowpanndDaStatus != 0) {
        output.WriteRawTag(208, 24);
        output.WriteUInt32(Icmpv66LowpanndDaStatus);
      }
      if (Icmpv66LowpanndDaRsv != 0) {
        output.WriteRawTag(216, 24);
        output.WriteUInt32(Icmpv66LowpanndDaRsv);
      }
      if (Icmpv66LowpanndDaLifetime != 0) {
        output.WriteRawTag(224, 24);
        output.WriteUInt32(Icmpv66LowpanndDaLifetime);
      }
      if (Icmpv66LowpanndDaEui64.Length != 0) {
        output.WriteRawTag(234, 24);
        output.WriteBytes(Icmpv66LowpanndDaEui64);
      }
      if (Icmpv66LowpanndDaRegAddr.Length != 0) {
        output.WriteRawTag(242, 24);
        output.WriteBytes(Icmpv66LowpanndDaRegAddr);
      }
      if (Icmpv6RespIn != 0L) {
        output.WriteRawTag(248, 24);
        output.WriteInt64(Icmpv6RespIn);
      }
      if (Icmpv6NoResp != 0) {
        output.WriteRawTag(128, 25);
        output.WriteInt32(Icmpv6NoResp);
      }
      if (Icmpv6RespTo != 0L) {
        output.WriteRawTag(136, 25);
        output.WriteInt64(Icmpv6RespTo);
      }
      if (Icmpv6Resptime != 0D) {
        output.WriteRawTag(145, 25);
        output.WriteDouble(Icmpv6Resptime);
      }
      if (Icmpv6MplSeedInfoMinSequence != 0) {
        output.WriteRawTag(152, 25);
        output.WriteUInt32(Icmpv6MplSeedInfoMinSequence);
      }
      if (Icmpv6MplSeedInfoBmLen != 0) {
        output.WriteRawTag(160, 25);
        output.WriteUInt32(Icmpv6MplSeedInfoBmLen);
      }
      if (Icmpv6MplSeedInfoS != 0) {
        output.WriteRawTag(168, 25);
        output.WriteUInt32(Icmpv6MplSeedInfoS);
      }
      if (Icmpv6MplSeedInfoSeedId.Length != 0) {
        output.WriteRawTag(178, 25);
        output.WriteString(Icmpv6MplSeedInfoSeedId);
      }
      if (Icmpv6MplSeedInfoSequence != 0) {
        output.WriteRawTag(184, 25);
        output.WriteUInt32(Icmpv6MplSeedInfoSequence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Icmpv6Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Type);
      }
      if (Icmpv6Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Code);
      }
      if (Icmpv6Checksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Checksum);
      }
      if (Icmpv6ChecksumStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6ChecksumStatus);
      }
      if (Icmpv6Reserved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6Reserved);
      }
      if (Icmpv6Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6Data);
      }
      if (Icmpv6UnknownData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6UnknownData);
      }
      if (Icmpv6Mtu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Mtu);
      }
      if (Icmpv6Pointer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Pointer);
      }
      if (Icmpv6EchoIdentifier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6EchoIdentifier);
      }
      if (Icmpv6EchoSequenceNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6EchoSequenceNumber);
      }
      if (Icmpv6Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6Nonce);
      }
      if (Icmpv6NdRaCurHopLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaCurHopLimit);
      }
      if (Icmpv6NdRaFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaFlag);
      }
      if (Icmpv6NdRaFlagM != false) {
        size += 1 + 1;
      }
      if (Icmpv6NdRaFlagO != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdRaFlagH != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdRaFlagPrf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaFlagPrf);
      }
      if (Icmpv6NdRaFlagP != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdRaFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaFlagRsv);
      }
      if (Icmpv6NdRaRouterLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaRouterLifetime);
      }
      if (Icmpv6NdRaReachableTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaReachableTime);
      }
      if (Icmpv6NdRaRetransTimer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdRaRetransTimer);
      }
      if (Icmpv6NdNsTargetAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NdNsTargetAddress);
      }
      if (Icmpv6NdNaFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdNaFlag);
      }
      if (Icmpv6NdNaFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdNaFlagS != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdNaFlagO != false) {
        size += 2 + 1;
      }
      if (Icmpv6NdNaFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NdNaFlagRsv);
      }
      if (Icmpv6NdNaTargetAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NdNaTargetAddress);
      }
      if (Icmpv6NdRdTargetAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NdRdTargetAddress);
      }
      if (Icmpv6RdNaDestinationAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RdNaDestinationAddress);
      }
      if (Icmpv6Opt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6Opt);
      }
      if (Icmpv6OptType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptType);
      }
      if (Icmpv6OptLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptLength);
      }
      if (Icmpv6OptReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6OptReserved);
      }
      if (Icmpv6OptPadding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6OptPadding);
      }
      if (Icmpv6OptLinkaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptLinkaddr);
      }
      if (Icmpv6OptSrcLinkaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptSrcLinkaddr);
      }
      if (Icmpv6OptTargetLinkaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptTargetLinkaddr);
      }
      if (Icmpv6OptLinkaddrEui64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptLinkaddrEui64);
      }
      if (Icmpv6OptSrcLinkaddrEui64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptSrcLinkaddrEui64);
      }
      if (Icmpv6OptTargetLinkaddrEui64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptTargetLinkaddrEui64);
      }
      if (Icmpv6OptPrefixLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptPrefixLength);
      }
      if (Icmpv6OptPrefixFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptPrefixFlag);
      }
      if (Icmpv6OptPrefixFlagL != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptPrefixFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptPrefixFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptPrefixFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptPrefixFlagReserved);
      }
      if (Icmpv6OptPrefixValidLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptPrefixValidLifetime);
      }
      if (Icmpv6OptPrefixPreferredLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptPrefixPreferredLifetime);
      }
      if (Icmpv6OptPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptPrefix);
      }
      if (Icmpv6OptCgaPadLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptCgaPadLength);
      }
      if (Icmpv6OptCga.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptCga);
      }
      if (Icmpv6OptCgaModifier.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptCgaModifier);
      }
      if (Icmpv6OptCgaSubnetPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptCgaSubnetPrefix);
      }
      if (Icmpv6OptCgaCount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptCgaCount);
      }
      if (Icmpv6OptCgaExtType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptCgaExtType);
      }
      if (Icmpv6OptCgaExtLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptCgaExtLength);
      }
      if (Icmpv6OptCgaExtData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptCgaExtData);
      }
      if (Icmpv6OptRsaKeyHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptRsaKeyHash);
      }
      if (Icmpv6OptDigitalSignaturePadding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6OptDigitalSignaturePadding);
      }
      if (Icmpv6OptPsKeyHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptPsKeyHash);
      }
      if (Icmpv6OptTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Icmpv6OptTimestamp);
      }
      if (Icmpv6OptNonce.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptNonce);
      }
      if (Icmpv6OptCertificatePadding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6OptCertificatePadding);
      }
      if (Icmpv6OptIpaOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptIpaOptionCode);
      }
      if (Icmpv6OptIpaPrefixLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptIpaPrefixLen);
      }
      if (Icmpv6OptIpaIpv6Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptIpaIpv6Address);
      }
      if (Icmpv6OptNrpiOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNrpiOptionCode);
      }
      if (Icmpv6OptNrpiPrefixLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNrpiPrefixLen);
      }
      if (Icmpv6OptNrpiPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptNrpiPrefix);
      }
      if (Icmpv6OptLlaOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptLlaOptionCode);
      }
      if (Icmpv6OptLlaBytes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptLlaBytes);
      }
      if (Icmpv6OptNaackOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNaackOptionCode);
      }
      if (Icmpv6OptNaackStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNaackStatus);
      }
      if (Icmpv6OptNaackSuppliedNcoa.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptNaackSuppliedNcoa);
      }
      if (Icmpv6OptMapDistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMapDistance);
      }
      if (Icmpv6OptMapPreference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMapPreference);
      }
      if (Icmpv6OptMapFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMapFlag);
      }
      if (Icmpv6OptMapFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptMapFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMapFlagReserved);
      }
      if (Icmpv6OptMapValidLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMapValidLifetime);
      }
      if (Icmpv6OptMapGlobalAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptMapGlobalAddress);
      }
      if (Icmpv6OptRouteInfoFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptRouteInfoFlag);
      }
      if (Icmpv6OptRouteInfoFlagRoutePreference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptRouteInfoFlagRoutePreference);
      }
      if (Icmpv6OptRouteInfoFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptRouteInfoFlagReserved);
      }
      if (Icmpv6OptRouteLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptRouteLifetime);
      }
      if (Icmpv6OptNameType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNameType);
      }
      if (Icmpv6OptNameX501.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptNameX501);
      }
      if (Icmpv6OptNameTypeFqdn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6OptNameTypeFqdn);
      }
      if (Icmpv6SendIdentifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6SendIdentifier);
      }
      if (Icmpv6SendAllComponents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6SendAllComponents);
      }
      if (Icmpv6SendComponent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6SendComponent);
      }
      if (Icmpv6X509Name != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6X509Name);
      }
      if (Icmpv6X509Certificate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6X509Certificate);
      }
      if (Icmpv6OptRedirectedPacket != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6OptRedirectedPacket);
      }
      if (Icmpv6OptMtu != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMtu);
      }
      if (Icmpv6OptNbmaShortcutLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptNbmaShortcutLimit);
      }
      if (Icmpv6OptAdvertisementInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAdvertisementInterval);
      }
      if (Icmpv6OptHomeAgentPreference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHomeAgentPreference);
      }
      if (Icmpv6OptHomeAgentLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHomeAgentLifetime);
      }
      if (Icmpv6OptIpv6Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptIpv6Address);
      }
      if (Icmpv6OptRdnssLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptRdnssLifetime);
      }
      if (Icmpv6OptRdnss.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptRdnss);
      }
      if (Icmpv6OptEfo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptEfo);
      }
      if (Icmpv6OptEfoM != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptEfoO != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptEfoH != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptEfoPrf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptEfoPrf);
      }
      if (Icmpv6OptEfoP != false) {
        size += 2 + 1;
      }
      if (Icmpv6OptEfoRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptEfoRsv);
      }
      if (Icmpv6OptHkrPadLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHkrPadLength);
      }
      if (Icmpv6OptHkrAt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHkrAt);
      }
      if (Icmpv6OptHkrReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHkrReserved);
      }
      if (Icmpv6OptHkrEncryptionPublicKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptHkrEncryptionPublicKey);
      }
      if (Icmpv6OptHkrPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptHkrPadding);
      }
      if (Icmpv6OptHkrLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHkrLifetime);
      }
      if (Icmpv6OptHkrEncryptedHandoverKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptHkrEncryptedHandoverKey);
      }
      if (Icmpv6OptHaiOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHaiOptionCode);
      }
      if (Icmpv6OptHaiLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptHaiLength);
      }
      if (Icmpv6OptHaiValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptHaiValue);
      }
      if (Icmpv6OptMnOptionCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMnOptionCode);
      }
      if (Icmpv6OptMnLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptMnLength);
      }
      if (Icmpv6OptMnValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptMnValue);
      }
      if (Icmpv6OptDnsslLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptDnsslLifetime);
      }
      if (Icmpv6OptDnssl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6OptDnssl);
      }
      if (Icmpv6OptAroStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAroStatus);
      }
      if (Icmpv6OptAroRegistrationLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAroRegistrationLifetime);
      }
      if (Icmpv6OptAroEui64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptAroEui64);
      }
      if (Icmpv6Opt6CoContextLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CoContextLength);
      }
      if (Icmpv6Opt6CoFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CoFlag);
      }
      if (Icmpv6Opt6CoFlagC != false) {
        size += 2 + 1;
      }
      if (Icmpv6Opt6CoFlagCid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CoFlagCid);
      }
      if (Icmpv6Opt6CoFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CoFlagReserved);
      }
      if (Icmpv6Opt6CoValidLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CoValidLifetime);
      }
      if (Icmpv6Opt6CoContextPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6Opt6CoContextPrefix);
      }
      if (Icmpv6OptAbroVersionLow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAbroVersionLow);
      }
      if (Icmpv6OptAbroVersionHigh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAbroVersionHigh);
      }
      if (Icmpv6OptAbroValidLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6OptAbroValidLifetime);
      }
      if (Icmpv6OptAbro6LbrAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6OptAbro6LbrAddress);
      }
      if (Icmpv6Opt6CioUnassigned1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CioUnassigned1);
      }
      if (Icmpv6Opt6CioFlagG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CioFlagG);
      }
      if (Icmpv6Opt6CioUnassigned2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Opt6CioUnassigned2);
      }
      if (Icmpv6OptCaptivePortal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6OptCaptivePortal);
      }
      if (Icmpv6MldMaximumResponseDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldMaximumResponseDelay);
      }
      if (Icmpv6MldMulticastAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6MldMulticastAddress);
      }
      if (Icmpv6RrSequenceNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrSequenceNumber);
      }
      if (Icmpv6RrSegmentNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrSegmentNumber);
      }
      if (Icmpv6RrFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrFlag);
      }
      if (Icmpv6RrFlagT != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrFlagS != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrFlagP != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrFlagRsv);
      }
      if (Icmpv6RrMaxdelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrMaxdelay);
      }
      if (Icmpv6RrPcoMp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RrPcoMp);
      }
      if (Icmpv6RrPcoMpOpcode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpOpcode);
      }
      if (Icmpv6RrPcoMpOplength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpOplength);
      }
      if (Icmpv6RrPcoMpOrdinal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpOrdinal);
      }
      if (Icmpv6RrPcoMpMatchlen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpMatchlen);
      }
      if (Icmpv6RrPcoMpMinlen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpMinlen);
      }
      if (Icmpv6RrPcoMpMaxlen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoMpMaxlen);
      }
      if (Icmpv6RrPcoMpMatchprefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RrPcoMpMatchprefix);
      }
      if (Icmpv6RrPcoUp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RrPcoUp);
      }
      if (Icmpv6RrPcoUpUselen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpUselen);
      }
      if (Icmpv6RrPcoUpKeeplen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpKeeplen);
      }
      if (Icmpv6RrPcoUpFlagmask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpFlagmask);
      }
      if (Icmpv6RrPcoUpFlagmaskL != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrPcoUpFlagmaskA != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrPcoUpFlagmaskReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpFlagmaskReserved);
      }
      if (Icmpv6RrPcoUpRaflags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpRaflags);
      }
      if (Icmpv6RrPcoUpValidlifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpValidlifetime);
      }
      if (Icmpv6RrPcoUpPreferredlifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpPreferredlifetime);
      }
      if (Icmpv6RrPcoUpFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpFlag);
      }
      if (Icmpv6RrPcoUpFlagV != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrPcoUpFlagP != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrPcoUpFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrPcoUpFlagReserved);
      }
      if (Icmpv6RrPcoUpUseprefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RrPcoUpUseprefix);
      }
      if (Icmpv6RrRm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RrRm);
      }
      if (Icmpv6RrRmFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrRmFlag);
      }
      if (Icmpv6RrRmFlagB != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrRmFlagF != false) {
        size += 2 + 1;
      }
      if (Icmpv6RrRmFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrRmFlagReserved);
      }
      if (Icmpv6RrRmOrdinal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrRmOrdinal);
      }
      if (Icmpv6RrRmMatchedlen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrRmMatchedlen);
      }
      if (Icmpv6RrRmInterfaceindex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RrRmInterfaceindex);
      }
      if (Icmpv6RrRmMatchedprefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RrRmMatchedprefix);
      }
      if (Icmpv6Mip6Identifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Mip6Identifier);
      }
      if (Icmpv6Mip6HomeAgentAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6Mip6HomeAgentAddress);
      }
      if (Icmpv6Mip6Flag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Mip6Flag);
      }
      if (Icmpv6Mip6FlagM != false) {
        size += 2 + 1;
      }
      if (Icmpv6Mip6FlagO != false) {
        size += 2 + 1;
      }
      if (Icmpv6Mip6FlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Mip6FlagRsv);
      }
      if (Icmpv6MldMaximumResponseCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldMaximumResponseCode);
      }
      if (Icmpv6MldFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldFlag);
      }
      if (Icmpv6MldFlagS != false) {
        size += 2 + 1;
      }
      if (Icmpv6MldFlagQrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldFlagQrv);
      }
      if (Icmpv6MldFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldFlagReserved);
      }
      if (Icmpv6MldQqi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldQqi);
      }
      if (Icmpv6MldNbSources != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldNbSources);
      }
      if (Icmpv6MldSourceAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6MldSourceAddress);
      }
      if (Icmpv6MldrNbMcastRecords != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldrNbMcastRecords);
      }
      if (Icmpv6MldrMar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6MldrMar);
      }
      if (Icmpv6MldrMarRecordType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldrMarRecordType);
      }
      if (Icmpv6MldrMarAuxDataLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldrMarAuxDataLen);
      }
      if (Icmpv6MldrMarNbSources != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MldrMarNbSources);
      }
      if (Icmpv6MldrMarMulticastAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6MldrMarMulticastAddress);
      }
      if (Icmpv6MldrMarSourceAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6MldrMarSourceAddress);
      }
      if (Icmpv6MldrMarAuxiliaryData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6MldrMarAuxiliaryData);
      }
      if (Icmpv6Fmip6Subtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Fmip6Subtype);
      }
      if (Icmpv6Fmip6HiFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Fmip6HiFlag);
      }
      if (Icmpv6Fmip6HiFlagS != false) {
        size += 2 + 1;
      }
      if (Icmpv6Fmip6HiFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6Fmip6HiFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Fmip6HiFlagReserved);
      }
      if (Icmpv6Fmip6Identifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6Fmip6Identifier);
      }
      if (Icmpv6McastRaQueryInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6McastRaQueryInterval);
      }
      if (Icmpv6McastRaRobustnessVariable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6McastRaRobustnessVariable);
      }
      if (Icmpv6NiQtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NiQtype);
      }
      if (Icmpv6NiFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NiFlag);
      }
      if (Icmpv6NiFlagG != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagS != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagL != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagC != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagT != false) {
        size += 2 + 1;
      }
      if (Icmpv6NiFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NiFlagRsv);
      }
      if (Icmpv6NiNonce != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Icmpv6NiNonce);
      }
      if (Icmpv6NiQuerySubjectIpv6.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NiQuerySubjectIpv6);
      }
      if (Icmpv6NiQuerySubjectFqdn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6NiQuerySubjectFqdn);
      }
      if (Icmpv6NiQuerySubjectIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NiQuerySubjectIpv4);
      }
      if (Icmpv6NiReplyNodeTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6NiReplyNodeTtl);
      }
      if (Icmpv6NiReplyNodeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6NiReplyNodeName);
      }
      if (Icmpv6NiReplyNodeAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NiReplyNodeAddress);
      }
      if (Icmpv6NiReplyIpv4Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6NiReplyIpv4Address);
      }
      if (Icmpv6RplDisFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDisFlags);
      }
      if (Icmpv6RplDioInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioInstance);
      }
      if (Icmpv6RplDioVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioVersion);
      }
      if (Icmpv6RplDioRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioRank);
      }
      if (Icmpv6RplDioFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioFlag);
      }
      if (Icmpv6RplDioFlagG != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplDioFlag0 != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplDioFlagMop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioFlagMop);
      }
      if (Icmpv6RplDioFlagPreference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioFlagPreference);
      }
      if (Icmpv6RplDioDtsn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDioDtsn);
      }
      if (Icmpv6RplDioDagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplDioDagid);
      }
      if (Icmpv6RplDaoInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoInstance);
      }
      if (Icmpv6RplDaoFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoFlag);
      }
      if (Icmpv6RplDaoFlagK != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplDaoFlagD != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplDaoFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoFlagRsv);
      }
      if (Icmpv6RplDaoSequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoSequence);
      }
      if (Icmpv6RplDaoDodagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplDaoDodagid);
      }
      if (Icmpv6RplDaoackInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoackInstance);
      }
      if (Icmpv6RplDaoackFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoackFlag);
      }
      if (Icmpv6RplDaoackFlagD != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplDaoackFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoackFlagRsv);
      }
      if (Icmpv6RplDaoackSequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoackSequence);
      }
      if (Icmpv6RplDaoackStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplDaoackStatus);
      }
      if (Icmpv6RplDaoackDodagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplDaoackDodagid);
      }
      if (Icmpv6RplCcInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplCcInstance);
      }
      if (Icmpv6RplCcFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplCcFlag);
      }
      if (Icmpv6RplCcFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplCcFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplCcFlagRsv);
      }
      if (Icmpv6RplCcNonce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplCcNonce);
      }
      if (Icmpv6RplCcDodagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplCcDodagid);
      }
      if (Icmpv6RplCcDestinationCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplCcDestinationCounter);
      }
      if (Icmpv6RplSecureFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureFlag);
      }
      if (Icmpv6RplSecureFlagT != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplSecureFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureFlagRsv);
      }
      if (Icmpv6RplSecureAlgorithm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureAlgorithm);
      }
      if (Icmpv6RplSecureKim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureKim);
      }
      if (Icmpv6RplSecureLvl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureLvl);
      }
      if (Icmpv6RplSecureRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureRsv);
      }
      if (Icmpv6RplSecureCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureCounter);
      }
      if (Icmpv6RplSecureKeySource.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplSecureKeySource);
      }
      if (Icmpv6RplSecureKeyIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplSecureKeyIndex);
      }
      if (Icmpv6RplOptType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptType);
      }
      if (Icmpv6RplOptLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptLength);
      }
      if (Icmpv6RplOptReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptReserved);
      }
      if (Icmpv6RplOptPadn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptPadn);
      }
      if (Icmpv6RplOptMetricType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricType);
      }
      if (Icmpv6RplOptMetricFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricFlags);
      }
      if (Icmpv6RplOptMetricReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricReserved);
      }
      if (Icmpv6RplOptMetricFlagP != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricFlagC != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricFlagO != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricFlagA != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricFlagA);
      }
      if (Icmpv6RplOptMetricPrec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricPrec);
      }
      if (Icmpv6RplOptMetricLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLength);
      }
      if (Icmpv6RplOptMetricNsaObject != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNsaObject);
      }
      if (Icmpv6RplOptMetricNsaObjectReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNsaObjectReserved);
      }
      if (Icmpv6RplOptMetricNsaObjectFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNsaObjectFlags);
      }
      if (Icmpv6RplOptMetricNsaObjectFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricNsaObjectFlagO != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricNeObject != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNeObject);
      }
      if (Icmpv6RplOptMetricNeObjectFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNeObjectFlags);
      }
      if (Icmpv6RplOptMetricNeObjectFlagI != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricNeObjectType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNeObjectType);
      }
      if (Icmpv6RplOptMetricNeObjectFlagE != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptMetricNeObjectEnergy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricNeObjectEnergy);
      }
      if (Icmpv6RplOptMetricHpObject != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricHpObject);
      }
      if (Icmpv6RplOptMetricHpObjectReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricHpObjectReserved);
      }
      if (Icmpv6RplOptMetricHpObjectFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricHpObjectFlags);
      }
      if (Icmpv6RplOptMetricHpObjectHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricHpObjectHp);
      }
      if (Icmpv6RplOptMetricLtObjectLt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLtObjectLt);
      }
      if (Icmpv6RplOptMetricLlObjectLl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLlObjectLl);
      }
      if (Icmpv6RplOptMetricLqlObject != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLqlObject);
      }
      if (Icmpv6RplOptMetricLqlObjectRes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLqlObjectRes);
      }
      if (Icmpv6RplOptMetricLqlObjectVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLqlObjectVal);
      }
      if (Icmpv6RplOptMetricLqlObjectCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLqlObjectCounter);
      }
      if (Icmpv6RplOptMetricEtxObjectEtx != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricEtxObjectEtx);
      }
      if (Icmpv6RplOptMetricLcObject != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptMetricLcObject);
      }
      if (Icmpv6RplOptMetricLcObjectRes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLcObjectRes);
      }
      if (Icmpv6RplOptMetricLcObjectLc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLcObjectLc);
      }
      if (Icmpv6RplOptMetricLcObjectCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLcObjectCounter);
      }
      if (Icmpv6RplOptMetricLcObjectReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLcObjectReserved);
      }
      if (Icmpv6RplOptMetricLcObjectFlagI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptMetricLcObjectFlagI);
      }
      if (Icmpv6RplOptRoutePrefixLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutePrefixLength);
      }
      if (Icmpv6RplOptRouteFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRouteFlag);
      }
      if (Icmpv6RplOptRoutePref != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutePref);
      }
      if (Icmpv6RplOptRouteReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRouteReserved);
      }
      if (Icmpv6RplOptRouteLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRouteLifetime);
      }
      if (Icmpv6RplOptRoutePrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptRoutePrefix);
      }
      if (Icmpv6RplOptConfigFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigFlag);
      }
      if (Icmpv6RplOptConfigReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigReserved);
      }
      if (Icmpv6RplOptConfigAuth != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptConfigPcs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigPcs);
      }
      if (Icmpv6RplOptConfigIntervalDouble != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigIntervalDouble);
      }
      if (Icmpv6RplOptConfigIntervalMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigIntervalMin);
      }
      if (Icmpv6RplOptConfigRedundancy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigRedundancy);
      }
      if (Icmpv6RplOptConfigMaxRankInc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigMaxRankInc);
      }
      if (Icmpv6RplOptConfigMinHopRankInc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigMinHopRankInc);
      }
      if (Icmpv6RplOptConfigOcp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigOcp);
      }
      if (Icmpv6RplOptConfigRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigRsv);
      }
      if (Icmpv6RplOptConfigDefLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigDefLifetime);
      }
      if (Icmpv6RplOptConfigLifetimeUnit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigLifetimeUnit);
      }
      if (Icmpv6RplOptTargetFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptTargetFlag);
      }
      if (Icmpv6RplOptTargetPrefixLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTargetPrefixLength);
      }
      if (Icmpv6RplOptTargetPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptTargetPrefix);
      }
      if (Icmpv6RplOptTransitFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTransitFlag);
      }
      if (Icmpv6RplOptTransitFlagE != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptTransitFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTransitFlagRsv);
      }
      if (Icmpv6RplOptTransitPathctl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTransitPathctl);
      }
      if (Icmpv6RplOptTransitPathseq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTransitPathseq);
      }
      if (Icmpv6RplOptTransitPathlifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTransitPathlifetime);
      }
      if (Icmpv6RplOptTransitParent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptTransitParent);
      }
      if (Icmpv6RplOptSolicitedInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptSolicitedInstance);
      }
      if (Icmpv6RplOptSolicitedFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptSolicitedFlag);
      }
      if (Icmpv6RplOptSolicitedFlagV != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptSolicitedFlagI != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptSolicitedFlagD != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptSolicitedFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptSolicitedFlagRsv);
      }
      if (Icmpv6RplOptSolicitedDodagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptSolicitedDodagid);
      }
      if (Icmpv6RplOptSolicitedVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptSolicitedVersion);
      }
      if (Icmpv6RplOptPrefixLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptPrefixLength);
      }
      if (Icmpv6RplOptPrefixFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptPrefixFlag);
      }
      if (Icmpv6RplOptPrefixFlagL != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptConfigFlagA != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptConfigFlagR != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptConfigFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptConfigFlagRsv);
      }
      if (Icmpv6RplOptPrefixValidLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptPrefixValidLifetime);
      }
      if (Icmpv6RplOptPrefixPreferredLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptPrefixPreferredLifetime);
      }
      if (Icmpv6RplOptPrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptPrefix);
      }
      if (Icmpv6RplOptTargetdescDescriptor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptTargetdescDescriptor);
      }
      if (Icmpv6RplOptRoutediscoveryFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptRoutediscoveryFlag);
      }
      if (Icmpv6RplOptRoutediscoveryFlagReply != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptRoutediscoveryFlagHopbyhop != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplOptRoutediscoveryFlagNumofroutes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutediscoveryFlagNumofroutes);
      }
      if (Icmpv6RplOptRoutediscoveryFlagCompr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutediscoveryFlagCompr);
      }
      if (Icmpv6RplOptRoutediscoveryLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutediscoveryLifetime);
      }
      if (Icmpv6RplOptRoutediscoveryMaxrank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutediscoveryMaxrank);
      }
      if (Icmpv6RplOptRoutediscoveryNh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplOptRoutediscoveryNh);
      }
      if (Icmpv6RplOptRoutediscoveryTargetaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptRoutediscoveryTargetaddr);
      }
      if (Icmpv6RplOptRoutediscoveryAddrVec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6RplOptRoutediscoveryAddrVec);
      }
      if (Icmpv6RplOptRoutediscoveryAddrvecAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplOptRoutediscoveryAddrvecAddr);
      }
      if (Icmpv6RplP2PDroInstance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroInstance);
      }
      if (Icmpv6RplP2PDroVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroVersion);
      }
      if (Icmpv6RplP2PDroFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroFlag);
      }
      if (Icmpv6RplP2PDroFlagStop != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplP2PDroFlagAck != false) {
        size += 2 + 1;
      }
      if (Icmpv6RplP2PDroFlagSeq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroFlagSeq);
      }
      if (Icmpv6RplP2PDroFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroFlagReserved);
      }
      if (Icmpv6RplP2PDroDagid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv6RplP2PDroDagid);
      }
      if (Icmpv6RplP2PDroackFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroackFlag);
      }
      if (Icmpv6RplP2PDroackFlagSeq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroackFlagSeq);
      }
      if (Icmpv6RplP2PDroackFlagReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6RplP2PDroackFlagReserved);
      }
      if (Icmpv6IlnpNbLocs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6IlnpNbLocs);
      }
      if (Icmpv6IlnpNbLocator != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Icmpv6IlnpNbLocator);
      }
      if (Icmpv6IlnpNbPreference != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6IlnpNbPreference);
      }
      if (Icmpv6IlnpNbLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6IlnpNbLifetime);
      }
      if (Icmpv66LowpanndDaStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv66LowpanndDaStatus);
      }
      if (Icmpv66LowpanndDaRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv66LowpanndDaRsv);
      }
      if (Icmpv66LowpanndDaLifetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv66LowpanndDaLifetime);
      }
      if (Icmpv66LowpanndDaEui64.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv66LowpanndDaEui64);
      }
      if (Icmpv66LowpanndDaRegAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Icmpv66LowpanndDaRegAddr);
      }
      if (Icmpv6RespIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Icmpv6RespIn);
      }
      if (Icmpv6NoResp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icmpv6NoResp);
      }
      if (Icmpv6RespTo != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Icmpv6RespTo);
      }
      if (Icmpv6Resptime != 0D) {
        size += 2 + 8;
      }
      if (Icmpv6MplSeedInfoMinSequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MplSeedInfoMinSequence);
      }
      if (Icmpv6MplSeedInfoBmLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MplSeedInfoBmLen);
      }
      if (Icmpv6MplSeedInfoS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MplSeedInfoS);
      }
      if (Icmpv6MplSeedInfoSeedId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icmpv6MplSeedInfoSeedId);
      }
      if (Icmpv6MplSeedInfoSequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Icmpv6MplSeedInfoSequence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Icmpv6 other) {
      if (other == null) {
        return;
      }
      if (other.Icmpv6Type != 0) {
        Icmpv6Type = other.Icmpv6Type;
      }
      if (other.Icmpv6Code != 0) {
        Icmpv6Code = other.Icmpv6Code;
      }
      if (other.Icmpv6Checksum != 0) {
        Icmpv6Checksum = other.Icmpv6Checksum;
      }
      if (other.Icmpv6ChecksumStatus != 0) {
        Icmpv6ChecksumStatus = other.Icmpv6ChecksumStatus;
      }
      if (other.Icmpv6Reserved.Length != 0) {
        Icmpv6Reserved = other.Icmpv6Reserved;
      }
      if (other.Icmpv6Data.Length != 0) {
        Icmpv6Data = other.Icmpv6Data;
      }
      if (other.Icmpv6UnknownData.Length != 0) {
        Icmpv6UnknownData = other.Icmpv6UnknownData;
      }
      if (other.Icmpv6Mtu != 0) {
        Icmpv6Mtu = other.Icmpv6Mtu;
      }
      if (other.Icmpv6Pointer != 0) {
        Icmpv6Pointer = other.Icmpv6Pointer;
      }
      if (other.Icmpv6EchoIdentifier != 0) {
        Icmpv6EchoIdentifier = other.Icmpv6EchoIdentifier;
      }
      if (other.Icmpv6EchoSequenceNumber != 0) {
        Icmpv6EchoSequenceNumber = other.Icmpv6EchoSequenceNumber;
      }
      if (other.Icmpv6Nonce.Length != 0) {
        Icmpv6Nonce = other.Icmpv6Nonce;
      }
      if (other.Icmpv6NdRaCurHopLimit != 0) {
        Icmpv6NdRaCurHopLimit = other.Icmpv6NdRaCurHopLimit;
      }
      if (other.Icmpv6NdRaFlag != 0) {
        Icmpv6NdRaFlag = other.Icmpv6NdRaFlag;
      }
      if (other.Icmpv6NdRaFlagM != false) {
        Icmpv6NdRaFlagM = other.Icmpv6NdRaFlagM;
      }
      if (other.Icmpv6NdRaFlagO != false) {
        Icmpv6NdRaFlagO = other.Icmpv6NdRaFlagO;
      }
      if (other.Icmpv6NdRaFlagH != false) {
        Icmpv6NdRaFlagH = other.Icmpv6NdRaFlagH;
      }
      if (other.Icmpv6NdRaFlagPrf != 0) {
        Icmpv6NdRaFlagPrf = other.Icmpv6NdRaFlagPrf;
      }
      if (other.Icmpv6NdRaFlagP != false) {
        Icmpv6NdRaFlagP = other.Icmpv6NdRaFlagP;
      }
      if (other.Icmpv6NdRaFlagRsv != 0) {
        Icmpv6NdRaFlagRsv = other.Icmpv6NdRaFlagRsv;
      }
      if (other.Icmpv6NdRaRouterLifetime != 0) {
        Icmpv6NdRaRouterLifetime = other.Icmpv6NdRaRouterLifetime;
      }
      if (other.Icmpv6NdRaReachableTime != 0) {
        Icmpv6NdRaReachableTime = other.Icmpv6NdRaReachableTime;
      }
      if (other.Icmpv6NdRaRetransTimer != 0) {
        Icmpv6NdRaRetransTimer = other.Icmpv6NdRaRetransTimer;
      }
      if (other.Icmpv6NdNsTargetAddress.Length != 0) {
        Icmpv6NdNsTargetAddress = other.Icmpv6NdNsTargetAddress;
      }
      if (other.Icmpv6NdNaFlag != 0) {
        Icmpv6NdNaFlag = other.Icmpv6NdNaFlag;
      }
      if (other.Icmpv6NdNaFlagR != false) {
        Icmpv6NdNaFlagR = other.Icmpv6NdNaFlagR;
      }
      if (other.Icmpv6NdNaFlagS != false) {
        Icmpv6NdNaFlagS = other.Icmpv6NdNaFlagS;
      }
      if (other.Icmpv6NdNaFlagO != false) {
        Icmpv6NdNaFlagO = other.Icmpv6NdNaFlagO;
      }
      if (other.Icmpv6NdNaFlagRsv != 0) {
        Icmpv6NdNaFlagRsv = other.Icmpv6NdNaFlagRsv;
      }
      if (other.Icmpv6NdNaTargetAddress.Length != 0) {
        Icmpv6NdNaTargetAddress = other.Icmpv6NdNaTargetAddress;
      }
      if (other.Icmpv6NdRdTargetAddress.Length != 0) {
        Icmpv6NdRdTargetAddress = other.Icmpv6NdRdTargetAddress;
      }
      if (other.Icmpv6RdNaDestinationAddress.Length != 0) {
        Icmpv6RdNaDestinationAddress = other.Icmpv6RdNaDestinationAddress;
      }
      if (other.Icmpv6Opt != 0) {
        Icmpv6Opt = other.Icmpv6Opt;
      }
      if (other.Icmpv6OptType != 0) {
        Icmpv6OptType = other.Icmpv6OptType;
      }
      if (other.Icmpv6OptLength != 0) {
        Icmpv6OptLength = other.Icmpv6OptLength;
      }
      if (other.Icmpv6OptReserved != 0) {
        Icmpv6OptReserved = other.Icmpv6OptReserved;
      }
      if (other.Icmpv6OptPadding != 0) {
        Icmpv6OptPadding = other.Icmpv6OptPadding;
      }
      if (other.Icmpv6OptLinkaddr.Length != 0) {
        Icmpv6OptLinkaddr = other.Icmpv6OptLinkaddr;
      }
      if (other.Icmpv6OptSrcLinkaddr.Length != 0) {
        Icmpv6OptSrcLinkaddr = other.Icmpv6OptSrcLinkaddr;
      }
      if (other.Icmpv6OptTargetLinkaddr.Length != 0) {
        Icmpv6OptTargetLinkaddr = other.Icmpv6OptTargetLinkaddr;
      }
      if (other.Icmpv6OptLinkaddrEui64.Length != 0) {
        Icmpv6OptLinkaddrEui64 = other.Icmpv6OptLinkaddrEui64;
      }
      if (other.Icmpv6OptSrcLinkaddrEui64.Length != 0) {
        Icmpv6OptSrcLinkaddrEui64 = other.Icmpv6OptSrcLinkaddrEui64;
      }
      if (other.Icmpv6OptTargetLinkaddrEui64.Length != 0) {
        Icmpv6OptTargetLinkaddrEui64 = other.Icmpv6OptTargetLinkaddrEui64;
      }
      if (other.Icmpv6OptPrefixLength != 0) {
        Icmpv6OptPrefixLength = other.Icmpv6OptPrefixLength;
      }
      if (other.Icmpv6OptPrefixFlag != 0) {
        Icmpv6OptPrefixFlag = other.Icmpv6OptPrefixFlag;
      }
      if (other.Icmpv6OptPrefixFlagL != false) {
        Icmpv6OptPrefixFlagL = other.Icmpv6OptPrefixFlagL;
      }
      if (other.Icmpv6OptPrefixFlagA != false) {
        Icmpv6OptPrefixFlagA = other.Icmpv6OptPrefixFlagA;
      }
      if (other.Icmpv6OptPrefixFlagR != false) {
        Icmpv6OptPrefixFlagR = other.Icmpv6OptPrefixFlagR;
      }
      if (other.Icmpv6OptPrefixFlagReserved != 0) {
        Icmpv6OptPrefixFlagReserved = other.Icmpv6OptPrefixFlagReserved;
      }
      if (other.Icmpv6OptPrefixValidLifetime != 0) {
        Icmpv6OptPrefixValidLifetime = other.Icmpv6OptPrefixValidLifetime;
      }
      if (other.Icmpv6OptPrefixPreferredLifetime != 0) {
        Icmpv6OptPrefixPreferredLifetime = other.Icmpv6OptPrefixPreferredLifetime;
      }
      if (other.Icmpv6OptPrefix.Length != 0) {
        Icmpv6OptPrefix = other.Icmpv6OptPrefix;
      }
      if (other.Icmpv6OptCgaPadLength != 0) {
        Icmpv6OptCgaPadLength = other.Icmpv6OptCgaPadLength;
      }
      if (other.Icmpv6OptCga.Length != 0) {
        Icmpv6OptCga = other.Icmpv6OptCga;
      }
      if (other.Icmpv6OptCgaModifier.Length != 0) {
        Icmpv6OptCgaModifier = other.Icmpv6OptCgaModifier;
      }
      if (other.Icmpv6OptCgaSubnetPrefix.Length != 0) {
        Icmpv6OptCgaSubnetPrefix = other.Icmpv6OptCgaSubnetPrefix;
      }
      if (other.Icmpv6OptCgaCount.Length != 0) {
        Icmpv6OptCgaCount = other.Icmpv6OptCgaCount;
      }
      if (other.Icmpv6OptCgaExtType != 0) {
        Icmpv6OptCgaExtType = other.Icmpv6OptCgaExtType;
      }
      if (other.Icmpv6OptCgaExtLength != 0) {
        Icmpv6OptCgaExtLength = other.Icmpv6OptCgaExtLength;
      }
      if (other.Icmpv6OptCgaExtData.Length != 0) {
        Icmpv6OptCgaExtData = other.Icmpv6OptCgaExtData;
      }
      if (other.Icmpv6OptRsaKeyHash.Length != 0) {
        Icmpv6OptRsaKeyHash = other.Icmpv6OptRsaKeyHash;
      }
      if (other.Icmpv6OptDigitalSignaturePadding != 0) {
        Icmpv6OptDigitalSignaturePadding = other.Icmpv6OptDigitalSignaturePadding;
      }
      if (other.Icmpv6OptPsKeyHash.Length != 0) {
        Icmpv6OptPsKeyHash = other.Icmpv6OptPsKeyHash;
      }
      if (other.Icmpv6OptTimestamp != 0L) {
        Icmpv6OptTimestamp = other.Icmpv6OptTimestamp;
      }
      if (other.Icmpv6OptNonce.Length != 0) {
        Icmpv6OptNonce = other.Icmpv6OptNonce;
      }
      if (other.Icmpv6OptCertificatePadding != 0) {
        Icmpv6OptCertificatePadding = other.Icmpv6OptCertificatePadding;
      }
      if (other.Icmpv6OptIpaOptionCode != 0) {
        Icmpv6OptIpaOptionCode = other.Icmpv6OptIpaOptionCode;
      }
      if (other.Icmpv6OptIpaPrefixLen != 0) {
        Icmpv6OptIpaPrefixLen = other.Icmpv6OptIpaPrefixLen;
      }
      if (other.Icmpv6OptIpaIpv6Address.Length != 0) {
        Icmpv6OptIpaIpv6Address = other.Icmpv6OptIpaIpv6Address;
      }
      if (other.Icmpv6OptNrpiOptionCode != 0) {
        Icmpv6OptNrpiOptionCode = other.Icmpv6OptNrpiOptionCode;
      }
      if (other.Icmpv6OptNrpiPrefixLen != 0) {
        Icmpv6OptNrpiPrefixLen = other.Icmpv6OptNrpiPrefixLen;
      }
      if (other.Icmpv6OptNrpiPrefix.Length != 0) {
        Icmpv6OptNrpiPrefix = other.Icmpv6OptNrpiPrefix;
      }
      if (other.Icmpv6OptLlaOptionCode != 0) {
        Icmpv6OptLlaOptionCode = other.Icmpv6OptLlaOptionCode;
      }
      if (other.Icmpv6OptLlaBytes.Length != 0) {
        Icmpv6OptLlaBytes = other.Icmpv6OptLlaBytes;
      }
      if (other.Icmpv6OptNaackOptionCode != 0) {
        Icmpv6OptNaackOptionCode = other.Icmpv6OptNaackOptionCode;
      }
      if (other.Icmpv6OptNaackStatus != 0) {
        Icmpv6OptNaackStatus = other.Icmpv6OptNaackStatus;
      }
      if (other.Icmpv6OptNaackSuppliedNcoa.Length != 0) {
        Icmpv6OptNaackSuppliedNcoa = other.Icmpv6OptNaackSuppliedNcoa;
      }
      if (other.Icmpv6OptMapDistance != 0) {
        Icmpv6OptMapDistance = other.Icmpv6OptMapDistance;
      }
      if (other.Icmpv6OptMapPreference != 0) {
        Icmpv6OptMapPreference = other.Icmpv6OptMapPreference;
      }
      if (other.Icmpv6OptMapFlag != 0) {
        Icmpv6OptMapFlag = other.Icmpv6OptMapFlag;
      }
      if (other.Icmpv6OptMapFlagR != false) {
        Icmpv6OptMapFlagR = other.Icmpv6OptMapFlagR;
      }
      if (other.Icmpv6OptMapFlagReserved != 0) {
        Icmpv6OptMapFlagReserved = other.Icmpv6OptMapFlagReserved;
      }
      if (other.Icmpv6OptMapValidLifetime != 0) {
        Icmpv6OptMapValidLifetime = other.Icmpv6OptMapValidLifetime;
      }
      if (other.Icmpv6OptMapGlobalAddress.Length != 0) {
        Icmpv6OptMapGlobalAddress = other.Icmpv6OptMapGlobalAddress;
      }
      if (other.Icmpv6OptRouteInfoFlag != 0) {
        Icmpv6OptRouteInfoFlag = other.Icmpv6OptRouteInfoFlag;
      }
      if (other.Icmpv6OptRouteInfoFlagRoutePreference != 0) {
        Icmpv6OptRouteInfoFlagRoutePreference = other.Icmpv6OptRouteInfoFlagRoutePreference;
      }
      if (other.Icmpv6OptRouteInfoFlagReserved != 0) {
        Icmpv6OptRouteInfoFlagReserved = other.Icmpv6OptRouteInfoFlagReserved;
      }
      if (other.Icmpv6OptRouteLifetime != 0) {
        Icmpv6OptRouteLifetime = other.Icmpv6OptRouteLifetime;
      }
      if (other.Icmpv6OptNameType != 0) {
        Icmpv6OptNameType = other.Icmpv6OptNameType;
      }
      if (other.Icmpv6OptNameX501.Length != 0) {
        Icmpv6OptNameX501 = other.Icmpv6OptNameX501;
      }
      if (other.Icmpv6OptNameTypeFqdn.Length != 0) {
        Icmpv6OptNameTypeFqdn = other.Icmpv6OptNameTypeFqdn;
      }
      if (other.Icmpv6SendIdentifier != 0) {
        Icmpv6SendIdentifier = other.Icmpv6SendIdentifier;
      }
      if (other.Icmpv6SendAllComponents != 0) {
        Icmpv6SendAllComponents = other.Icmpv6SendAllComponents;
      }
      if (other.Icmpv6SendComponent != 0) {
        Icmpv6SendComponent = other.Icmpv6SendComponent;
      }
      if (other.Icmpv6X509Name != 0) {
        Icmpv6X509Name = other.Icmpv6X509Name;
      }
      if (other.Icmpv6X509Certificate != 0) {
        Icmpv6X509Certificate = other.Icmpv6X509Certificate;
      }
      if (other.Icmpv6OptRedirectedPacket != 0) {
        Icmpv6OptRedirectedPacket = other.Icmpv6OptRedirectedPacket;
      }
      if (other.Icmpv6OptMtu != 0) {
        Icmpv6OptMtu = other.Icmpv6OptMtu;
      }
      if (other.Icmpv6OptNbmaShortcutLimit != 0) {
        Icmpv6OptNbmaShortcutLimit = other.Icmpv6OptNbmaShortcutLimit;
      }
      if (other.Icmpv6OptAdvertisementInterval != 0) {
        Icmpv6OptAdvertisementInterval = other.Icmpv6OptAdvertisementInterval;
      }
      if (other.Icmpv6OptHomeAgentPreference != 0) {
        Icmpv6OptHomeAgentPreference = other.Icmpv6OptHomeAgentPreference;
      }
      if (other.Icmpv6OptHomeAgentLifetime != 0) {
        Icmpv6OptHomeAgentLifetime = other.Icmpv6OptHomeAgentLifetime;
      }
      if (other.Icmpv6OptIpv6Address.Length != 0) {
        Icmpv6OptIpv6Address = other.Icmpv6OptIpv6Address;
      }
      if (other.Icmpv6OptRdnssLifetime != 0) {
        Icmpv6OptRdnssLifetime = other.Icmpv6OptRdnssLifetime;
      }
      if (other.Icmpv6OptRdnss.Length != 0) {
        Icmpv6OptRdnss = other.Icmpv6OptRdnss;
      }
      if (other.Icmpv6OptEfo != 0) {
        Icmpv6OptEfo = other.Icmpv6OptEfo;
      }
      if (other.Icmpv6OptEfoM != false) {
        Icmpv6OptEfoM = other.Icmpv6OptEfoM;
      }
      if (other.Icmpv6OptEfoO != false) {
        Icmpv6OptEfoO = other.Icmpv6OptEfoO;
      }
      if (other.Icmpv6OptEfoH != false) {
        Icmpv6OptEfoH = other.Icmpv6OptEfoH;
      }
      if (other.Icmpv6OptEfoPrf != 0) {
        Icmpv6OptEfoPrf = other.Icmpv6OptEfoPrf;
      }
      if (other.Icmpv6OptEfoP != false) {
        Icmpv6OptEfoP = other.Icmpv6OptEfoP;
      }
      if (other.Icmpv6OptEfoRsv != 0) {
        Icmpv6OptEfoRsv = other.Icmpv6OptEfoRsv;
      }
      if (other.Icmpv6OptHkrPadLength != 0) {
        Icmpv6OptHkrPadLength = other.Icmpv6OptHkrPadLength;
      }
      if (other.Icmpv6OptHkrAt != 0) {
        Icmpv6OptHkrAt = other.Icmpv6OptHkrAt;
      }
      if (other.Icmpv6OptHkrReserved != 0) {
        Icmpv6OptHkrReserved = other.Icmpv6OptHkrReserved;
      }
      if (other.Icmpv6OptHkrEncryptionPublicKey.Length != 0) {
        Icmpv6OptHkrEncryptionPublicKey = other.Icmpv6OptHkrEncryptionPublicKey;
      }
      if (other.Icmpv6OptHkrPadding.Length != 0) {
        Icmpv6OptHkrPadding = other.Icmpv6OptHkrPadding;
      }
      if (other.Icmpv6OptHkrLifetime != 0) {
        Icmpv6OptHkrLifetime = other.Icmpv6OptHkrLifetime;
      }
      if (other.Icmpv6OptHkrEncryptedHandoverKey.Length != 0) {
        Icmpv6OptHkrEncryptedHandoverKey = other.Icmpv6OptHkrEncryptedHandoverKey;
      }
      if (other.Icmpv6OptHaiOptionCode != 0) {
        Icmpv6OptHaiOptionCode = other.Icmpv6OptHaiOptionCode;
      }
      if (other.Icmpv6OptHaiLength != 0) {
        Icmpv6OptHaiLength = other.Icmpv6OptHaiLength;
      }
      if (other.Icmpv6OptHaiValue.Length != 0) {
        Icmpv6OptHaiValue = other.Icmpv6OptHaiValue;
      }
      if (other.Icmpv6OptMnOptionCode != 0) {
        Icmpv6OptMnOptionCode = other.Icmpv6OptMnOptionCode;
      }
      if (other.Icmpv6OptMnLength != 0) {
        Icmpv6OptMnLength = other.Icmpv6OptMnLength;
      }
      if (other.Icmpv6OptMnValue.Length != 0) {
        Icmpv6OptMnValue = other.Icmpv6OptMnValue;
      }
      if (other.Icmpv6OptDnsslLifetime != 0) {
        Icmpv6OptDnsslLifetime = other.Icmpv6OptDnsslLifetime;
      }
      if (other.Icmpv6OptDnssl.Length != 0) {
        Icmpv6OptDnssl = other.Icmpv6OptDnssl;
      }
      if (other.Icmpv6OptAroStatus != 0) {
        Icmpv6OptAroStatus = other.Icmpv6OptAroStatus;
      }
      if (other.Icmpv6OptAroRegistrationLifetime != 0) {
        Icmpv6OptAroRegistrationLifetime = other.Icmpv6OptAroRegistrationLifetime;
      }
      if (other.Icmpv6OptAroEui64.Length != 0) {
        Icmpv6OptAroEui64 = other.Icmpv6OptAroEui64;
      }
      if (other.Icmpv6Opt6CoContextLength != 0) {
        Icmpv6Opt6CoContextLength = other.Icmpv6Opt6CoContextLength;
      }
      if (other.Icmpv6Opt6CoFlag != 0) {
        Icmpv6Opt6CoFlag = other.Icmpv6Opt6CoFlag;
      }
      if (other.Icmpv6Opt6CoFlagC != false) {
        Icmpv6Opt6CoFlagC = other.Icmpv6Opt6CoFlagC;
      }
      if (other.Icmpv6Opt6CoFlagCid != 0) {
        Icmpv6Opt6CoFlagCid = other.Icmpv6Opt6CoFlagCid;
      }
      if (other.Icmpv6Opt6CoFlagReserved != 0) {
        Icmpv6Opt6CoFlagReserved = other.Icmpv6Opt6CoFlagReserved;
      }
      if (other.Icmpv6Opt6CoValidLifetime != 0) {
        Icmpv6Opt6CoValidLifetime = other.Icmpv6Opt6CoValidLifetime;
      }
      if (other.Icmpv6Opt6CoContextPrefix.Length != 0) {
        Icmpv6Opt6CoContextPrefix = other.Icmpv6Opt6CoContextPrefix;
      }
      if (other.Icmpv6OptAbroVersionLow != 0) {
        Icmpv6OptAbroVersionLow = other.Icmpv6OptAbroVersionLow;
      }
      if (other.Icmpv6OptAbroVersionHigh != 0) {
        Icmpv6OptAbroVersionHigh = other.Icmpv6OptAbroVersionHigh;
      }
      if (other.Icmpv6OptAbroValidLifetime != 0) {
        Icmpv6OptAbroValidLifetime = other.Icmpv6OptAbroValidLifetime;
      }
      if (other.Icmpv6OptAbro6LbrAddress.Length != 0) {
        Icmpv6OptAbro6LbrAddress = other.Icmpv6OptAbro6LbrAddress;
      }
      if (other.Icmpv6Opt6CioUnassigned1 != 0) {
        Icmpv6Opt6CioUnassigned1 = other.Icmpv6Opt6CioUnassigned1;
      }
      if (other.Icmpv6Opt6CioFlagG != 0) {
        Icmpv6Opt6CioFlagG = other.Icmpv6Opt6CioFlagG;
      }
      if (other.Icmpv6Opt6CioUnassigned2 != 0) {
        Icmpv6Opt6CioUnassigned2 = other.Icmpv6Opt6CioUnassigned2;
      }
      if (other.Icmpv6OptCaptivePortal.Length != 0) {
        Icmpv6OptCaptivePortal = other.Icmpv6OptCaptivePortal;
      }
      if (other.Icmpv6MldMaximumResponseDelay != 0) {
        Icmpv6MldMaximumResponseDelay = other.Icmpv6MldMaximumResponseDelay;
      }
      if (other.Icmpv6MldMulticastAddress.Length != 0) {
        Icmpv6MldMulticastAddress = other.Icmpv6MldMulticastAddress;
      }
      if (other.Icmpv6RrSequenceNumber != 0) {
        Icmpv6RrSequenceNumber = other.Icmpv6RrSequenceNumber;
      }
      if (other.Icmpv6RrSegmentNumber != 0) {
        Icmpv6RrSegmentNumber = other.Icmpv6RrSegmentNumber;
      }
      if (other.Icmpv6RrFlag != 0) {
        Icmpv6RrFlag = other.Icmpv6RrFlag;
      }
      if (other.Icmpv6RrFlagT != false) {
        Icmpv6RrFlagT = other.Icmpv6RrFlagT;
      }
      if (other.Icmpv6RrFlagR != false) {
        Icmpv6RrFlagR = other.Icmpv6RrFlagR;
      }
      if (other.Icmpv6RrFlagA != false) {
        Icmpv6RrFlagA = other.Icmpv6RrFlagA;
      }
      if (other.Icmpv6RrFlagS != false) {
        Icmpv6RrFlagS = other.Icmpv6RrFlagS;
      }
      if (other.Icmpv6RrFlagP != false) {
        Icmpv6RrFlagP = other.Icmpv6RrFlagP;
      }
      if (other.Icmpv6RrFlagRsv != 0) {
        Icmpv6RrFlagRsv = other.Icmpv6RrFlagRsv;
      }
      if (other.Icmpv6RrMaxdelay != 0) {
        Icmpv6RrMaxdelay = other.Icmpv6RrMaxdelay;
      }
      if (other.Icmpv6RrPcoMp != 0) {
        Icmpv6RrPcoMp = other.Icmpv6RrPcoMp;
      }
      if (other.Icmpv6RrPcoMpOpcode != 0) {
        Icmpv6RrPcoMpOpcode = other.Icmpv6RrPcoMpOpcode;
      }
      if (other.Icmpv6RrPcoMpOplength != 0) {
        Icmpv6RrPcoMpOplength = other.Icmpv6RrPcoMpOplength;
      }
      if (other.Icmpv6RrPcoMpOrdinal != 0) {
        Icmpv6RrPcoMpOrdinal = other.Icmpv6RrPcoMpOrdinal;
      }
      if (other.Icmpv6RrPcoMpMatchlen != 0) {
        Icmpv6RrPcoMpMatchlen = other.Icmpv6RrPcoMpMatchlen;
      }
      if (other.Icmpv6RrPcoMpMinlen != 0) {
        Icmpv6RrPcoMpMinlen = other.Icmpv6RrPcoMpMinlen;
      }
      if (other.Icmpv6RrPcoMpMaxlen != 0) {
        Icmpv6RrPcoMpMaxlen = other.Icmpv6RrPcoMpMaxlen;
      }
      if (other.Icmpv6RrPcoMpMatchprefix.Length != 0) {
        Icmpv6RrPcoMpMatchprefix = other.Icmpv6RrPcoMpMatchprefix;
      }
      if (other.Icmpv6RrPcoUp != 0) {
        Icmpv6RrPcoUp = other.Icmpv6RrPcoUp;
      }
      if (other.Icmpv6RrPcoUpUselen != 0) {
        Icmpv6RrPcoUpUselen = other.Icmpv6RrPcoUpUselen;
      }
      if (other.Icmpv6RrPcoUpKeeplen != 0) {
        Icmpv6RrPcoUpKeeplen = other.Icmpv6RrPcoUpKeeplen;
      }
      if (other.Icmpv6RrPcoUpFlagmask != 0) {
        Icmpv6RrPcoUpFlagmask = other.Icmpv6RrPcoUpFlagmask;
      }
      if (other.Icmpv6RrPcoUpFlagmaskL != false) {
        Icmpv6RrPcoUpFlagmaskL = other.Icmpv6RrPcoUpFlagmaskL;
      }
      if (other.Icmpv6RrPcoUpFlagmaskA != false) {
        Icmpv6RrPcoUpFlagmaskA = other.Icmpv6RrPcoUpFlagmaskA;
      }
      if (other.Icmpv6RrPcoUpFlagmaskReserved != 0) {
        Icmpv6RrPcoUpFlagmaskReserved = other.Icmpv6RrPcoUpFlagmaskReserved;
      }
      if (other.Icmpv6RrPcoUpRaflags != 0) {
        Icmpv6RrPcoUpRaflags = other.Icmpv6RrPcoUpRaflags;
      }
      if (other.Icmpv6RrPcoUpValidlifetime != 0) {
        Icmpv6RrPcoUpValidlifetime = other.Icmpv6RrPcoUpValidlifetime;
      }
      if (other.Icmpv6RrPcoUpPreferredlifetime != 0) {
        Icmpv6RrPcoUpPreferredlifetime = other.Icmpv6RrPcoUpPreferredlifetime;
      }
      if (other.Icmpv6RrPcoUpFlag != 0) {
        Icmpv6RrPcoUpFlag = other.Icmpv6RrPcoUpFlag;
      }
      if (other.Icmpv6RrPcoUpFlagV != false) {
        Icmpv6RrPcoUpFlagV = other.Icmpv6RrPcoUpFlagV;
      }
      if (other.Icmpv6RrPcoUpFlagP != false) {
        Icmpv6RrPcoUpFlagP = other.Icmpv6RrPcoUpFlagP;
      }
      if (other.Icmpv6RrPcoUpFlagReserved != 0) {
        Icmpv6RrPcoUpFlagReserved = other.Icmpv6RrPcoUpFlagReserved;
      }
      if (other.Icmpv6RrPcoUpUseprefix.Length != 0) {
        Icmpv6RrPcoUpUseprefix = other.Icmpv6RrPcoUpUseprefix;
      }
      if (other.Icmpv6RrRm != 0) {
        Icmpv6RrRm = other.Icmpv6RrRm;
      }
      if (other.Icmpv6RrRmFlag != 0) {
        Icmpv6RrRmFlag = other.Icmpv6RrRmFlag;
      }
      if (other.Icmpv6RrRmFlagB != false) {
        Icmpv6RrRmFlagB = other.Icmpv6RrRmFlagB;
      }
      if (other.Icmpv6RrRmFlagF != false) {
        Icmpv6RrRmFlagF = other.Icmpv6RrRmFlagF;
      }
      if (other.Icmpv6RrRmFlagReserved != 0) {
        Icmpv6RrRmFlagReserved = other.Icmpv6RrRmFlagReserved;
      }
      if (other.Icmpv6RrRmOrdinal != 0) {
        Icmpv6RrRmOrdinal = other.Icmpv6RrRmOrdinal;
      }
      if (other.Icmpv6RrRmMatchedlen != 0) {
        Icmpv6RrRmMatchedlen = other.Icmpv6RrRmMatchedlen;
      }
      if (other.Icmpv6RrRmInterfaceindex != 0) {
        Icmpv6RrRmInterfaceindex = other.Icmpv6RrRmInterfaceindex;
      }
      if (other.Icmpv6RrRmMatchedprefix.Length != 0) {
        Icmpv6RrRmMatchedprefix = other.Icmpv6RrRmMatchedprefix;
      }
      if (other.Icmpv6Mip6Identifier != 0) {
        Icmpv6Mip6Identifier = other.Icmpv6Mip6Identifier;
      }
      if (other.Icmpv6Mip6HomeAgentAddress.Length != 0) {
        Icmpv6Mip6HomeAgentAddress = other.Icmpv6Mip6HomeAgentAddress;
      }
      if (other.Icmpv6Mip6Flag != 0) {
        Icmpv6Mip6Flag = other.Icmpv6Mip6Flag;
      }
      if (other.Icmpv6Mip6FlagM != false) {
        Icmpv6Mip6FlagM = other.Icmpv6Mip6FlagM;
      }
      if (other.Icmpv6Mip6FlagO != false) {
        Icmpv6Mip6FlagO = other.Icmpv6Mip6FlagO;
      }
      if (other.Icmpv6Mip6FlagRsv != 0) {
        Icmpv6Mip6FlagRsv = other.Icmpv6Mip6FlagRsv;
      }
      if (other.Icmpv6MldMaximumResponseCode != 0) {
        Icmpv6MldMaximumResponseCode = other.Icmpv6MldMaximumResponseCode;
      }
      if (other.Icmpv6MldFlag != 0) {
        Icmpv6MldFlag = other.Icmpv6MldFlag;
      }
      if (other.Icmpv6MldFlagS != false) {
        Icmpv6MldFlagS = other.Icmpv6MldFlagS;
      }
      if (other.Icmpv6MldFlagQrv != 0) {
        Icmpv6MldFlagQrv = other.Icmpv6MldFlagQrv;
      }
      if (other.Icmpv6MldFlagReserved != 0) {
        Icmpv6MldFlagReserved = other.Icmpv6MldFlagReserved;
      }
      if (other.Icmpv6MldQqi != 0) {
        Icmpv6MldQqi = other.Icmpv6MldQqi;
      }
      if (other.Icmpv6MldNbSources != 0) {
        Icmpv6MldNbSources = other.Icmpv6MldNbSources;
      }
      if (other.Icmpv6MldSourceAddress.Length != 0) {
        Icmpv6MldSourceAddress = other.Icmpv6MldSourceAddress;
      }
      if (other.Icmpv6MldrNbMcastRecords != 0) {
        Icmpv6MldrNbMcastRecords = other.Icmpv6MldrNbMcastRecords;
      }
      if (other.Icmpv6MldrMar != 0) {
        Icmpv6MldrMar = other.Icmpv6MldrMar;
      }
      if (other.Icmpv6MldrMarRecordType != 0) {
        Icmpv6MldrMarRecordType = other.Icmpv6MldrMarRecordType;
      }
      if (other.Icmpv6MldrMarAuxDataLen != 0) {
        Icmpv6MldrMarAuxDataLen = other.Icmpv6MldrMarAuxDataLen;
      }
      if (other.Icmpv6MldrMarNbSources != 0) {
        Icmpv6MldrMarNbSources = other.Icmpv6MldrMarNbSources;
      }
      if (other.Icmpv6MldrMarMulticastAddress.Length != 0) {
        Icmpv6MldrMarMulticastAddress = other.Icmpv6MldrMarMulticastAddress;
      }
      if (other.Icmpv6MldrMarSourceAddress.Length != 0) {
        Icmpv6MldrMarSourceAddress = other.Icmpv6MldrMarSourceAddress;
      }
      if (other.Icmpv6MldrMarAuxiliaryData.Length != 0) {
        Icmpv6MldrMarAuxiliaryData = other.Icmpv6MldrMarAuxiliaryData;
      }
      if (other.Icmpv6Fmip6Subtype != 0) {
        Icmpv6Fmip6Subtype = other.Icmpv6Fmip6Subtype;
      }
      if (other.Icmpv6Fmip6HiFlag != 0) {
        Icmpv6Fmip6HiFlag = other.Icmpv6Fmip6HiFlag;
      }
      if (other.Icmpv6Fmip6HiFlagS != false) {
        Icmpv6Fmip6HiFlagS = other.Icmpv6Fmip6HiFlagS;
      }
      if (other.Icmpv6Fmip6HiFlagA != false) {
        Icmpv6Fmip6HiFlagA = other.Icmpv6Fmip6HiFlagA;
      }
      if (other.Icmpv6Fmip6HiFlagReserved != 0) {
        Icmpv6Fmip6HiFlagReserved = other.Icmpv6Fmip6HiFlagReserved;
      }
      if (other.Icmpv6Fmip6Identifier != 0) {
        Icmpv6Fmip6Identifier = other.Icmpv6Fmip6Identifier;
      }
      if (other.Icmpv6McastRaQueryInterval != 0) {
        Icmpv6McastRaQueryInterval = other.Icmpv6McastRaQueryInterval;
      }
      if (other.Icmpv6McastRaRobustnessVariable != 0) {
        Icmpv6McastRaRobustnessVariable = other.Icmpv6McastRaRobustnessVariable;
      }
      if (other.Icmpv6NiQtype != 0) {
        Icmpv6NiQtype = other.Icmpv6NiQtype;
      }
      if (other.Icmpv6NiFlag != 0) {
        Icmpv6NiFlag = other.Icmpv6NiFlag;
      }
      if (other.Icmpv6NiFlagG != false) {
        Icmpv6NiFlagG = other.Icmpv6NiFlagG;
      }
      if (other.Icmpv6NiFlagS != false) {
        Icmpv6NiFlagS = other.Icmpv6NiFlagS;
      }
      if (other.Icmpv6NiFlagL != false) {
        Icmpv6NiFlagL = other.Icmpv6NiFlagL;
      }
      if (other.Icmpv6NiFlagC != false) {
        Icmpv6NiFlagC = other.Icmpv6NiFlagC;
      }
      if (other.Icmpv6NiFlagA != false) {
        Icmpv6NiFlagA = other.Icmpv6NiFlagA;
      }
      if (other.Icmpv6NiFlagT != false) {
        Icmpv6NiFlagT = other.Icmpv6NiFlagT;
      }
      if (other.Icmpv6NiFlagRsv != 0) {
        Icmpv6NiFlagRsv = other.Icmpv6NiFlagRsv;
      }
      if (other.Icmpv6NiNonce != 0UL) {
        Icmpv6NiNonce = other.Icmpv6NiNonce;
      }
      if (other.Icmpv6NiQuerySubjectIpv6.Length != 0) {
        Icmpv6NiQuerySubjectIpv6 = other.Icmpv6NiQuerySubjectIpv6;
      }
      if (other.Icmpv6NiQuerySubjectFqdn.Length != 0) {
        Icmpv6NiQuerySubjectFqdn = other.Icmpv6NiQuerySubjectFqdn;
      }
      if (other.Icmpv6NiQuerySubjectIpv4.Length != 0) {
        Icmpv6NiQuerySubjectIpv4 = other.Icmpv6NiQuerySubjectIpv4;
      }
      if (other.Icmpv6NiReplyNodeTtl != 0) {
        Icmpv6NiReplyNodeTtl = other.Icmpv6NiReplyNodeTtl;
      }
      if (other.Icmpv6NiReplyNodeName.Length != 0) {
        Icmpv6NiReplyNodeName = other.Icmpv6NiReplyNodeName;
      }
      if (other.Icmpv6NiReplyNodeAddress.Length != 0) {
        Icmpv6NiReplyNodeAddress = other.Icmpv6NiReplyNodeAddress;
      }
      if (other.Icmpv6NiReplyIpv4Address.Length != 0) {
        Icmpv6NiReplyIpv4Address = other.Icmpv6NiReplyIpv4Address;
      }
      if (other.Icmpv6RplDisFlags != 0) {
        Icmpv6RplDisFlags = other.Icmpv6RplDisFlags;
      }
      if (other.Icmpv6RplDioInstance != 0) {
        Icmpv6RplDioInstance = other.Icmpv6RplDioInstance;
      }
      if (other.Icmpv6RplDioVersion != 0) {
        Icmpv6RplDioVersion = other.Icmpv6RplDioVersion;
      }
      if (other.Icmpv6RplDioRank != 0) {
        Icmpv6RplDioRank = other.Icmpv6RplDioRank;
      }
      if (other.Icmpv6RplDioFlag != 0) {
        Icmpv6RplDioFlag = other.Icmpv6RplDioFlag;
      }
      if (other.Icmpv6RplDioFlagG != false) {
        Icmpv6RplDioFlagG = other.Icmpv6RplDioFlagG;
      }
      if (other.Icmpv6RplDioFlag0 != false) {
        Icmpv6RplDioFlag0 = other.Icmpv6RplDioFlag0;
      }
      if (other.Icmpv6RplDioFlagMop != 0) {
        Icmpv6RplDioFlagMop = other.Icmpv6RplDioFlagMop;
      }
      if (other.Icmpv6RplDioFlagPreference != 0) {
        Icmpv6RplDioFlagPreference = other.Icmpv6RplDioFlagPreference;
      }
      if (other.Icmpv6RplDioDtsn != 0) {
        Icmpv6RplDioDtsn = other.Icmpv6RplDioDtsn;
      }
      if (other.Icmpv6RplDioDagid.Length != 0) {
        Icmpv6RplDioDagid = other.Icmpv6RplDioDagid;
      }
      if (other.Icmpv6RplDaoInstance != 0) {
        Icmpv6RplDaoInstance = other.Icmpv6RplDaoInstance;
      }
      if (other.Icmpv6RplDaoFlag != 0) {
        Icmpv6RplDaoFlag = other.Icmpv6RplDaoFlag;
      }
      if (other.Icmpv6RplDaoFlagK != false) {
        Icmpv6RplDaoFlagK = other.Icmpv6RplDaoFlagK;
      }
      if (other.Icmpv6RplDaoFlagD != false) {
        Icmpv6RplDaoFlagD = other.Icmpv6RplDaoFlagD;
      }
      if (other.Icmpv6RplDaoFlagRsv != 0) {
        Icmpv6RplDaoFlagRsv = other.Icmpv6RplDaoFlagRsv;
      }
      if (other.Icmpv6RplDaoSequence != 0) {
        Icmpv6RplDaoSequence = other.Icmpv6RplDaoSequence;
      }
      if (other.Icmpv6RplDaoDodagid.Length != 0) {
        Icmpv6RplDaoDodagid = other.Icmpv6RplDaoDodagid;
      }
      if (other.Icmpv6RplDaoackInstance != 0) {
        Icmpv6RplDaoackInstance = other.Icmpv6RplDaoackInstance;
      }
      if (other.Icmpv6RplDaoackFlag != 0) {
        Icmpv6RplDaoackFlag = other.Icmpv6RplDaoackFlag;
      }
      if (other.Icmpv6RplDaoackFlagD != false) {
        Icmpv6RplDaoackFlagD = other.Icmpv6RplDaoackFlagD;
      }
      if (other.Icmpv6RplDaoackFlagRsv != 0) {
        Icmpv6RplDaoackFlagRsv = other.Icmpv6RplDaoackFlagRsv;
      }
      if (other.Icmpv6RplDaoackSequence != 0) {
        Icmpv6RplDaoackSequence = other.Icmpv6RplDaoackSequence;
      }
      if (other.Icmpv6RplDaoackStatus != 0) {
        Icmpv6RplDaoackStatus = other.Icmpv6RplDaoackStatus;
      }
      if (other.Icmpv6RplDaoackDodagid.Length != 0) {
        Icmpv6RplDaoackDodagid = other.Icmpv6RplDaoackDodagid;
      }
      if (other.Icmpv6RplCcInstance != 0) {
        Icmpv6RplCcInstance = other.Icmpv6RplCcInstance;
      }
      if (other.Icmpv6RplCcFlag != 0) {
        Icmpv6RplCcFlag = other.Icmpv6RplCcFlag;
      }
      if (other.Icmpv6RplCcFlagR != false) {
        Icmpv6RplCcFlagR = other.Icmpv6RplCcFlagR;
      }
      if (other.Icmpv6RplCcFlagRsv != 0) {
        Icmpv6RplCcFlagRsv = other.Icmpv6RplCcFlagRsv;
      }
      if (other.Icmpv6RplCcNonce != 0) {
        Icmpv6RplCcNonce = other.Icmpv6RplCcNonce;
      }
      if (other.Icmpv6RplCcDodagid.Length != 0) {
        Icmpv6RplCcDodagid = other.Icmpv6RplCcDodagid;
      }
      if (other.Icmpv6RplCcDestinationCounter != 0) {
        Icmpv6RplCcDestinationCounter = other.Icmpv6RplCcDestinationCounter;
      }
      if (other.Icmpv6RplSecureFlag != 0) {
        Icmpv6RplSecureFlag = other.Icmpv6RplSecureFlag;
      }
      if (other.Icmpv6RplSecureFlagT != false) {
        Icmpv6RplSecureFlagT = other.Icmpv6RplSecureFlagT;
      }
      if (other.Icmpv6RplSecureFlagRsv != 0) {
        Icmpv6RplSecureFlagRsv = other.Icmpv6RplSecureFlagRsv;
      }
      if (other.Icmpv6RplSecureAlgorithm != 0) {
        Icmpv6RplSecureAlgorithm = other.Icmpv6RplSecureAlgorithm;
      }
      if (other.Icmpv6RplSecureKim != 0) {
        Icmpv6RplSecureKim = other.Icmpv6RplSecureKim;
      }
      if (other.Icmpv6RplSecureLvl != 0) {
        Icmpv6RplSecureLvl = other.Icmpv6RplSecureLvl;
      }
      if (other.Icmpv6RplSecureRsv != 0) {
        Icmpv6RplSecureRsv = other.Icmpv6RplSecureRsv;
      }
      if (other.Icmpv6RplSecureCounter != 0) {
        Icmpv6RplSecureCounter = other.Icmpv6RplSecureCounter;
      }
      if (other.Icmpv6RplSecureKeySource.Length != 0) {
        Icmpv6RplSecureKeySource = other.Icmpv6RplSecureKeySource;
      }
      if (other.Icmpv6RplSecureKeyIndex != 0) {
        Icmpv6RplSecureKeyIndex = other.Icmpv6RplSecureKeyIndex;
      }
      if (other.Icmpv6RplOptType != 0) {
        Icmpv6RplOptType = other.Icmpv6RplOptType;
      }
      if (other.Icmpv6RplOptLength != 0) {
        Icmpv6RplOptLength = other.Icmpv6RplOptLength;
      }
      if (other.Icmpv6RplOptReserved != 0) {
        Icmpv6RplOptReserved = other.Icmpv6RplOptReserved;
      }
      if (other.Icmpv6RplOptPadn != 0) {
        Icmpv6RplOptPadn = other.Icmpv6RplOptPadn;
      }
      if (other.Icmpv6RplOptMetricType != 0) {
        Icmpv6RplOptMetricType = other.Icmpv6RplOptMetricType;
      }
      if (other.Icmpv6RplOptMetricFlags != 0) {
        Icmpv6RplOptMetricFlags = other.Icmpv6RplOptMetricFlags;
      }
      if (other.Icmpv6RplOptMetricReserved != 0) {
        Icmpv6RplOptMetricReserved = other.Icmpv6RplOptMetricReserved;
      }
      if (other.Icmpv6RplOptMetricFlagP != false) {
        Icmpv6RplOptMetricFlagP = other.Icmpv6RplOptMetricFlagP;
      }
      if (other.Icmpv6RplOptMetricFlagC != false) {
        Icmpv6RplOptMetricFlagC = other.Icmpv6RplOptMetricFlagC;
      }
      if (other.Icmpv6RplOptMetricFlagO != false) {
        Icmpv6RplOptMetricFlagO = other.Icmpv6RplOptMetricFlagO;
      }
      if (other.Icmpv6RplOptMetricFlagR != false) {
        Icmpv6RplOptMetricFlagR = other.Icmpv6RplOptMetricFlagR;
      }
      if (other.Icmpv6RplOptMetricFlagA != 0) {
        Icmpv6RplOptMetricFlagA = other.Icmpv6RplOptMetricFlagA;
      }
      if (other.Icmpv6RplOptMetricPrec != 0) {
        Icmpv6RplOptMetricPrec = other.Icmpv6RplOptMetricPrec;
      }
      if (other.Icmpv6RplOptMetricLength != 0) {
        Icmpv6RplOptMetricLength = other.Icmpv6RplOptMetricLength;
      }
      if (other.Icmpv6RplOptMetricNsaObject != 0) {
        Icmpv6RplOptMetricNsaObject = other.Icmpv6RplOptMetricNsaObject;
      }
      if (other.Icmpv6RplOptMetricNsaObjectReserved != 0) {
        Icmpv6RplOptMetricNsaObjectReserved = other.Icmpv6RplOptMetricNsaObjectReserved;
      }
      if (other.Icmpv6RplOptMetricNsaObjectFlags != 0) {
        Icmpv6RplOptMetricNsaObjectFlags = other.Icmpv6RplOptMetricNsaObjectFlags;
      }
      if (other.Icmpv6RplOptMetricNsaObjectFlagA != false) {
        Icmpv6RplOptMetricNsaObjectFlagA = other.Icmpv6RplOptMetricNsaObjectFlagA;
      }
      if (other.Icmpv6RplOptMetricNsaObjectFlagO != false) {
        Icmpv6RplOptMetricNsaObjectFlagO = other.Icmpv6RplOptMetricNsaObjectFlagO;
      }
      if (other.Icmpv6RplOptMetricNeObject != 0) {
        Icmpv6RplOptMetricNeObject = other.Icmpv6RplOptMetricNeObject;
      }
      if (other.Icmpv6RplOptMetricNeObjectFlags != 0) {
        Icmpv6RplOptMetricNeObjectFlags = other.Icmpv6RplOptMetricNeObjectFlags;
      }
      if (other.Icmpv6RplOptMetricNeObjectFlagI != false) {
        Icmpv6RplOptMetricNeObjectFlagI = other.Icmpv6RplOptMetricNeObjectFlagI;
      }
      if (other.Icmpv6RplOptMetricNeObjectType != 0) {
        Icmpv6RplOptMetricNeObjectType = other.Icmpv6RplOptMetricNeObjectType;
      }
      if (other.Icmpv6RplOptMetricNeObjectFlagE != false) {
        Icmpv6RplOptMetricNeObjectFlagE = other.Icmpv6RplOptMetricNeObjectFlagE;
      }
      if (other.Icmpv6RplOptMetricNeObjectEnergy != 0) {
        Icmpv6RplOptMetricNeObjectEnergy = other.Icmpv6RplOptMetricNeObjectEnergy;
      }
      if (other.Icmpv6RplOptMetricHpObject != 0) {
        Icmpv6RplOptMetricHpObject = other.Icmpv6RplOptMetricHpObject;
      }
      if (other.Icmpv6RplOptMetricHpObjectReserved != 0) {
        Icmpv6RplOptMetricHpObjectReserved = other.Icmpv6RplOptMetricHpObjectReserved;
      }
      if (other.Icmpv6RplOptMetricHpObjectFlags != 0) {
        Icmpv6RplOptMetricHpObjectFlags = other.Icmpv6RplOptMetricHpObjectFlags;
      }
      if (other.Icmpv6RplOptMetricHpObjectHp != 0) {
        Icmpv6RplOptMetricHpObjectHp = other.Icmpv6RplOptMetricHpObjectHp;
      }
      if (other.Icmpv6RplOptMetricLtObjectLt != 0) {
        Icmpv6RplOptMetricLtObjectLt = other.Icmpv6RplOptMetricLtObjectLt;
      }
      if (other.Icmpv6RplOptMetricLlObjectLl != 0) {
        Icmpv6RplOptMetricLlObjectLl = other.Icmpv6RplOptMetricLlObjectLl;
      }
      if (other.Icmpv6RplOptMetricLqlObject != 0) {
        Icmpv6RplOptMetricLqlObject = other.Icmpv6RplOptMetricLqlObject;
      }
      if (other.Icmpv6RplOptMetricLqlObjectRes != 0) {
        Icmpv6RplOptMetricLqlObjectRes = other.Icmpv6RplOptMetricLqlObjectRes;
      }
      if (other.Icmpv6RplOptMetricLqlObjectVal != 0) {
        Icmpv6RplOptMetricLqlObjectVal = other.Icmpv6RplOptMetricLqlObjectVal;
      }
      if (other.Icmpv6RplOptMetricLqlObjectCounter != 0) {
        Icmpv6RplOptMetricLqlObjectCounter = other.Icmpv6RplOptMetricLqlObjectCounter;
      }
      if (other.Icmpv6RplOptMetricEtxObjectEtx != 0) {
        Icmpv6RplOptMetricEtxObjectEtx = other.Icmpv6RplOptMetricEtxObjectEtx;
      }
      if (other.Icmpv6RplOptMetricLcObject != 0) {
        Icmpv6RplOptMetricLcObject = other.Icmpv6RplOptMetricLcObject;
      }
      if (other.Icmpv6RplOptMetricLcObjectRes != 0) {
        Icmpv6RplOptMetricLcObjectRes = other.Icmpv6RplOptMetricLcObjectRes;
      }
      if (other.Icmpv6RplOptMetricLcObjectLc != 0) {
        Icmpv6RplOptMetricLcObjectLc = other.Icmpv6RplOptMetricLcObjectLc;
      }
      if (other.Icmpv6RplOptMetricLcObjectCounter != 0) {
        Icmpv6RplOptMetricLcObjectCounter = other.Icmpv6RplOptMetricLcObjectCounter;
      }
      if (other.Icmpv6RplOptMetricLcObjectReserved != 0) {
        Icmpv6RplOptMetricLcObjectReserved = other.Icmpv6RplOptMetricLcObjectReserved;
      }
      if (other.Icmpv6RplOptMetricLcObjectFlagI != 0) {
        Icmpv6RplOptMetricLcObjectFlagI = other.Icmpv6RplOptMetricLcObjectFlagI;
      }
      if (other.Icmpv6RplOptRoutePrefixLength != 0) {
        Icmpv6RplOptRoutePrefixLength = other.Icmpv6RplOptRoutePrefixLength;
      }
      if (other.Icmpv6RplOptRouteFlag != 0) {
        Icmpv6RplOptRouteFlag = other.Icmpv6RplOptRouteFlag;
      }
      if (other.Icmpv6RplOptRoutePref != 0) {
        Icmpv6RplOptRoutePref = other.Icmpv6RplOptRoutePref;
      }
      if (other.Icmpv6RplOptRouteReserved != 0) {
        Icmpv6RplOptRouteReserved = other.Icmpv6RplOptRouteReserved;
      }
      if (other.Icmpv6RplOptRouteLifetime != 0) {
        Icmpv6RplOptRouteLifetime = other.Icmpv6RplOptRouteLifetime;
      }
      if (other.Icmpv6RplOptRoutePrefix.Length != 0) {
        Icmpv6RplOptRoutePrefix = other.Icmpv6RplOptRoutePrefix;
      }
      if (other.Icmpv6RplOptConfigFlag != 0) {
        Icmpv6RplOptConfigFlag = other.Icmpv6RplOptConfigFlag;
      }
      if (other.Icmpv6RplOptConfigReserved != 0) {
        Icmpv6RplOptConfigReserved = other.Icmpv6RplOptConfigReserved;
      }
      if (other.Icmpv6RplOptConfigAuth != false) {
        Icmpv6RplOptConfigAuth = other.Icmpv6RplOptConfigAuth;
      }
      if (other.Icmpv6RplOptConfigPcs != 0) {
        Icmpv6RplOptConfigPcs = other.Icmpv6RplOptConfigPcs;
      }
      if (other.Icmpv6RplOptConfigIntervalDouble != 0) {
        Icmpv6RplOptConfigIntervalDouble = other.Icmpv6RplOptConfigIntervalDouble;
      }
      if (other.Icmpv6RplOptConfigIntervalMin != 0) {
        Icmpv6RplOptConfigIntervalMin = other.Icmpv6RplOptConfigIntervalMin;
      }
      if (other.Icmpv6RplOptConfigRedundancy != 0) {
        Icmpv6RplOptConfigRedundancy = other.Icmpv6RplOptConfigRedundancy;
      }
      if (other.Icmpv6RplOptConfigMaxRankInc != 0) {
        Icmpv6RplOptConfigMaxRankInc = other.Icmpv6RplOptConfigMaxRankInc;
      }
      if (other.Icmpv6RplOptConfigMinHopRankInc != 0) {
        Icmpv6RplOptConfigMinHopRankInc = other.Icmpv6RplOptConfigMinHopRankInc;
      }
      if (other.Icmpv6RplOptConfigOcp != 0) {
        Icmpv6RplOptConfigOcp = other.Icmpv6RplOptConfigOcp;
      }
      if (other.Icmpv6RplOptConfigRsv != 0) {
        Icmpv6RplOptConfigRsv = other.Icmpv6RplOptConfigRsv;
      }
      if (other.Icmpv6RplOptConfigDefLifetime != 0) {
        Icmpv6RplOptConfigDefLifetime = other.Icmpv6RplOptConfigDefLifetime;
      }
      if (other.Icmpv6RplOptConfigLifetimeUnit != 0) {
        Icmpv6RplOptConfigLifetimeUnit = other.Icmpv6RplOptConfigLifetimeUnit;
      }
      if (other.Icmpv6RplOptTargetFlag != 0) {
        Icmpv6RplOptTargetFlag = other.Icmpv6RplOptTargetFlag;
      }
      if (other.Icmpv6RplOptTargetPrefixLength != 0) {
        Icmpv6RplOptTargetPrefixLength = other.Icmpv6RplOptTargetPrefixLength;
      }
      if (other.Icmpv6RplOptTargetPrefix.Length != 0) {
        Icmpv6RplOptTargetPrefix = other.Icmpv6RplOptTargetPrefix;
      }
      if (other.Icmpv6RplOptTransitFlag != 0) {
        Icmpv6RplOptTransitFlag = other.Icmpv6RplOptTransitFlag;
      }
      if (other.Icmpv6RplOptTransitFlagE != false) {
        Icmpv6RplOptTransitFlagE = other.Icmpv6RplOptTransitFlagE;
      }
      if (other.Icmpv6RplOptTransitFlagRsv != 0) {
        Icmpv6RplOptTransitFlagRsv = other.Icmpv6RplOptTransitFlagRsv;
      }
      if (other.Icmpv6RplOptTransitPathctl != 0) {
        Icmpv6RplOptTransitPathctl = other.Icmpv6RplOptTransitPathctl;
      }
      if (other.Icmpv6RplOptTransitPathseq != 0) {
        Icmpv6RplOptTransitPathseq = other.Icmpv6RplOptTransitPathseq;
      }
      if (other.Icmpv6RplOptTransitPathlifetime != 0) {
        Icmpv6RplOptTransitPathlifetime = other.Icmpv6RplOptTransitPathlifetime;
      }
      if (other.Icmpv6RplOptTransitParent.Length != 0) {
        Icmpv6RplOptTransitParent = other.Icmpv6RplOptTransitParent;
      }
      if (other.Icmpv6RplOptSolicitedInstance != 0) {
        Icmpv6RplOptSolicitedInstance = other.Icmpv6RplOptSolicitedInstance;
      }
      if (other.Icmpv6RplOptSolicitedFlag != 0) {
        Icmpv6RplOptSolicitedFlag = other.Icmpv6RplOptSolicitedFlag;
      }
      if (other.Icmpv6RplOptSolicitedFlagV != false) {
        Icmpv6RplOptSolicitedFlagV = other.Icmpv6RplOptSolicitedFlagV;
      }
      if (other.Icmpv6RplOptSolicitedFlagI != false) {
        Icmpv6RplOptSolicitedFlagI = other.Icmpv6RplOptSolicitedFlagI;
      }
      if (other.Icmpv6RplOptSolicitedFlagD != false) {
        Icmpv6RplOptSolicitedFlagD = other.Icmpv6RplOptSolicitedFlagD;
      }
      if (other.Icmpv6RplOptSolicitedFlagRsv != 0) {
        Icmpv6RplOptSolicitedFlagRsv = other.Icmpv6RplOptSolicitedFlagRsv;
      }
      if (other.Icmpv6RplOptSolicitedDodagid.Length != 0) {
        Icmpv6RplOptSolicitedDodagid = other.Icmpv6RplOptSolicitedDodagid;
      }
      if (other.Icmpv6RplOptSolicitedVersion != 0) {
        Icmpv6RplOptSolicitedVersion = other.Icmpv6RplOptSolicitedVersion;
      }
      if (other.Icmpv6RplOptPrefixLength != 0) {
        Icmpv6RplOptPrefixLength = other.Icmpv6RplOptPrefixLength;
      }
      if (other.Icmpv6RplOptPrefixFlag != 0) {
        Icmpv6RplOptPrefixFlag = other.Icmpv6RplOptPrefixFlag;
      }
      if (other.Icmpv6RplOptPrefixFlagL != false) {
        Icmpv6RplOptPrefixFlagL = other.Icmpv6RplOptPrefixFlagL;
      }
      if (other.Icmpv6RplOptConfigFlagA != false) {
        Icmpv6RplOptConfigFlagA = other.Icmpv6RplOptConfigFlagA;
      }
      if (other.Icmpv6RplOptConfigFlagR != false) {
        Icmpv6RplOptConfigFlagR = other.Icmpv6RplOptConfigFlagR;
      }
      if (other.Icmpv6RplOptConfigFlagRsv != 0) {
        Icmpv6RplOptConfigFlagRsv = other.Icmpv6RplOptConfigFlagRsv;
      }
      if (other.Icmpv6RplOptPrefixValidLifetime != 0) {
        Icmpv6RplOptPrefixValidLifetime = other.Icmpv6RplOptPrefixValidLifetime;
      }
      if (other.Icmpv6RplOptPrefixPreferredLifetime != 0) {
        Icmpv6RplOptPrefixPreferredLifetime = other.Icmpv6RplOptPrefixPreferredLifetime;
      }
      if (other.Icmpv6RplOptPrefix.Length != 0) {
        Icmpv6RplOptPrefix = other.Icmpv6RplOptPrefix;
      }
      if (other.Icmpv6RplOptTargetdescDescriptor != 0) {
        Icmpv6RplOptTargetdescDescriptor = other.Icmpv6RplOptTargetdescDescriptor;
      }
      if (other.Icmpv6RplOptRoutediscoveryFlag != 0) {
        Icmpv6RplOptRoutediscoveryFlag = other.Icmpv6RplOptRoutediscoveryFlag;
      }
      if (other.Icmpv6RplOptRoutediscoveryFlagReply != false) {
        Icmpv6RplOptRoutediscoveryFlagReply = other.Icmpv6RplOptRoutediscoveryFlagReply;
      }
      if (other.Icmpv6RplOptRoutediscoveryFlagHopbyhop != false) {
        Icmpv6RplOptRoutediscoveryFlagHopbyhop = other.Icmpv6RplOptRoutediscoveryFlagHopbyhop;
      }
      if (other.Icmpv6RplOptRoutediscoveryFlagNumofroutes != 0) {
        Icmpv6RplOptRoutediscoveryFlagNumofroutes = other.Icmpv6RplOptRoutediscoveryFlagNumofroutes;
      }
      if (other.Icmpv6RplOptRoutediscoveryFlagCompr != 0) {
        Icmpv6RplOptRoutediscoveryFlagCompr = other.Icmpv6RplOptRoutediscoveryFlagCompr;
      }
      if (other.Icmpv6RplOptRoutediscoveryLifetime != 0) {
        Icmpv6RplOptRoutediscoveryLifetime = other.Icmpv6RplOptRoutediscoveryLifetime;
      }
      if (other.Icmpv6RplOptRoutediscoveryMaxrank != 0) {
        Icmpv6RplOptRoutediscoveryMaxrank = other.Icmpv6RplOptRoutediscoveryMaxrank;
      }
      if (other.Icmpv6RplOptRoutediscoveryNh != 0) {
        Icmpv6RplOptRoutediscoveryNh = other.Icmpv6RplOptRoutediscoveryNh;
      }
      if (other.Icmpv6RplOptRoutediscoveryTargetaddr.Length != 0) {
        Icmpv6RplOptRoutediscoveryTargetaddr = other.Icmpv6RplOptRoutediscoveryTargetaddr;
      }
      if (other.Icmpv6RplOptRoutediscoveryAddrVec != 0) {
        Icmpv6RplOptRoutediscoveryAddrVec = other.Icmpv6RplOptRoutediscoveryAddrVec;
      }
      if (other.Icmpv6RplOptRoutediscoveryAddrvecAddr.Length != 0) {
        Icmpv6RplOptRoutediscoveryAddrvecAddr = other.Icmpv6RplOptRoutediscoveryAddrvecAddr;
      }
      if (other.Icmpv6RplP2PDroInstance != 0) {
        Icmpv6RplP2PDroInstance = other.Icmpv6RplP2PDroInstance;
      }
      if (other.Icmpv6RplP2PDroVersion != 0) {
        Icmpv6RplP2PDroVersion = other.Icmpv6RplP2PDroVersion;
      }
      if (other.Icmpv6RplP2PDroFlag != 0) {
        Icmpv6RplP2PDroFlag = other.Icmpv6RplP2PDroFlag;
      }
      if (other.Icmpv6RplP2PDroFlagStop != false) {
        Icmpv6RplP2PDroFlagStop = other.Icmpv6RplP2PDroFlagStop;
      }
      if (other.Icmpv6RplP2PDroFlagAck != false) {
        Icmpv6RplP2PDroFlagAck = other.Icmpv6RplP2PDroFlagAck;
      }
      if (other.Icmpv6RplP2PDroFlagSeq != 0) {
        Icmpv6RplP2PDroFlagSeq = other.Icmpv6RplP2PDroFlagSeq;
      }
      if (other.Icmpv6RplP2PDroFlagReserved != 0) {
        Icmpv6RplP2PDroFlagReserved = other.Icmpv6RplP2PDroFlagReserved;
      }
      if (other.Icmpv6RplP2PDroDagid.Length != 0) {
        Icmpv6RplP2PDroDagid = other.Icmpv6RplP2PDroDagid;
      }
      if (other.Icmpv6RplP2PDroackFlag != 0) {
        Icmpv6RplP2PDroackFlag = other.Icmpv6RplP2PDroackFlag;
      }
      if (other.Icmpv6RplP2PDroackFlagSeq != 0) {
        Icmpv6RplP2PDroackFlagSeq = other.Icmpv6RplP2PDroackFlagSeq;
      }
      if (other.Icmpv6RplP2PDroackFlagReserved != 0) {
        Icmpv6RplP2PDroackFlagReserved = other.Icmpv6RplP2PDroackFlagReserved;
      }
      if (other.Icmpv6IlnpNbLocs != 0) {
        Icmpv6IlnpNbLocs = other.Icmpv6IlnpNbLocs;
      }
      if (other.Icmpv6IlnpNbLocator != 0UL) {
        Icmpv6IlnpNbLocator = other.Icmpv6IlnpNbLocator;
      }
      if (other.Icmpv6IlnpNbPreference != 0) {
        Icmpv6IlnpNbPreference = other.Icmpv6IlnpNbPreference;
      }
      if (other.Icmpv6IlnpNbLifetime != 0) {
        Icmpv6IlnpNbLifetime = other.Icmpv6IlnpNbLifetime;
      }
      if (other.Icmpv66LowpanndDaStatus != 0) {
        Icmpv66LowpanndDaStatus = other.Icmpv66LowpanndDaStatus;
      }
      if (other.Icmpv66LowpanndDaRsv != 0) {
        Icmpv66LowpanndDaRsv = other.Icmpv66LowpanndDaRsv;
      }
      if (other.Icmpv66LowpanndDaLifetime != 0) {
        Icmpv66LowpanndDaLifetime = other.Icmpv66LowpanndDaLifetime;
      }
      if (other.Icmpv66LowpanndDaEui64.Length != 0) {
        Icmpv66LowpanndDaEui64 = other.Icmpv66LowpanndDaEui64;
      }
      if (other.Icmpv66LowpanndDaRegAddr.Length != 0) {
        Icmpv66LowpanndDaRegAddr = other.Icmpv66LowpanndDaRegAddr;
      }
      if (other.Icmpv6RespIn != 0L) {
        Icmpv6RespIn = other.Icmpv6RespIn;
      }
      if (other.Icmpv6NoResp != 0) {
        Icmpv6NoResp = other.Icmpv6NoResp;
      }
      if (other.Icmpv6RespTo != 0L) {
        Icmpv6RespTo = other.Icmpv6RespTo;
      }
      if (other.Icmpv6Resptime != 0D) {
        Icmpv6Resptime = other.Icmpv6Resptime;
      }
      if (other.Icmpv6MplSeedInfoMinSequence != 0) {
        Icmpv6MplSeedInfoMinSequence = other.Icmpv6MplSeedInfoMinSequence;
      }
      if (other.Icmpv6MplSeedInfoBmLen != 0) {
        Icmpv6MplSeedInfoBmLen = other.Icmpv6MplSeedInfoBmLen;
      }
      if (other.Icmpv6MplSeedInfoS != 0) {
        Icmpv6MplSeedInfoS = other.Icmpv6MplSeedInfoS;
      }
      if (other.Icmpv6MplSeedInfoSeedId.Length != 0) {
        Icmpv6MplSeedInfoSeedId = other.Icmpv6MplSeedInfoSeedId;
      }
      if (other.Icmpv6MplSeedInfoSequence != 0) {
        Icmpv6MplSeedInfoSequence = other.Icmpv6MplSeedInfoSequence;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Icmpv6Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Icmpv6Code = input.ReadUInt32();
            break;
          }
          case 24: {
            Icmpv6Checksum = input.ReadUInt32();
            break;
          }
          case 32: {
            Icmpv6ChecksumStatus = input.ReadUInt32();
            break;
          }
          case 42: {
            Icmpv6Reserved = input.ReadBytes();
            break;
          }
          case 50: {
            Icmpv6Data = input.ReadBytes();
            break;
          }
          case 58: {
            Icmpv6UnknownData = input.ReadBytes();
            break;
          }
          case 64: {
            Icmpv6Mtu = input.ReadUInt32();
            break;
          }
          case 72: {
            Icmpv6Pointer = input.ReadUInt32();
            break;
          }
          case 80: {
            Icmpv6EchoIdentifier = input.ReadUInt32();
            break;
          }
          case 88: {
            Icmpv6EchoSequenceNumber = input.ReadUInt32();
            break;
          }
          case 98: {
            Icmpv6Nonce = input.ReadBytes();
            break;
          }
          case 104: {
            Icmpv6NdRaCurHopLimit = input.ReadUInt32();
            break;
          }
          case 112: {
            Icmpv6NdRaFlag = input.ReadUInt32();
            break;
          }
          case 120: {
            Icmpv6NdRaFlagM = input.ReadBool();
            break;
          }
          case 128: {
            Icmpv6NdRaFlagO = input.ReadBool();
            break;
          }
          case 136: {
            Icmpv6NdRaFlagH = input.ReadBool();
            break;
          }
          case 144: {
            Icmpv6NdRaFlagPrf = input.ReadUInt32();
            break;
          }
          case 152: {
            Icmpv6NdRaFlagP = input.ReadBool();
            break;
          }
          case 160: {
            Icmpv6NdRaFlagRsv = input.ReadUInt32();
            break;
          }
          case 168: {
            Icmpv6NdRaRouterLifetime = input.ReadUInt32();
            break;
          }
          case 176: {
            Icmpv6NdRaReachableTime = input.ReadUInt32();
            break;
          }
          case 184: {
            Icmpv6NdRaRetransTimer = input.ReadUInt32();
            break;
          }
          case 194: {
            Icmpv6NdNsTargetAddress = input.ReadBytes();
            break;
          }
          case 200: {
            Icmpv6NdNaFlag = input.ReadUInt32();
            break;
          }
          case 208: {
            Icmpv6NdNaFlagR = input.ReadBool();
            break;
          }
          case 216: {
            Icmpv6NdNaFlagS = input.ReadBool();
            break;
          }
          case 224: {
            Icmpv6NdNaFlagO = input.ReadBool();
            break;
          }
          case 232: {
            Icmpv6NdNaFlagRsv = input.ReadUInt32();
            break;
          }
          case 242: {
            Icmpv6NdNaTargetAddress = input.ReadBytes();
            break;
          }
          case 250: {
            Icmpv6NdRdTargetAddress = input.ReadBytes();
            break;
          }
          case 258: {
            Icmpv6RdNaDestinationAddress = input.ReadBytes();
            break;
          }
          case 264: {
            Icmpv6Opt = input.ReadInt32();
            break;
          }
          case 272: {
            Icmpv6OptType = input.ReadUInt32();
            break;
          }
          case 280: {
            Icmpv6OptLength = input.ReadUInt32();
            break;
          }
          case 288: {
            Icmpv6OptReserved = input.ReadInt32();
            break;
          }
          case 296: {
            Icmpv6OptPadding = input.ReadInt32();
            break;
          }
          case 306: {
            Icmpv6OptLinkaddr = input.ReadBytes();
            break;
          }
          case 314: {
            Icmpv6OptSrcLinkaddr = input.ReadBytes();
            break;
          }
          case 322: {
            Icmpv6OptTargetLinkaddr = input.ReadBytes();
            break;
          }
          case 330: {
            Icmpv6OptLinkaddrEui64 = input.ReadBytes();
            break;
          }
          case 338: {
            Icmpv6OptSrcLinkaddrEui64 = input.ReadBytes();
            break;
          }
          case 346: {
            Icmpv6OptTargetLinkaddrEui64 = input.ReadBytes();
            break;
          }
          case 352: {
            Icmpv6OptPrefixLength = input.ReadUInt32();
            break;
          }
          case 360: {
            Icmpv6OptPrefixFlag = input.ReadUInt32();
            break;
          }
          case 368: {
            Icmpv6OptPrefixFlagL = input.ReadBool();
            break;
          }
          case 376: {
            Icmpv6OptPrefixFlagA = input.ReadBool();
            break;
          }
          case 384: {
            Icmpv6OptPrefixFlagR = input.ReadBool();
            break;
          }
          case 392: {
            Icmpv6OptPrefixFlagReserved = input.ReadUInt32();
            break;
          }
          case 400: {
            Icmpv6OptPrefixValidLifetime = input.ReadUInt32();
            break;
          }
          case 408: {
            Icmpv6OptPrefixPreferredLifetime = input.ReadUInt32();
            break;
          }
          case 418: {
            Icmpv6OptPrefix = input.ReadBytes();
            break;
          }
          case 424: {
            Icmpv6OptCgaPadLength = input.ReadUInt32();
            break;
          }
          case 434: {
            Icmpv6OptCga = input.ReadBytes();
            break;
          }
          case 442: {
            Icmpv6OptCgaModifier = input.ReadBytes();
            break;
          }
          case 450: {
            Icmpv6OptCgaSubnetPrefix = input.ReadBytes();
            break;
          }
          case 458: {
            Icmpv6OptCgaCount = input.ReadBytes();
            break;
          }
          case 464: {
            Icmpv6OptCgaExtType = input.ReadUInt32();
            break;
          }
          case 472: {
            Icmpv6OptCgaExtLength = input.ReadUInt32();
            break;
          }
          case 482: {
            Icmpv6OptCgaExtData = input.ReadBytes();
            break;
          }
          case 490: {
            Icmpv6OptRsaKeyHash = input.ReadBytes();
            break;
          }
          case 496: {
            Icmpv6OptDigitalSignaturePadding = input.ReadInt32();
            break;
          }
          case 506: {
            Icmpv6OptPsKeyHash = input.ReadBytes();
            break;
          }
          case 512: {
            Icmpv6OptTimestamp = input.ReadInt64();
            break;
          }
          case 522: {
            Icmpv6OptNonce = input.ReadBytes();
            break;
          }
          case 528: {
            Icmpv6OptCertificatePadding = input.ReadInt32();
            break;
          }
          case 536: {
            Icmpv6OptIpaOptionCode = input.ReadUInt32();
            break;
          }
          case 544: {
            Icmpv6OptIpaPrefixLen = input.ReadUInt32();
            break;
          }
          case 554: {
            Icmpv6OptIpaIpv6Address = input.ReadBytes();
            break;
          }
          case 560: {
            Icmpv6OptNrpiOptionCode = input.ReadUInt32();
            break;
          }
          case 568: {
            Icmpv6OptNrpiPrefixLen = input.ReadUInt32();
            break;
          }
          case 578: {
            Icmpv6OptNrpiPrefix = input.ReadBytes();
            break;
          }
          case 584: {
            Icmpv6OptLlaOptionCode = input.ReadUInt32();
            break;
          }
          case 594: {
            Icmpv6OptLlaBytes = input.ReadBytes();
            break;
          }
          case 600: {
            Icmpv6OptNaackOptionCode = input.ReadUInt32();
            break;
          }
          case 608: {
            Icmpv6OptNaackStatus = input.ReadUInt32();
            break;
          }
          case 618: {
            Icmpv6OptNaackSuppliedNcoa = input.ReadBytes();
            break;
          }
          case 624: {
            Icmpv6OptMapDistance = input.ReadUInt32();
            break;
          }
          case 632: {
            Icmpv6OptMapPreference = input.ReadUInt32();
            break;
          }
          case 640: {
            Icmpv6OptMapFlag = input.ReadUInt32();
            break;
          }
          case 648: {
            Icmpv6OptMapFlagR = input.ReadBool();
            break;
          }
          case 656: {
            Icmpv6OptMapFlagReserved = input.ReadUInt32();
            break;
          }
          case 664: {
            Icmpv6OptMapValidLifetime = input.ReadUInt32();
            break;
          }
          case 674: {
            Icmpv6OptMapGlobalAddress = input.ReadBytes();
            break;
          }
          case 680: {
            Icmpv6OptRouteInfoFlag = input.ReadUInt32();
            break;
          }
          case 688: {
            Icmpv6OptRouteInfoFlagRoutePreference = input.ReadUInt32();
            break;
          }
          case 696: {
            Icmpv6OptRouteInfoFlagReserved = input.ReadUInt32();
            break;
          }
          case 704: {
            Icmpv6OptRouteLifetime = input.ReadUInt32();
            break;
          }
          case 712: {
            Icmpv6OptNameType = input.ReadUInt32();
            break;
          }
          case 722: {
            Icmpv6OptNameX501 = input.ReadBytes();
            break;
          }
          case 730: {
            Icmpv6OptNameTypeFqdn = input.ReadString();
            break;
          }
          case 736: {
            Icmpv6SendIdentifier = input.ReadUInt32();
            break;
          }
          case 744: {
            Icmpv6SendAllComponents = input.ReadUInt32();
            break;
          }
          case 752: {
            Icmpv6SendComponent = input.ReadUInt32();
            break;
          }
          case 760: {
            Icmpv6X509Name = input.ReadUInt32();
            break;
          }
          case 768: {
            Icmpv6X509Certificate = input.ReadInt32();
            break;
          }
          case 776: {
            Icmpv6OptRedirectedPacket = input.ReadInt32();
            break;
          }
          case 784: {
            Icmpv6OptMtu = input.ReadUInt32();
            break;
          }
          case 792: {
            Icmpv6OptNbmaShortcutLimit = input.ReadUInt32();
            break;
          }
          case 800: {
            Icmpv6OptAdvertisementInterval = input.ReadUInt32();
            break;
          }
          case 808: {
            Icmpv6OptHomeAgentPreference = input.ReadUInt32();
            break;
          }
          case 816: {
            Icmpv6OptHomeAgentLifetime = input.ReadUInt32();
            break;
          }
          case 826: {
            Icmpv6OptIpv6Address = input.ReadBytes();
            break;
          }
          case 832: {
            Icmpv6OptRdnssLifetime = input.ReadUInt32();
            break;
          }
          case 842: {
            Icmpv6OptRdnss = input.ReadBytes();
            break;
          }
          case 848: {
            Icmpv6OptEfo = input.ReadUInt32();
            break;
          }
          case 856: {
            Icmpv6OptEfoM = input.ReadBool();
            break;
          }
          case 864: {
            Icmpv6OptEfoO = input.ReadBool();
            break;
          }
          case 872: {
            Icmpv6OptEfoH = input.ReadBool();
            break;
          }
          case 880: {
            Icmpv6OptEfoPrf = input.ReadUInt32();
            break;
          }
          case 888: {
            Icmpv6OptEfoP = input.ReadBool();
            break;
          }
          case 896: {
            Icmpv6OptEfoRsv = input.ReadUInt32();
            break;
          }
          case 904: {
            Icmpv6OptHkrPadLength = input.ReadUInt32();
            break;
          }
          case 912: {
            Icmpv6OptHkrAt = input.ReadUInt32();
            break;
          }
          case 920: {
            Icmpv6OptHkrReserved = input.ReadUInt32();
            break;
          }
          case 930: {
            Icmpv6OptHkrEncryptionPublicKey = input.ReadBytes();
            break;
          }
          case 938: {
            Icmpv6OptHkrPadding = input.ReadBytes();
            break;
          }
          case 944: {
            Icmpv6OptHkrLifetime = input.ReadUInt32();
            break;
          }
          case 954: {
            Icmpv6OptHkrEncryptedHandoverKey = input.ReadBytes();
            break;
          }
          case 960: {
            Icmpv6OptHaiOptionCode = input.ReadUInt32();
            break;
          }
          case 968: {
            Icmpv6OptHaiLength = input.ReadUInt32();
            break;
          }
          case 978: {
            Icmpv6OptHaiValue = input.ReadBytes();
            break;
          }
          case 984: {
            Icmpv6OptMnOptionCode = input.ReadUInt32();
            break;
          }
          case 992: {
            Icmpv6OptMnLength = input.ReadUInt32();
            break;
          }
          case 1002: {
            Icmpv6OptMnValue = input.ReadBytes();
            break;
          }
          case 1008: {
            Icmpv6OptDnsslLifetime = input.ReadUInt32();
            break;
          }
          case 1018: {
            Icmpv6OptDnssl = input.ReadString();
            break;
          }
          case 1024: {
            Icmpv6OptAroStatus = input.ReadUInt32();
            break;
          }
          case 1032: {
            Icmpv6OptAroRegistrationLifetime = input.ReadUInt32();
            break;
          }
          case 1042: {
            Icmpv6OptAroEui64 = input.ReadBytes();
            break;
          }
          case 1048: {
            Icmpv6Opt6CoContextLength = input.ReadUInt32();
            break;
          }
          case 1056: {
            Icmpv6Opt6CoFlag = input.ReadUInt32();
            break;
          }
          case 1064: {
            Icmpv6Opt6CoFlagC = input.ReadBool();
            break;
          }
          case 1072: {
            Icmpv6Opt6CoFlagCid = input.ReadUInt32();
            break;
          }
          case 1080: {
            Icmpv6Opt6CoFlagReserved = input.ReadUInt32();
            break;
          }
          case 1088: {
            Icmpv6Opt6CoValidLifetime = input.ReadUInt32();
            break;
          }
          case 1098: {
            Icmpv6Opt6CoContextPrefix = input.ReadBytes();
            break;
          }
          case 1104: {
            Icmpv6OptAbroVersionLow = input.ReadUInt32();
            break;
          }
          case 1112: {
            Icmpv6OptAbroVersionHigh = input.ReadUInt32();
            break;
          }
          case 1120: {
            Icmpv6OptAbroValidLifetime = input.ReadUInt32();
            break;
          }
          case 1130: {
            Icmpv6OptAbro6LbrAddress = input.ReadBytes();
            break;
          }
          case 1136: {
            Icmpv6Opt6CioUnassigned1 = input.ReadUInt32();
            break;
          }
          case 1144: {
            Icmpv6Opt6CioFlagG = input.ReadUInt32();
            break;
          }
          case 1152: {
            Icmpv6Opt6CioUnassigned2 = input.ReadUInt32();
            break;
          }
          case 1162: {
            Icmpv6OptCaptivePortal = input.ReadString();
            break;
          }
          case 1168: {
            Icmpv6MldMaximumResponseDelay = input.ReadUInt32();
            break;
          }
          case 1178: {
            Icmpv6MldMulticastAddress = input.ReadBytes();
            break;
          }
          case 1184: {
            Icmpv6RrSequenceNumber = input.ReadUInt32();
            break;
          }
          case 1192: {
            Icmpv6RrSegmentNumber = input.ReadUInt32();
            break;
          }
          case 1200: {
            Icmpv6RrFlag = input.ReadUInt32();
            break;
          }
          case 1208: {
            Icmpv6RrFlagT = input.ReadBool();
            break;
          }
          case 1216: {
            Icmpv6RrFlagR = input.ReadBool();
            break;
          }
          case 1224: {
            Icmpv6RrFlagA = input.ReadBool();
            break;
          }
          case 1232: {
            Icmpv6RrFlagS = input.ReadBool();
            break;
          }
          case 1240: {
            Icmpv6RrFlagP = input.ReadBool();
            break;
          }
          case 1248: {
            Icmpv6RrFlagRsv = input.ReadUInt32();
            break;
          }
          case 1256: {
            Icmpv6RrMaxdelay = input.ReadUInt32();
            break;
          }
          case 1264: {
            Icmpv6RrPcoMp = input.ReadInt32();
            break;
          }
          case 1272: {
            Icmpv6RrPcoMpOpcode = input.ReadUInt32();
            break;
          }
          case 1280: {
            Icmpv6RrPcoMpOplength = input.ReadUInt32();
            break;
          }
          case 1288: {
            Icmpv6RrPcoMpOrdinal = input.ReadUInt32();
            break;
          }
          case 1296: {
            Icmpv6RrPcoMpMatchlen = input.ReadUInt32();
            break;
          }
          case 1304: {
            Icmpv6RrPcoMpMinlen = input.ReadUInt32();
            break;
          }
          case 1312: {
            Icmpv6RrPcoMpMaxlen = input.ReadUInt32();
            break;
          }
          case 1322: {
            Icmpv6RrPcoMpMatchprefix = input.ReadBytes();
            break;
          }
          case 1328: {
            Icmpv6RrPcoUp = input.ReadInt32();
            break;
          }
          case 1336: {
            Icmpv6RrPcoUpUselen = input.ReadUInt32();
            break;
          }
          case 1344: {
            Icmpv6RrPcoUpKeeplen = input.ReadUInt32();
            break;
          }
          case 1352: {
            Icmpv6RrPcoUpFlagmask = input.ReadUInt32();
            break;
          }
          case 1360: {
            Icmpv6RrPcoUpFlagmaskL = input.ReadBool();
            break;
          }
          case 1368: {
            Icmpv6RrPcoUpFlagmaskA = input.ReadBool();
            break;
          }
          case 1376: {
            Icmpv6RrPcoUpFlagmaskReserved = input.ReadUInt32();
            break;
          }
          case 1384: {
            Icmpv6RrPcoUpRaflags = input.ReadUInt32();
            break;
          }
          case 1392: {
            Icmpv6RrPcoUpValidlifetime = input.ReadUInt32();
            break;
          }
          case 1400: {
            Icmpv6RrPcoUpPreferredlifetime = input.ReadUInt32();
            break;
          }
          case 1408: {
            Icmpv6RrPcoUpFlag = input.ReadUInt32();
            break;
          }
          case 1416: {
            Icmpv6RrPcoUpFlagV = input.ReadBool();
            break;
          }
          case 1424: {
            Icmpv6RrPcoUpFlagP = input.ReadBool();
            break;
          }
          case 1432: {
            Icmpv6RrPcoUpFlagReserved = input.ReadUInt32();
            break;
          }
          case 1442: {
            Icmpv6RrPcoUpUseprefix = input.ReadBytes();
            break;
          }
          case 1448: {
            Icmpv6RrRm = input.ReadInt32();
            break;
          }
          case 1456: {
            Icmpv6RrRmFlag = input.ReadUInt32();
            break;
          }
          case 1464: {
            Icmpv6RrRmFlagB = input.ReadBool();
            break;
          }
          case 1472: {
            Icmpv6RrRmFlagF = input.ReadBool();
            break;
          }
          case 1480: {
            Icmpv6RrRmFlagReserved = input.ReadUInt32();
            break;
          }
          case 1488: {
            Icmpv6RrRmOrdinal = input.ReadUInt32();
            break;
          }
          case 1496: {
            Icmpv6RrRmMatchedlen = input.ReadUInt32();
            break;
          }
          case 1504: {
            Icmpv6RrRmInterfaceindex = input.ReadUInt32();
            break;
          }
          case 1514: {
            Icmpv6RrRmMatchedprefix = input.ReadBytes();
            break;
          }
          case 1520: {
            Icmpv6Mip6Identifier = input.ReadUInt32();
            break;
          }
          case 1530: {
            Icmpv6Mip6HomeAgentAddress = input.ReadBytes();
            break;
          }
          case 1536: {
            Icmpv6Mip6Flag = input.ReadUInt32();
            break;
          }
          case 1544: {
            Icmpv6Mip6FlagM = input.ReadBool();
            break;
          }
          case 1552: {
            Icmpv6Mip6FlagO = input.ReadBool();
            break;
          }
          case 1560: {
            Icmpv6Mip6FlagRsv = input.ReadUInt32();
            break;
          }
          case 1568: {
            Icmpv6MldMaximumResponseCode = input.ReadUInt32();
            break;
          }
          case 1576: {
            Icmpv6MldFlag = input.ReadUInt32();
            break;
          }
          case 1584: {
            Icmpv6MldFlagS = input.ReadBool();
            break;
          }
          case 1592: {
            Icmpv6MldFlagQrv = input.ReadUInt32();
            break;
          }
          case 1600: {
            Icmpv6MldFlagReserved = input.ReadUInt32();
            break;
          }
          case 1608: {
            Icmpv6MldQqi = input.ReadUInt32();
            break;
          }
          case 1616: {
            Icmpv6MldNbSources = input.ReadUInt32();
            break;
          }
          case 1626: {
            Icmpv6MldSourceAddress = input.ReadBytes();
            break;
          }
          case 1632: {
            Icmpv6MldrNbMcastRecords = input.ReadUInt32();
            break;
          }
          case 1640: {
            Icmpv6MldrMar = input.ReadInt32();
            break;
          }
          case 1648: {
            Icmpv6MldrMarRecordType = input.ReadUInt32();
            break;
          }
          case 1656: {
            Icmpv6MldrMarAuxDataLen = input.ReadUInt32();
            break;
          }
          case 1664: {
            Icmpv6MldrMarNbSources = input.ReadUInt32();
            break;
          }
          case 1674: {
            Icmpv6MldrMarMulticastAddress = input.ReadBytes();
            break;
          }
          case 1682: {
            Icmpv6MldrMarSourceAddress = input.ReadBytes();
            break;
          }
          case 1690: {
            Icmpv6MldrMarAuxiliaryData = input.ReadBytes();
            break;
          }
          case 1696: {
            Icmpv6Fmip6Subtype = input.ReadUInt32();
            break;
          }
          case 1704: {
            Icmpv6Fmip6HiFlag = input.ReadUInt32();
            break;
          }
          case 1712: {
            Icmpv6Fmip6HiFlagS = input.ReadBool();
            break;
          }
          case 1720: {
            Icmpv6Fmip6HiFlagA = input.ReadBool();
            break;
          }
          case 1728: {
            Icmpv6Fmip6HiFlagReserved = input.ReadUInt32();
            break;
          }
          case 1736: {
            Icmpv6Fmip6Identifier = input.ReadUInt32();
            break;
          }
          case 1744: {
            Icmpv6McastRaQueryInterval = input.ReadUInt32();
            break;
          }
          case 1752: {
            Icmpv6McastRaRobustnessVariable = input.ReadUInt32();
            break;
          }
          case 1760: {
            Icmpv6NiQtype = input.ReadUInt32();
            break;
          }
          case 1768: {
            Icmpv6NiFlag = input.ReadUInt32();
            break;
          }
          case 1776: {
            Icmpv6NiFlagG = input.ReadBool();
            break;
          }
          case 1784: {
            Icmpv6NiFlagS = input.ReadBool();
            break;
          }
          case 1792: {
            Icmpv6NiFlagL = input.ReadBool();
            break;
          }
          case 1800: {
            Icmpv6NiFlagC = input.ReadBool();
            break;
          }
          case 1808: {
            Icmpv6NiFlagA = input.ReadBool();
            break;
          }
          case 1816: {
            Icmpv6NiFlagT = input.ReadBool();
            break;
          }
          case 1824: {
            Icmpv6NiFlagRsv = input.ReadUInt32();
            break;
          }
          case 1832: {
            Icmpv6NiNonce = input.ReadUInt64();
            break;
          }
          case 1842: {
            Icmpv6NiQuerySubjectIpv6 = input.ReadBytes();
            break;
          }
          case 1850: {
            Icmpv6NiQuerySubjectFqdn = input.ReadString();
            break;
          }
          case 1858: {
            Icmpv6NiQuerySubjectIpv4 = input.ReadBytes();
            break;
          }
          case 1864: {
            Icmpv6NiReplyNodeTtl = input.ReadUInt32();
            break;
          }
          case 1874: {
            Icmpv6NiReplyNodeName = input.ReadString();
            break;
          }
          case 1882: {
            Icmpv6NiReplyNodeAddress = input.ReadBytes();
            break;
          }
          case 1890: {
            Icmpv6NiReplyIpv4Address = input.ReadBytes();
            break;
          }
          case 1896: {
            Icmpv6RplDisFlags = input.ReadUInt32();
            break;
          }
          case 1904: {
            Icmpv6RplDioInstance = input.ReadUInt32();
            break;
          }
          case 1912: {
            Icmpv6RplDioVersion = input.ReadUInt32();
            break;
          }
          case 1920: {
            Icmpv6RplDioRank = input.ReadUInt32();
            break;
          }
          case 1928: {
            Icmpv6RplDioFlag = input.ReadUInt32();
            break;
          }
          case 1936: {
            Icmpv6RplDioFlagG = input.ReadBool();
            break;
          }
          case 1944: {
            Icmpv6RplDioFlag0 = input.ReadBool();
            break;
          }
          case 1952: {
            Icmpv6RplDioFlagMop = input.ReadUInt32();
            break;
          }
          case 1960: {
            Icmpv6RplDioFlagPreference = input.ReadUInt32();
            break;
          }
          case 1968: {
            Icmpv6RplDioDtsn = input.ReadUInt32();
            break;
          }
          case 1978: {
            Icmpv6RplDioDagid = input.ReadBytes();
            break;
          }
          case 1984: {
            Icmpv6RplDaoInstance = input.ReadUInt32();
            break;
          }
          case 1992: {
            Icmpv6RplDaoFlag = input.ReadUInt32();
            break;
          }
          case 2000: {
            Icmpv6RplDaoFlagK = input.ReadBool();
            break;
          }
          case 2008: {
            Icmpv6RplDaoFlagD = input.ReadBool();
            break;
          }
          case 2016: {
            Icmpv6RplDaoFlagRsv = input.ReadUInt32();
            break;
          }
          case 2024: {
            Icmpv6RplDaoSequence = input.ReadUInt32();
            break;
          }
          case 2034: {
            Icmpv6RplDaoDodagid = input.ReadBytes();
            break;
          }
          case 2040: {
            Icmpv6RplDaoackInstance = input.ReadUInt32();
            break;
          }
          case 2048: {
            Icmpv6RplDaoackFlag = input.ReadUInt32();
            break;
          }
          case 2056: {
            Icmpv6RplDaoackFlagD = input.ReadBool();
            break;
          }
          case 2064: {
            Icmpv6RplDaoackFlagRsv = input.ReadUInt32();
            break;
          }
          case 2072: {
            Icmpv6RplDaoackSequence = input.ReadUInt32();
            break;
          }
          case 2080: {
            Icmpv6RplDaoackStatus = input.ReadUInt32();
            break;
          }
          case 2090: {
            Icmpv6RplDaoackDodagid = input.ReadBytes();
            break;
          }
          case 2096: {
            Icmpv6RplCcInstance = input.ReadUInt32();
            break;
          }
          case 2104: {
            Icmpv6RplCcFlag = input.ReadUInt32();
            break;
          }
          case 2112: {
            Icmpv6RplCcFlagR = input.ReadBool();
            break;
          }
          case 2120: {
            Icmpv6RplCcFlagRsv = input.ReadUInt32();
            break;
          }
          case 2128: {
            Icmpv6RplCcNonce = input.ReadUInt32();
            break;
          }
          case 2138: {
            Icmpv6RplCcDodagid = input.ReadBytes();
            break;
          }
          case 2144: {
            Icmpv6RplCcDestinationCounter = input.ReadUInt32();
            break;
          }
          case 2152: {
            Icmpv6RplSecureFlag = input.ReadUInt32();
            break;
          }
          case 2160: {
            Icmpv6RplSecureFlagT = input.ReadBool();
            break;
          }
          case 2168: {
            Icmpv6RplSecureFlagRsv = input.ReadUInt32();
            break;
          }
          case 2176: {
            Icmpv6RplSecureAlgorithm = input.ReadUInt32();
            break;
          }
          case 2184: {
            Icmpv6RplSecureKim = input.ReadUInt32();
            break;
          }
          case 2192: {
            Icmpv6RplSecureLvl = input.ReadUInt32();
            break;
          }
          case 2200: {
            Icmpv6RplSecureRsv = input.ReadUInt32();
            break;
          }
          case 2208: {
            Icmpv6RplSecureCounter = input.ReadUInt32();
            break;
          }
          case 2218: {
            Icmpv6RplSecureKeySource = input.ReadBytes();
            break;
          }
          case 2224: {
            Icmpv6RplSecureKeyIndex = input.ReadUInt32();
            break;
          }
          case 2232: {
            Icmpv6RplOptType = input.ReadUInt32();
            break;
          }
          case 2240: {
            Icmpv6RplOptLength = input.ReadUInt32();
            break;
          }
          case 2248: {
            Icmpv6RplOptReserved = input.ReadInt32();
            break;
          }
          case 2256: {
            Icmpv6RplOptPadn = input.ReadInt32();
            break;
          }
          case 2264: {
            Icmpv6RplOptMetricType = input.ReadUInt32();
            break;
          }
          case 2272: {
            Icmpv6RplOptMetricFlags = input.ReadUInt32();
            break;
          }
          case 2280: {
            Icmpv6RplOptMetricReserved = input.ReadUInt32();
            break;
          }
          case 2288: {
            Icmpv6RplOptMetricFlagP = input.ReadBool();
            break;
          }
          case 2296: {
            Icmpv6RplOptMetricFlagC = input.ReadBool();
            break;
          }
          case 2304: {
            Icmpv6RplOptMetricFlagO = input.ReadBool();
            break;
          }
          case 2312: {
            Icmpv6RplOptMetricFlagR = input.ReadBool();
            break;
          }
          case 2320: {
            Icmpv6RplOptMetricFlagA = input.ReadUInt32();
            break;
          }
          case 2328: {
            Icmpv6RplOptMetricPrec = input.ReadUInt32();
            break;
          }
          case 2336: {
            Icmpv6RplOptMetricLength = input.ReadUInt32();
            break;
          }
          case 2344: {
            Icmpv6RplOptMetricNsaObject = input.ReadUInt32();
            break;
          }
          case 2352: {
            Icmpv6RplOptMetricNsaObjectReserved = input.ReadUInt32();
            break;
          }
          case 2360: {
            Icmpv6RplOptMetricNsaObjectFlags = input.ReadUInt32();
            break;
          }
          case 2368: {
            Icmpv6RplOptMetricNsaObjectFlagA = input.ReadBool();
            break;
          }
          case 2376: {
            Icmpv6RplOptMetricNsaObjectFlagO = input.ReadBool();
            break;
          }
          case 2384: {
            Icmpv6RplOptMetricNeObject = input.ReadUInt32();
            break;
          }
          case 2392: {
            Icmpv6RplOptMetricNeObjectFlags = input.ReadUInt32();
            break;
          }
          case 2400: {
            Icmpv6RplOptMetricNeObjectFlagI = input.ReadBool();
            break;
          }
          case 2408: {
            Icmpv6RplOptMetricNeObjectType = input.ReadUInt32();
            break;
          }
          case 2416: {
            Icmpv6RplOptMetricNeObjectFlagE = input.ReadBool();
            break;
          }
          case 2424: {
            Icmpv6RplOptMetricNeObjectEnergy = input.ReadUInt32();
            break;
          }
          case 2432: {
            Icmpv6RplOptMetricHpObject = input.ReadUInt32();
            break;
          }
          case 2440: {
            Icmpv6RplOptMetricHpObjectReserved = input.ReadUInt32();
            break;
          }
          case 2448: {
            Icmpv6RplOptMetricHpObjectFlags = input.ReadUInt32();
            break;
          }
          case 2456: {
            Icmpv6RplOptMetricHpObjectHp = input.ReadUInt32();
            break;
          }
          case 2464: {
            Icmpv6RplOptMetricLtObjectLt = input.ReadUInt32();
            break;
          }
          case 2472: {
            Icmpv6RplOptMetricLlObjectLl = input.ReadUInt32();
            break;
          }
          case 2480: {
            Icmpv6RplOptMetricLqlObject = input.ReadUInt32();
            break;
          }
          case 2488: {
            Icmpv6RplOptMetricLqlObjectRes = input.ReadUInt32();
            break;
          }
          case 2496: {
            Icmpv6RplOptMetricLqlObjectVal = input.ReadUInt32();
            break;
          }
          case 2504: {
            Icmpv6RplOptMetricLqlObjectCounter = input.ReadUInt32();
            break;
          }
          case 2512: {
            Icmpv6RplOptMetricEtxObjectEtx = input.ReadUInt32();
            break;
          }
          case 2520: {
            Icmpv6RplOptMetricLcObject = input.ReadInt32();
            break;
          }
          case 2528: {
            Icmpv6RplOptMetricLcObjectRes = input.ReadUInt32();
            break;
          }
          case 2536: {
            Icmpv6RplOptMetricLcObjectLc = input.ReadUInt32();
            break;
          }
          case 2544: {
            Icmpv6RplOptMetricLcObjectCounter = input.ReadUInt32();
            break;
          }
          case 2552: {
            Icmpv6RplOptMetricLcObjectReserved = input.ReadUInt32();
            break;
          }
          case 2560: {
            Icmpv6RplOptMetricLcObjectFlagI = input.ReadUInt32();
            break;
          }
          case 2568: {
            Icmpv6RplOptRoutePrefixLength = input.ReadUInt32();
            break;
          }
          case 2576: {
            Icmpv6RplOptRouteFlag = input.ReadUInt32();
            break;
          }
          case 2584: {
            Icmpv6RplOptRoutePref = input.ReadUInt32();
            break;
          }
          case 2592: {
            Icmpv6RplOptRouteReserved = input.ReadUInt32();
            break;
          }
          case 2600: {
            Icmpv6RplOptRouteLifetime = input.ReadUInt32();
            break;
          }
          case 2610: {
            Icmpv6RplOptRoutePrefix = input.ReadBytes();
            break;
          }
          case 2616: {
            Icmpv6RplOptConfigFlag = input.ReadUInt32();
            break;
          }
          case 2624: {
            Icmpv6RplOptConfigReserved = input.ReadUInt32();
            break;
          }
          case 2632: {
            Icmpv6RplOptConfigAuth = input.ReadBool();
            break;
          }
          case 2640: {
            Icmpv6RplOptConfigPcs = input.ReadUInt32();
            break;
          }
          case 2648: {
            Icmpv6RplOptConfigIntervalDouble = input.ReadUInt32();
            break;
          }
          case 2656: {
            Icmpv6RplOptConfigIntervalMin = input.ReadUInt32();
            break;
          }
          case 2664: {
            Icmpv6RplOptConfigRedundancy = input.ReadUInt32();
            break;
          }
          case 2672: {
            Icmpv6RplOptConfigMaxRankInc = input.ReadUInt32();
            break;
          }
          case 2680: {
            Icmpv6RplOptConfigMinHopRankInc = input.ReadUInt32();
            break;
          }
          case 2688: {
            Icmpv6RplOptConfigOcp = input.ReadUInt32();
            break;
          }
          case 2696: {
            Icmpv6RplOptConfigRsv = input.ReadUInt32();
            break;
          }
          case 2704: {
            Icmpv6RplOptConfigDefLifetime = input.ReadUInt32();
            break;
          }
          case 2712: {
            Icmpv6RplOptConfigLifetimeUnit = input.ReadUInt32();
            break;
          }
          case 2720: {
            Icmpv6RplOptTargetFlag = input.ReadInt32();
            break;
          }
          case 2728: {
            Icmpv6RplOptTargetPrefixLength = input.ReadUInt32();
            break;
          }
          case 2738: {
            Icmpv6RplOptTargetPrefix = input.ReadBytes();
            break;
          }
          case 2744: {
            Icmpv6RplOptTransitFlag = input.ReadUInt32();
            break;
          }
          case 2752: {
            Icmpv6RplOptTransitFlagE = input.ReadBool();
            break;
          }
          case 2760: {
            Icmpv6RplOptTransitFlagRsv = input.ReadUInt32();
            break;
          }
          case 2768: {
            Icmpv6RplOptTransitPathctl = input.ReadUInt32();
            break;
          }
          case 2776: {
            Icmpv6RplOptTransitPathseq = input.ReadUInt32();
            break;
          }
          case 2784: {
            Icmpv6RplOptTransitPathlifetime = input.ReadUInt32();
            break;
          }
          case 2794: {
            Icmpv6RplOptTransitParent = input.ReadBytes();
            break;
          }
          case 2800: {
            Icmpv6RplOptSolicitedInstance = input.ReadUInt32();
            break;
          }
          case 2808: {
            Icmpv6RplOptSolicitedFlag = input.ReadUInt32();
            break;
          }
          case 2816: {
            Icmpv6RplOptSolicitedFlagV = input.ReadBool();
            break;
          }
          case 2824: {
            Icmpv6RplOptSolicitedFlagI = input.ReadBool();
            break;
          }
          case 2832: {
            Icmpv6RplOptSolicitedFlagD = input.ReadBool();
            break;
          }
          case 2840: {
            Icmpv6RplOptSolicitedFlagRsv = input.ReadUInt32();
            break;
          }
          case 2850: {
            Icmpv6RplOptSolicitedDodagid = input.ReadBytes();
            break;
          }
          case 2856: {
            Icmpv6RplOptSolicitedVersion = input.ReadUInt32();
            break;
          }
          case 2864: {
            Icmpv6RplOptPrefixLength = input.ReadUInt32();
            break;
          }
          case 2872: {
            Icmpv6RplOptPrefixFlag = input.ReadUInt32();
            break;
          }
          case 2880: {
            Icmpv6RplOptPrefixFlagL = input.ReadBool();
            break;
          }
          case 2888: {
            Icmpv6RplOptConfigFlagA = input.ReadBool();
            break;
          }
          case 2896: {
            Icmpv6RplOptConfigFlagR = input.ReadBool();
            break;
          }
          case 2904: {
            Icmpv6RplOptConfigFlagRsv = input.ReadUInt32();
            break;
          }
          case 2912: {
            Icmpv6RplOptPrefixValidLifetime = input.ReadUInt32();
            break;
          }
          case 2920: {
            Icmpv6RplOptPrefixPreferredLifetime = input.ReadUInt32();
            break;
          }
          case 2930: {
            Icmpv6RplOptPrefix = input.ReadBytes();
            break;
          }
          case 2936: {
            Icmpv6RplOptTargetdescDescriptor = input.ReadUInt32();
            break;
          }
          case 2944: {
            Icmpv6RplOptRoutediscoveryFlag = input.ReadInt32();
            break;
          }
          case 2952: {
            Icmpv6RplOptRoutediscoveryFlagReply = input.ReadBool();
            break;
          }
          case 2960: {
            Icmpv6RplOptRoutediscoveryFlagHopbyhop = input.ReadBool();
            break;
          }
          case 2968: {
            Icmpv6RplOptRoutediscoveryFlagNumofroutes = input.ReadUInt32();
            break;
          }
          case 2976: {
            Icmpv6RplOptRoutediscoveryFlagCompr = input.ReadUInt32();
            break;
          }
          case 2984: {
            Icmpv6RplOptRoutediscoveryLifetime = input.ReadUInt32();
            break;
          }
          case 2992: {
            Icmpv6RplOptRoutediscoveryMaxrank = input.ReadUInt32();
            break;
          }
          case 3000: {
            Icmpv6RplOptRoutediscoveryNh = input.ReadUInt32();
            break;
          }
          case 3010: {
            Icmpv6RplOptRoutediscoveryTargetaddr = input.ReadBytes();
            break;
          }
          case 3016: {
            Icmpv6RplOptRoutediscoveryAddrVec = input.ReadInt32();
            break;
          }
          case 3026: {
            Icmpv6RplOptRoutediscoveryAddrvecAddr = input.ReadBytes();
            break;
          }
          case 3032: {
            Icmpv6RplP2PDroInstance = input.ReadUInt32();
            break;
          }
          case 3040: {
            Icmpv6RplP2PDroVersion = input.ReadUInt32();
            break;
          }
          case 3048: {
            Icmpv6RplP2PDroFlag = input.ReadUInt32();
            break;
          }
          case 3056: {
            Icmpv6RplP2PDroFlagStop = input.ReadBool();
            break;
          }
          case 3064: {
            Icmpv6RplP2PDroFlagAck = input.ReadBool();
            break;
          }
          case 3072: {
            Icmpv6RplP2PDroFlagSeq = input.ReadUInt32();
            break;
          }
          case 3080: {
            Icmpv6RplP2PDroFlagReserved = input.ReadUInt32();
            break;
          }
          case 3090: {
            Icmpv6RplP2PDroDagid = input.ReadBytes();
            break;
          }
          case 3096: {
            Icmpv6RplP2PDroackFlag = input.ReadUInt32();
            break;
          }
          case 3104: {
            Icmpv6RplP2PDroackFlagSeq = input.ReadUInt32();
            break;
          }
          case 3112: {
            Icmpv6RplP2PDroackFlagReserved = input.ReadUInt32();
            break;
          }
          case 3120: {
            Icmpv6IlnpNbLocs = input.ReadUInt32();
            break;
          }
          case 3128: {
            Icmpv6IlnpNbLocator = input.ReadUInt64();
            break;
          }
          case 3136: {
            Icmpv6IlnpNbPreference = input.ReadUInt32();
            break;
          }
          case 3144: {
            Icmpv6IlnpNbLifetime = input.ReadUInt32();
            break;
          }
          case 3152: {
            Icmpv66LowpanndDaStatus = input.ReadUInt32();
            break;
          }
          case 3160: {
            Icmpv66LowpanndDaRsv = input.ReadUInt32();
            break;
          }
          case 3168: {
            Icmpv66LowpanndDaLifetime = input.ReadUInt32();
            break;
          }
          case 3178: {
            Icmpv66LowpanndDaEui64 = input.ReadBytes();
            break;
          }
          case 3186: {
            Icmpv66LowpanndDaRegAddr = input.ReadBytes();
            break;
          }
          case 3192: {
            Icmpv6RespIn = input.ReadInt64();
            break;
          }
          case 3200: {
            Icmpv6NoResp = input.ReadInt32();
            break;
          }
          case 3208: {
            Icmpv6RespTo = input.ReadInt64();
            break;
          }
          case 3217: {
            Icmpv6Resptime = input.ReadDouble();
            break;
          }
          case 3224: {
            Icmpv6MplSeedInfoMinSequence = input.ReadUInt32();
            break;
          }
          case 3232: {
            Icmpv6MplSeedInfoBmLen = input.ReadUInt32();
            break;
          }
          case 3240: {
            Icmpv6MplSeedInfoS = input.ReadUInt32();
            break;
          }
          case 3250: {
            Icmpv6MplSeedInfoSeedId = input.ReadString();
            break;
          }
          case 3256: {
            Icmpv6MplSeedInfoSequence = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
