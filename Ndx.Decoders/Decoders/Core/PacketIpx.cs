// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-ipx.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-ipx.proto</summary>
  public static partial class PacketIpxReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-ipx.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIpxReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtaXB4LnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSLLBQoDSXB4",
            "EhMKC0lweENoZWNrc3VtGAEgASgNEg4KBklweFNyYxgCIAEoCRIOCgZJcHhE",
            "c3QYAyABKAkSDwoHSXB4QWRkchgEIAEoCRIOCgZJcHhMZW4YBSABKA0SDwoH",
            "SXB4SG9wcxgGIAEoDRIVCg1JcHhQYWNrZXRUeXBlGAcgASgNEhEKCUlweERz",
            "dE5ldBgIIAEoDBISCgpJcHhEc3ROb2RlGAkgASgMEhQKDElweERzdFNvY2tl",
            "dBgKIAEoDRIRCglJcHhTcmNOZXQYCyABKAwSEgoKSXB4U3JjTm9kZRgMIAEo",
            "DBIUCgxJcHhTcmNTb2NrZXQYDSABKA0SDgoGSXB4TmV0GA4gASgMEg8KB0lw",
            "eE5vZGUYDyABKAwSEQoJSXB4U29ja2V0GBAgASgNEhUKDUlweHJpcFJlcXVl",
            "c3QYESABKAgSFgoOSXB4cmlwUmVzcG9uc2UYEiABKAgSGAoQSXB4cmlwUGFj",
            "a2V0VHlwZRgTIAEoDRIZChFJcHhyaXBSb3V0ZVZlY3RvchgUIAEoDBISCgpJ",
            "cHhyaXBIb3BzGBUgASgNEhMKC0lweHJpcFRpY2tzGBYgASgNEhUKDUlweHNh",
            "cFJlcXVlc3QYFyABKAgSFgoOSXB4c2FwUmVzcG9uc2UYGCABKAgSGAoQSXB4",
            "c2FwUGFja2V0VHlwZRgZIAEoDRIYChBJcHhzYXBTZXJ2ZXJOYW1lGBogASgJ",
            "EhgKEElweHNhcFNlcnZlclR5cGUYGyABKA0SFQoNSXB4c2FwTmV0d29yaxgc",
            "IAEoDBISCgpJcHhzYXBOb2RlGB0gASgMEhQKDElweHNhcFNvY2tldBgeIAEo",
            "DRIiChpJcHhzYXBJbnRlcm1lZGlhdGVOZXR3b3JrcxgfIAEoDRISCgpJcHht",
            "c2dDb25uGCAgASgNEhUKDUlweG1zZ1NpZ2NoYXIYISABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Ipx), global::Ndx.Decoders.Core.Ipx.Parser, new[]{ "IpxChecksum", "IpxSrc", "IpxDst", "IpxAddr", "IpxLen", "IpxHops", "IpxPacketType", "IpxDstNet", "IpxDstNode", "IpxDstSocket", "IpxSrcNet", "IpxSrcNode", "IpxSrcSocket", "IpxNet", "IpxNode", "IpxSocket", "IpxripRequest", "IpxripResponse", "IpxripPacketType", "IpxripRouteVector", "IpxripHops", "IpxripTicks", "IpxsapRequest", "IpxsapResponse", "IpxsapPacketType", "IpxsapServerName", "IpxsapServerType", "IpxsapNetwork", "IpxsapNode", "IpxsapSocket", "IpxsapIntermediateNetworks", "IpxmsgConn", "IpxmsgSigchar" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ipx : pb::IMessage<Ipx> {
    private static readonly pb::MessageParser<Ipx> _parser = new pb::MessageParser<Ipx>(() => new Ipx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ipx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketIpxReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipx(Ipx other) : this() {
      ipxChecksum_ = other.ipxChecksum_;
      ipxSrc_ = other.ipxSrc_;
      ipxDst_ = other.ipxDst_;
      ipxAddr_ = other.ipxAddr_;
      ipxLen_ = other.ipxLen_;
      ipxHops_ = other.ipxHops_;
      ipxPacketType_ = other.ipxPacketType_;
      ipxDstNet_ = other.ipxDstNet_;
      ipxDstNode_ = other.ipxDstNode_;
      ipxDstSocket_ = other.ipxDstSocket_;
      ipxSrcNet_ = other.ipxSrcNet_;
      ipxSrcNode_ = other.ipxSrcNode_;
      ipxSrcSocket_ = other.ipxSrcSocket_;
      ipxNet_ = other.ipxNet_;
      ipxNode_ = other.ipxNode_;
      ipxSocket_ = other.ipxSocket_;
      ipxripRequest_ = other.ipxripRequest_;
      ipxripResponse_ = other.ipxripResponse_;
      ipxripPacketType_ = other.ipxripPacketType_;
      ipxripRouteVector_ = other.ipxripRouteVector_;
      ipxripHops_ = other.ipxripHops_;
      ipxripTicks_ = other.ipxripTicks_;
      ipxsapRequest_ = other.ipxsapRequest_;
      ipxsapResponse_ = other.ipxsapResponse_;
      ipxsapPacketType_ = other.ipxsapPacketType_;
      ipxsapServerName_ = other.ipxsapServerName_;
      ipxsapServerType_ = other.ipxsapServerType_;
      ipxsapNetwork_ = other.ipxsapNetwork_;
      ipxsapNode_ = other.ipxsapNode_;
      ipxsapSocket_ = other.ipxsapSocket_;
      ipxsapIntermediateNetworks_ = other.ipxsapIntermediateNetworks_;
      ipxmsgConn_ = other.ipxmsgConn_;
      ipxmsgSigchar_ = other.ipxmsgSigchar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipx Clone() {
      return new Ipx(this);
    }

    /// <summary>Field number for the "IpxChecksum" field.</summary>
    public const int IpxChecksumFieldNumber = 1;
    private uint ipxChecksum_;
    /// <summary>
    /// Checksum ('ipx_ipx_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxChecksum {
      get { return ipxChecksum_; }
      set {
        ipxChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IpxSrc" field.</summary>
    public const int IpxSrcFieldNumber = 2;
    private string ipxSrc_ = "";
    /// <summary>
    /// Source Address ('ipx_ipx_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpxSrc {
      get { return ipxSrc_; }
      set {
        ipxSrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxDst" field.</summary>
    public const int IpxDstFieldNumber = 3;
    private string ipxDst_ = "";
    /// <summary>
    /// Destination Address ('ipx_ipx_dst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpxDst {
      get { return ipxDst_; }
      set {
        ipxDst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxAddr" field.</summary>
    public const int IpxAddrFieldNumber = 4;
    private string ipxAddr_ = "";
    /// <summary>
    /// Src/Dst Address ('ipx_ipx_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpxAddr {
      get { return ipxAddr_; }
      set {
        ipxAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxLen" field.</summary>
    public const int IpxLenFieldNumber = 5;
    private uint ipxLen_;
    /// <summary>
    /// Length ('ipx_ipx_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxLen {
      get { return ipxLen_; }
      set {
        ipxLen_ = value;
      }
    }

    /// <summary>Field number for the "IpxHops" field.</summary>
    public const int IpxHopsFieldNumber = 6;
    private uint ipxHops_;
    /// <summary>
    /// Transport Control (Hops) ('ipx_ipx_hops')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxHops {
      get { return ipxHops_; }
      set {
        ipxHops_ = value;
      }
    }

    /// <summary>Field number for the "IpxPacketType" field.</summary>
    public const int IpxPacketTypeFieldNumber = 7;
    private uint ipxPacketType_;
    /// <summary>
    /// Packet Type ('ipx_ipx_packet_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxPacketType {
      get { return ipxPacketType_; }
      set {
        ipxPacketType_ = value;
      }
    }

    /// <summary>Field number for the "IpxDstNet" field.</summary>
    public const int IpxDstNetFieldNumber = 8;
    private pb::ByteString ipxDstNet_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Network ('ipx_dst_ipx_dst_net')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxDstNet {
      get { return ipxDstNet_; }
      set {
        ipxDstNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxDstNode" field.</summary>
    public const int IpxDstNodeFieldNumber = 9;
    private pb::ByteString ipxDstNode_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Node ('ipx_dst_ipx_dst_node')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxDstNode {
      get { return ipxDstNode_; }
      set {
        ipxDstNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxDstSocket" field.</summary>
    public const int IpxDstSocketFieldNumber = 10;
    private uint ipxDstSocket_;
    /// <summary>
    /// Destination Socket ('ipx_dst_ipx_dst_socket')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxDstSocket {
      get { return ipxDstSocket_; }
      set {
        ipxDstSocket_ = value;
      }
    }

    /// <summary>Field number for the "IpxSrcNet" field.</summary>
    public const int IpxSrcNetFieldNumber = 11;
    private pb::ByteString ipxSrcNet_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Network ('ipx_src_ipx_src_net')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxSrcNet {
      get { return ipxSrcNet_; }
      set {
        ipxSrcNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxSrcNode" field.</summary>
    public const int IpxSrcNodeFieldNumber = 12;
    private pb::ByteString ipxSrcNode_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Node ('ipx_src_ipx_src_node')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxSrcNode {
      get { return ipxSrcNode_; }
      set {
        ipxSrcNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxSrcSocket" field.</summary>
    public const int IpxSrcSocketFieldNumber = 13;
    private uint ipxSrcSocket_;
    /// <summary>
    /// Source Socket ('ipx_src_ipx_src_socket')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxSrcSocket {
      get { return ipxSrcSocket_; }
      set {
        ipxSrcSocket_ = value;
      }
    }

    /// <summary>Field number for the "IpxNet" field.</summary>
    public const int IpxNetFieldNumber = 14;
    private pb::ByteString ipxNet_ = pb::ByteString.Empty;
    /// <summary>
    /// Source or Destination Network ('ipx_ipx_net')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxNet {
      get { return ipxNet_; }
      set {
        ipxNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxNode" field.</summary>
    public const int IpxNodeFieldNumber = 15;
    private pb::ByteString ipxNode_ = pb::ByteString.Empty;
    /// <summary>
    /// Source or Destination Node ('ipx_ipx_node')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxNode {
      get { return ipxNode_; }
      set {
        ipxNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxSocket" field.</summary>
    public const int IpxSocketFieldNumber = 16;
    private uint ipxSocket_;
    /// <summary>
    /// Source or Destination Socket ('ipx_ipx_socket')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxSocket {
      get { return ipxSocket_; }
      set {
        ipxSocket_ = value;
      }
    }

    /// <summary>Field number for the "IpxripRequest" field.</summary>
    public const int IpxripRequestFieldNumber = 17;
    private bool ipxripRequest_;
    /// <summary>
    /// Request ('ipx_ipxrip_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpxripRequest {
      get { return ipxripRequest_; }
      set {
        ipxripRequest_ = value;
      }
    }

    /// <summary>Field number for the "IpxripResponse" field.</summary>
    public const int IpxripResponseFieldNumber = 18;
    private bool ipxripResponse_;
    /// <summary>
    /// Response ('ipx_ipxrip_response')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpxripResponse {
      get { return ipxripResponse_; }
      set {
        ipxripResponse_ = value;
      }
    }

    /// <summary>Field number for the "IpxripPacketType" field.</summary>
    public const int IpxripPacketTypeFieldNumber = 19;
    private uint ipxripPacketType_;
    /// <summary>
    /// RIP packet type ('ipx_ipxrip_packet_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxripPacketType {
      get { return ipxripPacketType_; }
      set {
        ipxripPacketType_ = value;
      }
    }

    /// <summary>Field number for the "IpxripRouteVector" field.</summary>
    public const int IpxripRouteVectorFieldNumber = 20;
    private pb::ByteString ipxripRouteVector_ = pb::ByteString.Empty;
    /// <summary>
    /// Route Vector ('ipx_ipxrip_route_vector')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxripRouteVector {
      get { return ipxripRouteVector_; }
      set {
        ipxripRouteVector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxripHops" field.</summary>
    public const int IpxripHopsFieldNumber = 21;
    private uint ipxripHops_;
    /// <summary>
    /// Hops ('ipx_ipxrip_hops')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxripHops {
      get { return ipxripHops_; }
      set {
        ipxripHops_ = value;
      }
    }

    /// <summary>Field number for the "IpxripTicks" field.</summary>
    public const int IpxripTicksFieldNumber = 22;
    private uint ipxripTicks_;
    /// <summary>
    /// Ticks ('ipx_ipxrip_ticks')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxripTicks {
      get { return ipxripTicks_; }
      set {
        ipxripTicks_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapRequest" field.</summary>
    public const int IpxsapRequestFieldNumber = 23;
    private bool ipxsapRequest_;
    /// <summary>
    /// Request ('ipx_ipxsap_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpxsapRequest {
      get { return ipxsapRequest_; }
      set {
        ipxsapRequest_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapResponse" field.</summary>
    public const int IpxsapResponseFieldNumber = 24;
    private bool ipxsapResponse_;
    /// <summary>
    /// Response ('ipx_ipxsap_response')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpxsapResponse {
      get { return ipxsapResponse_; }
      set {
        ipxsapResponse_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapPacketType" field.</summary>
    public const int IpxsapPacketTypeFieldNumber = 25;
    private uint ipxsapPacketType_;
    /// <summary>
    /// SAP packet type ('ipx_ipxsap_packet_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxsapPacketType {
      get { return ipxsapPacketType_; }
      set {
        ipxsapPacketType_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapServerName" field.</summary>
    public const int IpxsapServerNameFieldNumber = 26;
    private string ipxsapServerName_ = "";
    /// <summary>
    /// Server Name ('ipx_ipxsap_server_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpxsapServerName {
      get { return ipxsapServerName_; }
      set {
        ipxsapServerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxsapServerType" field.</summary>
    public const int IpxsapServerTypeFieldNumber = 27;
    private uint ipxsapServerType_;
    /// <summary>
    /// Server Type ('ipx_ipxsap_server_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxsapServerType {
      get { return ipxsapServerType_; }
      set {
        ipxsapServerType_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapNetwork" field.</summary>
    public const int IpxsapNetworkFieldNumber = 28;
    private pb::ByteString ipxsapNetwork_ = pb::ByteString.Empty;
    /// <summary>
    /// Network ('ipx_ipxsap_network')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxsapNetwork {
      get { return ipxsapNetwork_; }
      set {
        ipxsapNetwork_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxsapNode" field.</summary>
    public const int IpxsapNodeFieldNumber = 29;
    private pb::ByteString ipxsapNode_ = pb::ByteString.Empty;
    /// <summary>
    /// Node ('ipx_ipxsap_node')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpxsapNode {
      get { return ipxsapNode_; }
      set {
        ipxsapNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpxsapSocket" field.</summary>
    public const int IpxsapSocketFieldNumber = 30;
    private uint ipxsapSocket_;
    /// <summary>
    /// Socket ('ipx_ipxsap_socket')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxsapSocket {
      get { return ipxsapSocket_; }
      set {
        ipxsapSocket_ = value;
      }
    }

    /// <summary>Field number for the "IpxsapIntermediateNetworks" field.</summary>
    public const int IpxsapIntermediateNetworksFieldNumber = 31;
    private uint ipxsapIntermediateNetworks_;
    /// <summary>
    /// Intermediate Networks ('ipx_ipxsap_intermediate_networks')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxsapIntermediateNetworks {
      get { return ipxsapIntermediateNetworks_; }
      set {
        ipxsapIntermediateNetworks_ = value;
      }
    }

    /// <summary>Field number for the "IpxmsgConn" field.</summary>
    public const int IpxmsgConnFieldNumber = 32;
    private uint ipxmsgConn_;
    /// <summary>
    /// Connection Number ('ipx_ipxmsg_conn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxmsgConn {
      get { return ipxmsgConn_; }
      set {
        ipxmsgConn_ = value;
      }
    }

    /// <summary>Field number for the "IpxmsgSigchar" field.</summary>
    public const int IpxmsgSigcharFieldNumber = 33;
    private uint ipxmsgSigchar_;
    /// <summary>
    /// Signature Char ('ipx_ipxmsg_sigchar')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpxmsgSigchar {
      get { return ipxmsgSigchar_; }
      set {
        ipxmsgSigchar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ipx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ipx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpxChecksum != other.IpxChecksum) return false;
      if (IpxSrc != other.IpxSrc) return false;
      if (IpxDst != other.IpxDst) return false;
      if (IpxAddr != other.IpxAddr) return false;
      if (IpxLen != other.IpxLen) return false;
      if (IpxHops != other.IpxHops) return false;
      if (IpxPacketType != other.IpxPacketType) return false;
      if (IpxDstNet != other.IpxDstNet) return false;
      if (IpxDstNode != other.IpxDstNode) return false;
      if (IpxDstSocket != other.IpxDstSocket) return false;
      if (IpxSrcNet != other.IpxSrcNet) return false;
      if (IpxSrcNode != other.IpxSrcNode) return false;
      if (IpxSrcSocket != other.IpxSrcSocket) return false;
      if (IpxNet != other.IpxNet) return false;
      if (IpxNode != other.IpxNode) return false;
      if (IpxSocket != other.IpxSocket) return false;
      if (IpxripRequest != other.IpxripRequest) return false;
      if (IpxripResponse != other.IpxripResponse) return false;
      if (IpxripPacketType != other.IpxripPacketType) return false;
      if (IpxripRouteVector != other.IpxripRouteVector) return false;
      if (IpxripHops != other.IpxripHops) return false;
      if (IpxripTicks != other.IpxripTicks) return false;
      if (IpxsapRequest != other.IpxsapRequest) return false;
      if (IpxsapResponse != other.IpxsapResponse) return false;
      if (IpxsapPacketType != other.IpxsapPacketType) return false;
      if (IpxsapServerName != other.IpxsapServerName) return false;
      if (IpxsapServerType != other.IpxsapServerType) return false;
      if (IpxsapNetwork != other.IpxsapNetwork) return false;
      if (IpxsapNode != other.IpxsapNode) return false;
      if (IpxsapSocket != other.IpxsapSocket) return false;
      if (IpxsapIntermediateNetworks != other.IpxsapIntermediateNetworks) return false;
      if (IpxmsgConn != other.IpxmsgConn) return false;
      if (IpxmsgSigchar != other.IpxmsgSigchar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpxChecksum != 0) hash ^= IpxChecksum.GetHashCode();
      if (IpxSrc.Length != 0) hash ^= IpxSrc.GetHashCode();
      if (IpxDst.Length != 0) hash ^= IpxDst.GetHashCode();
      if (IpxAddr.Length != 0) hash ^= IpxAddr.GetHashCode();
      if (IpxLen != 0) hash ^= IpxLen.GetHashCode();
      if (IpxHops != 0) hash ^= IpxHops.GetHashCode();
      if (IpxPacketType != 0) hash ^= IpxPacketType.GetHashCode();
      if (IpxDstNet.Length != 0) hash ^= IpxDstNet.GetHashCode();
      if (IpxDstNode.Length != 0) hash ^= IpxDstNode.GetHashCode();
      if (IpxDstSocket != 0) hash ^= IpxDstSocket.GetHashCode();
      if (IpxSrcNet.Length != 0) hash ^= IpxSrcNet.GetHashCode();
      if (IpxSrcNode.Length != 0) hash ^= IpxSrcNode.GetHashCode();
      if (IpxSrcSocket != 0) hash ^= IpxSrcSocket.GetHashCode();
      if (IpxNet.Length != 0) hash ^= IpxNet.GetHashCode();
      if (IpxNode.Length != 0) hash ^= IpxNode.GetHashCode();
      if (IpxSocket != 0) hash ^= IpxSocket.GetHashCode();
      if (IpxripRequest != false) hash ^= IpxripRequest.GetHashCode();
      if (IpxripResponse != false) hash ^= IpxripResponse.GetHashCode();
      if (IpxripPacketType != 0) hash ^= IpxripPacketType.GetHashCode();
      if (IpxripRouteVector.Length != 0) hash ^= IpxripRouteVector.GetHashCode();
      if (IpxripHops != 0) hash ^= IpxripHops.GetHashCode();
      if (IpxripTicks != 0) hash ^= IpxripTicks.GetHashCode();
      if (IpxsapRequest != false) hash ^= IpxsapRequest.GetHashCode();
      if (IpxsapResponse != false) hash ^= IpxsapResponse.GetHashCode();
      if (IpxsapPacketType != 0) hash ^= IpxsapPacketType.GetHashCode();
      if (IpxsapServerName.Length != 0) hash ^= IpxsapServerName.GetHashCode();
      if (IpxsapServerType != 0) hash ^= IpxsapServerType.GetHashCode();
      if (IpxsapNetwork.Length != 0) hash ^= IpxsapNetwork.GetHashCode();
      if (IpxsapNode.Length != 0) hash ^= IpxsapNode.GetHashCode();
      if (IpxsapSocket != 0) hash ^= IpxsapSocket.GetHashCode();
      if (IpxsapIntermediateNetworks != 0) hash ^= IpxsapIntermediateNetworks.GetHashCode();
      if (IpxmsgConn != 0) hash ^= IpxmsgConn.GetHashCode();
      if (IpxmsgSigchar != 0) hash ^= IpxmsgSigchar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpxChecksum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IpxChecksum);
      }
      if (IpxSrc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpxSrc);
      }
      if (IpxDst.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IpxDst);
      }
      if (IpxAddr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IpxAddr);
      }
      if (IpxLen != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IpxLen);
      }
      if (IpxHops != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IpxHops);
      }
      if (IpxPacketType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IpxPacketType);
      }
      if (IpxDstNet.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(IpxDstNet);
      }
      if (IpxDstNode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(IpxDstNode);
      }
      if (IpxDstSocket != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(IpxDstSocket);
      }
      if (IpxSrcNet.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(IpxSrcNet);
      }
      if (IpxSrcNode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(IpxSrcNode);
      }
      if (IpxSrcSocket != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IpxSrcSocket);
      }
      if (IpxNet.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(IpxNet);
      }
      if (IpxNode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(IpxNode);
      }
      if (IpxSocket != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(IpxSocket);
      }
      if (IpxripRequest != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IpxripRequest);
      }
      if (IpxripResponse != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IpxripResponse);
      }
      if (IpxripPacketType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(IpxripPacketType);
      }
      if (IpxripRouteVector.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(IpxripRouteVector);
      }
      if (IpxripHops != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(IpxripHops);
      }
      if (IpxripTicks != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(IpxripTicks);
      }
      if (IpxsapRequest != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IpxsapRequest);
      }
      if (IpxsapResponse != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IpxsapResponse);
      }
      if (IpxsapPacketType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(IpxsapPacketType);
      }
      if (IpxsapServerName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(IpxsapServerName);
      }
      if (IpxsapServerType != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(IpxsapServerType);
      }
      if (IpxsapNetwork.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteBytes(IpxsapNetwork);
      }
      if (IpxsapNode.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteBytes(IpxsapNode);
      }
      if (IpxsapSocket != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(IpxsapSocket);
      }
      if (IpxsapIntermediateNetworks != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(IpxsapIntermediateNetworks);
      }
      if (IpxmsgConn != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(IpxmsgConn);
      }
      if (IpxmsgSigchar != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(IpxmsgSigchar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpxChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxChecksum);
      }
      if (IpxSrc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpxSrc);
      }
      if (IpxDst.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpxDst);
      }
      if (IpxAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpxAddr);
      }
      if (IpxLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxLen);
      }
      if (IpxHops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxHops);
      }
      if (IpxPacketType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxPacketType);
      }
      if (IpxDstNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxDstNet);
      }
      if (IpxDstNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxDstNode);
      }
      if (IpxDstSocket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxDstSocket);
      }
      if (IpxSrcNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxSrcNet);
      }
      if (IpxSrcNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxSrcNode);
      }
      if (IpxSrcSocket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpxSrcSocket);
      }
      if (IpxNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxNet);
      }
      if (IpxNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpxNode);
      }
      if (IpxSocket != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxSocket);
      }
      if (IpxripRequest != false) {
        size += 2 + 1;
      }
      if (IpxripResponse != false) {
        size += 2 + 1;
      }
      if (IpxripPacketType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxripPacketType);
      }
      if (IpxripRouteVector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpxripRouteVector);
      }
      if (IpxripHops != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxripHops);
      }
      if (IpxripTicks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxripTicks);
      }
      if (IpxsapRequest != false) {
        size += 2 + 1;
      }
      if (IpxsapResponse != false) {
        size += 2 + 1;
      }
      if (IpxsapPacketType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxsapPacketType);
      }
      if (IpxsapServerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpxsapServerName);
      }
      if (IpxsapServerType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxsapServerType);
      }
      if (IpxsapNetwork.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpxsapNetwork);
      }
      if (IpxsapNode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpxsapNode);
      }
      if (IpxsapSocket != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxsapSocket);
      }
      if (IpxsapIntermediateNetworks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxsapIntermediateNetworks);
      }
      if (IpxmsgConn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxmsgConn);
      }
      if (IpxmsgSigchar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpxmsgSigchar);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ipx other) {
      if (other == null) {
        return;
      }
      if (other.IpxChecksum != 0) {
        IpxChecksum = other.IpxChecksum;
      }
      if (other.IpxSrc.Length != 0) {
        IpxSrc = other.IpxSrc;
      }
      if (other.IpxDst.Length != 0) {
        IpxDst = other.IpxDst;
      }
      if (other.IpxAddr.Length != 0) {
        IpxAddr = other.IpxAddr;
      }
      if (other.IpxLen != 0) {
        IpxLen = other.IpxLen;
      }
      if (other.IpxHops != 0) {
        IpxHops = other.IpxHops;
      }
      if (other.IpxPacketType != 0) {
        IpxPacketType = other.IpxPacketType;
      }
      if (other.IpxDstNet.Length != 0) {
        IpxDstNet = other.IpxDstNet;
      }
      if (other.IpxDstNode.Length != 0) {
        IpxDstNode = other.IpxDstNode;
      }
      if (other.IpxDstSocket != 0) {
        IpxDstSocket = other.IpxDstSocket;
      }
      if (other.IpxSrcNet.Length != 0) {
        IpxSrcNet = other.IpxSrcNet;
      }
      if (other.IpxSrcNode.Length != 0) {
        IpxSrcNode = other.IpxSrcNode;
      }
      if (other.IpxSrcSocket != 0) {
        IpxSrcSocket = other.IpxSrcSocket;
      }
      if (other.IpxNet.Length != 0) {
        IpxNet = other.IpxNet;
      }
      if (other.IpxNode.Length != 0) {
        IpxNode = other.IpxNode;
      }
      if (other.IpxSocket != 0) {
        IpxSocket = other.IpxSocket;
      }
      if (other.IpxripRequest != false) {
        IpxripRequest = other.IpxripRequest;
      }
      if (other.IpxripResponse != false) {
        IpxripResponse = other.IpxripResponse;
      }
      if (other.IpxripPacketType != 0) {
        IpxripPacketType = other.IpxripPacketType;
      }
      if (other.IpxripRouteVector.Length != 0) {
        IpxripRouteVector = other.IpxripRouteVector;
      }
      if (other.IpxripHops != 0) {
        IpxripHops = other.IpxripHops;
      }
      if (other.IpxripTicks != 0) {
        IpxripTicks = other.IpxripTicks;
      }
      if (other.IpxsapRequest != false) {
        IpxsapRequest = other.IpxsapRequest;
      }
      if (other.IpxsapResponse != false) {
        IpxsapResponse = other.IpxsapResponse;
      }
      if (other.IpxsapPacketType != 0) {
        IpxsapPacketType = other.IpxsapPacketType;
      }
      if (other.IpxsapServerName.Length != 0) {
        IpxsapServerName = other.IpxsapServerName;
      }
      if (other.IpxsapServerType != 0) {
        IpxsapServerType = other.IpxsapServerType;
      }
      if (other.IpxsapNetwork.Length != 0) {
        IpxsapNetwork = other.IpxsapNetwork;
      }
      if (other.IpxsapNode.Length != 0) {
        IpxsapNode = other.IpxsapNode;
      }
      if (other.IpxsapSocket != 0) {
        IpxsapSocket = other.IpxsapSocket;
      }
      if (other.IpxsapIntermediateNetworks != 0) {
        IpxsapIntermediateNetworks = other.IpxsapIntermediateNetworks;
      }
      if (other.IpxmsgConn != 0) {
        IpxmsgConn = other.IpxmsgConn;
      }
      if (other.IpxmsgSigchar != 0) {
        IpxmsgSigchar = other.IpxmsgSigchar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IpxChecksum = input.ReadUInt32();
            break;
          }
          case 18: {
            IpxSrc = input.ReadString();
            break;
          }
          case 26: {
            IpxDst = input.ReadString();
            break;
          }
          case 34: {
            IpxAddr = input.ReadString();
            break;
          }
          case 40: {
            IpxLen = input.ReadUInt32();
            break;
          }
          case 48: {
            IpxHops = input.ReadUInt32();
            break;
          }
          case 56: {
            IpxPacketType = input.ReadUInt32();
            break;
          }
          case 66: {
            IpxDstNet = input.ReadBytes();
            break;
          }
          case 74: {
            IpxDstNode = input.ReadBytes();
            break;
          }
          case 80: {
            IpxDstSocket = input.ReadUInt32();
            break;
          }
          case 90: {
            IpxSrcNet = input.ReadBytes();
            break;
          }
          case 98: {
            IpxSrcNode = input.ReadBytes();
            break;
          }
          case 104: {
            IpxSrcSocket = input.ReadUInt32();
            break;
          }
          case 114: {
            IpxNet = input.ReadBytes();
            break;
          }
          case 122: {
            IpxNode = input.ReadBytes();
            break;
          }
          case 128: {
            IpxSocket = input.ReadUInt32();
            break;
          }
          case 136: {
            IpxripRequest = input.ReadBool();
            break;
          }
          case 144: {
            IpxripResponse = input.ReadBool();
            break;
          }
          case 152: {
            IpxripPacketType = input.ReadUInt32();
            break;
          }
          case 162: {
            IpxripRouteVector = input.ReadBytes();
            break;
          }
          case 168: {
            IpxripHops = input.ReadUInt32();
            break;
          }
          case 176: {
            IpxripTicks = input.ReadUInt32();
            break;
          }
          case 184: {
            IpxsapRequest = input.ReadBool();
            break;
          }
          case 192: {
            IpxsapResponse = input.ReadBool();
            break;
          }
          case 200: {
            IpxsapPacketType = input.ReadUInt32();
            break;
          }
          case 210: {
            IpxsapServerName = input.ReadString();
            break;
          }
          case 216: {
            IpxsapServerType = input.ReadUInt32();
            break;
          }
          case 226: {
            IpxsapNetwork = input.ReadBytes();
            break;
          }
          case 234: {
            IpxsapNode = input.ReadBytes();
            break;
          }
          case 240: {
            IpxsapSocket = input.ReadUInt32();
            break;
          }
          case 248: {
            IpxsapIntermediateNetworks = input.ReadUInt32();
            break;
          }
          case 256: {
            IpxmsgConn = input.ReadUInt32();
            break;
          }
          case 264: {
            IpxmsgSigchar = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
