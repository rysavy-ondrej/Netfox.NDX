// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-netbios.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-netbios.proto</summary>
  public static partial class PacketNetbiosReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-netbios.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketNetbiosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwYWNrZXQtbmV0Ymlvcy5wcm90bxIRTmR4LkRlY29kZXJzLkNvcmUi2goK",
            "B05ldGJpb3MSFgoOTmV0Ymlvc0NvbW1hbmQYASABKA0SFQoNTmV0Ymlvc0hk",
            "ckxlbhgCIAEoDRIYChBOZXRiaW9zRGVsaW1pdGVyGAMgASgNEhgKEE5ldGJp",
            "b3NYbWl0Q29ycmwYBCABKA0SGAoQTmV0Ymlvc1Jlc3BDb3JybBgFIAEoDRIb",
            "ChNOZXRiaW9zQ2FsbE5hbWVUeXBlGAYgASgNEhkKEU5ldGJpb3NOYk5hbWVU",
            "eXBlGAcgASgNEhUKDU5ldGJpb3NOYk5hbWUYCCABKAkSFgoOTmV0Ymlvc1Zl",
            "cnNpb24YCSABKAgSHQoVTmV0Ymlvc05vUmVjZWl2ZUZsYWdzGAogASgNEiYK",
            "Hk5ldGJpb3NOb1JlY2VpdmVGbGFnc1NlbmROb0FjaxgLIAEoCBIbChNOZXRi",
            "aW9zTGFyZ2VzdEZyYW1lGAwgASgNEh4KFk5ldGJpb3NTdGF0dXNCdWZmZXJM",
            "ZW4YDSABKA0SFQoNTmV0Ymlvc1N0YXR1cxgOIAEoDRIXCg9OZXRiaW9zTmFt",
            "ZVR5cGUYDyABKA0SHgoWTmV0Ymlvc01heERhdGFSZWN2U2l6ZRgQIAEoDRIj",
            "ChtOZXRiaW9zVGVybWluYXRpb25JbmRpY2F0b3IYESABKA0SIwobTmV0Ymlv",
            "c051bURhdGFCeXRlc0FjY2VwdGVkGBIgASgNEhsKE05ldGJpb3NMb2NhbFNl",
            "c3Npb24YEyABKA0SHAoUTmV0Ymlvc1JlbW90ZVNlc3Npb24YFCABKA0SFAoM",
            "TmV0Ymlvc0ZsYWdzGBUgASgNEh0KFU5ldGJpb3NGbGFnc1NlbmROb0FjaxgW",
            "IAEoCBIXCg9OZXRiaW9zRmxhZ3NBY2sYFyABKAgSHwoXTmV0Ymlvc0ZsYWdz",
            "QWNrV2l0aERhdGEYGCABKAgSHwoXTmV0Ymlvc0ZsYWdzQWNrRXhwZWN0ZWQY",
            "GSABKAgSHwoXTmV0Ymlvc0ZsYWdzUmVjdkNvbnRSZXEYGiABKAgSFAoMTmV0",
            "Ymlvc0RhdGEyGBsgASgNEhkKEU5ldGJpb3NEYXRhMkZyYW1lGBwgASgIEhgK",
            "EE5ldGJpb3NEYXRhMlVzZXIYHSABKAgSGgoSTmV0Ymlvc0RhdGEyU3RhdHVz",
            "GB4gASgNEhoKEk5ldGJpb3NEYXRhZ3JhbU1hYxgfIAEoDBIfChdOZXRiaW9z",
            "RGF0YWdyYW1CY2FzdE1hYxggIAEoDBIeChZOZXRiaW9zUmVzeW5jSW5kaWNh",
            "dG9yGCEgASgNEhwKFE5ldGJpb3NTdGF0dXNSZXF1ZXN0GCIgASgNEh0KFU5l",
            "dGJpb3NMb2NhbFNlc3Npb25ObxgjIAEoDRIaChJOZXRiaW9zU3RhdGVPZk5h",
            "bWUYJCABKA0SHQoVTmV0Ymlvc1N0YXR1c1Jlc3BvbnNlGCUgASgNEh4KFk5l",
            "dGJpb3NGcmFnbWVudE92ZXJsYXAYJiABKAgSJgoeTmV0Ymlvc0ZyYWdtZW50",
            "T3ZlcmxhcENvbmZsaWN0GCcgASgIEiQKHE5ldGJpb3NGcmFnbWVudE11bHRp",
            "cGxldGFpbHMYKCABKAgSJgoeTmV0Ymlvc0ZyYWdtZW50VG9vbG9uZ2ZyYWdt",
            "ZW50GCkgASgIEhwKFE5ldGJpb3NGcmFnbWVudEVycm9yGCogASgDEhwKFE5l",
            "dGJpb3NGcmFnbWVudENvdW50GCsgASgNEhcKD05ldGJpb3NGcmFnbWVudBgs",
            "IAEoAxIYChBOZXRiaW9zRnJhZ21lbnRzGC0gASgFEiAKGE5ldGJpb3NSZWFz",
            "c2VtYmxlZExlbmd0aBguIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Netbios), global::Ndx.Decoders.Core.Netbios.Parser, new[]{ "NetbiosCommand", "NetbiosHdrLen", "NetbiosDelimiter", "NetbiosXmitCorrl", "NetbiosRespCorrl", "NetbiosCallNameType", "NetbiosNbNameType", "NetbiosNbName", "NetbiosVersion", "NetbiosNoReceiveFlags", "NetbiosNoReceiveFlagsSendNoAck", "NetbiosLargestFrame", "NetbiosStatusBufferLen", "NetbiosStatus", "NetbiosNameType", "NetbiosMaxDataRecvSize", "NetbiosTerminationIndicator", "NetbiosNumDataBytesAccepted", "NetbiosLocalSession", "NetbiosRemoteSession", "NetbiosFlags", "NetbiosFlagsSendNoAck", "NetbiosFlagsAck", "NetbiosFlagsAckWithData", "NetbiosFlagsAckExpected", "NetbiosFlagsRecvContReq", "NetbiosData2", "NetbiosData2Frame", "NetbiosData2User", "NetbiosData2Status", "NetbiosDatagramMac", "NetbiosDatagramBcastMac", "NetbiosResyncIndicator", "NetbiosStatusRequest", "NetbiosLocalSessionNo", "NetbiosStateOfName", "NetbiosStatusResponse", "NetbiosFragmentOverlap", "NetbiosFragmentOverlapConflict", "NetbiosFragmentMultipletails", "NetbiosFragmentToolongfragment", "NetbiosFragmentError", "NetbiosFragmentCount", "NetbiosFragment", "NetbiosFragments", "NetbiosReassembledLength" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Netbios : pb::IMessage<Netbios> {
    private static readonly pb::MessageParser<Netbios> _parser = new pb::MessageParser<Netbios>(() => new Netbios());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Netbios> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketNetbiosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Netbios() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Netbios(Netbios other) : this() {
      netbiosCommand_ = other.netbiosCommand_;
      netbiosHdrLen_ = other.netbiosHdrLen_;
      netbiosDelimiter_ = other.netbiosDelimiter_;
      netbiosXmitCorrl_ = other.netbiosXmitCorrl_;
      netbiosRespCorrl_ = other.netbiosRespCorrl_;
      netbiosCallNameType_ = other.netbiosCallNameType_;
      netbiosNbNameType_ = other.netbiosNbNameType_;
      netbiosNbName_ = other.netbiosNbName_;
      netbiosVersion_ = other.netbiosVersion_;
      netbiosNoReceiveFlags_ = other.netbiosNoReceiveFlags_;
      netbiosNoReceiveFlagsSendNoAck_ = other.netbiosNoReceiveFlagsSendNoAck_;
      netbiosLargestFrame_ = other.netbiosLargestFrame_;
      netbiosStatusBufferLen_ = other.netbiosStatusBufferLen_;
      netbiosStatus_ = other.netbiosStatus_;
      netbiosNameType_ = other.netbiosNameType_;
      netbiosMaxDataRecvSize_ = other.netbiosMaxDataRecvSize_;
      netbiosTerminationIndicator_ = other.netbiosTerminationIndicator_;
      netbiosNumDataBytesAccepted_ = other.netbiosNumDataBytesAccepted_;
      netbiosLocalSession_ = other.netbiosLocalSession_;
      netbiosRemoteSession_ = other.netbiosRemoteSession_;
      netbiosFlags_ = other.netbiosFlags_;
      netbiosFlagsSendNoAck_ = other.netbiosFlagsSendNoAck_;
      netbiosFlagsAck_ = other.netbiosFlagsAck_;
      netbiosFlagsAckWithData_ = other.netbiosFlagsAckWithData_;
      netbiosFlagsAckExpected_ = other.netbiosFlagsAckExpected_;
      netbiosFlagsRecvContReq_ = other.netbiosFlagsRecvContReq_;
      netbiosData2_ = other.netbiosData2_;
      netbiosData2Frame_ = other.netbiosData2Frame_;
      netbiosData2User_ = other.netbiosData2User_;
      netbiosData2Status_ = other.netbiosData2Status_;
      netbiosDatagramMac_ = other.netbiosDatagramMac_;
      netbiosDatagramBcastMac_ = other.netbiosDatagramBcastMac_;
      netbiosResyncIndicator_ = other.netbiosResyncIndicator_;
      netbiosStatusRequest_ = other.netbiosStatusRequest_;
      netbiosLocalSessionNo_ = other.netbiosLocalSessionNo_;
      netbiosStateOfName_ = other.netbiosStateOfName_;
      netbiosStatusResponse_ = other.netbiosStatusResponse_;
      netbiosFragmentOverlap_ = other.netbiosFragmentOverlap_;
      netbiosFragmentOverlapConflict_ = other.netbiosFragmentOverlapConflict_;
      netbiosFragmentMultipletails_ = other.netbiosFragmentMultipletails_;
      netbiosFragmentToolongfragment_ = other.netbiosFragmentToolongfragment_;
      netbiosFragmentError_ = other.netbiosFragmentError_;
      netbiosFragmentCount_ = other.netbiosFragmentCount_;
      netbiosFragment_ = other.netbiosFragment_;
      netbiosFragments_ = other.netbiosFragments_;
      netbiosReassembledLength_ = other.netbiosReassembledLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Netbios Clone() {
      return new Netbios(this);
    }

    /// <summary>Field number for the "NetbiosCommand" field.</summary>
    public const int NetbiosCommandFieldNumber = 1;
    private uint netbiosCommand_;
    /// <summary>
    /// Command ('netbios_netbios_command')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosCommand {
      get { return netbiosCommand_; }
      set {
        netbiosCommand_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosHdrLen" field.</summary>
    public const int NetbiosHdrLenFieldNumber = 2;
    private uint netbiosHdrLen_;
    /// <summary>
    /// Length ('netbios_netbios_hdr_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosHdrLen {
      get { return netbiosHdrLen_; }
      set {
        netbiosHdrLen_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosDelimiter" field.</summary>
    public const int NetbiosDelimiterFieldNumber = 3;
    private uint netbiosDelimiter_;
    /// <summary>
    /// Delimiter ('netbios_netbios_delimiter')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosDelimiter {
      get { return netbiosDelimiter_; }
      set {
        netbiosDelimiter_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosXmitCorrl" field.</summary>
    public const int NetbiosXmitCorrlFieldNumber = 4;
    private uint netbiosXmitCorrl_;
    /// <summary>
    /// Transmit Correlator ('netbios_netbios_xmit_corrl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosXmitCorrl {
      get { return netbiosXmitCorrl_; }
      set {
        netbiosXmitCorrl_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosRespCorrl" field.</summary>
    public const int NetbiosRespCorrlFieldNumber = 5;
    private uint netbiosRespCorrl_;
    /// <summary>
    /// Response Correlator ('netbios_netbios_resp_corrl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosRespCorrl {
      get { return netbiosRespCorrl_; }
      set {
        netbiosRespCorrl_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosCallNameType" field.</summary>
    public const int NetbiosCallNameTypeFieldNumber = 6;
    private uint netbiosCallNameType_;
    /// <summary>
    /// Caller's Name Type ('netbios_netbios_call_name_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosCallNameType {
      get { return netbiosCallNameType_; }
      set {
        netbiosCallNameType_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNbNameType" field.</summary>
    public const int NetbiosNbNameTypeFieldNumber = 7;
    private uint netbiosNbNameType_;
    /// <summary>
    /// NetBIOS Name Type ('netbios_netbios_nb_name_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosNbNameType {
      get { return netbiosNbNameType_; }
      set {
        netbiosNbNameType_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNbName" field.</summary>
    public const int NetbiosNbNameFieldNumber = 8;
    private string netbiosNbName_ = "";
    /// <summary>
    /// NetBIOS Name ('netbios_netbios_nb_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetbiosNbName {
      get { return netbiosNbName_; }
      set {
        netbiosNbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetbiosVersion" field.</summary>
    public const int NetbiosVersionFieldNumber = 9;
    private bool netbiosVersion_;
    /// <summary>
    /// NetBIOS Version ('netbios_netbios_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosVersion {
      get { return netbiosVersion_; }
      set {
        netbiosVersion_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNoReceiveFlags" field.</summary>
    public const int NetbiosNoReceiveFlagsFieldNumber = 10;
    private uint netbiosNoReceiveFlags_;
    /// <summary>
    /// Flags ('netbios_netbios_no_receive_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosNoReceiveFlags {
      get { return netbiosNoReceiveFlags_; }
      set {
        netbiosNoReceiveFlags_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNoReceiveFlagsSendNoAck" field.</summary>
    public const int NetbiosNoReceiveFlagsSendNoAckFieldNumber = 11;
    private bool netbiosNoReceiveFlagsSendNoAck_;
    /// <summary>
    /// SEND.NO.ACK data received ('netbios_no_receive_flags_netbios_no_receive_flags_send_no_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosNoReceiveFlagsSendNoAck {
      get { return netbiosNoReceiveFlagsSendNoAck_; }
      set {
        netbiosNoReceiveFlagsSendNoAck_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosLargestFrame" field.</summary>
    public const int NetbiosLargestFrameFieldNumber = 12;
    private uint netbiosLargestFrame_;
    /// <summary>
    /// Largest Frame ('netbios_netbios_largest_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosLargestFrame {
      get { return netbiosLargestFrame_; }
      set {
        netbiosLargestFrame_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosStatusBufferLen" field.</summary>
    public const int NetbiosStatusBufferLenFieldNumber = 13;
    private uint netbiosStatusBufferLen_;
    /// <summary>
    /// Length of status buffer ('netbios_netbios_status_buffer_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosStatusBufferLen {
      get { return netbiosStatusBufferLen_; }
      set {
        netbiosStatusBufferLen_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosStatus" field.</summary>
    public const int NetbiosStatusFieldNumber = 14;
    private uint netbiosStatus_;
    /// <summary>
    /// Status ('netbios_netbios_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosStatus {
      get { return netbiosStatus_; }
      set {
        netbiosStatus_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNameType" field.</summary>
    public const int NetbiosNameTypeFieldNumber = 15;
    private uint netbiosNameType_;
    /// <summary>
    /// Name type ('netbios_netbios_name_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosNameType {
      get { return netbiosNameType_; }
      set {
        netbiosNameType_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosMaxDataRecvSize" field.</summary>
    public const int NetbiosMaxDataRecvSizeFieldNumber = 16;
    private uint netbiosMaxDataRecvSize_;
    /// <summary>
    /// Maximum data receive size ('netbios_netbios_max_data_recv_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosMaxDataRecvSize {
      get { return netbiosMaxDataRecvSize_; }
      set {
        netbiosMaxDataRecvSize_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosTerminationIndicator" field.</summary>
    public const int NetbiosTerminationIndicatorFieldNumber = 17;
    private uint netbiosTerminationIndicator_;
    /// <summary>
    /// Termination indicator ('netbios_netbios_termination_indicator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosTerminationIndicator {
      get { return netbiosTerminationIndicator_; }
      set {
        netbiosTerminationIndicator_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosNumDataBytesAccepted" field.</summary>
    public const int NetbiosNumDataBytesAcceptedFieldNumber = 18;
    private uint netbiosNumDataBytesAccepted_;
    /// <summary>
    /// Number of data bytes accepted ('netbios_netbios_num_data_bytes_accepted')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosNumDataBytesAccepted {
      get { return netbiosNumDataBytesAccepted_; }
      set {
        netbiosNumDataBytesAccepted_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosLocalSession" field.</summary>
    public const int NetbiosLocalSessionFieldNumber = 19;
    private uint netbiosLocalSession_;
    /// <summary>
    /// Local Session No. ('netbios_netbios_local_session')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosLocalSession {
      get { return netbiosLocalSession_; }
      set {
        netbiosLocalSession_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosRemoteSession" field.</summary>
    public const int NetbiosRemoteSessionFieldNumber = 20;
    private uint netbiosRemoteSession_;
    /// <summary>
    /// Remote Session No. ('netbios_netbios_remote_session')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosRemoteSession {
      get { return netbiosRemoteSession_; }
      set {
        netbiosRemoteSession_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlags" field.</summary>
    public const int NetbiosFlagsFieldNumber = 21;
    private uint netbiosFlags_;
    /// <summary>
    /// Flags ('netbios_netbios_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosFlags {
      get { return netbiosFlags_; }
      set {
        netbiosFlags_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlagsSendNoAck" field.</summary>
    public const int NetbiosFlagsSendNoAckFieldNumber = 22;
    private bool netbiosFlagsSendNoAck_;
    /// <summary>
    /// Handle SEND.NO.ACK ('netbios_flags_netbios_flags_send_no_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFlagsSendNoAck {
      get { return netbiosFlagsSendNoAck_; }
      set {
        netbiosFlagsSendNoAck_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlagsAck" field.</summary>
    public const int NetbiosFlagsAckFieldNumber = 23;
    private bool netbiosFlagsAck_;
    /// <summary>
    /// Acknowledge ('netbios_flags_netbios_flags_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFlagsAck {
      get { return netbiosFlagsAck_; }
      set {
        netbiosFlagsAck_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlagsAckWithData" field.</summary>
    public const int NetbiosFlagsAckWithDataFieldNumber = 24;
    private bool netbiosFlagsAckWithData_;
    /// <summary>
    /// Acknowledge with data ('netbios_flags_netbios_flags_ack_with_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFlagsAckWithData {
      get { return netbiosFlagsAckWithData_; }
      set {
        netbiosFlagsAckWithData_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlagsAckExpected" field.</summary>
    public const int NetbiosFlagsAckExpectedFieldNumber = 25;
    private bool netbiosFlagsAckExpected_;
    /// <summary>
    /// Acknowledge expected ('netbios_flags_netbios_flags_ack_expected')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFlagsAckExpected {
      get { return netbiosFlagsAckExpected_; }
      set {
        netbiosFlagsAckExpected_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFlagsRecvContReq" field.</summary>
    public const int NetbiosFlagsRecvContReqFieldNumber = 26;
    private bool netbiosFlagsRecvContReq_;
    /// <summary>
    /// RECEIVE_CONTINUE requested ('netbios_flags_netbios_flags_recv_cont_req')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFlagsRecvContReq {
      get { return netbiosFlagsRecvContReq_; }
      set {
        netbiosFlagsRecvContReq_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosData2" field.</summary>
    public const int NetbiosData2FieldNumber = 27;
    private uint netbiosData2_;
    /// <summary>
    /// DATA2 value ('netbios_netbios_data2')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosData2 {
      get { return netbiosData2_; }
      set {
        netbiosData2_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosData2Frame" field.</summary>
    public const int NetbiosData2FrameFieldNumber = 28;
    private bool netbiosData2Frame_;
    /// <summary>
    /// Data length exceeds maximum frame size ('netbios_data2_netbios_data2_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosData2Frame {
      get { return netbiosData2Frame_; }
      set {
        netbiosData2Frame_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosData2User" field.</summary>
    public const int NetbiosData2UserFieldNumber = 29;
    private bool netbiosData2User_;
    /// <summary>
    /// Data length exceeds user's buffer ('netbios_data2_netbios_data2_user')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosData2User {
      get { return netbiosData2User_; }
      set {
        netbiosData2User_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosData2Status" field.</summary>
    public const int NetbiosData2StatusFieldNumber = 30;
    private uint netbiosData2Status_;
    /// <summary>
    /// Status data length ('netbios_data2_netbios_data2_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosData2Status {
      get { return netbiosData2Status_; }
      set {
        netbiosData2Status_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosDatagramMac" field.</summary>
    public const int NetbiosDatagramMacFieldNumber = 31;
    private pb::ByteString netbiosDatagramMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender's MAC Address ('netbios_netbios_datagram_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NetbiosDatagramMac {
      get { return netbiosDatagramMac_; }
      set {
        netbiosDatagramMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetbiosDatagramBcastMac" field.</summary>
    public const int NetbiosDatagramBcastMacFieldNumber = 32;
    private pb::ByteString netbiosDatagramBcastMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender's Node Address ('netbios_netbios_datagram_bcast_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NetbiosDatagramBcastMac {
      get { return netbiosDatagramBcastMac_; }
      set {
        netbiosDatagramBcastMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetbiosResyncIndicator" field.</summary>
    public const int NetbiosResyncIndicatorFieldNumber = 33;
    private uint netbiosResyncIndicator_;
    /// <summary>
    /// Re-sync indicator ('netbios_netbios_resync_indicator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosResyncIndicator {
      get { return netbiosResyncIndicator_; }
      set {
        netbiosResyncIndicator_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosStatusRequest" field.</summary>
    public const int NetbiosStatusRequestFieldNumber = 34;
    private uint netbiosStatusRequest_;
    /// <summary>
    /// Status request ('netbios_netbios_status_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosStatusRequest {
      get { return netbiosStatusRequest_; }
      set {
        netbiosStatusRequest_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosLocalSessionNo" field.</summary>
    public const int NetbiosLocalSessionNoFieldNumber = 35;
    private uint netbiosLocalSessionNo_;
    /// <summary>
    /// Local Session No. ('netbios_netbios_local_session_no')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosLocalSessionNo {
      get { return netbiosLocalSessionNo_; }
      set {
        netbiosLocalSessionNo_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosStateOfName" field.</summary>
    public const int NetbiosStateOfNameFieldNumber = 36;
    private uint netbiosStateOfName_;
    /// <summary>
    /// State of name ('netbios_netbios_state_of_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosStateOfName {
      get { return netbiosStateOfName_; }
      set {
        netbiosStateOfName_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosStatusResponse" field.</summary>
    public const int NetbiosStatusResponseFieldNumber = 37;
    private uint netbiosStatusResponse_;
    /// <summary>
    /// Status response ('netbios_netbios_status_response')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosStatusResponse {
      get { return netbiosStatusResponse_; }
      set {
        netbiosStatusResponse_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentOverlap" field.</summary>
    public const int NetbiosFragmentOverlapFieldNumber = 38;
    private bool netbiosFragmentOverlap_;
    /// <summary>
    /// Fragment overlap ('netbios_fragment_netbios_fragment_overlap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFragmentOverlap {
      get { return netbiosFragmentOverlap_; }
      set {
        netbiosFragmentOverlap_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentOverlapConflict" field.</summary>
    public const int NetbiosFragmentOverlapConflictFieldNumber = 39;
    private bool netbiosFragmentOverlapConflict_;
    /// <summary>
    /// Conflicting data in fragment overlap ('netbios_fragment_overlap_netbios_fragment_overlap_conflict')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFragmentOverlapConflict {
      get { return netbiosFragmentOverlapConflict_; }
      set {
        netbiosFragmentOverlapConflict_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentMultipletails" field.</summary>
    public const int NetbiosFragmentMultipletailsFieldNumber = 40;
    private bool netbiosFragmentMultipletails_;
    /// <summary>
    /// Multiple tail fragments found ('netbios_fragment_netbios_fragment_multipletails')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFragmentMultipletails {
      get { return netbiosFragmentMultipletails_; }
      set {
        netbiosFragmentMultipletails_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentToolongfragment" field.</summary>
    public const int NetbiosFragmentToolongfragmentFieldNumber = 41;
    private bool netbiosFragmentToolongfragment_;
    /// <summary>
    /// Fragment too long ('netbios_fragment_netbios_fragment_toolongfragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NetbiosFragmentToolongfragment {
      get { return netbiosFragmentToolongfragment_; }
      set {
        netbiosFragmentToolongfragment_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentError" field.</summary>
    public const int NetbiosFragmentErrorFieldNumber = 42;
    private long netbiosFragmentError_;
    /// <summary>
    /// Defragmentation error ('netbios_fragment_netbios_fragment_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetbiosFragmentError {
      get { return netbiosFragmentError_; }
      set {
        netbiosFragmentError_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragmentCount" field.</summary>
    public const int NetbiosFragmentCountFieldNumber = 43;
    private uint netbiosFragmentCount_;
    /// <summary>
    /// Fragment count ('netbios_fragment_netbios_fragment_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosFragmentCount {
      get { return netbiosFragmentCount_; }
      set {
        netbiosFragmentCount_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragment" field.</summary>
    public const int NetbiosFragmentFieldNumber = 44;
    private long netbiosFragment_;
    /// <summary>
    /// NetBIOS Fragment ('netbios_netbios_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetbiosFragment {
      get { return netbiosFragment_; }
      set {
        netbiosFragment_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosFragments" field.</summary>
    public const int NetbiosFragmentsFieldNumber = 45;
    private int netbiosFragments_;
    /// <summary>
    /// NetBIOS Fragments ('netbios_netbios_fragments')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetbiosFragments {
      get { return netbiosFragments_; }
      set {
        netbiosFragments_ = value;
      }
    }

    /// <summary>Field number for the "NetbiosReassembledLength" field.</summary>
    public const int NetbiosReassembledLengthFieldNumber = 46;
    private uint netbiosReassembledLength_;
    /// <summary>
    /// Reassembled NetBIOS length ('netbios_netbios_reassembled_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NetbiosReassembledLength {
      get { return netbiosReassembledLength_; }
      set {
        netbiosReassembledLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Netbios);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Netbios other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetbiosCommand != other.NetbiosCommand) return false;
      if (NetbiosHdrLen != other.NetbiosHdrLen) return false;
      if (NetbiosDelimiter != other.NetbiosDelimiter) return false;
      if (NetbiosXmitCorrl != other.NetbiosXmitCorrl) return false;
      if (NetbiosRespCorrl != other.NetbiosRespCorrl) return false;
      if (NetbiosCallNameType != other.NetbiosCallNameType) return false;
      if (NetbiosNbNameType != other.NetbiosNbNameType) return false;
      if (NetbiosNbName != other.NetbiosNbName) return false;
      if (NetbiosVersion != other.NetbiosVersion) return false;
      if (NetbiosNoReceiveFlags != other.NetbiosNoReceiveFlags) return false;
      if (NetbiosNoReceiveFlagsSendNoAck != other.NetbiosNoReceiveFlagsSendNoAck) return false;
      if (NetbiosLargestFrame != other.NetbiosLargestFrame) return false;
      if (NetbiosStatusBufferLen != other.NetbiosStatusBufferLen) return false;
      if (NetbiosStatus != other.NetbiosStatus) return false;
      if (NetbiosNameType != other.NetbiosNameType) return false;
      if (NetbiosMaxDataRecvSize != other.NetbiosMaxDataRecvSize) return false;
      if (NetbiosTerminationIndicator != other.NetbiosTerminationIndicator) return false;
      if (NetbiosNumDataBytesAccepted != other.NetbiosNumDataBytesAccepted) return false;
      if (NetbiosLocalSession != other.NetbiosLocalSession) return false;
      if (NetbiosRemoteSession != other.NetbiosRemoteSession) return false;
      if (NetbiosFlags != other.NetbiosFlags) return false;
      if (NetbiosFlagsSendNoAck != other.NetbiosFlagsSendNoAck) return false;
      if (NetbiosFlagsAck != other.NetbiosFlagsAck) return false;
      if (NetbiosFlagsAckWithData != other.NetbiosFlagsAckWithData) return false;
      if (NetbiosFlagsAckExpected != other.NetbiosFlagsAckExpected) return false;
      if (NetbiosFlagsRecvContReq != other.NetbiosFlagsRecvContReq) return false;
      if (NetbiosData2 != other.NetbiosData2) return false;
      if (NetbiosData2Frame != other.NetbiosData2Frame) return false;
      if (NetbiosData2User != other.NetbiosData2User) return false;
      if (NetbiosData2Status != other.NetbiosData2Status) return false;
      if (NetbiosDatagramMac != other.NetbiosDatagramMac) return false;
      if (NetbiosDatagramBcastMac != other.NetbiosDatagramBcastMac) return false;
      if (NetbiosResyncIndicator != other.NetbiosResyncIndicator) return false;
      if (NetbiosStatusRequest != other.NetbiosStatusRequest) return false;
      if (NetbiosLocalSessionNo != other.NetbiosLocalSessionNo) return false;
      if (NetbiosStateOfName != other.NetbiosStateOfName) return false;
      if (NetbiosStatusResponse != other.NetbiosStatusResponse) return false;
      if (NetbiosFragmentOverlap != other.NetbiosFragmentOverlap) return false;
      if (NetbiosFragmentOverlapConflict != other.NetbiosFragmentOverlapConflict) return false;
      if (NetbiosFragmentMultipletails != other.NetbiosFragmentMultipletails) return false;
      if (NetbiosFragmentToolongfragment != other.NetbiosFragmentToolongfragment) return false;
      if (NetbiosFragmentError != other.NetbiosFragmentError) return false;
      if (NetbiosFragmentCount != other.NetbiosFragmentCount) return false;
      if (NetbiosFragment != other.NetbiosFragment) return false;
      if (NetbiosFragments != other.NetbiosFragments) return false;
      if (NetbiosReassembledLength != other.NetbiosReassembledLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetbiosCommand != 0) hash ^= NetbiosCommand.GetHashCode();
      if (NetbiosHdrLen != 0) hash ^= NetbiosHdrLen.GetHashCode();
      if (NetbiosDelimiter != 0) hash ^= NetbiosDelimiter.GetHashCode();
      if (NetbiosXmitCorrl != 0) hash ^= NetbiosXmitCorrl.GetHashCode();
      if (NetbiosRespCorrl != 0) hash ^= NetbiosRespCorrl.GetHashCode();
      if (NetbiosCallNameType != 0) hash ^= NetbiosCallNameType.GetHashCode();
      if (NetbiosNbNameType != 0) hash ^= NetbiosNbNameType.GetHashCode();
      if (NetbiosNbName.Length != 0) hash ^= NetbiosNbName.GetHashCode();
      if (NetbiosVersion != false) hash ^= NetbiosVersion.GetHashCode();
      if (NetbiosNoReceiveFlags != 0) hash ^= NetbiosNoReceiveFlags.GetHashCode();
      if (NetbiosNoReceiveFlagsSendNoAck != false) hash ^= NetbiosNoReceiveFlagsSendNoAck.GetHashCode();
      if (NetbiosLargestFrame != 0) hash ^= NetbiosLargestFrame.GetHashCode();
      if (NetbiosStatusBufferLen != 0) hash ^= NetbiosStatusBufferLen.GetHashCode();
      if (NetbiosStatus != 0) hash ^= NetbiosStatus.GetHashCode();
      if (NetbiosNameType != 0) hash ^= NetbiosNameType.GetHashCode();
      if (NetbiosMaxDataRecvSize != 0) hash ^= NetbiosMaxDataRecvSize.GetHashCode();
      if (NetbiosTerminationIndicator != 0) hash ^= NetbiosTerminationIndicator.GetHashCode();
      if (NetbiosNumDataBytesAccepted != 0) hash ^= NetbiosNumDataBytesAccepted.GetHashCode();
      if (NetbiosLocalSession != 0) hash ^= NetbiosLocalSession.GetHashCode();
      if (NetbiosRemoteSession != 0) hash ^= NetbiosRemoteSession.GetHashCode();
      if (NetbiosFlags != 0) hash ^= NetbiosFlags.GetHashCode();
      if (NetbiosFlagsSendNoAck != false) hash ^= NetbiosFlagsSendNoAck.GetHashCode();
      if (NetbiosFlagsAck != false) hash ^= NetbiosFlagsAck.GetHashCode();
      if (NetbiosFlagsAckWithData != false) hash ^= NetbiosFlagsAckWithData.GetHashCode();
      if (NetbiosFlagsAckExpected != false) hash ^= NetbiosFlagsAckExpected.GetHashCode();
      if (NetbiosFlagsRecvContReq != false) hash ^= NetbiosFlagsRecvContReq.GetHashCode();
      if (NetbiosData2 != 0) hash ^= NetbiosData2.GetHashCode();
      if (NetbiosData2Frame != false) hash ^= NetbiosData2Frame.GetHashCode();
      if (NetbiosData2User != false) hash ^= NetbiosData2User.GetHashCode();
      if (NetbiosData2Status != 0) hash ^= NetbiosData2Status.GetHashCode();
      if (NetbiosDatagramMac.Length != 0) hash ^= NetbiosDatagramMac.GetHashCode();
      if (NetbiosDatagramBcastMac.Length != 0) hash ^= NetbiosDatagramBcastMac.GetHashCode();
      if (NetbiosResyncIndicator != 0) hash ^= NetbiosResyncIndicator.GetHashCode();
      if (NetbiosStatusRequest != 0) hash ^= NetbiosStatusRequest.GetHashCode();
      if (NetbiosLocalSessionNo != 0) hash ^= NetbiosLocalSessionNo.GetHashCode();
      if (NetbiosStateOfName != 0) hash ^= NetbiosStateOfName.GetHashCode();
      if (NetbiosStatusResponse != 0) hash ^= NetbiosStatusResponse.GetHashCode();
      if (NetbiosFragmentOverlap != false) hash ^= NetbiosFragmentOverlap.GetHashCode();
      if (NetbiosFragmentOverlapConflict != false) hash ^= NetbiosFragmentOverlapConflict.GetHashCode();
      if (NetbiosFragmentMultipletails != false) hash ^= NetbiosFragmentMultipletails.GetHashCode();
      if (NetbiosFragmentToolongfragment != false) hash ^= NetbiosFragmentToolongfragment.GetHashCode();
      if (NetbiosFragmentError != 0L) hash ^= NetbiosFragmentError.GetHashCode();
      if (NetbiosFragmentCount != 0) hash ^= NetbiosFragmentCount.GetHashCode();
      if (NetbiosFragment != 0L) hash ^= NetbiosFragment.GetHashCode();
      if (NetbiosFragments != 0) hash ^= NetbiosFragments.GetHashCode();
      if (NetbiosReassembledLength != 0) hash ^= NetbiosReassembledLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetbiosCommand != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NetbiosCommand);
      }
      if (NetbiosHdrLen != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NetbiosHdrLen);
      }
      if (NetbiosDelimiter != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NetbiosDelimiter);
      }
      if (NetbiosXmitCorrl != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NetbiosXmitCorrl);
      }
      if (NetbiosRespCorrl != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NetbiosRespCorrl);
      }
      if (NetbiosCallNameType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NetbiosCallNameType);
      }
      if (NetbiosNbNameType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NetbiosNbNameType);
      }
      if (NetbiosNbName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetbiosNbName);
      }
      if (NetbiosVersion != false) {
        output.WriteRawTag(72);
        output.WriteBool(NetbiosVersion);
      }
      if (NetbiosNoReceiveFlags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NetbiosNoReceiveFlags);
      }
      if (NetbiosNoReceiveFlagsSendNoAck != false) {
        output.WriteRawTag(88);
        output.WriteBool(NetbiosNoReceiveFlagsSendNoAck);
      }
      if (NetbiosLargestFrame != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(NetbiosLargestFrame);
      }
      if (NetbiosStatusBufferLen != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(NetbiosStatusBufferLen);
      }
      if (NetbiosStatus != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(NetbiosStatus);
      }
      if (NetbiosNameType != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(NetbiosNameType);
      }
      if (NetbiosMaxDataRecvSize != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(NetbiosMaxDataRecvSize);
      }
      if (NetbiosTerminationIndicator != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(NetbiosTerminationIndicator);
      }
      if (NetbiosNumDataBytesAccepted != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(NetbiosNumDataBytesAccepted);
      }
      if (NetbiosLocalSession != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(NetbiosLocalSession);
      }
      if (NetbiosRemoteSession != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(NetbiosRemoteSession);
      }
      if (NetbiosFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(NetbiosFlags);
      }
      if (NetbiosFlagsSendNoAck != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(NetbiosFlagsSendNoAck);
      }
      if (NetbiosFlagsAck != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(NetbiosFlagsAck);
      }
      if (NetbiosFlagsAckWithData != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(NetbiosFlagsAckWithData);
      }
      if (NetbiosFlagsAckExpected != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(NetbiosFlagsAckExpected);
      }
      if (NetbiosFlagsRecvContReq != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(NetbiosFlagsRecvContReq);
      }
      if (NetbiosData2 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(NetbiosData2);
      }
      if (NetbiosData2Frame != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(NetbiosData2Frame);
      }
      if (NetbiosData2User != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(NetbiosData2User);
      }
      if (NetbiosData2Status != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(NetbiosData2Status);
      }
      if (NetbiosDatagramMac.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(NetbiosDatagramMac);
      }
      if (NetbiosDatagramBcastMac.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteBytes(NetbiosDatagramBcastMac);
      }
      if (NetbiosResyncIndicator != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(NetbiosResyncIndicator);
      }
      if (NetbiosStatusRequest != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(NetbiosStatusRequest);
      }
      if (NetbiosLocalSessionNo != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(NetbiosLocalSessionNo);
      }
      if (NetbiosStateOfName != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(NetbiosStateOfName);
      }
      if (NetbiosStatusResponse != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(NetbiosStatusResponse);
      }
      if (NetbiosFragmentOverlap != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(NetbiosFragmentOverlap);
      }
      if (NetbiosFragmentOverlapConflict != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(NetbiosFragmentOverlapConflict);
      }
      if (NetbiosFragmentMultipletails != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(NetbiosFragmentMultipletails);
      }
      if (NetbiosFragmentToolongfragment != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(NetbiosFragmentToolongfragment);
      }
      if (NetbiosFragmentError != 0L) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(NetbiosFragmentError);
      }
      if (NetbiosFragmentCount != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(NetbiosFragmentCount);
      }
      if (NetbiosFragment != 0L) {
        output.WriteRawTag(224, 2);
        output.WriteInt64(NetbiosFragment);
      }
      if (NetbiosFragments != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(NetbiosFragments);
      }
      if (NetbiosReassembledLength != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(NetbiosReassembledLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetbiosCommand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosCommand);
      }
      if (NetbiosHdrLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosHdrLen);
      }
      if (NetbiosDelimiter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosDelimiter);
      }
      if (NetbiosXmitCorrl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosXmitCorrl);
      }
      if (NetbiosRespCorrl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosRespCorrl);
      }
      if (NetbiosCallNameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosCallNameType);
      }
      if (NetbiosNbNameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosNbNameType);
      }
      if (NetbiosNbName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetbiosNbName);
      }
      if (NetbiosVersion != false) {
        size += 1 + 1;
      }
      if (NetbiosNoReceiveFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosNoReceiveFlags);
      }
      if (NetbiosNoReceiveFlagsSendNoAck != false) {
        size += 1 + 1;
      }
      if (NetbiosLargestFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosLargestFrame);
      }
      if (NetbiosStatusBufferLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosStatusBufferLen);
      }
      if (NetbiosStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosStatus);
      }
      if (NetbiosNameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosNameType);
      }
      if (NetbiosMaxDataRecvSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosMaxDataRecvSize);
      }
      if (NetbiosTerminationIndicator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosTerminationIndicator);
      }
      if (NetbiosNumDataBytesAccepted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosNumDataBytesAccepted);
      }
      if (NetbiosLocalSession != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosLocalSession);
      }
      if (NetbiosRemoteSession != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosRemoteSession);
      }
      if (NetbiosFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosFlags);
      }
      if (NetbiosFlagsSendNoAck != false) {
        size += 2 + 1;
      }
      if (NetbiosFlagsAck != false) {
        size += 2 + 1;
      }
      if (NetbiosFlagsAckWithData != false) {
        size += 2 + 1;
      }
      if (NetbiosFlagsAckExpected != false) {
        size += 2 + 1;
      }
      if (NetbiosFlagsRecvContReq != false) {
        size += 2 + 1;
      }
      if (NetbiosData2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosData2);
      }
      if (NetbiosData2Frame != false) {
        size += 2 + 1;
      }
      if (NetbiosData2User != false) {
        size += 2 + 1;
      }
      if (NetbiosData2Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosData2Status);
      }
      if (NetbiosDatagramMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(NetbiosDatagramMac);
      }
      if (NetbiosDatagramBcastMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(NetbiosDatagramBcastMac);
      }
      if (NetbiosResyncIndicator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosResyncIndicator);
      }
      if (NetbiosStatusRequest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosStatusRequest);
      }
      if (NetbiosLocalSessionNo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosLocalSessionNo);
      }
      if (NetbiosStateOfName != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosStateOfName);
      }
      if (NetbiosStatusResponse != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosStatusResponse);
      }
      if (NetbiosFragmentOverlap != false) {
        size += 2 + 1;
      }
      if (NetbiosFragmentOverlapConflict != false) {
        size += 2 + 1;
      }
      if (NetbiosFragmentMultipletails != false) {
        size += 2 + 1;
      }
      if (NetbiosFragmentToolongfragment != false) {
        size += 2 + 1;
      }
      if (NetbiosFragmentError != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetbiosFragmentError);
      }
      if (NetbiosFragmentCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosFragmentCount);
      }
      if (NetbiosFragment != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetbiosFragment);
      }
      if (NetbiosFragments != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NetbiosFragments);
      }
      if (NetbiosReassembledLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NetbiosReassembledLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Netbios other) {
      if (other == null) {
        return;
      }
      if (other.NetbiosCommand != 0) {
        NetbiosCommand = other.NetbiosCommand;
      }
      if (other.NetbiosHdrLen != 0) {
        NetbiosHdrLen = other.NetbiosHdrLen;
      }
      if (other.NetbiosDelimiter != 0) {
        NetbiosDelimiter = other.NetbiosDelimiter;
      }
      if (other.NetbiosXmitCorrl != 0) {
        NetbiosXmitCorrl = other.NetbiosXmitCorrl;
      }
      if (other.NetbiosRespCorrl != 0) {
        NetbiosRespCorrl = other.NetbiosRespCorrl;
      }
      if (other.NetbiosCallNameType != 0) {
        NetbiosCallNameType = other.NetbiosCallNameType;
      }
      if (other.NetbiosNbNameType != 0) {
        NetbiosNbNameType = other.NetbiosNbNameType;
      }
      if (other.NetbiosNbName.Length != 0) {
        NetbiosNbName = other.NetbiosNbName;
      }
      if (other.NetbiosVersion != false) {
        NetbiosVersion = other.NetbiosVersion;
      }
      if (other.NetbiosNoReceiveFlags != 0) {
        NetbiosNoReceiveFlags = other.NetbiosNoReceiveFlags;
      }
      if (other.NetbiosNoReceiveFlagsSendNoAck != false) {
        NetbiosNoReceiveFlagsSendNoAck = other.NetbiosNoReceiveFlagsSendNoAck;
      }
      if (other.NetbiosLargestFrame != 0) {
        NetbiosLargestFrame = other.NetbiosLargestFrame;
      }
      if (other.NetbiosStatusBufferLen != 0) {
        NetbiosStatusBufferLen = other.NetbiosStatusBufferLen;
      }
      if (other.NetbiosStatus != 0) {
        NetbiosStatus = other.NetbiosStatus;
      }
      if (other.NetbiosNameType != 0) {
        NetbiosNameType = other.NetbiosNameType;
      }
      if (other.NetbiosMaxDataRecvSize != 0) {
        NetbiosMaxDataRecvSize = other.NetbiosMaxDataRecvSize;
      }
      if (other.NetbiosTerminationIndicator != 0) {
        NetbiosTerminationIndicator = other.NetbiosTerminationIndicator;
      }
      if (other.NetbiosNumDataBytesAccepted != 0) {
        NetbiosNumDataBytesAccepted = other.NetbiosNumDataBytesAccepted;
      }
      if (other.NetbiosLocalSession != 0) {
        NetbiosLocalSession = other.NetbiosLocalSession;
      }
      if (other.NetbiosRemoteSession != 0) {
        NetbiosRemoteSession = other.NetbiosRemoteSession;
      }
      if (other.NetbiosFlags != 0) {
        NetbiosFlags = other.NetbiosFlags;
      }
      if (other.NetbiosFlagsSendNoAck != false) {
        NetbiosFlagsSendNoAck = other.NetbiosFlagsSendNoAck;
      }
      if (other.NetbiosFlagsAck != false) {
        NetbiosFlagsAck = other.NetbiosFlagsAck;
      }
      if (other.NetbiosFlagsAckWithData != false) {
        NetbiosFlagsAckWithData = other.NetbiosFlagsAckWithData;
      }
      if (other.NetbiosFlagsAckExpected != false) {
        NetbiosFlagsAckExpected = other.NetbiosFlagsAckExpected;
      }
      if (other.NetbiosFlagsRecvContReq != false) {
        NetbiosFlagsRecvContReq = other.NetbiosFlagsRecvContReq;
      }
      if (other.NetbiosData2 != 0) {
        NetbiosData2 = other.NetbiosData2;
      }
      if (other.NetbiosData2Frame != false) {
        NetbiosData2Frame = other.NetbiosData2Frame;
      }
      if (other.NetbiosData2User != false) {
        NetbiosData2User = other.NetbiosData2User;
      }
      if (other.NetbiosData2Status != 0) {
        NetbiosData2Status = other.NetbiosData2Status;
      }
      if (other.NetbiosDatagramMac.Length != 0) {
        NetbiosDatagramMac = other.NetbiosDatagramMac;
      }
      if (other.NetbiosDatagramBcastMac.Length != 0) {
        NetbiosDatagramBcastMac = other.NetbiosDatagramBcastMac;
      }
      if (other.NetbiosResyncIndicator != 0) {
        NetbiosResyncIndicator = other.NetbiosResyncIndicator;
      }
      if (other.NetbiosStatusRequest != 0) {
        NetbiosStatusRequest = other.NetbiosStatusRequest;
      }
      if (other.NetbiosLocalSessionNo != 0) {
        NetbiosLocalSessionNo = other.NetbiosLocalSessionNo;
      }
      if (other.NetbiosStateOfName != 0) {
        NetbiosStateOfName = other.NetbiosStateOfName;
      }
      if (other.NetbiosStatusResponse != 0) {
        NetbiosStatusResponse = other.NetbiosStatusResponse;
      }
      if (other.NetbiosFragmentOverlap != false) {
        NetbiosFragmentOverlap = other.NetbiosFragmentOverlap;
      }
      if (other.NetbiosFragmentOverlapConflict != false) {
        NetbiosFragmentOverlapConflict = other.NetbiosFragmentOverlapConflict;
      }
      if (other.NetbiosFragmentMultipletails != false) {
        NetbiosFragmentMultipletails = other.NetbiosFragmentMultipletails;
      }
      if (other.NetbiosFragmentToolongfragment != false) {
        NetbiosFragmentToolongfragment = other.NetbiosFragmentToolongfragment;
      }
      if (other.NetbiosFragmentError != 0L) {
        NetbiosFragmentError = other.NetbiosFragmentError;
      }
      if (other.NetbiosFragmentCount != 0) {
        NetbiosFragmentCount = other.NetbiosFragmentCount;
      }
      if (other.NetbiosFragment != 0L) {
        NetbiosFragment = other.NetbiosFragment;
      }
      if (other.NetbiosFragments != 0) {
        NetbiosFragments = other.NetbiosFragments;
      }
      if (other.NetbiosReassembledLength != 0) {
        NetbiosReassembledLength = other.NetbiosReassembledLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NetbiosCommand = input.ReadUInt32();
            break;
          }
          case 16: {
            NetbiosHdrLen = input.ReadUInt32();
            break;
          }
          case 24: {
            NetbiosDelimiter = input.ReadUInt32();
            break;
          }
          case 32: {
            NetbiosXmitCorrl = input.ReadUInt32();
            break;
          }
          case 40: {
            NetbiosRespCorrl = input.ReadUInt32();
            break;
          }
          case 48: {
            NetbiosCallNameType = input.ReadUInt32();
            break;
          }
          case 56: {
            NetbiosNbNameType = input.ReadUInt32();
            break;
          }
          case 66: {
            NetbiosNbName = input.ReadString();
            break;
          }
          case 72: {
            NetbiosVersion = input.ReadBool();
            break;
          }
          case 80: {
            NetbiosNoReceiveFlags = input.ReadUInt32();
            break;
          }
          case 88: {
            NetbiosNoReceiveFlagsSendNoAck = input.ReadBool();
            break;
          }
          case 96: {
            NetbiosLargestFrame = input.ReadUInt32();
            break;
          }
          case 104: {
            NetbiosStatusBufferLen = input.ReadUInt32();
            break;
          }
          case 112: {
            NetbiosStatus = input.ReadUInt32();
            break;
          }
          case 120: {
            NetbiosNameType = input.ReadUInt32();
            break;
          }
          case 128: {
            NetbiosMaxDataRecvSize = input.ReadUInt32();
            break;
          }
          case 136: {
            NetbiosTerminationIndicator = input.ReadUInt32();
            break;
          }
          case 144: {
            NetbiosNumDataBytesAccepted = input.ReadUInt32();
            break;
          }
          case 152: {
            NetbiosLocalSession = input.ReadUInt32();
            break;
          }
          case 160: {
            NetbiosRemoteSession = input.ReadUInt32();
            break;
          }
          case 168: {
            NetbiosFlags = input.ReadUInt32();
            break;
          }
          case 176: {
            NetbiosFlagsSendNoAck = input.ReadBool();
            break;
          }
          case 184: {
            NetbiosFlagsAck = input.ReadBool();
            break;
          }
          case 192: {
            NetbiosFlagsAckWithData = input.ReadBool();
            break;
          }
          case 200: {
            NetbiosFlagsAckExpected = input.ReadBool();
            break;
          }
          case 208: {
            NetbiosFlagsRecvContReq = input.ReadBool();
            break;
          }
          case 216: {
            NetbiosData2 = input.ReadUInt32();
            break;
          }
          case 224: {
            NetbiosData2Frame = input.ReadBool();
            break;
          }
          case 232: {
            NetbiosData2User = input.ReadBool();
            break;
          }
          case 240: {
            NetbiosData2Status = input.ReadUInt32();
            break;
          }
          case 250: {
            NetbiosDatagramMac = input.ReadBytes();
            break;
          }
          case 258: {
            NetbiosDatagramBcastMac = input.ReadBytes();
            break;
          }
          case 264: {
            NetbiosResyncIndicator = input.ReadUInt32();
            break;
          }
          case 272: {
            NetbiosStatusRequest = input.ReadUInt32();
            break;
          }
          case 280: {
            NetbiosLocalSessionNo = input.ReadUInt32();
            break;
          }
          case 288: {
            NetbiosStateOfName = input.ReadUInt32();
            break;
          }
          case 296: {
            NetbiosStatusResponse = input.ReadUInt32();
            break;
          }
          case 304: {
            NetbiosFragmentOverlap = input.ReadBool();
            break;
          }
          case 312: {
            NetbiosFragmentOverlapConflict = input.ReadBool();
            break;
          }
          case 320: {
            NetbiosFragmentMultipletails = input.ReadBool();
            break;
          }
          case 328: {
            NetbiosFragmentToolongfragment = input.ReadBool();
            break;
          }
          case 336: {
            NetbiosFragmentError = input.ReadInt64();
            break;
          }
          case 344: {
            NetbiosFragmentCount = input.ReadUInt32();
            break;
          }
          case 352: {
            NetbiosFragment = input.ReadInt64();
            break;
          }
          case 360: {
            NetbiosFragments = input.ReadInt32();
            break;
          }
          case 368: {
            NetbiosReassembledLength = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
