// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-arp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-arp.proto</summary>
  public static partial class PacketArpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-arp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketArpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtYXJwLnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSKqCQoDQXJw",
            "EhEKCUFycEh3VHlwZRgBIAEoDRIUCgxBcnBQcm90b1R5cGUYAiABKA0SEQoJ",
            "QXJwSHdTaXplGAMgASgNEhMKC0FycFNyY0h0eXBlGAQgASgIEhIKCkFycFNy",
            "Y0hsZW4YBSABKA0SEwoLQXJwU3JjU3R5cGUYBiABKAgSEgoKQXJwU3JjU2xl",
            "bhgHIAEoDRIUCgxBcnBQcm90b1NpemUYCCABKA0SEQoJQXJwT3Bjb2RlGAkg",
            "ASgNEhcKD0FycElzZ3JhdHVpdG91cxgKIAEoCBIRCglBcnBTcmNQbG4YCyAB",
            "KA0SEwoLQXJwRHN0SHR5cGUYDCABKAgSEgoKQXJwRHN0SGxlbhgNIAEoDRIT",
            "CgtBcnBEc3RTdHlwZRgOIAEoCBISCgpBcnBEc3RTbGVuGA8gASgNEhEKCUFy",
            "cERzdFBsbhgQIAEoDRIQCghBcnBTcmNIdxgRIAEoDBITCgtBcnBTcmNId01h",
            "YxgSIAEoDBIUCgxBcnBTcmNId0F4MjUYEyABKAwSGAoQQXJwU3JjQXRtTnVt",
            "RTE2NBgUIAEoCRIYChBBcnBTcmNBdG1OdW1Oc2FwGBUgASgMEhgKEEFycFNy",
            "Y0F0bVN1YmFkZHIYFiABKAwSEwoLQXJwU3JjUHJvdG8YFyABKAwSFwoPQXJw",
            "U3JjUHJvdG9JcHY0GBggASgMEhAKCEFycERzdEh3GBkgASgMEhMKC0FycERz",
            "dEh3TWFjGBogASgMEhQKDEFycERzdEh3QXgyNRgbIAEoDBIYChBBcnBEc3RB",
            "dG1OdW1FMTY0GBwgASgJEhgKEEFycERzdEF0bU51bU5zYXAYHSABKAwSGAoQ",
            "QXJwRHN0QXRtU3ViYWRkchgeIAEoDBITCgtBcnBEc3RQcm90bxgfIAEoDBIX",
            "Cg9BcnBEc3RQcm90b0lwdjQYICABKAwSHgoWQXJwRHN0RHJhcnBFcnJvclN0",
            "YXR1cxghIAEoDRIgChhBcnBEdXBsaWNhdGVBZGRyZXNzRnJhbWUYIiABKAMS",
            "LAokQXJwU2Vjb25kc1NpbmNlRHVwbGljYXRlQWRkcmVzc0ZyYW1lGCMgASgN",
            "EiAKGEFycFNyY0F0bURhdGFDb3VudHJ5Q29kZRgkIAEoDRIlCh1BcnBTcmNB",
            "dG1EYXRhQ291bnRyeUNvZGVHcm91cBglIAEoDRIdChVBcnBTcmNBdG1IaWdo",
            "T3JkZXJEc3AYJiABKAwSJAocQXJwU3JjQXRtRW5kU3lzdGVtSWRlbnRpZmll",
            "chgnIAEoDBIZChFBcnBTcmNBdG1TZWxlY3RvchgoIAEoDRIsCiRBcnBTcmNB",
            "dG1JbnRlcm5hdGlvbmFsQ29kZURlc2lnbmF0b3IYKSABKA0SMQopQXJwU3Jj",
            "QXRtSW50ZXJuYXRpb25hbENvZGVEZXNpZ25hdG9yR3JvdXAYKiABKA0SGQoR",
            "QXJwU3JjQXRtRTE2NElzZG4YKyABKAwSHgoWQXJwU3JjQXRtRTE2NElzZG5H",
            "cm91cBgsIAEoDBIeChZBcnBTcmNBdG1SZXN0T2ZBZGRyZXNzGC0gASgMEhQK",
            "DEFycFNyY0F0bUFmaRguIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Arp), global::Ndx.Decoders.Core.Arp.Parser, new[]{ "ArpHwType", "ArpProtoType", "ArpHwSize", "ArpSrcHtype", "ArpSrcHlen", "ArpSrcStype", "ArpSrcSlen", "ArpProtoSize", "ArpOpcode", "ArpIsgratuitous", "ArpSrcPln", "ArpDstHtype", "ArpDstHlen", "ArpDstStype", "ArpDstSlen", "ArpDstPln", "ArpSrcHw", "ArpSrcHwMac", "ArpSrcHwAx25", "ArpSrcAtmNumE164", "ArpSrcAtmNumNsap", "ArpSrcAtmSubaddr", "ArpSrcProto", "ArpSrcProtoIpv4", "ArpDstHw", "ArpDstHwMac", "ArpDstHwAx25", "ArpDstAtmNumE164", "ArpDstAtmNumNsap", "ArpDstAtmSubaddr", "ArpDstProto", "ArpDstProtoIpv4", "ArpDstDrarpErrorStatus", "ArpDuplicateAddressFrame", "ArpSecondsSinceDuplicateAddressFrame", "ArpSrcAtmDataCountryCode", "ArpSrcAtmDataCountryCodeGroup", "ArpSrcAtmHighOrderDsp", "ArpSrcAtmEndSystemIdentifier", "ArpSrcAtmSelector", "ArpSrcAtmInternationalCodeDesignator", "ArpSrcAtmInternationalCodeDesignatorGroup", "ArpSrcAtmE164Isdn", "ArpSrcAtmE164IsdnGroup", "ArpSrcAtmRestOfAddress", "ArpSrcAtmAfi" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Arp : pb::IMessage<Arp> {
    private static readonly pb::MessageParser<Arp> _parser = new pb::MessageParser<Arp>(() => new Arp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Arp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketArpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Arp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Arp(Arp other) : this() {
      arpHwType_ = other.arpHwType_;
      arpProtoType_ = other.arpProtoType_;
      arpHwSize_ = other.arpHwSize_;
      arpSrcHtype_ = other.arpSrcHtype_;
      arpSrcHlen_ = other.arpSrcHlen_;
      arpSrcStype_ = other.arpSrcStype_;
      arpSrcSlen_ = other.arpSrcSlen_;
      arpProtoSize_ = other.arpProtoSize_;
      arpOpcode_ = other.arpOpcode_;
      arpIsgratuitous_ = other.arpIsgratuitous_;
      arpSrcPln_ = other.arpSrcPln_;
      arpDstHtype_ = other.arpDstHtype_;
      arpDstHlen_ = other.arpDstHlen_;
      arpDstStype_ = other.arpDstStype_;
      arpDstSlen_ = other.arpDstSlen_;
      arpDstPln_ = other.arpDstPln_;
      arpSrcHw_ = other.arpSrcHw_;
      arpSrcHwMac_ = other.arpSrcHwMac_;
      arpSrcHwAx25_ = other.arpSrcHwAx25_;
      arpSrcAtmNumE164_ = other.arpSrcAtmNumE164_;
      arpSrcAtmNumNsap_ = other.arpSrcAtmNumNsap_;
      arpSrcAtmSubaddr_ = other.arpSrcAtmSubaddr_;
      arpSrcProto_ = other.arpSrcProto_;
      arpSrcProtoIpv4_ = other.arpSrcProtoIpv4_;
      arpDstHw_ = other.arpDstHw_;
      arpDstHwMac_ = other.arpDstHwMac_;
      arpDstHwAx25_ = other.arpDstHwAx25_;
      arpDstAtmNumE164_ = other.arpDstAtmNumE164_;
      arpDstAtmNumNsap_ = other.arpDstAtmNumNsap_;
      arpDstAtmSubaddr_ = other.arpDstAtmSubaddr_;
      arpDstProto_ = other.arpDstProto_;
      arpDstProtoIpv4_ = other.arpDstProtoIpv4_;
      arpDstDrarpErrorStatus_ = other.arpDstDrarpErrorStatus_;
      arpDuplicateAddressFrame_ = other.arpDuplicateAddressFrame_;
      arpSecondsSinceDuplicateAddressFrame_ = other.arpSecondsSinceDuplicateAddressFrame_;
      arpSrcAtmDataCountryCode_ = other.arpSrcAtmDataCountryCode_;
      arpSrcAtmDataCountryCodeGroup_ = other.arpSrcAtmDataCountryCodeGroup_;
      arpSrcAtmHighOrderDsp_ = other.arpSrcAtmHighOrderDsp_;
      arpSrcAtmEndSystemIdentifier_ = other.arpSrcAtmEndSystemIdentifier_;
      arpSrcAtmSelector_ = other.arpSrcAtmSelector_;
      arpSrcAtmInternationalCodeDesignator_ = other.arpSrcAtmInternationalCodeDesignator_;
      arpSrcAtmInternationalCodeDesignatorGroup_ = other.arpSrcAtmInternationalCodeDesignatorGroup_;
      arpSrcAtmE164Isdn_ = other.arpSrcAtmE164Isdn_;
      arpSrcAtmE164IsdnGroup_ = other.arpSrcAtmE164IsdnGroup_;
      arpSrcAtmRestOfAddress_ = other.arpSrcAtmRestOfAddress_;
      arpSrcAtmAfi_ = other.arpSrcAtmAfi_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Arp Clone() {
      return new Arp(this);
    }

    /// <summary>Field number for the "ArpHwType" field.</summary>
    public const int ArpHwTypeFieldNumber = 1;
    private uint arpHwType_;
    /// <summary>
    /// Hardware type ('arp_arp_hw_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpHwType {
      get { return arpHwType_; }
      set {
        arpHwType_ = value;
      }
    }

    /// <summary>Field number for the "ArpProtoType" field.</summary>
    public const int ArpProtoTypeFieldNumber = 2;
    private uint arpProtoType_;
    /// <summary>
    /// Protocol type ('arp_arp_proto_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpProtoType {
      get { return arpProtoType_; }
      set {
        arpProtoType_ = value;
      }
    }

    /// <summary>Field number for the "ArpHwSize" field.</summary>
    public const int ArpHwSizeFieldNumber = 3;
    private uint arpHwSize_;
    /// <summary>
    /// Hardware size ('arp_arp_hw_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpHwSize {
      get { return arpHwSize_; }
      set {
        arpHwSize_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcHtype" field.</summary>
    public const int ArpSrcHtypeFieldNumber = 4;
    private bool arpSrcHtype_;
    /// <summary>
    /// Sender ATM number type ('arp_arp_src_htype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArpSrcHtype {
      get { return arpSrcHtype_; }
      set {
        arpSrcHtype_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcHlen" field.</summary>
    public const int ArpSrcHlenFieldNumber = 5;
    private uint arpSrcHlen_;
    /// <summary>
    /// Sender ATM number length ('arp_arp_src_hlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcHlen {
      get { return arpSrcHlen_; }
      set {
        arpSrcHlen_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcStype" field.</summary>
    public const int ArpSrcStypeFieldNumber = 6;
    private bool arpSrcStype_;
    /// <summary>
    /// Sender ATM subaddress type ('arp_arp_src_stype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArpSrcStype {
      get { return arpSrcStype_; }
      set {
        arpSrcStype_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcSlen" field.</summary>
    public const int ArpSrcSlenFieldNumber = 7;
    private uint arpSrcSlen_;
    /// <summary>
    /// Sender ATM subaddress length ('arp_arp_src_slen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcSlen {
      get { return arpSrcSlen_; }
      set {
        arpSrcSlen_ = value;
      }
    }

    /// <summary>Field number for the "ArpProtoSize" field.</summary>
    public const int ArpProtoSizeFieldNumber = 8;
    private uint arpProtoSize_;
    /// <summary>
    /// Protocol size ('arp_arp_proto_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpProtoSize {
      get { return arpProtoSize_; }
      set {
        arpProtoSize_ = value;
      }
    }

    /// <summary>Field number for the "ArpOpcode" field.</summary>
    public const int ArpOpcodeFieldNumber = 9;
    private uint arpOpcode_;
    /// <summary>
    /// Opcode ('arp_arp_opcode')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpOpcode {
      get { return arpOpcode_; }
      set {
        arpOpcode_ = value;
      }
    }

    /// <summary>Field number for the "ArpIsgratuitous" field.</summary>
    public const int ArpIsgratuitousFieldNumber = 10;
    private bool arpIsgratuitous_;
    /// <summary>
    /// Is gratuitous ('arp_arp_isgratuitous')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArpIsgratuitous {
      get { return arpIsgratuitous_; }
      set {
        arpIsgratuitous_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcPln" field.</summary>
    public const int ArpSrcPlnFieldNumber = 11;
    private uint arpSrcPln_;
    /// <summary>
    /// Sender protocol size ('arp_arp_src_pln')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcPln {
      get { return arpSrcPln_; }
      set {
        arpSrcPln_ = value;
      }
    }

    /// <summary>Field number for the "ArpDstHtype" field.</summary>
    public const int ArpDstHtypeFieldNumber = 12;
    private bool arpDstHtype_;
    /// <summary>
    /// Target ATM number type ('arp_arp_dst_htype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArpDstHtype {
      get { return arpDstHtype_; }
      set {
        arpDstHtype_ = value;
      }
    }

    /// <summary>Field number for the "ArpDstHlen" field.</summary>
    public const int ArpDstHlenFieldNumber = 13;
    private uint arpDstHlen_;
    /// <summary>
    /// Target ATM number length ('arp_arp_dst_hlen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpDstHlen {
      get { return arpDstHlen_; }
      set {
        arpDstHlen_ = value;
      }
    }

    /// <summary>Field number for the "ArpDstStype" field.</summary>
    public const int ArpDstStypeFieldNumber = 14;
    private bool arpDstStype_;
    /// <summary>
    /// Target ATM subaddress type ('arp_arp_dst_stype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArpDstStype {
      get { return arpDstStype_; }
      set {
        arpDstStype_ = value;
      }
    }

    /// <summary>Field number for the "ArpDstSlen" field.</summary>
    public const int ArpDstSlenFieldNumber = 15;
    private uint arpDstSlen_;
    /// <summary>
    /// Target ATM subaddress length ('arp_arp_dst_slen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpDstSlen {
      get { return arpDstSlen_; }
      set {
        arpDstSlen_ = value;
      }
    }

    /// <summary>Field number for the "ArpDstPln" field.</summary>
    public const int ArpDstPlnFieldNumber = 16;
    private uint arpDstPln_;
    /// <summary>
    /// Target protocol size ('arp_arp_dst_pln')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpDstPln {
      get { return arpDstPln_; }
      set {
        arpDstPln_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcHw" field.</summary>
    public const int ArpSrcHwFieldNumber = 17;
    private pb::ByteString arpSrcHw_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender hardware address ('arp_arp_src_hw')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcHw {
      get { return arpSrcHw_; }
      set {
        arpSrcHw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcHwMac" field.</summary>
    public const int ArpSrcHwMacFieldNumber = 18;
    private pb::ByteString arpSrcHwMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender MAC address ('arp_arp_src_hw_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcHwMac {
      get { return arpSrcHwMac_; }
      set {
        arpSrcHwMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcHwAx25" field.</summary>
    public const int ArpSrcHwAx25FieldNumber = 19;
    private pb::ByteString arpSrcHwAx25_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender AX.25 address ('arp_arp_src_hw_ax25')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcHwAx25 {
      get { return arpSrcHwAx25_; }
      set {
        arpSrcHwAx25_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmNumE164" field.</summary>
    public const int ArpSrcAtmNumE164FieldNumber = 20;
    private string arpSrcAtmNumE164_ = "";
    /// <summary>
    /// Sender ATM number (E.164) ('arp_arp_src_atm_num_e164')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArpSrcAtmNumE164 {
      get { return arpSrcAtmNumE164_; }
      set {
        arpSrcAtmNumE164_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmNumNsap" field.</summary>
    public const int ArpSrcAtmNumNsapFieldNumber = 21;
    private pb::ByteString arpSrcAtmNumNsap_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender ATM number (NSAP) ('arp_arp_src_atm_num_nsap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmNumNsap {
      get { return arpSrcAtmNumNsap_; }
      set {
        arpSrcAtmNumNsap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmSubaddr" field.</summary>
    public const int ArpSrcAtmSubaddrFieldNumber = 22;
    private pb::ByteString arpSrcAtmSubaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender ATM subaddress ('arp_arp_src_atm_subaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmSubaddr {
      get { return arpSrcAtmSubaddr_; }
      set {
        arpSrcAtmSubaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcProto" field.</summary>
    public const int ArpSrcProtoFieldNumber = 23;
    private pb::ByteString arpSrcProto_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender protocol address ('arp_arp_src_proto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcProto {
      get { return arpSrcProto_; }
      set {
        arpSrcProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcProtoIpv4" field.</summary>
    public const int ArpSrcProtoIpv4FieldNumber = 24;
    private pb::ByteString arpSrcProtoIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender IP address ('arp_arp_src_proto_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcProtoIpv4 {
      get { return arpSrcProtoIpv4_; }
      set {
        arpSrcProtoIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstHw" field.</summary>
    public const int ArpDstHwFieldNumber = 25;
    private pb::ByteString arpDstHw_ = pb::ByteString.Empty;
    /// <summary>
    /// Target hardware address ('arp_arp_dst_hw')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstHw {
      get { return arpDstHw_; }
      set {
        arpDstHw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstHwMac" field.</summary>
    public const int ArpDstHwMacFieldNumber = 26;
    private pb::ByteString arpDstHwMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Target MAC address ('arp_arp_dst_hw_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstHwMac {
      get { return arpDstHwMac_; }
      set {
        arpDstHwMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstHwAx25" field.</summary>
    public const int ArpDstHwAx25FieldNumber = 27;
    private pb::ByteString arpDstHwAx25_ = pb::ByteString.Empty;
    /// <summary>
    /// Target AX.25 address ('arp_arp_dst_hw_ax25')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstHwAx25 {
      get { return arpDstHwAx25_; }
      set {
        arpDstHwAx25_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstAtmNumE164" field.</summary>
    public const int ArpDstAtmNumE164FieldNumber = 28;
    private string arpDstAtmNumE164_ = "";
    /// <summary>
    /// Target ATM number (E.164) ('arp_arp_dst_atm_num_e164')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArpDstAtmNumE164 {
      get { return arpDstAtmNumE164_; }
      set {
        arpDstAtmNumE164_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstAtmNumNsap" field.</summary>
    public const int ArpDstAtmNumNsapFieldNumber = 29;
    private pb::ByteString arpDstAtmNumNsap_ = pb::ByteString.Empty;
    /// <summary>
    /// Target ATM number (NSAP) ('arp_arp_dst_atm_num_nsap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstAtmNumNsap {
      get { return arpDstAtmNumNsap_; }
      set {
        arpDstAtmNumNsap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstAtmSubaddr" field.</summary>
    public const int ArpDstAtmSubaddrFieldNumber = 30;
    private pb::ByteString arpDstAtmSubaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Target ATM subaddress ('arp_arp_dst_atm_subaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstAtmSubaddr {
      get { return arpDstAtmSubaddr_; }
      set {
        arpDstAtmSubaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstProto" field.</summary>
    public const int ArpDstProtoFieldNumber = 31;
    private pb::ByteString arpDstProto_ = pb::ByteString.Empty;
    /// <summary>
    /// Target protocol address ('arp_arp_dst_proto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstProto {
      get { return arpDstProto_; }
      set {
        arpDstProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstProtoIpv4" field.</summary>
    public const int ArpDstProtoIpv4FieldNumber = 32;
    private pb::ByteString arpDstProtoIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Target IP address ('arp_arp_dst_proto_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpDstProtoIpv4 {
      get { return arpDstProtoIpv4_; }
      set {
        arpDstProtoIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpDstDrarpErrorStatus" field.</summary>
    public const int ArpDstDrarpErrorStatusFieldNumber = 33;
    private uint arpDstDrarpErrorStatus_;
    /// <summary>
    /// DRARP error status ('arp_arp_dst_drarp_error_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpDstDrarpErrorStatus {
      get { return arpDstDrarpErrorStatus_; }
      set {
        arpDstDrarpErrorStatus_ = value;
      }
    }

    /// <summary>Field number for the "ArpDuplicateAddressFrame" field.</summary>
    public const int ArpDuplicateAddressFrameFieldNumber = 34;
    private long arpDuplicateAddressFrame_;
    /// <summary>
    /// Frame showing earlier use of IP address ('arp_arp_duplicate-address-frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ArpDuplicateAddressFrame {
      get { return arpDuplicateAddressFrame_; }
      set {
        arpDuplicateAddressFrame_ = value;
      }
    }

    /// <summary>Field number for the "ArpSecondsSinceDuplicateAddressFrame" field.</summary>
    public const int ArpSecondsSinceDuplicateAddressFrameFieldNumber = 35;
    private uint arpSecondsSinceDuplicateAddressFrame_;
    /// <summary>
    /// Seconds since earlier frame seen ('arp_arp_seconds-since-duplicate-address-frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSecondsSinceDuplicateAddressFrame {
      get { return arpSecondsSinceDuplicateAddressFrame_; }
      set {
        arpSecondsSinceDuplicateAddressFrame_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmDataCountryCode" field.</summary>
    public const int ArpSrcAtmDataCountryCodeFieldNumber = 36;
    private uint arpSrcAtmDataCountryCode_;
    /// <summary>
    /// Data Country Code ('arp_arp_src_atm_data_country_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmDataCountryCode {
      get { return arpSrcAtmDataCountryCode_; }
      set {
        arpSrcAtmDataCountryCode_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmDataCountryCodeGroup" field.</summary>
    public const int ArpSrcAtmDataCountryCodeGroupFieldNumber = 37;
    private uint arpSrcAtmDataCountryCodeGroup_;
    /// <summary>
    /// Data Country Code (group) ('arp_arp_src_atm_data_country_code_group')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmDataCountryCodeGroup {
      get { return arpSrcAtmDataCountryCodeGroup_; }
      set {
        arpSrcAtmDataCountryCodeGroup_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmHighOrderDsp" field.</summary>
    public const int ArpSrcAtmHighOrderDspFieldNumber = 38;
    private pb::ByteString arpSrcAtmHighOrderDsp_ = pb::ByteString.Empty;
    /// <summary>
    /// High Order DSP ('arp_arp_src_atm_high_order_dsp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmHighOrderDsp {
      get { return arpSrcAtmHighOrderDsp_; }
      set {
        arpSrcAtmHighOrderDsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmEndSystemIdentifier" field.</summary>
    public const int ArpSrcAtmEndSystemIdentifierFieldNumber = 39;
    private pb::ByteString arpSrcAtmEndSystemIdentifier_ = pb::ByteString.Empty;
    /// <summary>
    /// End System Identifier ('arp_arp_src_atm_end_system_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmEndSystemIdentifier {
      get { return arpSrcAtmEndSystemIdentifier_; }
      set {
        arpSrcAtmEndSystemIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmSelector" field.</summary>
    public const int ArpSrcAtmSelectorFieldNumber = 40;
    private uint arpSrcAtmSelector_;
    /// <summary>
    /// Selector ('arp_arp_src_atm_selector')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmSelector {
      get { return arpSrcAtmSelector_; }
      set {
        arpSrcAtmSelector_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmInternationalCodeDesignator" field.</summary>
    public const int ArpSrcAtmInternationalCodeDesignatorFieldNumber = 41;
    private uint arpSrcAtmInternationalCodeDesignator_;
    /// <summary>
    /// International Code Designator ('arp_arp_src_atm_international_code_designator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmInternationalCodeDesignator {
      get { return arpSrcAtmInternationalCodeDesignator_; }
      set {
        arpSrcAtmInternationalCodeDesignator_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmInternationalCodeDesignatorGroup" field.</summary>
    public const int ArpSrcAtmInternationalCodeDesignatorGroupFieldNumber = 42;
    private uint arpSrcAtmInternationalCodeDesignatorGroup_;
    /// <summary>
    /// International Code Designator (group) ('arp_arp_src_atm_international_code_designator_group')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmInternationalCodeDesignatorGroup {
      get { return arpSrcAtmInternationalCodeDesignatorGroup_; }
      set {
        arpSrcAtmInternationalCodeDesignatorGroup_ = value;
      }
    }

    /// <summary>Field number for the "ArpSrcAtmE164Isdn" field.</summary>
    public const int ArpSrcAtmE164IsdnFieldNumber = 43;
    private pb::ByteString arpSrcAtmE164Isdn_ = pb::ByteString.Empty;
    /// <summary>
    /// E.164 ISDN ('arp_arp_src_atm_e_164_isdn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmE164Isdn {
      get { return arpSrcAtmE164Isdn_; }
      set {
        arpSrcAtmE164Isdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmE164IsdnGroup" field.</summary>
    public const int ArpSrcAtmE164IsdnGroupFieldNumber = 44;
    private pb::ByteString arpSrcAtmE164IsdnGroup_ = pb::ByteString.Empty;
    /// <summary>
    /// E.164 ISDN ('arp_arp_src_atm_e_164_isdn_group')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmE164IsdnGroup {
      get { return arpSrcAtmE164IsdnGroup_; }
      set {
        arpSrcAtmE164IsdnGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmRestOfAddress" field.</summary>
    public const int ArpSrcAtmRestOfAddressFieldNumber = 45;
    private pb::ByteString arpSrcAtmRestOfAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Rest of address ('arp_arp_src_atm_rest_of_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ArpSrcAtmRestOfAddress {
      get { return arpSrcAtmRestOfAddress_; }
      set {
        arpSrcAtmRestOfAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ArpSrcAtmAfi" field.</summary>
    public const int ArpSrcAtmAfiFieldNumber = 46;
    private uint arpSrcAtmAfi_;
    /// <summary>
    /// AFI ('arp_arp_src_atm_afi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArpSrcAtmAfi {
      get { return arpSrcAtmAfi_; }
      set {
        arpSrcAtmAfi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Arp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Arp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArpHwType != other.ArpHwType) return false;
      if (ArpProtoType != other.ArpProtoType) return false;
      if (ArpHwSize != other.ArpHwSize) return false;
      if (ArpSrcHtype != other.ArpSrcHtype) return false;
      if (ArpSrcHlen != other.ArpSrcHlen) return false;
      if (ArpSrcStype != other.ArpSrcStype) return false;
      if (ArpSrcSlen != other.ArpSrcSlen) return false;
      if (ArpProtoSize != other.ArpProtoSize) return false;
      if (ArpOpcode != other.ArpOpcode) return false;
      if (ArpIsgratuitous != other.ArpIsgratuitous) return false;
      if (ArpSrcPln != other.ArpSrcPln) return false;
      if (ArpDstHtype != other.ArpDstHtype) return false;
      if (ArpDstHlen != other.ArpDstHlen) return false;
      if (ArpDstStype != other.ArpDstStype) return false;
      if (ArpDstSlen != other.ArpDstSlen) return false;
      if (ArpDstPln != other.ArpDstPln) return false;
      if (ArpSrcHw != other.ArpSrcHw) return false;
      if (ArpSrcHwMac != other.ArpSrcHwMac) return false;
      if (ArpSrcHwAx25 != other.ArpSrcHwAx25) return false;
      if (ArpSrcAtmNumE164 != other.ArpSrcAtmNumE164) return false;
      if (ArpSrcAtmNumNsap != other.ArpSrcAtmNumNsap) return false;
      if (ArpSrcAtmSubaddr != other.ArpSrcAtmSubaddr) return false;
      if (ArpSrcProto != other.ArpSrcProto) return false;
      if (ArpSrcProtoIpv4 != other.ArpSrcProtoIpv4) return false;
      if (ArpDstHw != other.ArpDstHw) return false;
      if (ArpDstHwMac != other.ArpDstHwMac) return false;
      if (ArpDstHwAx25 != other.ArpDstHwAx25) return false;
      if (ArpDstAtmNumE164 != other.ArpDstAtmNumE164) return false;
      if (ArpDstAtmNumNsap != other.ArpDstAtmNumNsap) return false;
      if (ArpDstAtmSubaddr != other.ArpDstAtmSubaddr) return false;
      if (ArpDstProto != other.ArpDstProto) return false;
      if (ArpDstProtoIpv4 != other.ArpDstProtoIpv4) return false;
      if (ArpDstDrarpErrorStatus != other.ArpDstDrarpErrorStatus) return false;
      if (ArpDuplicateAddressFrame != other.ArpDuplicateAddressFrame) return false;
      if (ArpSecondsSinceDuplicateAddressFrame != other.ArpSecondsSinceDuplicateAddressFrame) return false;
      if (ArpSrcAtmDataCountryCode != other.ArpSrcAtmDataCountryCode) return false;
      if (ArpSrcAtmDataCountryCodeGroup != other.ArpSrcAtmDataCountryCodeGroup) return false;
      if (ArpSrcAtmHighOrderDsp != other.ArpSrcAtmHighOrderDsp) return false;
      if (ArpSrcAtmEndSystemIdentifier != other.ArpSrcAtmEndSystemIdentifier) return false;
      if (ArpSrcAtmSelector != other.ArpSrcAtmSelector) return false;
      if (ArpSrcAtmInternationalCodeDesignator != other.ArpSrcAtmInternationalCodeDesignator) return false;
      if (ArpSrcAtmInternationalCodeDesignatorGroup != other.ArpSrcAtmInternationalCodeDesignatorGroup) return false;
      if (ArpSrcAtmE164Isdn != other.ArpSrcAtmE164Isdn) return false;
      if (ArpSrcAtmE164IsdnGroup != other.ArpSrcAtmE164IsdnGroup) return false;
      if (ArpSrcAtmRestOfAddress != other.ArpSrcAtmRestOfAddress) return false;
      if (ArpSrcAtmAfi != other.ArpSrcAtmAfi) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArpHwType != 0) hash ^= ArpHwType.GetHashCode();
      if (ArpProtoType != 0) hash ^= ArpProtoType.GetHashCode();
      if (ArpHwSize != 0) hash ^= ArpHwSize.GetHashCode();
      if (ArpSrcHtype != false) hash ^= ArpSrcHtype.GetHashCode();
      if (ArpSrcHlen != 0) hash ^= ArpSrcHlen.GetHashCode();
      if (ArpSrcStype != false) hash ^= ArpSrcStype.GetHashCode();
      if (ArpSrcSlen != 0) hash ^= ArpSrcSlen.GetHashCode();
      if (ArpProtoSize != 0) hash ^= ArpProtoSize.GetHashCode();
      if (ArpOpcode != 0) hash ^= ArpOpcode.GetHashCode();
      if (ArpIsgratuitous != false) hash ^= ArpIsgratuitous.GetHashCode();
      if (ArpSrcPln != 0) hash ^= ArpSrcPln.GetHashCode();
      if (ArpDstHtype != false) hash ^= ArpDstHtype.GetHashCode();
      if (ArpDstHlen != 0) hash ^= ArpDstHlen.GetHashCode();
      if (ArpDstStype != false) hash ^= ArpDstStype.GetHashCode();
      if (ArpDstSlen != 0) hash ^= ArpDstSlen.GetHashCode();
      if (ArpDstPln != 0) hash ^= ArpDstPln.GetHashCode();
      if (ArpSrcHw.Length != 0) hash ^= ArpSrcHw.GetHashCode();
      if (ArpSrcHwMac.Length != 0) hash ^= ArpSrcHwMac.GetHashCode();
      if (ArpSrcHwAx25.Length != 0) hash ^= ArpSrcHwAx25.GetHashCode();
      if (ArpSrcAtmNumE164.Length != 0) hash ^= ArpSrcAtmNumE164.GetHashCode();
      if (ArpSrcAtmNumNsap.Length != 0) hash ^= ArpSrcAtmNumNsap.GetHashCode();
      if (ArpSrcAtmSubaddr.Length != 0) hash ^= ArpSrcAtmSubaddr.GetHashCode();
      if (ArpSrcProto.Length != 0) hash ^= ArpSrcProto.GetHashCode();
      if (ArpSrcProtoIpv4.Length != 0) hash ^= ArpSrcProtoIpv4.GetHashCode();
      if (ArpDstHw.Length != 0) hash ^= ArpDstHw.GetHashCode();
      if (ArpDstHwMac.Length != 0) hash ^= ArpDstHwMac.GetHashCode();
      if (ArpDstHwAx25.Length != 0) hash ^= ArpDstHwAx25.GetHashCode();
      if (ArpDstAtmNumE164.Length != 0) hash ^= ArpDstAtmNumE164.GetHashCode();
      if (ArpDstAtmNumNsap.Length != 0) hash ^= ArpDstAtmNumNsap.GetHashCode();
      if (ArpDstAtmSubaddr.Length != 0) hash ^= ArpDstAtmSubaddr.GetHashCode();
      if (ArpDstProto.Length != 0) hash ^= ArpDstProto.GetHashCode();
      if (ArpDstProtoIpv4.Length != 0) hash ^= ArpDstProtoIpv4.GetHashCode();
      if (ArpDstDrarpErrorStatus != 0) hash ^= ArpDstDrarpErrorStatus.GetHashCode();
      if (ArpDuplicateAddressFrame != 0L) hash ^= ArpDuplicateAddressFrame.GetHashCode();
      if (ArpSecondsSinceDuplicateAddressFrame != 0) hash ^= ArpSecondsSinceDuplicateAddressFrame.GetHashCode();
      if (ArpSrcAtmDataCountryCode != 0) hash ^= ArpSrcAtmDataCountryCode.GetHashCode();
      if (ArpSrcAtmDataCountryCodeGroup != 0) hash ^= ArpSrcAtmDataCountryCodeGroup.GetHashCode();
      if (ArpSrcAtmHighOrderDsp.Length != 0) hash ^= ArpSrcAtmHighOrderDsp.GetHashCode();
      if (ArpSrcAtmEndSystemIdentifier.Length != 0) hash ^= ArpSrcAtmEndSystemIdentifier.GetHashCode();
      if (ArpSrcAtmSelector != 0) hash ^= ArpSrcAtmSelector.GetHashCode();
      if (ArpSrcAtmInternationalCodeDesignator != 0) hash ^= ArpSrcAtmInternationalCodeDesignator.GetHashCode();
      if (ArpSrcAtmInternationalCodeDesignatorGroup != 0) hash ^= ArpSrcAtmInternationalCodeDesignatorGroup.GetHashCode();
      if (ArpSrcAtmE164Isdn.Length != 0) hash ^= ArpSrcAtmE164Isdn.GetHashCode();
      if (ArpSrcAtmE164IsdnGroup.Length != 0) hash ^= ArpSrcAtmE164IsdnGroup.GetHashCode();
      if (ArpSrcAtmRestOfAddress.Length != 0) hash ^= ArpSrcAtmRestOfAddress.GetHashCode();
      if (ArpSrcAtmAfi != 0) hash ^= ArpSrcAtmAfi.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArpHwType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ArpHwType);
      }
      if (ArpProtoType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ArpProtoType);
      }
      if (ArpHwSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ArpHwSize);
      }
      if (ArpSrcHtype != false) {
        output.WriteRawTag(32);
        output.WriteBool(ArpSrcHtype);
      }
      if (ArpSrcHlen != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ArpSrcHlen);
      }
      if (ArpSrcStype != false) {
        output.WriteRawTag(48);
        output.WriteBool(ArpSrcStype);
      }
      if (ArpSrcSlen != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArpSrcSlen);
      }
      if (ArpProtoSize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ArpProtoSize);
      }
      if (ArpOpcode != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ArpOpcode);
      }
      if (ArpIsgratuitous != false) {
        output.WriteRawTag(80);
        output.WriteBool(ArpIsgratuitous);
      }
      if (ArpSrcPln != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ArpSrcPln);
      }
      if (ArpDstHtype != false) {
        output.WriteRawTag(96);
        output.WriteBool(ArpDstHtype);
      }
      if (ArpDstHlen != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ArpDstHlen);
      }
      if (ArpDstStype != false) {
        output.WriteRawTag(112);
        output.WriteBool(ArpDstStype);
      }
      if (ArpDstSlen != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ArpDstSlen);
      }
      if (ArpDstPln != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ArpDstPln);
      }
      if (ArpSrcHw.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(ArpSrcHw);
      }
      if (ArpSrcHwMac.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(ArpSrcHwMac);
      }
      if (ArpSrcHwAx25.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(ArpSrcHwAx25);
      }
      if (ArpSrcAtmNumE164.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ArpSrcAtmNumE164);
      }
      if (ArpSrcAtmNumNsap.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(ArpSrcAtmNumNsap);
      }
      if (ArpSrcAtmSubaddr.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(ArpSrcAtmSubaddr);
      }
      if (ArpSrcProto.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(ArpSrcProto);
      }
      if (ArpSrcProtoIpv4.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(ArpSrcProtoIpv4);
      }
      if (ArpDstHw.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(ArpDstHw);
      }
      if (ArpDstHwMac.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteBytes(ArpDstHwMac);
      }
      if (ArpDstHwAx25.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(ArpDstHwAx25);
      }
      if (ArpDstAtmNumE164.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ArpDstAtmNumE164);
      }
      if (ArpDstAtmNumNsap.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteBytes(ArpDstAtmNumNsap);
      }
      if (ArpDstAtmSubaddr.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(ArpDstAtmSubaddr);
      }
      if (ArpDstProto.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(ArpDstProto);
      }
      if (ArpDstProtoIpv4.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteBytes(ArpDstProtoIpv4);
      }
      if (ArpDstDrarpErrorStatus != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(ArpDstDrarpErrorStatus);
      }
      if (ArpDuplicateAddressFrame != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(ArpDuplicateAddressFrame);
      }
      if (ArpSecondsSinceDuplicateAddressFrame != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(ArpSecondsSinceDuplicateAddressFrame);
      }
      if (ArpSrcAtmDataCountryCode != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(ArpSrcAtmDataCountryCode);
      }
      if (ArpSrcAtmDataCountryCodeGroup != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(ArpSrcAtmDataCountryCodeGroup);
      }
      if (ArpSrcAtmHighOrderDsp.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteBytes(ArpSrcAtmHighOrderDsp);
      }
      if (ArpSrcAtmEndSystemIdentifier.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteBytes(ArpSrcAtmEndSystemIdentifier);
      }
      if (ArpSrcAtmSelector != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(ArpSrcAtmSelector);
      }
      if (ArpSrcAtmInternationalCodeDesignator != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(ArpSrcAtmInternationalCodeDesignator);
      }
      if (ArpSrcAtmInternationalCodeDesignatorGroup != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(ArpSrcAtmInternationalCodeDesignatorGroup);
      }
      if (ArpSrcAtmE164Isdn.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteBytes(ArpSrcAtmE164Isdn);
      }
      if (ArpSrcAtmE164IsdnGroup.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteBytes(ArpSrcAtmE164IsdnGroup);
      }
      if (ArpSrcAtmRestOfAddress.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteBytes(ArpSrcAtmRestOfAddress);
      }
      if (ArpSrcAtmAfi != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(ArpSrcAtmAfi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArpHwType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpHwType);
      }
      if (ArpProtoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpProtoType);
      }
      if (ArpHwSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpHwSize);
      }
      if (ArpSrcHtype != false) {
        size += 1 + 1;
      }
      if (ArpSrcHlen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcHlen);
      }
      if (ArpSrcStype != false) {
        size += 1 + 1;
      }
      if (ArpSrcSlen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcSlen);
      }
      if (ArpProtoSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpProtoSize);
      }
      if (ArpOpcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpOpcode);
      }
      if (ArpIsgratuitous != false) {
        size += 1 + 1;
      }
      if (ArpSrcPln != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcPln);
      }
      if (ArpDstHtype != false) {
        size += 1 + 1;
      }
      if (ArpDstHlen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpDstHlen);
      }
      if (ArpDstStype != false) {
        size += 1 + 1;
      }
      if (ArpDstSlen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArpDstSlen);
      }
      if (ArpDstPln != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpDstPln);
      }
      if (ArpSrcHw.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcHw);
      }
      if (ArpSrcHwMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcHwMac);
      }
      if (ArpSrcHwAx25.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcHwAx25);
      }
      if (ArpSrcAtmNumE164.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ArpSrcAtmNumE164);
      }
      if (ArpSrcAtmNumNsap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmNumNsap);
      }
      if (ArpSrcAtmSubaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmSubaddr);
      }
      if (ArpSrcProto.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcProto);
      }
      if (ArpSrcProtoIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcProtoIpv4);
      }
      if (ArpDstHw.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstHw);
      }
      if (ArpDstHwMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstHwMac);
      }
      if (ArpDstHwAx25.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstHwAx25);
      }
      if (ArpDstAtmNumE164.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ArpDstAtmNumE164);
      }
      if (ArpDstAtmNumNsap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstAtmNumNsap);
      }
      if (ArpDstAtmSubaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstAtmSubaddr);
      }
      if (ArpDstProto.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstProto);
      }
      if (ArpDstProtoIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpDstProtoIpv4);
      }
      if (ArpDstDrarpErrorStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpDstDrarpErrorStatus);
      }
      if (ArpDuplicateAddressFrame != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ArpDuplicateAddressFrame);
      }
      if (ArpSecondsSinceDuplicateAddressFrame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSecondsSinceDuplicateAddressFrame);
      }
      if (ArpSrcAtmDataCountryCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmDataCountryCode);
      }
      if (ArpSrcAtmDataCountryCodeGroup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmDataCountryCodeGroup);
      }
      if (ArpSrcAtmHighOrderDsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmHighOrderDsp);
      }
      if (ArpSrcAtmEndSystemIdentifier.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmEndSystemIdentifier);
      }
      if (ArpSrcAtmSelector != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmSelector);
      }
      if (ArpSrcAtmInternationalCodeDesignator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmInternationalCodeDesignator);
      }
      if (ArpSrcAtmInternationalCodeDesignatorGroup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmInternationalCodeDesignatorGroup);
      }
      if (ArpSrcAtmE164Isdn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmE164Isdn);
      }
      if (ArpSrcAtmE164IsdnGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmE164IsdnGroup);
      }
      if (ArpSrcAtmRestOfAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(ArpSrcAtmRestOfAddress);
      }
      if (ArpSrcAtmAfi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ArpSrcAtmAfi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Arp other) {
      if (other == null) {
        return;
      }
      if (other.ArpHwType != 0) {
        ArpHwType = other.ArpHwType;
      }
      if (other.ArpProtoType != 0) {
        ArpProtoType = other.ArpProtoType;
      }
      if (other.ArpHwSize != 0) {
        ArpHwSize = other.ArpHwSize;
      }
      if (other.ArpSrcHtype != false) {
        ArpSrcHtype = other.ArpSrcHtype;
      }
      if (other.ArpSrcHlen != 0) {
        ArpSrcHlen = other.ArpSrcHlen;
      }
      if (other.ArpSrcStype != false) {
        ArpSrcStype = other.ArpSrcStype;
      }
      if (other.ArpSrcSlen != 0) {
        ArpSrcSlen = other.ArpSrcSlen;
      }
      if (other.ArpProtoSize != 0) {
        ArpProtoSize = other.ArpProtoSize;
      }
      if (other.ArpOpcode != 0) {
        ArpOpcode = other.ArpOpcode;
      }
      if (other.ArpIsgratuitous != false) {
        ArpIsgratuitous = other.ArpIsgratuitous;
      }
      if (other.ArpSrcPln != 0) {
        ArpSrcPln = other.ArpSrcPln;
      }
      if (other.ArpDstHtype != false) {
        ArpDstHtype = other.ArpDstHtype;
      }
      if (other.ArpDstHlen != 0) {
        ArpDstHlen = other.ArpDstHlen;
      }
      if (other.ArpDstStype != false) {
        ArpDstStype = other.ArpDstStype;
      }
      if (other.ArpDstSlen != 0) {
        ArpDstSlen = other.ArpDstSlen;
      }
      if (other.ArpDstPln != 0) {
        ArpDstPln = other.ArpDstPln;
      }
      if (other.ArpSrcHw.Length != 0) {
        ArpSrcHw = other.ArpSrcHw;
      }
      if (other.ArpSrcHwMac.Length != 0) {
        ArpSrcHwMac = other.ArpSrcHwMac;
      }
      if (other.ArpSrcHwAx25.Length != 0) {
        ArpSrcHwAx25 = other.ArpSrcHwAx25;
      }
      if (other.ArpSrcAtmNumE164.Length != 0) {
        ArpSrcAtmNumE164 = other.ArpSrcAtmNumE164;
      }
      if (other.ArpSrcAtmNumNsap.Length != 0) {
        ArpSrcAtmNumNsap = other.ArpSrcAtmNumNsap;
      }
      if (other.ArpSrcAtmSubaddr.Length != 0) {
        ArpSrcAtmSubaddr = other.ArpSrcAtmSubaddr;
      }
      if (other.ArpSrcProto.Length != 0) {
        ArpSrcProto = other.ArpSrcProto;
      }
      if (other.ArpSrcProtoIpv4.Length != 0) {
        ArpSrcProtoIpv4 = other.ArpSrcProtoIpv4;
      }
      if (other.ArpDstHw.Length != 0) {
        ArpDstHw = other.ArpDstHw;
      }
      if (other.ArpDstHwMac.Length != 0) {
        ArpDstHwMac = other.ArpDstHwMac;
      }
      if (other.ArpDstHwAx25.Length != 0) {
        ArpDstHwAx25 = other.ArpDstHwAx25;
      }
      if (other.ArpDstAtmNumE164.Length != 0) {
        ArpDstAtmNumE164 = other.ArpDstAtmNumE164;
      }
      if (other.ArpDstAtmNumNsap.Length != 0) {
        ArpDstAtmNumNsap = other.ArpDstAtmNumNsap;
      }
      if (other.ArpDstAtmSubaddr.Length != 0) {
        ArpDstAtmSubaddr = other.ArpDstAtmSubaddr;
      }
      if (other.ArpDstProto.Length != 0) {
        ArpDstProto = other.ArpDstProto;
      }
      if (other.ArpDstProtoIpv4.Length != 0) {
        ArpDstProtoIpv4 = other.ArpDstProtoIpv4;
      }
      if (other.ArpDstDrarpErrorStatus != 0) {
        ArpDstDrarpErrorStatus = other.ArpDstDrarpErrorStatus;
      }
      if (other.ArpDuplicateAddressFrame != 0L) {
        ArpDuplicateAddressFrame = other.ArpDuplicateAddressFrame;
      }
      if (other.ArpSecondsSinceDuplicateAddressFrame != 0) {
        ArpSecondsSinceDuplicateAddressFrame = other.ArpSecondsSinceDuplicateAddressFrame;
      }
      if (other.ArpSrcAtmDataCountryCode != 0) {
        ArpSrcAtmDataCountryCode = other.ArpSrcAtmDataCountryCode;
      }
      if (other.ArpSrcAtmDataCountryCodeGroup != 0) {
        ArpSrcAtmDataCountryCodeGroup = other.ArpSrcAtmDataCountryCodeGroup;
      }
      if (other.ArpSrcAtmHighOrderDsp.Length != 0) {
        ArpSrcAtmHighOrderDsp = other.ArpSrcAtmHighOrderDsp;
      }
      if (other.ArpSrcAtmEndSystemIdentifier.Length != 0) {
        ArpSrcAtmEndSystemIdentifier = other.ArpSrcAtmEndSystemIdentifier;
      }
      if (other.ArpSrcAtmSelector != 0) {
        ArpSrcAtmSelector = other.ArpSrcAtmSelector;
      }
      if (other.ArpSrcAtmInternationalCodeDesignator != 0) {
        ArpSrcAtmInternationalCodeDesignator = other.ArpSrcAtmInternationalCodeDesignator;
      }
      if (other.ArpSrcAtmInternationalCodeDesignatorGroup != 0) {
        ArpSrcAtmInternationalCodeDesignatorGroup = other.ArpSrcAtmInternationalCodeDesignatorGroup;
      }
      if (other.ArpSrcAtmE164Isdn.Length != 0) {
        ArpSrcAtmE164Isdn = other.ArpSrcAtmE164Isdn;
      }
      if (other.ArpSrcAtmE164IsdnGroup.Length != 0) {
        ArpSrcAtmE164IsdnGroup = other.ArpSrcAtmE164IsdnGroup;
      }
      if (other.ArpSrcAtmRestOfAddress.Length != 0) {
        ArpSrcAtmRestOfAddress = other.ArpSrcAtmRestOfAddress;
      }
      if (other.ArpSrcAtmAfi != 0) {
        ArpSrcAtmAfi = other.ArpSrcAtmAfi;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArpHwType = input.ReadUInt32();
            break;
          }
          case 16: {
            ArpProtoType = input.ReadUInt32();
            break;
          }
          case 24: {
            ArpHwSize = input.ReadUInt32();
            break;
          }
          case 32: {
            ArpSrcHtype = input.ReadBool();
            break;
          }
          case 40: {
            ArpSrcHlen = input.ReadUInt32();
            break;
          }
          case 48: {
            ArpSrcStype = input.ReadBool();
            break;
          }
          case 56: {
            ArpSrcSlen = input.ReadUInt32();
            break;
          }
          case 64: {
            ArpProtoSize = input.ReadUInt32();
            break;
          }
          case 72: {
            ArpOpcode = input.ReadUInt32();
            break;
          }
          case 80: {
            ArpIsgratuitous = input.ReadBool();
            break;
          }
          case 88: {
            ArpSrcPln = input.ReadUInt32();
            break;
          }
          case 96: {
            ArpDstHtype = input.ReadBool();
            break;
          }
          case 104: {
            ArpDstHlen = input.ReadUInt32();
            break;
          }
          case 112: {
            ArpDstStype = input.ReadBool();
            break;
          }
          case 120: {
            ArpDstSlen = input.ReadUInt32();
            break;
          }
          case 128: {
            ArpDstPln = input.ReadUInt32();
            break;
          }
          case 138: {
            ArpSrcHw = input.ReadBytes();
            break;
          }
          case 146: {
            ArpSrcHwMac = input.ReadBytes();
            break;
          }
          case 154: {
            ArpSrcHwAx25 = input.ReadBytes();
            break;
          }
          case 162: {
            ArpSrcAtmNumE164 = input.ReadString();
            break;
          }
          case 170: {
            ArpSrcAtmNumNsap = input.ReadBytes();
            break;
          }
          case 178: {
            ArpSrcAtmSubaddr = input.ReadBytes();
            break;
          }
          case 186: {
            ArpSrcProto = input.ReadBytes();
            break;
          }
          case 194: {
            ArpSrcProtoIpv4 = input.ReadBytes();
            break;
          }
          case 202: {
            ArpDstHw = input.ReadBytes();
            break;
          }
          case 210: {
            ArpDstHwMac = input.ReadBytes();
            break;
          }
          case 218: {
            ArpDstHwAx25 = input.ReadBytes();
            break;
          }
          case 226: {
            ArpDstAtmNumE164 = input.ReadString();
            break;
          }
          case 234: {
            ArpDstAtmNumNsap = input.ReadBytes();
            break;
          }
          case 242: {
            ArpDstAtmSubaddr = input.ReadBytes();
            break;
          }
          case 250: {
            ArpDstProto = input.ReadBytes();
            break;
          }
          case 258: {
            ArpDstProtoIpv4 = input.ReadBytes();
            break;
          }
          case 264: {
            ArpDstDrarpErrorStatus = input.ReadUInt32();
            break;
          }
          case 272: {
            ArpDuplicateAddressFrame = input.ReadInt64();
            break;
          }
          case 280: {
            ArpSecondsSinceDuplicateAddressFrame = input.ReadUInt32();
            break;
          }
          case 288: {
            ArpSrcAtmDataCountryCode = input.ReadUInt32();
            break;
          }
          case 296: {
            ArpSrcAtmDataCountryCodeGroup = input.ReadUInt32();
            break;
          }
          case 306: {
            ArpSrcAtmHighOrderDsp = input.ReadBytes();
            break;
          }
          case 314: {
            ArpSrcAtmEndSystemIdentifier = input.ReadBytes();
            break;
          }
          case 320: {
            ArpSrcAtmSelector = input.ReadUInt32();
            break;
          }
          case 328: {
            ArpSrcAtmInternationalCodeDesignator = input.ReadUInt32();
            break;
          }
          case 336: {
            ArpSrcAtmInternationalCodeDesignatorGroup = input.ReadUInt32();
            break;
          }
          case 346: {
            ArpSrcAtmE164Isdn = input.ReadBytes();
            break;
          }
          case 354: {
            ArpSrcAtmE164IsdnGroup = input.ReadBytes();
            break;
          }
          case 362: {
            ArpSrcAtmRestOfAddress = input.ReadBytes();
            break;
          }
          case 368: {
            ArpSrcAtmAfi = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
