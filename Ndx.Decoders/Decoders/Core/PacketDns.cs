// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-dns.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-dns.proto</summary>
  public static partial class PacketDnsReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-dns.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketDnsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtZG5zLnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSKtEAoDRG5z",
            "EjIKCERuc0ZsYWdzGAEgASgLMiAuTmR4LkRlY29kZXJzLkNvcmUuRG5zLl9E",
            "bnNGbGFncxINCgVEbnNJZBgCIAEoDRIVCg1EbnNSZXNwb25zZUluGAMgASgD",
            "EhUKDURuc1Jlc3BvbnNlVG8YBCABKAMSDwoHRG5zVGltZRgFIAEoAhIVCg1E",
            "bnNDb3VudEFkZFJyGAYgASgNEi4KBkRuc1FyeRgHIAMoCzIeLk5keC5EZWNv",
            "ZGVycy5Db3JlLkRucy5fRG5zUXJ5EjAKB0Ruc1Jlc3AYCCADKAsyHy5OZHgu",
            "RGVjb2RlcnMuQ29yZS5EbnMuX0Ruc1Jlc3ASFwoPRG5zQ291bnRRdWVyaWVz",
            "GAkgASgNEhUKDURuc0NvdW50Wm9uZXMYCiABKA0SFwoPRG5zQ291bnRBbnN3",
            "ZXJzGAsgASgNEh0KFURuc0NvdW50UHJlcmVxdWlzaXRlcxgMIAEoDRIWCg5E",
            "bnNDb3VudEF1dGhSchgNIAEoDRIXCg9EbnNDb3VudFVwZGF0ZXMYDiABKA0a",
            "yQIKCV9EbnNGbGFncxIYChBEbnNGbGFnc1Jlc3BvbnNlGAEgASgIEhYKDkRu",
            "c0ZsYWdzT3Bjb2RlGAIgASgNEh0KFURuc0ZsYWdzQXV0aG9yaXRhdGl2ZRgD",
            "IAEoCBIYChBEbnNGbGFnc0NvbmZsaWN0GAQgASgIEhkKEURuc0ZsYWdzVHJ1",
            "bmNhdGVkGAUgASgIEhoKEkRuc0ZsYWdzUmVjZGVzaXJlZBgGIAEoCBIZChFE",
            "bnNGbGFnc1RlbnRhdGl2ZRgHIAEoCBIYChBEbnNGbGFnc1JlY2F2YWlsGAgg",
            "ASgIEhEKCURuc0ZsYWdzWhgJIAEoCBIdChVEbnNGbGFnc0F1dGhlbnRpY2F0",
            "ZWQYCiABKAgSHAoURG5zRmxhZ3NDaGVja2Rpc2FibGUYCyABKAgSFQoNRG5z",
            "RmxhZ3NSY29kZRgMIAEoDRp1CgdfRG5zUXJ5EhIKCkRuc1FyeVR5cGUYASAB",
            "KA0SEwoLRG5zUXJ5Q2xhc3MYAiABKA0SEgoKRG5zUXJ5TmFtZRgDIAEoCRIV",
            "Cg1EbnNRcnlOYW1lTGVuGAQgASgNEhYKDkRuc0NvdW50TGFiZWxzGAUgASgF",
            "Gs4JCghfRG5zUmVzcBITCgtEbnNSZXNwVHlwZRgBIAEoDRIUCgxEbnNSZXNw",
            "Q2xhc3MYAiABKA0SGQoRRG5zUmVzcENhY2hlRmx1c2gYAyABKAgSFwoPRG5z",
            "UmVzcEV4dFJjb2RlGAQgASgNEhsKE0Ruc1Jlc3BFZG5zMFZlcnNpb24YBSAB",
            "KA0SEAoIRG5zUmVzcFoYBiABKA0SEgoKRG5zUmVzcFpEbxgHIAEoCBIYChBE",
            "bnNSZXNwWlJlc2VydmVkGAggASgNEhMKC0Ruc1Jlc3BOYW1lGAkgASgJEhIK",
            "CkRuc1Jlc3BUdGwYCiABKAUSEgoKRG5zUmVzcExlbhgLIAEoDRIUCgxEbnNS",
            "ZXNwVmFsdWUYDCABKAkSFQoNRG5zU3J2U2VydmljZRgNIAEoCRITCgtEbnNT",
            "cnZQcm90bxgOIAEoCRISCgpEbnNTcnZOYW1lGA8gASgJEhYKDkRuc1NydlBy",
            "aW9yaXR5GBAgASgNEhQKDERuc1NydldlaWdodBgRIAEoDRISCgpEbnNTcnZQ",
            "b3J0GBIgASgNEhQKDERuc1NydlRhcmdldBgTIAEoCRIVCg1EbnNOYXB0ck9y",
            "ZGVyGBQgASgNEhoKEkRuc05hcHRyUHJlZmVyZW5jZRgVIAEoDRIbChNEbnNO",
            "YXB0ckZsYWdzTGVuZ3RoGBYgASgNEhUKDURuc05hcHRyRmxhZ3MYFyABKAkS",
            "HQoVRG5zTmFwdHJTZXJ2aWNlTGVuZ3RoGBggASgNEhcKD0Ruc05hcHRyU2Vy",
            "dmljZRgZIAEoCRIbChNEbnNOYXB0clJlZ2V4TGVuZ3RoGBogASgNEhUKDURu",
            "c05hcHRyUmVnZXgYGyABKAkSIQoZRG5zTmFwdHJSZXBsYWNlbWVudExlbmd0",
            "aBgcIAEoDRIbChNEbnNOYXB0clJlcGxhY2VtZW50GB0gASgJEgwKBERuc0EY",
            "HiABKAwSDQoFRG5zTWQYHyABKAkSDQoFRG5zTWYYICABKAkSDQoFRG5zTWIY",
            "ISABKAkSDQoFRG5zTWcYIiABKAkSDQoFRG5zTXIYIyABKAkSDwoHRG5zTnVs",
            "bBgkIAEoDBIPCgdEbnNBYWFhGCUgASgMEhAKCERuc0NuYW1lGCYgASgJEhsK",
            "E0Ruc1JyVWRwUGF5bG9hZFNpemUYJyABKA0SEwoLRG5zU29hTW5hbWUYKCAB",
            "KAkSEwoLRG5zU29hUm5hbWUYKSABKAkSGgoSRG5zU29hU2VyaWFsTnVtYmVy",
            "GCogASgNEh0KFURuc1NvYVJlZnJlc2hJbnRlcnZhbBgrIAEoDRIbChNEbnNT",
            "b2FSZXRyeUludGVydmFsGCwgASgNEhkKEURuc1NvYUV4cGlyZUxpbWl0GC0g",
            "ASgNEhgKEERuc1NvYU1pbmludW1UdGwYLiABKA0SGAoQRG5zUHRyRG9tYWlu",
            "TmFtZRgvIAEoCRIRCglEbnNNaW5mb1IYMCABKAkSEQoJRG5zTWluZm9FGDEg",
            "ASgJEhcKD0Ruc014UHJlZmVyZW5jZRgyIAEoDRIZChFEbnNNeE1haWxFeGNo",
            "YW5nZRgzIAEoCRIUCgxEbnNUeHRMZW5ndGgYNCABKA0SDgoGRG5zVHh0GDUg",
            "ASgJEg0KBURuc05zGDYgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Dns), global::Ndx.Decoders.Core.Dns.Parser, new[]{ "DnsFlags", "DnsId", "DnsResponseIn", "DnsResponseTo", "DnsTime", "DnsCountAddRr", "DnsQry", "DnsResp", "DnsCountQueries", "DnsCountZones", "DnsCountAnswers", "DnsCountPrerequisites", "DnsCountAuthRr", "DnsCountUpdates" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Dns.Types._DnsFlags), global::Ndx.Decoders.Core.Dns.Types._DnsFlags.Parser, new[]{ "DnsFlagsResponse", "DnsFlagsOpcode", "DnsFlagsAuthoritative", "DnsFlagsConflict", "DnsFlagsTruncated", "DnsFlagsRecdesired", "DnsFlagsTentative", "DnsFlagsRecavail", "DnsFlagsZ", "DnsFlagsAuthenticated", "DnsFlagsCheckdisable", "DnsFlagsRcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Dns.Types._DnsQry), global::Ndx.Decoders.Core.Dns.Types._DnsQry.Parser, new[]{ "DnsQryType", "DnsQryClass", "DnsQryName", "DnsQryNameLen", "DnsCountLabels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Dns.Types._DnsResp), global::Ndx.Decoders.Core.Dns.Types._DnsResp.Parser, new[]{ "DnsRespType", "DnsRespClass", "DnsRespCacheFlush", "DnsRespExtRcode", "DnsRespEdns0Version", "DnsRespZ", "DnsRespZDo", "DnsRespZReserved", "DnsRespName", "DnsRespTtl", "DnsRespLen", "DnsRespValue", "DnsSrvService", "DnsSrvProto", "DnsSrvName", "DnsSrvPriority", "DnsSrvWeight", "DnsSrvPort", "DnsSrvTarget", "DnsNaptrOrder", "DnsNaptrPreference", "DnsNaptrFlagsLength", "DnsNaptrFlags", "DnsNaptrServiceLength", "DnsNaptrService", "DnsNaptrRegexLength", "DnsNaptrRegex", "DnsNaptrReplacementLength", "DnsNaptrReplacement", "DnsA", "DnsMd", "DnsMf", "DnsMb", "DnsMg", "DnsMr", "DnsNull", "DnsAaaa", "DnsCname", "DnsRrUdpPayloadSize", "DnsSoaMname", "DnsSoaRname", "DnsSoaSerialNumber", "DnsSoaRefreshInterval", "DnsSoaRetryInterval", "DnsSoaExpireLimit", "DnsSoaMininumTtl", "DnsPtrDomainName", "DnsMinfoR", "DnsMinfoE", "DnsMxPreference", "DnsMxMailExchange", "DnsTxtLength", "DnsTxt", "DnsNs" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Dns : pb::IMessage<Dns> {
    private static readonly pb::MessageParser<Dns> _parser = new pb::MessageParser<Dns>(() => new Dns());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dns> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketDnsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dns() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dns(Dns other) : this() {
      DnsFlags = other.dnsFlags_ != null ? other.DnsFlags.Clone() : null;
      dnsId_ = other.dnsId_;
      dnsResponseIn_ = other.dnsResponseIn_;
      dnsResponseTo_ = other.dnsResponseTo_;
      dnsTime_ = other.dnsTime_;
      dnsCountAddRr_ = other.dnsCountAddRr_;
      dnsQry_ = other.dnsQry_.Clone();
      dnsResp_ = other.dnsResp_.Clone();
      dnsCountQueries_ = other.dnsCountQueries_;
      dnsCountZones_ = other.dnsCountZones_;
      dnsCountAnswers_ = other.dnsCountAnswers_;
      dnsCountPrerequisites_ = other.dnsCountPrerequisites_;
      dnsCountAuthRr_ = other.dnsCountAuthRr_;
      dnsCountUpdates_ = other.dnsCountUpdates_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dns Clone() {
      return new Dns(this);
    }

    /// <summary>Field number for the "DnsFlags" field.</summary>
    public const int DnsFlagsFieldNumber = 1;
    private global::Ndx.Decoders.Core.Dns.Types._DnsFlags dnsFlags_;
    /// <summary>
    /// Flags ('dns_dns_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Core.Dns.Types._DnsFlags DnsFlags {
      get { return dnsFlags_; }
      set {
        dnsFlags_ = value;
      }
    }

    /// <summary>Field number for the "DnsId" field.</summary>
    public const int DnsIdFieldNumber = 2;
    private uint dnsId_;
    /// <summary>
    /// Transaction ID ('dns_dns_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsId {
      get { return dnsId_; }
      set {
        dnsId_ = value;
      }
    }

    /// <summary>Field number for the "DnsResponseIn" field.</summary>
    public const int DnsResponseInFieldNumber = 3;
    private long dnsResponseIn_;
    /// <summary>
    /// Response In ('dns_dns_response_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DnsResponseIn {
      get { return dnsResponseIn_; }
      set {
        dnsResponseIn_ = value;
      }
    }

    /// <summary>Field number for the "DnsResponseTo" field.</summary>
    public const int DnsResponseToFieldNumber = 4;
    private long dnsResponseTo_;
    /// <summary>
    /// Request In ('dns_dns_response_to')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DnsResponseTo {
      get { return dnsResponseTo_; }
      set {
        dnsResponseTo_ = value;
      }
    }

    /// <summary>Field number for the "DnsTime" field.</summary>
    public const int DnsTimeFieldNumber = 5;
    private float dnsTime_;
    /// <summary>
    /// Time ('dns_dns_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DnsTime {
      get { return dnsTime_; }
      set {
        dnsTime_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountAddRr" field.</summary>
    public const int DnsCountAddRrFieldNumber = 6;
    private uint dnsCountAddRr_;
    /// <summary>
    /// Additional RRs ('dns_dns_count_add_rr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountAddRr {
      get { return dnsCountAddRr_; }
      set {
        dnsCountAddRr_ = value;
      }
    }

    /// <summary>Field number for the "DnsQry" field.</summary>
    public const int DnsQryFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Ndx.Decoders.Core.Dns.Types._DnsQry> _repeated_dnsQry_codec
        = pb::FieldCodec.ForMessage(58, global::Ndx.Decoders.Core.Dns.Types._DnsQry.Parser);
    private readonly pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsQry> dnsQry_ = new pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsQry>();
    /// <summary>
    /// Grouping information related to DNS QRY ('')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsQry> DnsQry {
      get { return dnsQry_; }
    }

    /// <summary>Field number for the "DnsResp" field.</summary>
    public const int DnsRespFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Ndx.Decoders.Core.Dns.Types._DnsResp> _repeated_dnsResp_codec
        = pb::FieldCodec.ForMessage(66, global::Ndx.Decoders.Core.Dns.Types._DnsResp.Parser);
    private readonly pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsResp> dnsResp_ = new pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsResp>();
    /// <summary>
    /// Grouping information related to DNS reponse ('')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ndx.Decoders.Core.Dns.Types._DnsResp> DnsResp {
      get { return dnsResp_; }
    }

    /// <summary>Field number for the "DnsCountQueries" field.</summary>
    public const int DnsCountQueriesFieldNumber = 9;
    private uint dnsCountQueries_;
    /// <summary>
    /// Questions ('dns_dns_count_queries')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountQueries {
      get { return dnsCountQueries_; }
      set {
        dnsCountQueries_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountZones" field.</summary>
    public const int DnsCountZonesFieldNumber = 10;
    private uint dnsCountZones_;
    /// <summary>
    /// Zones ('dns_dns_count_zones')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountZones {
      get { return dnsCountZones_; }
      set {
        dnsCountZones_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountAnswers" field.</summary>
    public const int DnsCountAnswersFieldNumber = 11;
    private uint dnsCountAnswers_;
    /// <summary>
    /// Answer RRs ('dns_dns_count_answers')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountAnswers {
      get { return dnsCountAnswers_; }
      set {
        dnsCountAnswers_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountPrerequisites" field.</summary>
    public const int DnsCountPrerequisitesFieldNumber = 12;
    private uint dnsCountPrerequisites_;
    /// <summary>
    /// Prerequisites ('dns_dns_count_prerequisites')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountPrerequisites {
      get { return dnsCountPrerequisites_; }
      set {
        dnsCountPrerequisites_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountAuthRr" field.</summary>
    public const int DnsCountAuthRrFieldNumber = 13;
    private uint dnsCountAuthRr_;
    /// <summary>
    /// Authority RRs ('dns_dns_count_auth_rr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountAuthRr {
      get { return dnsCountAuthRr_; }
      set {
        dnsCountAuthRr_ = value;
      }
    }

    /// <summary>Field number for the "DnsCountUpdates" field.</summary>
    public const int DnsCountUpdatesFieldNumber = 14;
    private uint dnsCountUpdates_;
    /// <summary>
    /// Updates ('dns_dns_count_updates')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsCountUpdates {
      get { return dnsCountUpdates_; }
      set {
        dnsCountUpdates_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dns);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dns other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DnsFlags, other.DnsFlags)) return false;
      if (DnsId != other.DnsId) return false;
      if (DnsResponseIn != other.DnsResponseIn) return false;
      if (DnsResponseTo != other.DnsResponseTo) return false;
      if (DnsTime != other.DnsTime) return false;
      if (DnsCountAddRr != other.DnsCountAddRr) return false;
      if(!dnsQry_.Equals(other.dnsQry_)) return false;
      if(!dnsResp_.Equals(other.dnsResp_)) return false;
      if (DnsCountQueries != other.DnsCountQueries) return false;
      if (DnsCountZones != other.DnsCountZones) return false;
      if (DnsCountAnswers != other.DnsCountAnswers) return false;
      if (DnsCountPrerequisites != other.DnsCountPrerequisites) return false;
      if (DnsCountAuthRr != other.DnsCountAuthRr) return false;
      if (DnsCountUpdates != other.DnsCountUpdates) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dnsFlags_ != null) hash ^= DnsFlags.GetHashCode();
      if (DnsId != 0) hash ^= DnsId.GetHashCode();
      if (DnsResponseIn != 0L) hash ^= DnsResponseIn.GetHashCode();
      if (DnsResponseTo != 0L) hash ^= DnsResponseTo.GetHashCode();
      if (DnsTime != 0F) hash ^= DnsTime.GetHashCode();
      if (DnsCountAddRr != 0) hash ^= DnsCountAddRr.GetHashCode();
      hash ^= dnsQry_.GetHashCode();
      hash ^= dnsResp_.GetHashCode();
      if (DnsCountQueries != 0) hash ^= DnsCountQueries.GetHashCode();
      if (DnsCountZones != 0) hash ^= DnsCountZones.GetHashCode();
      if (DnsCountAnswers != 0) hash ^= DnsCountAnswers.GetHashCode();
      if (DnsCountPrerequisites != 0) hash ^= DnsCountPrerequisites.GetHashCode();
      if (DnsCountAuthRr != 0) hash ^= DnsCountAuthRr.GetHashCode();
      if (DnsCountUpdates != 0) hash ^= DnsCountUpdates.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dnsFlags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DnsFlags);
      }
      if (DnsId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DnsId);
      }
      if (DnsResponseIn != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DnsResponseIn);
      }
      if (DnsResponseTo != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DnsResponseTo);
      }
      if (DnsTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DnsTime);
      }
      if (DnsCountAddRr != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DnsCountAddRr);
      }
      dnsQry_.WriteTo(output, _repeated_dnsQry_codec);
      dnsResp_.WriteTo(output, _repeated_dnsResp_codec);
      if (DnsCountQueries != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DnsCountQueries);
      }
      if (DnsCountZones != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(DnsCountZones);
      }
      if (DnsCountAnswers != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(DnsCountAnswers);
      }
      if (DnsCountPrerequisites != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DnsCountPrerequisites);
      }
      if (DnsCountAuthRr != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(DnsCountAuthRr);
      }
      if (DnsCountUpdates != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(DnsCountUpdates);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dnsFlags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsFlags);
      }
      if (DnsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsId);
      }
      if (DnsResponseIn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DnsResponseIn);
      }
      if (DnsResponseTo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DnsResponseTo);
      }
      if (DnsTime != 0F) {
        size += 1 + 4;
      }
      if (DnsCountAddRr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountAddRr);
      }
      size += dnsQry_.CalculateSize(_repeated_dnsQry_codec);
      size += dnsResp_.CalculateSize(_repeated_dnsResp_codec);
      if (DnsCountQueries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountQueries);
      }
      if (DnsCountZones != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountZones);
      }
      if (DnsCountAnswers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountAnswers);
      }
      if (DnsCountPrerequisites != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountPrerequisites);
      }
      if (DnsCountAuthRr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountAuthRr);
      }
      if (DnsCountUpdates != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsCountUpdates);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dns other) {
      if (other == null) {
        return;
      }
      if (other.dnsFlags_ != null) {
        if (dnsFlags_ == null) {
          dnsFlags_ = new global::Ndx.Decoders.Core.Dns.Types._DnsFlags();
        }
        DnsFlags.MergeFrom(other.DnsFlags);
      }
      if (other.DnsId != 0) {
        DnsId = other.DnsId;
      }
      if (other.DnsResponseIn != 0L) {
        DnsResponseIn = other.DnsResponseIn;
      }
      if (other.DnsResponseTo != 0L) {
        DnsResponseTo = other.DnsResponseTo;
      }
      if (other.DnsTime != 0F) {
        DnsTime = other.DnsTime;
      }
      if (other.DnsCountAddRr != 0) {
        DnsCountAddRr = other.DnsCountAddRr;
      }
      dnsQry_.Add(other.dnsQry_);
      dnsResp_.Add(other.dnsResp_);
      if (other.DnsCountQueries != 0) {
        DnsCountQueries = other.DnsCountQueries;
      }
      if (other.DnsCountZones != 0) {
        DnsCountZones = other.DnsCountZones;
      }
      if (other.DnsCountAnswers != 0) {
        DnsCountAnswers = other.DnsCountAnswers;
      }
      if (other.DnsCountPrerequisites != 0) {
        DnsCountPrerequisites = other.DnsCountPrerequisites;
      }
      if (other.DnsCountAuthRr != 0) {
        DnsCountAuthRr = other.DnsCountAuthRr;
      }
      if (other.DnsCountUpdates != 0) {
        DnsCountUpdates = other.DnsCountUpdates;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dnsFlags_ == null) {
              dnsFlags_ = new global::Ndx.Decoders.Core.Dns.Types._DnsFlags();
            }
            input.ReadMessage(dnsFlags_);
            break;
          }
          case 16: {
            DnsId = input.ReadUInt32();
            break;
          }
          case 24: {
            DnsResponseIn = input.ReadInt64();
            break;
          }
          case 32: {
            DnsResponseTo = input.ReadInt64();
            break;
          }
          case 45: {
            DnsTime = input.ReadFloat();
            break;
          }
          case 48: {
            DnsCountAddRr = input.ReadUInt32();
            break;
          }
          case 58: {
            dnsQry_.AddEntriesFrom(input, _repeated_dnsQry_codec);
            break;
          }
          case 66: {
            dnsResp_.AddEntriesFrom(input, _repeated_dnsResp_codec);
            break;
          }
          case 72: {
            DnsCountQueries = input.ReadUInt32();
            break;
          }
          case 80: {
            DnsCountZones = input.ReadUInt32();
            break;
          }
          case 88: {
            DnsCountAnswers = input.ReadUInt32();
            break;
          }
          case 96: {
            DnsCountPrerequisites = input.ReadUInt32();
            break;
          }
          case 104: {
            DnsCountAuthRr = input.ReadUInt32();
            break;
          }
          case 112: {
            DnsCountUpdates = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Dns message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class _DnsFlags : pb::IMessage<_DnsFlags> {
        private static readonly pb::MessageParser<_DnsFlags> _parser = new pb::MessageParser<_DnsFlags>(() => new _DnsFlags());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<_DnsFlags> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Decoders.Core.Dns.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsFlags() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsFlags(_DnsFlags other) : this() {
          dnsFlagsResponse_ = other.dnsFlagsResponse_;
          dnsFlagsOpcode_ = other.dnsFlagsOpcode_;
          dnsFlagsAuthoritative_ = other.dnsFlagsAuthoritative_;
          dnsFlagsConflict_ = other.dnsFlagsConflict_;
          dnsFlagsTruncated_ = other.dnsFlagsTruncated_;
          dnsFlagsRecdesired_ = other.dnsFlagsRecdesired_;
          dnsFlagsTentative_ = other.dnsFlagsTentative_;
          dnsFlagsRecavail_ = other.dnsFlagsRecavail_;
          dnsFlagsZ_ = other.dnsFlagsZ_;
          dnsFlagsAuthenticated_ = other.dnsFlagsAuthenticated_;
          dnsFlagsCheckdisable_ = other.dnsFlagsCheckdisable_;
          dnsFlagsRcode_ = other.dnsFlagsRcode_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsFlags Clone() {
          return new _DnsFlags(this);
        }

        /// <summary>Field number for the "DnsFlagsResponse" field.</summary>
        public const int DnsFlagsResponseFieldNumber = 1;
        private bool dnsFlagsResponse_;
        /// <summary>
        /// Response ('dns_flags_dns_flags_response')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsResponse {
          get { return dnsFlagsResponse_; }
          set {
            dnsFlagsResponse_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsOpcode" field.</summary>
        public const int DnsFlagsOpcodeFieldNumber = 2;
        private uint dnsFlagsOpcode_;
        /// <summary>
        /// Opcode ('dns_flags_dns_flags_opcode')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsFlagsOpcode {
          get { return dnsFlagsOpcode_; }
          set {
            dnsFlagsOpcode_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsAuthoritative" field.</summary>
        public const int DnsFlagsAuthoritativeFieldNumber = 3;
        private bool dnsFlagsAuthoritative_;
        /// <summary>
        /// Authoritative ('dns_flags_dns_flags_authoritative')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsAuthoritative {
          get { return dnsFlagsAuthoritative_; }
          set {
            dnsFlagsAuthoritative_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsConflict" field.</summary>
        public const int DnsFlagsConflictFieldNumber = 4;
        private bool dnsFlagsConflict_;
        /// <summary>
        /// Conflict ('dns_flags_dns_flags_conflict')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsConflict {
          get { return dnsFlagsConflict_; }
          set {
            dnsFlagsConflict_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsTruncated" field.</summary>
        public const int DnsFlagsTruncatedFieldNumber = 5;
        private bool dnsFlagsTruncated_;
        /// <summary>
        /// Truncated ('dns_flags_dns_flags_truncated')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsTruncated {
          get { return dnsFlagsTruncated_; }
          set {
            dnsFlagsTruncated_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsRecdesired" field.</summary>
        public const int DnsFlagsRecdesiredFieldNumber = 6;
        private bool dnsFlagsRecdesired_;
        /// <summary>
        /// Recursion desired ('dns_flags_dns_flags_recdesired')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsRecdesired {
          get { return dnsFlagsRecdesired_; }
          set {
            dnsFlagsRecdesired_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsTentative" field.</summary>
        public const int DnsFlagsTentativeFieldNumber = 7;
        private bool dnsFlagsTentative_;
        /// <summary>
        /// Tentative ('dns_flags_dns_flags_tentative')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsTentative {
          get { return dnsFlagsTentative_; }
          set {
            dnsFlagsTentative_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsRecavail" field.</summary>
        public const int DnsFlagsRecavailFieldNumber = 8;
        private bool dnsFlagsRecavail_;
        /// <summary>
        /// Recursion available ('dns_flags_dns_flags_recavail')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsRecavail {
          get { return dnsFlagsRecavail_; }
          set {
            dnsFlagsRecavail_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsZ" field.</summary>
        public const int DnsFlagsZFieldNumber = 9;
        private bool dnsFlagsZ_;
        /// <summary>
        /// Z ('dns_flags_dns_flags_z')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsZ {
          get { return dnsFlagsZ_; }
          set {
            dnsFlagsZ_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsAuthenticated" field.</summary>
        public const int DnsFlagsAuthenticatedFieldNumber = 10;
        private bool dnsFlagsAuthenticated_;
        /// <summary>
        /// Answer authenticated ('dns_flags_dns_flags_authenticated')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsAuthenticated {
          get { return dnsFlagsAuthenticated_; }
          set {
            dnsFlagsAuthenticated_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsCheckdisable" field.</summary>
        public const int DnsFlagsCheckdisableFieldNumber = 11;
        private bool dnsFlagsCheckdisable_;
        /// <summary>
        /// Non-authenticated data ('dns_flags_dns_flags_checkdisable')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsFlagsCheckdisable {
          get { return dnsFlagsCheckdisable_; }
          set {
            dnsFlagsCheckdisable_ = value;
          }
        }

        /// <summary>Field number for the "DnsFlagsRcode" field.</summary>
        public const int DnsFlagsRcodeFieldNumber = 12;
        private uint dnsFlagsRcode_;
        /// <summary>
        /// Reply code ('dns_flags_dns_flags_rcode')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsFlagsRcode {
          get { return dnsFlagsRcode_; }
          set {
            dnsFlagsRcode_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as _DnsFlags);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(_DnsFlags other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DnsFlagsResponse != other.DnsFlagsResponse) return false;
          if (DnsFlagsOpcode != other.DnsFlagsOpcode) return false;
          if (DnsFlagsAuthoritative != other.DnsFlagsAuthoritative) return false;
          if (DnsFlagsConflict != other.DnsFlagsConflict) return false;
          if (DnsFlagsTruncated != other.DnsFlagsTruncated) return false;
          if (DnsFlagsRecdesired != other.DnsFlagsRecdesired) return false;
          if (DnsFlagsTentative != other.DnsFlagsTentative) return false;
          if (DnsFlagsRecavail != other.DnsFlagsRecavail) return false;
          if (DnsFlagsZ != other.DnsFlagsZ) return false;
          if (DnsFlagsAuthenticated != other.DnsFlagsAuthenticated) return false;
          if (DnsFlagsCheckdisable != other.DnsFlagsCheckdisable) return false;
          if (DnsFlagsRcode != other.DnsFlagsRcode) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DnsFlagsResponse != false) hash ^= DnsFlagsResponse.GetHashCode();
          if (DnsFlagsOpcode != 0) hash ^= DnsFlagsOpcode.GetHashCode();
          if (DnsFlagsAuthoritative != false) hash ^= DnsFlagsAuthoritative.GetHashCode();
          if (DnsFlagsConflict != false) hash ^= DnsFlagsConflict.GetHashCode();
          if (DnsFlagsTruncated != false) hash ^= DnsFlagsTruncated.GetHashCode();
          if (DnsFlagsRecdesired != false) hash ^= DnsFlagsRecdesired.GetHashCode();
          if (DnsFlagsTentative != false) hash ^= DnsFlagsTentative.GetHashCode();
          if (DnsFlagsRecavail != false) hash ^= DnsFlagsRecavail.GetHashCode();
          if (DnsFlagsZ != false) hash ^= DnsFlagsZ.GetHashCode();
          if (DnsFlagsAuthenticated != false) hash ^= DnsFlagsAuthenticated.GetHashCode();
          if (DnsFlagsCheckdisable != false) hash ^= DnsFlagsCheckdisable.GetHashCode();
          if (DnsFlagsRcode != 0) hash ^= DnsFlagsRcode.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DnsFlagsResponse != false) {
            output.WriteRawTag(8);
            output.WriteBool(DnsFlagsResponse);
          }
          if (DnsFlagsOpcode != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(DnsFlagsOpcode);
          }
          if (DnsFlagsAuthoritative != false) {
            output.WriteRawTag(24);
            output.WriteBool(DnsFlagsAuthoritative);
          }
          if (DnsFlagsConflict != false) {
            output.WriteRawTag(32);
            output.WriteBool(DnsFlagsConflict);
          }
          if (DnsFlagsTruncated != false) {
            output.WriteRawTag(40);
            output.WriteBool(DnsFlagsTruncated);
          }
          if (DnsFlagsRecdesired != false) {
            output.WriteRawTag(48);
            output.WriteBool(DnsFlagsRecdesired);
          }
          if (DnsFlagsTentative != false) {
            output.WriteRawTag(56);
            output.WriteBool(DnsFlagsTentative);
          }
          if (DnsFlagsRecavail != false) {
            output.WriteRawTag(64);
            output.WriteBool(DnsFlagsRecavail);
          }
          if (DnsFlagsZ != false) {
            output.WriteRawTag(72);
            output.WriteBool(DnsFlagsZ);
          }
          if (DnsFlagsAuthenticated != false) {
            output.WriteRawTag(80);
            output.WriteBool(DnsFlagsAuthenticated);
          }
          if (DnsFlagsCheckdisable != false) {
            output.WriteRawTag(88);
            output.WriteBool(DnsFlagsCheckdisable);
          }
          if (DnsFlagsRcode != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(DnsFlagsRcode);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DnsFlagsResponse != false) {
            size += 1 + 1;
          }
          if (DnsFlagsOpcode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsFlagsOpcode);
          }
          if (DnsFlagsAuthoritative != false) {
            size += 1 + 1;
          }
          if (DnsFlagsConflict != false) {
            size += 1 + 1;
          }
          if (DnsFlagsTruncated != false) {
            size += 1 + 1;
          }
          if (DnsFlagsRecdesired != false) {
            size += 1 + 1;
          }
          if (DnsFlagsTentative != false) {
            size += 1 + 1;
          }
          if (DnsFlagsRecavail != false) {
            size += 1 + 1;
          }
          if (DnsFlagsZ != false) {
            size += 1 + 1;
          }
          if (DnsFlagsAuthenticated != false) {
            size += 1 + 1;
          }
          if (DnsFlagsCheckdisable != false) {
            size += 1 + 1;
          }
          if (DnsFlagsRcode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsFlagsRcode);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(_DnsFlags other) {
          if (other == null) {
            return;
          }
          if (other.DnsFlagsResponse != false) {
            DnsFlagsResponse = other.DnsFlagsResponse;
          }
          if (other.DnsFlagsOpcode != 0) {
            DnsFlagsOpcode = other.DnsFlagsOpcode;
          }
          if (other.DnsFlagsAuthoritative != false) {
            DnsFlagsAuthoritative = other.DnsFlagsAuthoritative;
          }
          if (other.DnsFlagsConflict != false) {
            DnsFlagsConflict = other.DnsFlagsConflict;
          }
          if (other.DnsFlagsTruncated != false) {
            DnsFlagsTruncated = other.DnsFlagsTruncated;
          }
          if (other.DnsFlagsRecdesired != false) {
            DnsFlagsRecdesired = other.DnsFlagsRecdesired;
          }
          if (other.DnsFlagsTentative != false) {
            DnsFlagsTentative = other.DnsFlagsTentative;
          }
          if (other.DnsFlagsRecavail != false) {
            DnsFlagsRecavail = other.DnsFlagsRecavail;
          }
          if (other.DnsFlagsZ != false) {
            DnsFlagsZ = other.DnsFlagsZ;
          }
          if (other.DnsFlagsAuthenticated != false) {
            DnsFlagsAuthenticated = other.DnsFlagsAuthenticated;
          }
          if (other.DnsFlagsCheckdisable != false) {
            DnsFlagsCheckdisable = other.DnsFlagsCheckdisable;
          }
          if (other.DnsFlagsRcode != 0) {
            DnsFlagsRcode = other.DnsFlagsRcode;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DnsFlagsResponse = input.ReadBool();
                break;
              }
              case 16: {
                DnsFlagsOpcode = input.ReadUInt32();
                break;
              }
              case 24: {
                DnsFlagsAuthoritative = input.ReadBool();
                break;
              }
              case 32: {
                DnsFlagsConflict = input.ReadBool();
                break;
              }
              case 40: {
                DnsFlagsTruncated = input.ReadBool();
                break;
              }
              case 48: {
                DnsFlagsRecdesired = input.ReadBool();
                break;
              }
              case 56: {
                DnsFlagsTentative = input.ReadBool();
                break;
              }
              case 64: {
                DnsFlagsRecavail = input.ReadBool();
                break;
              }
              case 72: {
                DnsFlagsZ = input.ReadBool();
                break;
              }
              case 80: {
                DnsFlagsAuthenticated = input.ReadBool();
                break;
              }
              case 88: {
                DnsFlagsCheckdisable = input.ReadBool();
                break;
              }
              case 96: {
                DnsFlagsRcode = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class _DnsQry : pb::IMessage<_DnsQry> {
        private static readonly pb::MessageParser<_DnsQry> _parser = new pb::MessageParser<_DnsQry>(() => new _DnsQry());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<_DnsQry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Decoders.Core.Dns.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsQry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsQry(_DnsQry other) : this() {
          dnsQryType_ = other.dnsQryType_;
          dnsQryClass_ = other.dnsQryClass_;
          dnsQryName_ = other.dnsQryName_;
          dnsQryNameLen_ = other.dnsQryNameLen_;
          dnsCountLabels_ = other.dnsCountLabels_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsQry Clone() {
          return new _DnsQry(this);
        }

        /// <summary>Field number for the "DnsQryType" field.</summary>
        public const int DnsQryTypeFieldNumber = 1;
        private uint dnsQryType_;
        /// <summary>
        /// Type ('text_dns_qry_type')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsQryType {
          get { return dnsQryType_; }
          set {
            dnsQryType_ = value;
          }
        }

        /// <summary>Field number for the "DnsQryClass" field.</summary>
        public const int DnsQryClassFieldNumber = 2;
        private uint dnsQryClass_;
        /// <summary>
        /// Class ('text_dns_qry_class')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsQryClass {
          get { return dnsQryClass_; }
          set {
            dnsQryClass_ = value;
          }
        }

        /// <summary>Field number for the "DnsQryName" field.</summary>
        public const int DnsQryNameFieldNumber = 3;
        private string dnsQryName_ = "";
        /// <summary>
        /// Name ('text_dns_qry_name')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsQryName {
          get { return dnsQryName_; }
          set {
            dnsQryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsQryNameLen" field.</summary>
        public const int DnsQryNameLenFieldNumber = 4;
        private uint dnsQryNameLen_;
        /// <summary>
        /// Name Length ('text_dns_qry_name_len')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsQryNameLen {
          get { return dnsQryNameLen_; }
          set {
            dnsQryNameLen_ = value;
          }
        }

        /// <summary>Field number for the "DnsCountLabels" field.</summary>
        public const int DnsCountLabelsFieldNumber = 5;
        private int dnsCountLabels_;
        /// <summary>
        /// Label Count ('dns_dns_count_labels')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DnsCountLabels {
          get { return dnsCountLabels_; }
          set {
            dnsCountLabels_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as _DnsQry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(_DnsQry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DnsQryType != other.DnsQryType) return false;
          if (DnsQryClass != other.DnsQryClass) return false;
          if (DnsQryName != other.DnsQryName) return false;
          if (DnsQryNameLen != other.DnsQryNameLen) return false;
          if (DnsCountLabels != other.DnsCountLabels) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DnsQryType != 0) hash ^= DnsQryType.GetHashCode();
          if (DnsQryClass != 0) hash ^= DnsQryClass.GetHashCode();
          if (DnsQryName.Length != 0) hash ^= DnsQryName.GetHashCode();
          if (DnsQryNameLen != 0) hash ^= DnsQryNameLen.GetHashCode();
          if (DnsCountLabels != 0) hash ^= DnsCountLabels.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DnsQryType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(DnsQryType);
          }
          if (DnsQryClass != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(DnsQryClass);
          }
          if (DnsQryName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DnsQryName);
          }
          if (DnsQryNameLen != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(DnsQryNameLen);
          }
          if (DnsCountLabels != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(DnsCountLabels);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DnsQryType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsQryType);
          }
          if (DnsQryClass != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsQryClass);
          }
          if (DnsQryName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsQryName);
          }
          if (DnsQryNameLen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsQryNameLen);
          }
          if (DnsCountLabels != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DnsCountLabels);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(_DnsQry other) {
          if (other == null) {
            return;
          }
          if (other.DnsQryType != 0) {
            DnsQryType = other.DnsQryType;
          }
          if (other.DnsQryClass != 0) {
            DnsQryClass = other.DnsQryClass;
          }
          if (other.DnsQryName.Length != 0) {
            DnsQryName = other.DnsQryName;
          }
          if (other.DnsQryNameLen != 0) {
            DnsQryNameLen = other.DnsQryNameLen;
          }
          if (other.DnsCountLabels != 0) {
            DnsCountLabels = other.DnsCountLabels;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DnsQryType = input.ReadUInt32();
                break;
              }
              case 16: {
                DnsQryClass = input.ReadUInt32();
                break;
              }
              case 26: {
                DnsQryName = input.ReadString();
                break;
              }
              case 32: {
                DnsQryNameLen = input.ReadUInt32();
                break;
              }
              case 40: {
                DnsCountLabels = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class _DnsResp : pb::IMessage<_DnsResp> {
        private static readonly pb::MessageParser<_DnsResp> _parser = new pb::MessageParser<_DnsResp>(() => new _DnsResp());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<_DnsResp> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Decoders.Core.Dns.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsResp() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsResp(_DnsResp other) : this() {
          dnsRespType_ = other.dnsRespType_;
          dnsRespClass_ = other.dnsRespClass_;
          dnsRespCacheFlush_ = other.dnsRespCacheFlush_;
          dnsRespExtRcode_ = other.dnsRespExtRcode_;
          dnsRespEdns0Version_ = other.dnsRespEdns0Version_;
          dnsRespZ_ = other.dnsRespZ_;
          dnsRespZDo_ = other.dnsRespZDo_;
          dnsRespZReserved_ = other.dnsRespZReserved_;
          dnsRespName_ = other.dnsRespName_;
          dnsRespTtl_ = other.dnsRespTtl_;
          dnsRespLen_ = other.dnsRespLen_;
          dnsRespValue_ = other.dnsRespValue_;
          dnsSrvService_ = other.dnsSrvService_;
          dnsSrvProto_ = other.dnsSrvProto_;
          dnsSrvName_ = other.dnsSrvName_;
          dnsSrvPriority_ = other.dnsSrvPriority_;
          dnsSrvWeight_ = other.dnsSrvWeight_;
          dnsSrvPort_ = other.dnsSrvPort_;
          dnsSrvTarget_ = other.dnsSrvTarget_;
          dnsNaptrOrder_ = other.dnsNaptrOrder_;
          dnsNaptrPreference_ = other.dnsNaptrPreference_;
          dnsNaptrFlagsLength_ = other.dnsNaptrFlagsLength_;
          dnsNaptrFlags_ = other.dnsNaptrFlags_;
          dnsNaptrServiceLength_ = other.dnsNaptrServiceLength_;
          dnsNaptrService_ = other.dnsNaptrService_;
          dnsNaptrRegexLength_ = other.dnsNaptrRegexLength_;
          dnsNaptrRegex_ = other.dnsNaptrRegex_;
          dnsNaptrReplacementLength_ = other.dnsNaptrReplacementLength_;
          dnsNaptrReplacement_ = other.dnsNaptrReplacement_;
          dnsA_ = other.dnsA_;
          dnsMd_ = other.dnsMd_;
          dnsMf_ = other.dnsMf_;
          dnsMb_ = other.dnsMb_;
          dnsMg_ = other.dnsMg_;
          dnsMr_ = other.dnsMr_;
          dnsNull_ = other.dnsNull_;
          dnsAaaa_ = other.dnsAaaa_;
          dnsCname_ = other.dnsCname_;
          dnsRrUdpPayloadSize_ = other.dnsRrUdpPayloadSize_;
          dnsSoaMname_ = other.dnsSoaMname_;
          dnsSoaRname_ = other.dnsSoaRname_;
          dnsSoaSerialNumber_ = other.dnsSoaSerialNumber_;
          dnsSoaRefreshInterval_ = other.dnsSoaRefreshInterval_;
          dnsSoaRetryInterval_ = other.dnsSoaRetryInterval_;
          dnsSoaExpireLimit_ = other.dnsSoaExpireLimit_;
          dnsSoaMininumTtl_ = other.dnsSoaMininumTtl_;
          dnsPtrDomainName_ = other.dnsPtrDomainName_;
          dnsMinfoR_ = other.dnsMinfoR_;
          dnsMinfoE_ = other.dnsMinfoE_;
          dnsMxPreference_ = other.dnsMxPreference_;
          dnsMxMailExchange_ = other.dnsMxMailExchange_;
          dnsTxtLength_ = other.dnsTxtLength_;
          dnsTxt_ = other.dnsTxt_;
          dnsNs_ = other.dnsNs_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public _DnsResp Clone() {
          return new _DnsResp(this);
        }

        /// <summary>Field number for the "DnsRespType" field.</summary>
        public const int DnsRespTypeFieldNumber = 1;
        private uint dnsRespType_;
        /// <summary>
        /// Type ('text_dns_resp_type')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespType {
          get { return dnsRespType_; }
          set {
            dnsRespType_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespClass" field.</summary>
        public const int DnsRespClassFieldNumber = 2;
        private uint dnsRespClass_;
        /// <summary>
        /// Class ('text_dns_resp_class')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespClass {
          get { return dnsRespClass_; }
          set {
            dnsRespClass_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespCacheFlush" field.</summary>
        public const int DnsRespCacheFlushFieldNumber = 3;
        private bool dnsRespCacheFlush_;
        /// <summary>
        /// Cache flush ('dns_dns_resp_cache_flush')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsRespCacheFlush {
          get { return dnsRespCacheFlush_; }
          set {
            dnsRespCacheFlush_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespExtRcode" field.</summary>
        public const int DnsRespExtRcodeFieldNumber = 4;
        private uint dnsRespExtRcode_;
        /// <summary>
        /// Higher bits in extended RCODE ('dns_dns_resp_ext_rcode')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespExtRcode {
          get { return dnsRespExtRcode_; }
          set {
            dnsRespExtRcode_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespEdns0Version" field.</summary>
        public const int DnsRespEdns0VersionFieldNumber = 5;
        private uint dnsRespEdns0Version_;
        /// <summary>
        /// EDNS0 version ('dns_dns_resp_edns0_version')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespEdns0Version {
          get { return dnsRespEdns0Version_; }
          set {
            dnsRespEdns0Version_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespZ" field.</summary>
        public const int DnsRespZFieldNumber = 6;
        private uint dnsRespZ_;
        /// <summary>
        /// Z ('dns_dns_resp_z')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespZ {
          get { return dnsRespZ_; }
          set {
            dnsRespZ_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespZDo" field.</summary>
        public const int DnsRespZDoFieldNumber = 7;
        private bool dnsRespZDo_;
        /// <summary>
        /// DO bit ('dns_resp_z_dns_resp_z_do')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DnsRespZDo {
          get { return dnsRespZDo_; }
          set {
            dnsRespZDo_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespZReserved" field.</summary>
        public const int DnsRespZReservedFieldNumber = 8;
        private uint dnsRespZReserved_;
        /// <summary>
        /// Reserved ('dns_resp_z_dns_resp_z_reserved')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespZReserved {
          get { return dnsRespZReserved_; }
          set {
            dnsRespZReserved_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespName" field.</summary>
        public const int DnsRespNameFieldNumber = 9;
        private string dnsRespName_ = "";
        /// <summary>
        /// Name ('text_dns_resp_name')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsRespName {
          get { return dnsRespName_; }
          set {
            dnsRespName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsRespTtl" field.</summary>
        public const int DnsRespTtlFieldNumber = 10;
        private int dnsRespTtl_;
        /// <summary>
        /// Time to live ('text_dns_resp_ttl')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DnsRespTtl {
          get { return dnsRespTtl_; }
          set {
            dnsRespTtl_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespLen" field.</summary>
        public const int DnsRespLenFieldNumber = 11;
        private uint dnsRespLen_;
        /// <summary>
        /// Data length ('text_dns_resp_len')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRespLen {
          get { return dnsRespLen_; }
          set {
            dnsRespLen_ = value;
          }
        }

        /// <summary>Field number for the "DnsRespValue" field.</summary>
        public const int DnsRespValueFieldNumber = 12;
        private string dnsRespValue_ = "";
        /// <summary>
        /// Value of the response ('')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsRespValue {
          get { return dnsRespValue_; }
          set {
            dnsRespValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSrvService" field.</summary>
        public const int DnsSrvServiceFieldNumber = 13;
        private string dnsSrvService_ = "";
        /// <summary>
        /// Service ('text_dns_srv_service')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSrvService {
          get { return dnsSrvService_; }
          set {
            dnsSrvService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSrvProto" field.</summary>
        public const int DnsSrvProtoFieldNumber = 14;
        private string dnsSrvProto_ = "";
        /// <summary>
        /// Protocol ('text_dns_srv_proto')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSrvProto {
          get { return dnsSrvProto_; }
          set {
            dnsSrvProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSrvName" field.</summary>
        public const int DnsSrvNameFieldNumber = 15;
        private string dnsSrvName_ = "";
        /// <summary>
        /// Name ('text_dns_srv_name')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSrvName {
          get { return dnsSrvName_; }
          set {
            dnsSrvName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSrvPriority" field.</summary>
        public const int DnsSrvPriorityFieldNumber = 16;
        private uint dnsSrvPriority_;
        /// <summary>
        /// Priority ('text_dns_srv_priority')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSrvPriority {
          get { return dnsSrvPriority_; }
          set {
            dnsSrvPriority_ = value;
          }
        }

        /// <summary>Field number for the "DnsSrvWeight" field.</summary>
        public const int DnsSrvWeightFieldNumber = 17;
        private uint dnsSrvWeight_;
        /// <summary>
        /// Weight ('text_dns_srv_weight')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSrvWeight {
          get { return dnsSrvWeight_; }
          set {
            dnsSrvWeight_ = value;
          }
        }

        /// <summary>Field number for the "DnsSrvPort" field.</summary>
        public const int DnsSrvPortFieldNumber = 18;
        private uint dnsSrvPort_;
        /// <summary>
        /// Port ('text_dns_srv_port')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSrvPort {
          get { return dnsSrvPort_; }
          set {
            dnsSrvPort_ = value;
          }
        }

        /// <summary>Field number for the "DnsSrvTarget" field.</summary>
        public const int DnsSrvTargetFieldNumber = 19;
        private string dnsSrvTarget_ = "";
        /// <summary>
        /// Target ('text_dns_srv_target')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSrvTarget {
          get { return dnsSrvTarget_; }
          set {
            dnsSrvTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNaptrOrder" field.</summary>
        public const int DnsNaptrOrderFieldNumber = 20;
        private uint dnsNaptrOrder_;
        /// <summary>
        /// Order ('text_dns_naptr_order')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrOrder {
          get { return dnsNaptrOrder_; }
          set {
            dnsNaptrOrder_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrPreference" field.</summary>
        public const int DnsNaptrPreferenceFieldNumber = 21;
        private uint dnsNaptrPreference_;
        /// <summary>
        /// Preference ('text_dns_naptr_preference')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrPreference {
          get { return dnsNaptrPreference_; }
          set {
            dnsNaptrPreference_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrFlagsLength" field.</summary>
        public const int DnsNaptrFlagsLengthFieldNumber = 22;
        private uint dnsNaptrFlagsLength_;
        /// <summary>
        /// Flags Length ('text_dns_naptr_flags_length')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrFlagsLength {
          get { return dnsNaptrFlagsLength_; }
          set {
            dnsNaptrFlagsLength_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrFlags" field.</summary>
        public const int DnsNaptrFlagsFieldNumber = 23;
        private string dnsNaptrFlags_ = "";
        /// <summary>
        /// Flags ('text_dns_naptr_flags')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsNaptrFlags {
          get { return dnsNaptrFlags_; }
          set {
            dnsNaptrFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNaptrServiceLength" field.</summary>
        public const int DnsNaptrServiceLengthFieldNumber = 24;
        private uint dnsNaptrServiceLength_;
        /// <summary>
        /// Service Length ('text_dns_naptr_service_length')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrServiceLength {
          get { return dnsNaptrServiceLength_; }
          set {
            dnsNaptrServiceLength_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrService" field.</summary>
        public const int DnsNaptrServiceFieldNumber = 25;
        private string dnsNaptrService_ = "";
        /// <summary>
        /// Service ('text_dns_naptr_service')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsNaptrService {
          get { return dnsNaptrService_; }
          set {
            dnsNaptrService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNaptrRegexLength" field.</summary>
        public const int DnsNaptrRegexLengthFieldNumber = 26;
        private uint dnsNaptrRegexLength_;
        /// <summary>
        /// Regex Length ('text_dns_naptr_regex_length')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrRegexLength {
          get { return dnsNaptrRegexLength_; }
          set {
            dnsNaptrRegexLength_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrRegex" field.</summary>
        public const int DnsNaptrRegexFieldNumber = 27;
        private string dnsNaptrRegex_ = "";
        /// <summary>
        /// Regex ('text_dns_naptr_regex')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsNaptrRegex {
          get { return dnsNaptrRegex_; }
          set {
            dnsNaptrRegex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNaptrReplacementLength" field.</summary>
        public const int DnsNaptrReplacementLengthFieldNumber = 28;
        private uint dnsNaptrReplacementLength_;
        /// <summary>
        /// Replacement Length ('text_dns_naptr_replacement_length')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsNaptrReplacementLength {
          get { return dnsNaptrReplacementLength_; }
          set {
            dnsNaptrReplacementLength_ = value;
          }
        }

        /// <summary>Field number for the "DnsNaptrReplacement" field.</summary>
        public const int DnsNaptrReplacementFieldNumber = 29;
        private string dnsNaptrReplacement_ = "";
        /// <summary>
        /// Replacement ('dns_dns_naptr_replacement')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsNaptrReplacement {
          get { return dnsNaptrReplacement_; }
          set {
            dnsNaptrReplacement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsA" field.</summary>
        public const int DnsAFieldNumber = 30;
        private pb::ByteString dnsA_ = pb::ByteString.Empty;
        /// <summary>
        /// Address ('text_dns_a')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DnsA {
          get { return dnsA_; }
          set {
            dnsA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMd" field.</summary>
        public const int DnsMdFieldNumber = 31;
        private string dnsMd_ = "";
        /// <summary>
        /// Mail Destination ('text_dns_md')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMd {
          get { return dnsMd_; }
          set {
            dnsMd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMf" field.</summary>
        public const int DnsMfFieldNumber = 32;
        private string dnsMf_ = "";
        /// <summary>
        /// Mail Forwarder ('text_dns_mf')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMf {
          get { return dnsMf_; }
          set {
            dnsMf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMb" field.</summary>
        public const int DnsMbFieldNumber = 33;
        private string dnsMb_ = "";
        /// <summary>
        /// MailBox Domaine ('text_dns_mb')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMb {
          get { return dnsMb_; }
          set {
            dnsMb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMg" field.</summary>
        public const int DnsMgFieldNumber = 34;
        private string dnsMg_ = "";
        /// <summary>
        /// Mail Group member ('text_dns_mg')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMg {
          get { return dnsMg_; }
          set {
            dnsMg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMr" field.</summary>
        public const int DnsMrFieldNumber = 35;
        private string dnsMr_ = "";
        /// <summary>
        /// Mail Rename domaine ('text_dns_mr')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMr {
          get { return dnsMr_; }
          set {
            dnsMr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNull" field.</summary>
        public const int DnsNullFieldNumber = 36;
        private pb::ByteString dnsNull_ = pb::ByteString.Empty;
        /// <summary>
        /// Null (data) ('dns_dns_null')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DnsNull {
          get { return dnsNull_; }
          set {
            dnsNull_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsAaaa" field.</summary>
        public const int DnsAaaaFieldNumber = 37;
        private pb::ByteString dnsAaaa_ = pb::ByteString.Empty;
        /// <summary>
        /// AAAA Address ('text_dns_aaaa')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString DnsAaaa {
          get { return dnsAaaa_; }
          set {
            dnsAaaa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsCname" field.</summary>
        public const int DnsCnameFieldNumber = 38;
        private string dnsCname_ = "";
        /// <summary>
        /// CNAME ('text_dns_cname')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsCname {
          get { return dnsCname_; }
          set {
            dnsCname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsRrUdpPayloadSize" field.</summary>
        public const int DnsRrUdpPayloadSizeFieldNumber = 39;
        private uint dnsRrUdpPayloadSize_;
        /// <summary>
        /// UDP payload size ('text_dns_rr_udp_payload_size')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsRrUdpPayloadSize {
          get { return dnsRrUdpPayloadSize_; }
          set {
            dnsRrUdpPayloadSize_ = value;
          }
        }

        /// <summary>Field number for the "DnsSoaMname" field.</summary>
        public const int DnsSoaMnameFieldNumber = 40;
        private string dnsSoaMname_ = "";
        /// <summary>
        /// Primary name server ('dns_dns_soa_mname')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSoaMname {
          get { return dnsSoaMname_; }
          set {
            dnsSoaMname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSoaRname" field.</summary>
        public const int DnsSoaRnameFieldNumber = 41;
        private string dnsSoaRname_ = "";
        /// <summary>
        /// Responsible authority's mailbox ('text_dns_soa_rname')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsSoaRname {
          get { return dnsSoaRname_; }
          set {
            dnsSoaRname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsSoaSerialNumber" field.</summary>
        public const int DnsSoaSerialNumberFieldNumber = 42;
        private uint dnsSoaSerialNumber_;
        /// <summary>
        /// Serial Number ('text_dns_soa_serial_number')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSoaSerialNumber {
          get { return dnsSoaSerialNumber_; }
          set {
            dnsSoaSerialNumber_ = value;
          }
        }

        /// <summary>Field number for the "DnsSoaRefreshInterval" field.</summary>
        public const int DnsSoaRefreshIntervalFieldNumber = 43;
        private uint dnsSoaRefreshInterval_;
        /// <summary>
        /// Refresh Interval ('text_dns_soa_refresh_interval')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSoaRefreshInterval {
          get { return dnsSoaRefreshInterval_; }
          set {
            dnsSoaRefreshInterval_ = value;
          }
        }

        /// <summary>Field number for the "DnsSoaRetryInterval" field.</summary>
        public const int DnsSoaRetryIntervalFieldNumber = 44;
        private uint dnsSoaRetryInterval_;
        /// <summary>
        /// Retry Interval ('text_dns_soa_retry_interval')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSoaRetryInterval {
          get { return dnsSoaRetryInterval_; }
          set {
            dnsSoaRetryInterval_ = value;
          }
        }

        /// <summary>Field number for the "DnsSoaExpireLimit" field.</summary>
        public const int DnsSoaExpireLimitFieldNumber = 45;
        private uint dnsSoaExpireLimit_;
        /// <summary>
        /// Expire limit ('text_dns_soa_expire_limit')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSoaExpireLimit {
          get { return dnsSoaExpireLimit_; }
          set {
            dnsSoaExpireLimit_ = value;
          }
        }

        /// <summary>Field number for the "DnsSoaMininumTtl" field.</summary>
        public const int DnsSoaMininumTtlFieldNumber = 46;
        private uint dnsSoaMininumTtl_;
        /// <summary>
        /// Minimum TTL ('text_dns_soa_mininum_ttl')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsSoaMininumTtl {
          get { return dnsSoaMininumTtl_; }
          set {
            dnsSoaMininumTtl_ = value;
          }
        }

        /// <summary>Field number for the "DnsPtrDomainName" field.</summary>
        public const int DnsPtrDomainNameFieldNumber = 47;
        private string dnsPtrDomainName_ = "";
        /// <summary>
        /// Domain Name ('text_dns_ptr_domain_name')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsPtrDomainName {
          get { return dnsPtrDomainName_; }
          set {
            dnsPtrDomainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMinfoR" field.</summary>
        public const int DnsMinfoRFieldNumber = 48;
        private string dnsMinfoR_ = "";
        /// <summary>
        /// Responsible Mailbox ('dns_dns_minfo_r')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMinfoR {
          get { return dnsMinfoR_; }
          set {
            dnsMinfoR_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMinfoE" field.</summary>
        public const int DnsMinfoEFieldNumber = 49;
        private string dnsMinfoE_ = "";
        /// <summary>
        /// Error Mailbox ('dns_dns_minfo_e')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMinfoE {
          get { return dnsMinfoE_; }
          set {
            dnsMinfoE_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsMxPreference" field.</summary>
        public const int DnsMxPreferenceFieldNumber = 50;
        private uint dnsMxPreference_;
        /// <summary>
        /// Preference ('text_dns_mx_preference')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsMxPreference {
          get { return dnsMxPreference_; }
          set {
            dnsMxPreference_ = value;
          }
        }

        /// <summary>Field number for the "DnsMxMailExchange" field.</summary>
        public const int DnsMxMailExchangeFieldNumber = 51;
        private string dnsMxMailExchange_ = "";
        /// <summary>
        /// Mail Exchange ('text_dns_mx_mail_exchange')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsMxMailExchange {
          get { return dnsMxMailExchange_; }
          set {
            dnsMxMailExchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsTxtLength" field.</summary>
        public const int DnsTxtLengthFieldNumber = 52;
        private uint dnsTxtLength_;
        /// <summary>
        /// TXT Length ('dns_txt_dns_txt_length')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DnsTxtLength {
          get { return dnsTxtLength_; }
          set {
            dnsTxtLength_ = value;
          }
        }

        /// <summary>Field number for the "DnsTxt" field.</summary>
        public const int DnsTxtFieldNumber = 53;
        private string dnsTxt_ = "";
        /// <summary>
        /// TXT ('dns_dns_txt')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsTxt {
          get { return dnsTxt_; }
          set {
            dnsTxt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "DnsNs" field.</summary>
        public const int DnsNsFieldNumber = 54;
        private string dnsNs_ = "";
        /// <summary>
        /// Name Server ('text_dns_ns')
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DnsNs {
          get { return dnsNs_; }
          set {
            dnsNs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as _DnsResp);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(_DnsResp other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DnsRespType != other.DnsRespType) return false;
          if (DnsRespClass != other.DnsRespClass) return false;
          if (DnsRespCacheFlush != other.DnsRespCacheFlush) return false;
          if (DnsRespExtRcode != other.DnsRespExtRcode) return false;
          if (DnsRespEdns0Version != other.DnsRespEdns0Version) return false;
          if (DnsRespZ != other.DnsRespZ) return false;
          if (DnsRespZDo != other.DnsRespZDo) return false;
          if (DnsRespZReserved != other.DnsRespZReserved) return false;
          if (DnsRespName != other.DnsRespName) return false;
          if (DnsRespTtl != other.DnsRespTtl) return false;
          if (DnsRespLen != other.DnsRespLen) return false;
          if (DnsRespValue != other.DnsRespValue) return false;
          if (DnsSrvService != other.DnsSrvService) return false;
          if (DnsSrvProto != other.DnsSrvProto) return false;
          if (DnsSrvName != other.DnsSrvName) return false;
          if (DnsSrvPriority != other.DnsSrvPriority) return false;
          if (DnsSrvWeight != other.DnsSrvWeight) return false;
          if (DnsSrvPort != other.DnsSrvPort) return false;
          if (DnsSrvTarget != other.DnsSrvTarget) return false;
          if (DnsNaptrOrder != other.DnsNaptrOrder) return false;
          if (DnsNaptrPreference != other.DnsNaptrPreference) return false;
          if (DnsNaptrFlagsLength != other.DnsNaptrFlagsLength) return false;
          if (DnsNaptrFlags != other.DnsNaptrFlags) return false;
          if (DnsNaptrServiceLength != other.DnsNaptrServiceLength) return false;
          if (DnsNaptrService != other.DnsNaptrService) return false;
          if (DnsNaptrRegexLength != other.DnsNaptrRegexLength) return false;
          if (DnsNaptrRegex != other.DnsNaptrRegex) return false;
          if (DnsNaptrReplacementLength != other.DnsNaptrReplacementLength) return false;
          if (DnsNaptrReplacement != other.DnsNaptrReplacement) return false;
          if (DnsA != other.DnsA) return false;
          if (DnsMd != other.DnsMd) return false;
          if (DnsMf != other.DnsMf) return false;
          if (DnsMb != other.DnsMb) return false;
          if (DnsMg != other.DnsMg) return false;
          if (DnsMr != other.DnsMr) return false;
          if (DnsNull != other.DnsNull) return false;
          if (DnsAaaa != other.DnsAaaa) return false;
          if (DnsCname != other.DnsCname) return false;
          if (DnsRrUdpPayloadSize != other.DnsRrUdpPayloadSize) return false;
          if (DnsSoaMname != other.DnsSoaMname) return false;
          if (DnsSoaRname != other.DnsSoaRname) return false;
          if (DnsSoaSerialNumber != other.DnsSoaSerialNumber) return false;
          if (DnsSoaRefreshInterval != other.DnsSoaRefreshInterval) return false;
          if (DnsSoaRetryInterval != other.DnsSoaRetryInterval) return false;
          if (DnsSoaExpireLimit != other.DnsSoaExpireLimit) return false;
          if (DnsSoaMininumTtl != other.DnsSoaMininumTtl) return false;
          if (DnsPtrDomainName != other.DnsPtrDomainName) return false;
          if (DnsMinfoR != other.DnsMinfoR) return false;
          if (DnsMinfoE != other.DnsMinfoE) return false;
          if (DnsMxPreference != other.DnsMxPreference) return false;
          if (DnsMxMailExchange != other.DnsMxMailExchange) return false;
          if (DnsTxtLength != other.DnsTxtLength) return false;
          if (DnsTxt != other.DnsTxt) return false;
          if (DnsNs != other.DnsNs) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DnsRespType != 0) hash ^= DnsRespType.GetHashCode();
          if (DnsRespClass != 0) hash ^= DnsRespClass.GetHashCode();
          if (DnsRespCacheFlush != false) hash ^= DnsRespCacheFlush.GetHashCode();
          if (DnsRespExtRcode != 0) hash ^= DnsRespExtRcode.GetHashCode();
          if (DnsRespEdns0Version != 0) hash ^= DnsRespEdns0Version.GetHashCode();
          if (DnsRespZ != 0) hash ^= DnsRespZ.GetHashCode();
          if (DnsRespZDo != false) hash ^= DnsRespZDo.GetHashCode();
          if (DnsRespZReserved != 0) hash ^= DnsRespZReserved.GetHashCode();
          if (DnsRespName.Length != 0) hash ^= DnsRespName.GetHashCode();
          if (DnsRespTtl != 0) hash ^= DnsRespTtl.GetHashCode();
          if (DnsRespLen != 0) hash ^= DnsRespLen.GetHashCode();
          if (DnsRespValue.Length != 0) hash ^= DnsRespValue.GetHashCode();
          if (DnsSrvService.Length != 0) hash ^= DnsSrvService.GetHashCode();
          if (DnsSrvProto.Length != 0) hash ^= DnsSrvProto.GetHashCode();
          if (DnsSrvName.Length != 0) hash ^= DnsSrvName.GetHashCode();
          if (DnsSrvPriority != 0) hash ^= DnsSrvPriority.GetHashCode();
          if (DnsSrvWeight != 0) hash ^= DnsSrvWeight.GetHashCode();
          if (DnsSrvPort != 0) hash ^= DnsSrvPort.GetHashCode();
          if (DnsSrvTarget.Length != 0) hash ^= DnsSrvTarget.GetHashCode();
          if (DnsNaptrOrder != 0) hash ^= DnsNaptrOrder.GetHashCode();
          if (DnsNaptrPreference != 0) hash ^= DnsNaptrPreference.GetHashCode();
          if (DnsNaptrFlagsLength != 0) hash ^= DnsNaptrFlagsLength.GetHashCode();
          if (DnsNaptrFlags.Length != 0) hash ^= DnsNaptrFlags.GetHashCode();
          if (DnsNaptrServiceLength != 0) hash ^= DnsNaptrServiceLength.GetHashCode();
          if (DnsNaptrService.Length != 0) hash ^= DnsNaptrService.GetHashCode();
          if (DnsNaptrRegexLength != 0) hash ^= DnsNaptrRegexLength.GetHashCode();
          if (DnsNaptrRegex.Length != 0) hash ^= DnsNaptrRegex.GetHashCode();
          if (DnsNaptrReplacementLength != 0) hash ^= DnsNaptrReplacementLength.GetHashCode();
          if (DnsNaptrReplacement.Length != 0) hash ^= DnsNaptrReplacement.GetHashCode();
          if (DnsA.Length != 0) hash ^= DnsA.GetHashCode();
          if (DnsMd.Length != 0) hash ^= DnsMd.GetHashCode();
          if (DnsMf.Length != 0) hash ^= DnsMf.GetHashCode();
          if (DnsMb.Length != 0) hash ^= DnsMb.GetHashCode();
          if (DnsMg.Length != 0) hash ^= DnsMg.GetHashCode();
          if (DnsMr.Length != 0) hash ^= DnsMr.GetHashCode();
          if (DnsNull.Length != 0) hash ^= DnsNull.GetHashCode();
          if (DnsAaaa.Length != 0) hash ^= DnsAaaa.GetHashCode();
          if (DnsCname.Length != 0) hash ^= DnsCname.GetHashCode();
          if (DnsRrUdpPayloadSize != 0) hash ^= DnsRrUdpPayloadSize.GetHashCode();
          if (DnsSoaMname.Length != 0) hash ^= DnsSoaMname.GetHashCode();
          if (DnsSoaRname.Length != 0) hash ^= DnsSoaRname.GetHashCode();
          if (DnsSoaSerialNumber != 0) hash ^= DnsSoaSerialNumber.GetHashCode();
          if (DnsSoaRefreshInterval != 0) hash ^= DnsSoaRefreshInterval.GetHashCode();
          if (DnsSoaRetryInterval != 0) hash ^= DnsSoaRetryInterval.GetHashCode();
          if (DnsSoaExpireLimit != 0) hash ^= DnsSoaExpireLimit.GetHashCode();
          if (DnsSoaMininumTtl != 0) hash ^= DnsSoaMininumTtl.GetHashCode();
          if (DnsPtrDomainName.Length != 0) hash ^= DnsPtrDomainName.GetHashCode();
          if (DnsMinfoR.Length != 0) hash ^= DnsMinfoR.GetHashCode();
          if (DnsMinfoE.Length != 0) hash ^= DnsMinfoE.GetHashCode();
          if (DnsMxPreference != 0) hash ^= DnsMxPreference.GetHashCode();
          if (DnsMxMailExchange.Length != 0) hash ^= DnsMxMailExchange.GetHashCode();
          if (DnsTxtLength != 0) hash ^= DnsTxtLength.GetHashCode();
          if (DnsTxt.Length != 0) hash ^= DnsTxt.GetHashCode();
          if (DnsNs.Length != 0) hash ^= DnsNs.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DnsRespType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(DnsRespType);
          }
          if (DnsRespClass != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(DnsRespClass);
          }
          if (DnsRespCacheFlush != false) {
            output.WriteRawTag(24);
            output.WriteBool(DnsRespCacheFlush);
          }
          if (DnsRespExtRcode != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(DnsRespExtRcode);
          }
          if (DnsRespEdns0Version != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(DnsRespEdns0Version);
          }
          if (DnsRespZ != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(DnsRespZ);
          }
          if (DnsRespZDo != false) {
            output.WriteRawTag(56);
            output.WriteBool(DnsRespZDo);
          }
          if (DnsRespZReserved != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(DnsRespZReserved);
          }
          if (DnsRespName.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(DnsRespName);
          }
          if (DnsRespTtl != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(DnsRespTtl);
          }
          if (DnsRespLen != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(DnsRespLen);
          }
          if (DnsRespValue.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(DnsRespValue);
          }
          if (DnsSrvService.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(DnsSrvService);
          }
          if (DnsSrvProto.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(DnsSrvProto);
          }
          if (DnsSrvName.Length != 0) {
            output.WriteRawTag(122);
            output.WriteString(DnsSrvName);
          }
          if (DnsSrvPriority != 0) {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(DnsSrvPriority);
          }
          if (DnsSrvWeight != 0) {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(DnsSrvWeight);
          }
          if (DnsSrvPort != 0) {
            output.WriteRawTag(144, 1);
            output.WriteUInt32(DnsSrvPort);
          }
          if (DnsSrvTarget.Length != 0) {
            output.WriteRawTag(154, 1);
            output.WriteString(DnsSrvTarget);
          }
          if (DnsNaptrOrder != 0) {
            output.WriteRawTag(160, 1);
            output.WriteUInt32(DnsNaptrOrder);
          }
          if (DnsNaptrPreference != 0) {
            output.WriteRawTag(168, 1);
            output.WriteUInt32(DnsNaptrPreference);
          }
          if (DnsNaptrFlagsLength != 0) {
            output.WriteRawTag(176, 1);
            output.WriteUInt32(DnsNaptrFlagsLength);
          }
          if (DnsNaptrFlags.Length != 0) {
            output.WriteRawTag(186, 1);
            output.WriteString(DnsNaptrFlags);
          }
          if (DnsNaptrServiceLength != 0) {
            output.WriteRawTag(192, 1);
            output.WriteUInt32(DnsNaptrServiceLength);
          }
          if (DnsNaptrService.Length != 0) {
            output.WriteRawTag(202, 1);
            output.WriteString(DnsNaptrService);
          }
          if (DnsNaptrRegexLength != 0) {
            output.WriteRawTag(208, 1);
            output.WriteUInt32(DnsNaptrRegexLength);
          }
          if (DnsNaptrRegex.Length != 0) {
            output.WriteRawTag(218, 1);
            output.WriteString(DnsNaptrRegex);
          }
          if (DnsNaptrReplacementLength != 0) {
            output.WriteRawTag(224, 1);
            output.WriteUInt32(DnsNaptrReplacementLength);
          }
          if (DnsNaptrReplacement.Length != 0) {
            output.WriteRawTag(234, 1);
            output.WriteString(DnsNaptrReplacement);
          }
          if (DnsA.Length != 0) {
            output.WriteRawTag(242, 1);
            output.WriteBytes(DnsA);
          }
          if (DnsMd.Length != 0) {
            output.WriteRawTag(250, 1);
            output.WriteString(DnsMd);
          }
          if (DnsMf.Length != 0) {
            output.WriteRawTag(130, 2);
            output.WriteString(DnsMf);
          }
          if (DnsMb.Length != 0) {
            output.WriteRawTag(138, 2);
            output.WriteString(DnsMb);
          }
          if (DnsMg.Length != 0) {
            output.WriteRawTag(146, 2);
            output.WriteString(DnsMg);
          }
          if (DnsMr.Length != 0) {
            output.WriteRawTag(154, 2);
            output.WriteString(DnsMr);
          }
          if (DnsNull.Length != 0) {
            output.WriteRawTag(162, 2);
            output.WriteBytes(DnsNull);
          }
          if (DnsAaaa.Length != 0) {
            output.WriteRawTag(170, 2);
            output.WriteBytes(DnsAaaa);
          }
          if (DnsCname.Length != 0) {
            output.WriteRawTag(178, 2);
            output.WriteString(DnsCname);
          }
          if (DnsRrUdpPayloadSize != 0) {
            output.WriteRawTag(184, 2);
            output.WriteUInt32(DnsRrUdpPayloadSize);
          }
          if (DnsSoaMname.Length != 0) {
            output.WriteRawTag(194, 2);
            output.WriteString(DnsSoaMname);
          }
          if (DnsSoaRname.Length != 0) {
            output.WriteRawTag(202, 2);
            output.WriteString(DnsSoaRname);
          }
          if (DnsSoaSerialNumber != 0) {
            output.WriteRawTag(208, 2);
            output.WriteUInt32(DnsSoaSerialNumber);
          }
          if (DnsSoaRefreshInterval != 0) {
            output.WriteRawTag(216, 2);
            output.WriteUInt32(DnsSoaRefreshInterval);
          }
          if (DnsSoaRetryInterval != 0) {
            output.WriteRawTag(224, 2);
            output.WriteUInt32(DnsSoaRetryInterval);
          }
          if (DnsSoaExpireLimit != 0) {
            output.WriteRawTag(232, 2);
            output.WriteUInt32(DnsSoaExpireLimit);
          }
          if (DnsSoaMininumTtl != 0) {
            output.WriteRawTag(240, 2);
            output.WriteUInt32(DnsSoaMininumTtl);
          }
          if (DnsPtrDomainName.Length != 0) {
            output.WriteRawTag(250, 2);
            output.WriteString(DnsPtrDomainName);
          }
          if (DnsMinfoR.Length != 0) {
            output.WriteRawTag(130, 3);
            output.WriteString(DnsMinfoR);
          }
          if (DnsMinfoE.Length != 0) {
            output.WriteRawTag(138, 3);
            output.WriteString(DnsMinfoE);
          }
          if (DnsMxPreference != 0) {
            output.WriteRawTag(144, 3);
            output.WriteUInt32(DnsMxPreference);
          }
          if (DnsMxMailExchange.Length != 0) {
            output.WriteRawTag(154, 3);
            output.WriteString(DnsMxMailExchange);
          }
          if (DnsTxtLength != 0) {
            output.WriteRawTag(160, 3);
            output.WriteUInt32(DnsTxtLength);
          }
          if (DnsTxt.Length != 0) {
            output.WriteRawTag(170, 3);
            output.WriteString(DnsTxt);
          }
          if (DnsNs.Length != 0) {
            output.WriteRawTag(178, 3);
            output.WriteString(DnsNs);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DnsRespType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespType);
          }
          if (DnsRespClass != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespClass);
          }
          if (DnsRespCacheFlush != false) {
            size += 1 + 1;
          }
          if (DnsRespExtRcode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespExtRcode);
          }
          if (DnsRespEdns0Version != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespEdns0Version);
          }
          if (DnsRespZ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespZ);
          }
          if (DnsRespZDo != false) {
            size += 1 + 1;
          }
          if (DnsRespZReserved != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespZReserved);
          }
          if (DnsRespName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsRespName);
          }
          if (DnsRespTtl != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DnsRespTtl);
          }
          if (DnsRespLen != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DnsRespLen);
          }
          if (DnsRespValue.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsRespValue);
          }
          if (DnsSrvService.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsSrvService);
          }
          if (DnsSrvProto.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsSrvProto);
          }
          if (DnsSrvName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsSrvName);
          }
          if (DnsSrvPriority != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSrvPriority);
          }
          if (DnsSrvWeight != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSrvWeight);
          }
          if (DnsSrvPort != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSrvPort);
          }
          if (DnsSrvTarget.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsSrvTarget);
          }
          if (DnsNaptrOrder != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrOrder);
          }
          if (DnsNaptrPreference != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrPreference);
          }
          if (DnsNaptrFlagsLength != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrFlagsLength);
          }
          if (DnsNaptrFlags.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsNaptrFlags);
          }
          if (DnsNaptrServiceLength != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrServiceLength);
          }
          if (DnsNaptrService.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsNaptrService);
          }
          if (DnsNaptrRegexLength != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrRegexLength);
          }
          if (DnsNaptrRegex.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsNaptrRegex);
          }
          if (DnsNaptrReplacementLength != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsNaptrReplacementLength);
          }
          if (DnsNaptrReplacement.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsNaptrReplacement);
          }
          if (DnsA.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(DnsA);
          }
          if (DnsMd.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMd);
          }
          if (DnsMf.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMf);
          }
          if (DnsMb.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMb);
          }
          if (DnsMg.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMg);
          }
          if (DnsMr.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMr);
          }
          if (DnsNull.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(DnsNull);
          }
          if (DnsAaaa.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeBytesSize(DnsAaaa);
          }
          if (DnsCname.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsCname);
          }
          if (DnsRrUdpPayloadSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsRrUdpPayloadSize);
          }
          if (DnsSoaMname.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsSoaMname);
          }
          if (DnsSoaRname.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsSoaRname);
          }
          if (DnsSoaSerialNumber != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSoaSerialNumber);
          }
          if (DnsSoaRefreshInterval != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSoaRefreshInterval);
          }
          if (DnsSoaRetryInterval != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSoaRetryInterval);
          }
          if (DnsSoaExpireLimit != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSoaExpireLimit);
          }
          if (DnsSoaMininumTtl != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsSoaMininumTtl);
          }
          if (DnsPtrDomainName.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsPtrDomainName);
          }
          if (DnsMinfoR.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMinfoR);
          }
          if (DnsMinfoE.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMinfoE);
          }
          if (DnsMxPreference != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsMxPreference);
          }
          if (DnsMxMailExchange.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsMxMailExchange);
          }
          if (DnsTxtLength != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DnsTxtLength);
          }
          if (DnsTxt.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsTxt);
          }
          if (DnsNs.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsNs);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(_DnsResp other) {
          if (other == null) {
            return;
          }
          if (other.DnsRespType != 0) {
            DnsRespType = other.DnsRespType;
          }
          if (other.DnsRespClass != 0) {
            DnsRespClass = other.DnsRespClass;
          }
          if (other.DnsRespCacheFlush != false) {
            DnsRespCacheFlush = other.DnsRespCacheFlush;
          }
          if (other.DnsRespExtRcode != 0) {
            DnsRespExtRcode = other.DnsRespExtRcode;
          }
          if (other.DnsRespEdns0Version != 0) {
            DnsRespEdns0Version = other.DnsRespEdns0Version;
          }
          if (other.DnsRespZ != 0) {
            DnsRespZ = other.DnsRespZ;
          }
          if (other.DnsRespZDo != false) {
            DnsRespZDo = other.DnsRespZDo;
          }
          if (other.DnsRespZReserved != 0) {
            DnsRespZReserved = other.DnsRespZReserved;
          }
          if (other.DnsRespName.Length != 0) {
            DnsRespName = other.DnsRespName;
          }
          if (other.DnsRespTtl != 0) {
            DnsRespTtl = other.DnsRespTtl;
          }
          if (other.DnsRespLen != 0) {
            DnsRespLen = other.DnsRespLen;
          }
          if (other.DnsRespValue.Length != 0) {
            DnsRespValue = other.DnsRespValue;
          }
          if (other.DnsSrvService.Length != 0) {
            DnsSrvService = other.DnsSrvService;
          }
          if (other.DnsSrvProto.Length != 0) {
            DnsSrvProto = other.DnsSrvProto;
          }
          if (other.DnsSrvName.Length != 0) {
            DnsSrvName = other.DnsSrvName;
          }
          if (other.DnsSrvPriority != 0) {
            DnsSrvPriority = other.DnsSrvPriority;
          }
          if (other.DnsSrvWeight != 0) {
            DnsSrvWeight = other.DnsSrvWeight;
          }
          if (other.DnsSrvPort != 0) {
            DnsSrvPort = other.DnsSrvPort;
          }
          if (other.DnsSrvTarget.Length != 0) {
            DnsSrvTarget = other.DnsSrvTarget;
          }
          if (other.DnsNaptrOrder != 0) {
            DnsNaptrOrder = other.DnsNaptrOrder;
          }
          if (other.DnsNaptrPreference != 0) {
            DnsNaptrPreference = other.DnsNaptrPreference;
          }
          if (other.DnsNaptrFlagsLength != 0) {
            DnsNaptrFlagsLength = other.DnsNaptrFlagsLength;
          }
          if (other.DnsNaptrFlags.Length != 0) {
            DnsNaptrFlags = other.DnsNaptrFlags;
          }
          if (other.DnsNaptrServiceLength != 0) {
            DnsNaptrServiceLength = other.DnsNaptrServiceLength;
          }
          if (other.DnsNaptrService.Length != 0) {
            DnsNaptrService = other.DnsNaptrService;
          }
          if (other.DnsNaptrRegexLength != 0) {
            DnsNaptrRegexLength = other.DnsNaptrRegexLength;
          }
          if (other.DnsNaptrRegex.Length != 0) {
            DnsNaptrRegex = other.DnsNaptrRegex;
          }
          if (other.DnsNaptrReplacementLength != 0) {
            DnsNaptrReplacementLength = other.DnsNaptrReplacementLength;
          }
          if (other.DnsNaptrReplacement.Length != 0) {
            DnsNaptrReplacement = other.DnsNaptrReplacement;
          }
          if (other.DnsA.Length != 0) {
            DnsA = other.DnsA;
          }
          if (other.DnsMd.Length != 0) {
            DnsMd = other.DnsMd;
          }
          if (other.DnsMf.Length != 0) {
            DnsMf = other.DnsMf;
          }
          if (other.DnsMb.Length != 0) {
            DnsMb = other.DnsMb;
          }
          if (other.DnsMg.Length != 0) {
            DnsMg = other.DnsMg;
          }
          if (other.DnsMr.Length != 0) {
            DnsMr = other.DnsMr;
          }
          if (other.DnsNull.Length != 0) {
            DnsNull = other.DnsNull;
          }
          if (other.DnsAaaa.Length != 0) {
            DnsAaaa = other.DnsAaaa;
          }
          if (other.DnsCname.Length != 0) {
            DnsCname = other.DnsCname;
          }
          if (other.DnsRrUdpPayloadSize != 0) {
            DnsRrUdpPayloadSize = other.DnsRrUdpPayloadSize;
          }
          if (other.DnsSoaMname.Length != 0) {
            DnsSoaMname = other.DnsSoaMname;
          }
          if (other.DnsSoaRname.Length != 0) {
            DnsSoaRname = other.DnsSoaRname;
          }
          if (other.DnsSoaSerialNumber != 0) {
            DnsSoaSerialNumber = other.DnsSoaSerialNumber;
          }
          if (other.DnsSoaRefreshInterval != 0) {
            DnsSoaRefreshInterval = other.DnsSoaRefreshInterval;
          }
          if (other.DnsSoaRetryInterval != 0) {
            DnsSoaRetryInterval = other.DnsSoaRetryInterval;
          }
          if (other.DnsSoaExpireLimit != 0) {
            DnsSoaExpireLimit = other.DnsSoaExpireLimit;
          }
          if (other.DnsSoaMininumTtl != 0) {
            DnsSoaMininumTtl = other.DnsSoaMininumTtl;
          }
          if (other.DnsPtrDomainName.Length != 0) {
            DnsPtrDomainName = other.DnsPtrDomainName;
          }
          if (other.DnsMinfoR.Length != 0) {
            DnsMinfoR = other.DnsMinfoR;
          }
          if (other.DnsMinfoE.Length != 0) {
            DnsMinfoE = other.DnsMinfoE;
          }
          if (other.DnsMxPreference != 0) {
            DnsMxPreference = other.DnsMxPreference;
          }
          if (other.DnsMxMailExchange.Length != 0) {
            DnsMxMailExchange = other.DnsMxMailExchange;
          }
          if (other.DnsTxtLength != 0) {
            DnsTxtLength = other.DnsTxtLength;
          }
          if (other.DnsTxt.Length != 0) {
            DnsTxt = other.DnsTxt;
          }
          if (other.DnsNs.Length != 0) {
            DnsNs = other.DnsNs;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                DnsRespType = input.ReadUInt32();
                break;
              }
              case 16: {
                DnsRespClass = input.ReadUInt32();
                break;
              }
              case 24: {
                DnsRespCacheFlush = input.ReadBool();
                break;
              }
              case 32: {
                DnsRespExtRcode = input.ReadUInt32();
                break;
              }
              case 40: {
                DnsRespEdns0Version = input.ReadUInt32();
                break;
              }
              case 48: {
                DnsRespZ = input.ReadUInt32();
                break;
              }
              case 56: {
                DnsRespZDo = input.ReadBool();
                break;
              }
              case 64: {
                DnsRespZReserved = input.ReadUInt32();
                break;
              }
              case 74: {
                DnsRespName = input.ReadString();
                break;
              }
              case 80: {
                DnsRespTtl = input.ReadInt32();
                break;
              }
              case 88: {
                DnsRespLen = input.ReadUInt32();
                break;
              }
              case 98: {
                DnsRespValue = input.ReadString();
                break;
              }
              case 106: {
                DnsSrvService = input.ReadString();
                break;
              }
              case 114: {
                DnsSrvProto = input.ReadString();
                break;
              }
              case 122: {
                DnsSrvName = input.ReadString();
                break;
              }
              case 128: {
                DnsSrvPriority = input.ReadUInt32();
                break;
              }
              case 136: {
                DnsSrvWeight = input.ReadUInt32();
                break;
              }
              case 144: {
                DnsSrvPort = input.ReadUInt32();
                break;
              }
              case 154: {
                DnsSrvTarget = input.ReadString();
                break;
              }
              case 160: {
                DnsNaptrOrder = input.ReadUInt32();
                break;
              }
              case 168: {
                DnsNaptrPreference = input.ReadUInt32();
                break;
              }
              case 176: {
                DnsNaptrFlagsLength = input.ReadUInt32();
                break;
              }
              case 186: {
                DnsNaptrFlags = input.ReadString();
                break;
              }
              case 192: {
                DnsNaptrServiceLength = input.ReadUInt32();
                break;
              }
              case 202: {
                DnsNaptrService = input.ReadString();
                break;
              }
              case 208: {
                DnsNaptrRegexLength = input.ReadUInt32();
                break;
              }
              case 218: {
                DnsNaptrRegex = input.ReadString();
                break;
              }
              case 224: {
                DnsNaptrReplacementLength = input.ReadUInt32();
                break;
              }
              case 234: {
                DnsNaptrReplacement = input.ReadString();
                break;
              }
              case 242: {
                DnsA = input.ReadBytes();
                break;
              }
              case 250: {
                DnsMd = input.ReadString();
                break;
              }
              case 258: {
                DnsMf = input.ReadString();
                break;
              }
              case 266: {
                DnsMb = input.ReadString();
                break;
              }
              case 274: {
                DnsMg = input.ReadString();
                break;
              }
              case 282: {
                DnsMr = input.ReadString();
                break;
              }
              case 290: {
                DnsNull = input.ReadBytes();
                break;
              }
              case 298: {
                DnsAaaa = input.ReadBytes();
                break;
              }
              case 306: {
                DnsCname = input.ReadString();
                break;
              }
              case 312: {
                DnsRrUdpPayloadSize = input.ReadUInt32();
                break;
              }
              case 322: {
                DnsSoaMname = input.ReadString();
                break;
              }
              case 330: {
                DnsSoaRname = input.ReadString();
                break;
              }
              case 336: {
                DnsSoaSerialNumber = input.ReadUInt32();
                break;
              }
              case 344: {
                DnsSoaRefreshInterval = input.ReadUInt32();
                break;
              }
              case 352: {
                DnsSoaRetryInterval = input.ReadUInt32();
                break;
              }
              case 360: {
                DnsSoaExpireLimit = input.ReadUInt32();
                break;
              }
              case 368: {
                DnsSoaMininumTtl = input.ReadUInt32();
                break;
              }
              case 378: {
                DnsPtrDomainName = input.ReadString();
                break;
              }
              case 386: {
                DnsMinfoR = input.ReadString();
                break;
              }
              case 394: {
                DnsMinfoE = input.ReadString();
                break;
              }
              case 400: {
                DnsMxPreference = input.ReadUInt32();
                break;
              }
              case 410: {
                DnsMxMailExchange = input.ReadString();
                break;
              }
              case 416: {
                DnsTxtLength = input.ReadUInt32();
                break;
              }
              case 426: {
                DnsTxt = input.ReadString();
                break;
              }
              case 434: {
                DnsNs = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
