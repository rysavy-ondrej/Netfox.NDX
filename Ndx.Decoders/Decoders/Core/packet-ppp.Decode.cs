// This is file was generated by netdx on (2017-11-24 12:36:18 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Core
{
  public sealed partial class Ppp
  {
    public static Ppp DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Ppp DecodeJson(JToken token)
    {
      var obj = new Ppp();
      {
        var val = token["ppp_ppp_hdlc_fragment"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppHdlcFragment = StringToBytes(propValue); }
      }
      {
        var val = token["ppp_ppp_hdlc_data"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppHdlcData = StringToBytes(propValue); }
      }
      {
        var val = token["ppp_ppp_direction"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppDirection = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_ppp_address"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppAddress = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_control"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppControl = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_protocol"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppProtocol = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_code"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppCode = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_ppp_identifier"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppIdentifier = default(UInt32); }
      }
      {
        var val = token["ppp_ppp_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_ppp_magic_number"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppMagicNumber = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_oui"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppOui = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_kind"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppKind = default(UInt32); }
      }
      {
        var val = token["ppp_ppp_data"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppData = StringToBytes(propValue); }
      }
      {
        var val = token["ppp_ppp_fcs_16"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppFcs16 = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_fcs_32"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppFcs32 = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_ppp_fcs_status"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppFcsStatus = default(UInt32); }
      }
      {
        var val = token["pppmuxcp_flags_pppmuxcp_flags_pid"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpFlagsPid = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["pppmuxcp_flags_pppmuxcp_flags_field_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpFlagsFieldLength = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ppp_pppmuxcp_opt_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpOptType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_pppmuxcp_opt_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpOptLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_pppmuxcp_flags"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpFlags = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_pppmuxcp_sub_frame_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpSubFrameLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ppp_pppmuxcp_def_prot_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxcpDefProtId = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ppp_pppmux_protocol"];
        if (val != null) { var propValue = val.Value<string>(); obj.PppmuxProtocol = Convert.ToUInt32(propValue, 16); }
      }
      return obj;
    }
    public static Ppp DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Ppp();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Ppp obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "ppp_ppp_hdlc_fragment": obj.PppHdlcFragment = StringToBytes(propValue); break;
      case "ppp_ppp_hdlc_data": obj.PppHdlcData = StringToBytes(propValue); break;
      case "ppp_ppp_direction": obj.PppDirection = Convert.ToUInt32(propValue, 10); break;
      case "ppp_ppp_address": obj.PppAddress = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_control": obj.PppControl = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_protocol": obj.PppProtocol = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_code": obj.PppCode = Convert.ToUInt32(propValue, 10); break;
      case "ppp_ppp_identifier": obj.PppIdentifier = default(UInt32); break;
      case "ppp_ppp_length": obj.PppLength = Convert.ToUInt32(propValue, 10); break;
      case "ppp_ppp_magic_number": obj.PppMagicNumber = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_oui": obj.PppOui = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_kind": obj.PppKind = default(UInt32); break;
      case "ppp_ppp_data": obj.PppData = StringToBytes(propValue); break;
      case "ppp_ppp_fcs_16": obj.PppFcs16 = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_fcs_32": obj.PppFcs32 = Convert.ToUInt32(propValue, 16); break;
      case "ppp_ppp_fcs_status": obj.PppFcsStatus = default(UInt32); break;
      case "pppmuxcp_flags_pppmuxcp_flags_pid": obj.PppmuxcpFlagsPid = Convert.ToInt32(propValue, 10) != 0; break;
      case "pppmuxcp_flags_pppmuxcp_flags_field_length": obj.PppmuxcpFlagsFieldLength = Convert.ToInt32(propValue, 10) != 0; break;
      case "ppp_pppmuxcp_opt_type": obj.PppmuxcpOptType = Convert.ToUInt32(propValue, 10); break;
      case "ppp_pppmuxcp_opt_length": obj.PppmuxcpOptLength = Convert.ToUInt32(propValue, 10); break;
      case "ppp_pppmuxcp_flags": obj.PppmuxcpFlags = Convert.ToUInt32(propValue, 16); break;
      case "ppp_pppmuxcp_sub_frame_length": obj.PppmuxcpSubFrameLength = Convert.ToUInt32(propValue, 10); break;
      case "ppp_pppmuxcp_def_prot_id": obj.PppmuxcpDefProtId = Convert.ToUInt32(propValue, 16); break;
      case "ppp_pppmux_protocol": obj.PppmuxProtocol = Convert.ToUInt32(propValue, 16); break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
