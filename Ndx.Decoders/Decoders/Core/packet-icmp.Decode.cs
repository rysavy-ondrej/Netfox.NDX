// This is file was generated by netdx on (2017-11-24 12:35:08 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Core
{
  public sealed partial class Icmp
  {
    public static Icmp DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Icmp DecodeJson(JToken token)
    {
      var obj = new Icmp();
      {
        var val = token["icmp_icmp_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_code"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpCode = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_checksum"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpChecksum = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["icmp_checksum_icmp_checksum_status"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpChecksumStatus = default(UInt32); }
      }
      {
        var val = token["icmp_icmp_unused"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpUnused = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_reserved"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpReserved = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_ident"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIdent = default(UInt32); }
      }
      {
        var val = token["icmp_icmp_seq"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpSeq = default(UInt32); }
      }
      {
        var val = token["icmp_icmp_seq_le"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpSeqLe = default(UInt32); }
      }
      {
        var val = token["icmp_icmp_mtu"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMtu = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_num_addrs"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpNumAddrs = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_addr_entry_size"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpAddrEntrySize = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_lifetime"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpLifetime = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_pointer"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpPointer = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_router_address"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpRouterAddress = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_pref_level"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpPrefLevel = Convert.ToInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_originate_timestamp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpOriginateTimestamp = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_receive_timestamp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpReceiveTimestamp = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_transmit_timestamp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpTransmitTimestamp = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_address_mask"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpAddressMask = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_redir_gw"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpRedirGw = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_mip_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mip_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mip_prefixlength"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipPrefixlength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mip_seq"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipSeq = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mip_life"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipLife = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mip_flags"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipFlags = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["icmp_icmp_mip_r"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipR = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_b"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipB = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_h"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipH = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_f"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipF = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_m"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipM = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_g"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipG = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_v"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipV = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_rt"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipRt = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_u"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipU = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_x"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipX = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mip_reserved"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipReserved = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["icmp_icmp_mip_coa"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipCoa = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_mip_challenge"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipChallenge = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_mip_content"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMipContent = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_ext"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExt = default(Int32); }
      }
      {
        var val = token["icmp_ext_icmp_ext_version"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtVersion = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_ext_icmp_ext_res"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtRes = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["icmp_ext_icmp_ext_checksum"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtChecksum = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["icmp_ext_checksum_icmp_ext_checksum_status"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtChecksumStatus = default(UInt32); }
      }
      {
        var val = token["icmp_ext_icmp_ext_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_ext_icmp_ext_class"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtClass = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_ext_icmp_ext_ctype"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtCtype = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_ext_icmp_ext_data"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpExtData = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_mpls_label"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMplsLabel = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mpls_exp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMplsExp = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mpls_s"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMplsS = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_mpls_ttl"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMplsTtl = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_mpls_data"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpMplsData = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_resp_in"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpRespIn = default(Int64); }
      }
      {
        var val = token["icmp_icmp_no_resp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpNoResp = default(Int32); }
      }
      {
        var val = token["icmp_icmp_resp_to"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpRespTo = default(Int64); }
      }
      {
        var val = token["icmp_icmp_resptime"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpResptime = Convert.ToDouble(propValue); }
      }
      {
        var val = token["icmp_icmp_data_time"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpDataTime = default(Int64); }
      }
      {
        var val = token["icmp_icmp_data_time_relative"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpDataTimeRelative = Convert.ToSingle(propValue); }
      }
      {
        var val = token["icmp_icmp_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_length_icmp_length_original_datagram"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpLengthOriginalDatagram = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_role"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoRole = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_reserved"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoReserved = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_ifindex"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIfindex = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_int_info_ipaddr"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIpaddr = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_int_info_name_present"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoNamePresent = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_int_info_mtu"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoMtu = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["icmp_icmp_int_info_index"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIndex = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_afi"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoAfi = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_ipv4"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIpv4 = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_int_info_ipv6"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIpv6 = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["icmp_icmp_int_info_ipunknown"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoIpunknown = StringToBytes(propValue); }
      }
      {
        var val = token["icmp_icmp_int_info_name_length"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoNameLength = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["icmp_icmp_int_info_name"];
        if (val != null) { var propValue = val.Value<string>(); obj.IcmpIntInfoName = propValue; }
      }
      return obj;
    }
    public static Icmp DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Icmp();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Icmp obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "icmp_icmp_type": obj.IcmpType = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_code": obj.IcmpCode = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_checksum": obj.IcmpChecksum = Convert.ToUInt32(propValue, 16); break;
      case "icmp_checksum_icmp_checksum_status": obj.IcmpChecksumStatus = default(UInt32); break;
      case "icmp_icmp_unused": obj.IcmpUnused = StringToBytes(propValue); break;
      case "icmp_icmp_reserved": obj.IcmpReserved = StringToBytes(propValue); break;
      case "icmp_icmp_ident": obj.IcmpIdent = default(UInt32); break;
      case "icmp_icmp_seq": obj.IcmpSeq = default(UInt32); break;
      case "icmp_icmp_seq_le": obj.IcmpSeqLe = default(UInt32); break;
      case "icmp_icmp_mtu": obj.IcmpMtu = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_num_addrs": obj.IcmpNumAddrs = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_addr_entry_size": obj.IcmpAddrEntrySize = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_lifetime": obj.IcmpLifetime = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_pointer": obj.IcmpPointer = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_router_address": obj.IcmpRouterAddress = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_pref_level": obj.IcmpPrefLevel = Convert.ToInt32(propValue, 10); break;
      case "icmp_icmp_originate_timestamp": obj.IcmpOriginateTimestamp = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_receive_timestamp": obj.IcmpReceiveTimestamp = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_transmit_timestamp": obj.IcmpTransmitTimestamp = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_address_mask": obj.IcmpAddressMask = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_redir_gw": obj.IcmpRedirGw = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_mip_type": obj.IcmpMipType = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mip_length": obj.IcmpMipLength = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mip_prefixlength": obj.IcmpMipPrefixlength = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mip_seq": obj.IcmpMipSeq = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mip_life": obj.IcmpMipLife = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mip_flags": obj.IcmpMipFlags = Convert.ToUInt32(propValue, 16); break;
      case "icmp_icmp_mip_r": obj.IcmpMipR = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_b": obj.IcmpMipB = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_h": obj.IcmpMipH = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_f": obj.IcmpMipF = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_m": obj.IcmpMipM = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_g": obj.IcmpMipG = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_v": obj.IcmpMipV = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_rt": obj.IcmpMipRt = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_u": obj.IcmpMipU = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_x": obj.IcmpMipX = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mip_reserved": obj.IcmpMipReserved = Convert.ToUInt32(propValue, 16); break;
      case "icmp_icmp_mip_coa": obj.IcmpMipCoa = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_mip_challenge": obj.IcmpMipChallenge = StringToBytes(propValue); break;
      case "icmp_icmp_mip_content": obj.IcmpMipContent = StringToBytes(propValue); break;
      case "icmp_icmp_ext": obj.IcmpExt = default(Int32); break;
      case "icmp_ext_icmp_ext_version": obj.IcmpExtVersion = Convert.ToUInt32(propValue, 10); break;
      case "icmp_ext_icmp_ext_res": obj.IcmpExtRes = Convert.ToUInt32(propValue, 16); break;
      case "icmp_ext_icmp_ext_checksum": obj.IcmpExtChecksum = Convert.ToUInt32(propValue, 16); break;
      case "icmp_ext_checksum_icmp_ext_checksum_status": obj.IcmpExtChecksumStatus = default(UInt32); break;
      case "icmp_ext_icmp_ext_length": obj.IcmpExtLength = Convert.ToUInt32(propValue, 10); break;
      case "icmp_ext_icmp_ext_class": obj.IcmpExtClass = Convert.ToUInt32(propValue, 10); break;
      case "icmp_ext_icmp_ext_ctype": obj.IcmpExtCtype = Convert.ToUInt32(propValue, 10); break;
      case "icmp_ext_icmp_ext_data": obj.IcmpExtData = StringToBytes(propValue); break;
      case "icmp_icmp_mpls_label": obj.IcmpMplsLabel = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mpls_exp": obj.IcmpMplsExp = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mpls_s": obj.IcmpMplsS = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_mpls_ttl": obj.IcmpMplsTtl = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_mpls_data": obj.IcmpMplsData = StringToBytes(propValue); break;
      case "icmp_icmp_resp_in": obj.IcmpRespIn = default(Int64); break;
      case "icmp_icmp_no_resp": obj.IcmpNoResp = default(Int32); break;
      case "icmp_icmp_resp_to": obj.IcmpRespTo = default(Int64); break;
      case "icmp_icmp_resptime": obj.IcmpResptime = Convert.ToDouble(propValue); break;
      case "icmp_icmp_data_time": obj.IcmpDataTime = default(Int64); break;
      case "icmp_icmp_data_time_relative": obj.IcmpDataTimeRelative = Convert.ToSingle(propValue); break;
      case "icmp_icmp_length": obj.IcmpLength = Convert.ToUInt32(propValue, 10); break;
      case "icmp_length_icmp_length_original_datagram": obj.IcmpLengthOriginalDatagram = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_role": obj.IcmpIntInfoRole = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_reserved": obj.IcmpIntInfoReserved = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_ifindex": obj.IcmpIntInfoIfindex = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_int_info_ipaddr": obj.IcmpIntInfoIpaddr = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_int_info_name_present": obj.IcmpIntInfoNamePresent = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_int_info_mtu": obj.IcmpIntInfoMtu = Convert.ToInt32(propValue, 10) != 0; break;
      case "icmp_icmp_int_info_index": obj.IcmpIntInfoIndex = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_afi": obj.IcmpIntInfoAfi = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_ipv4": obj.IcmpIntInfoIpv4 = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_int_info_ipv6": obj.IcmpIntInfoIpv6 = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "icmp_icmp_int_info_ipunknown": obj.IcmpIntInfoIpunknown = StringToBytes(propValue); break;
      case "icmp_icmp_int_info_name_length": obj.IcmpIntInfoNameLength = Convert.ToUInt32(propValue, 10); break;
      case "icmp_icmp_int_info_name": obj.IcmpIntInfoName = propValue; break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
