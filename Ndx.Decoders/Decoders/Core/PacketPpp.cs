// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-ppp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-ppp.proto</summary>
  public static partial class PacketPppReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-ppp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketPppReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtcHBwLnByb3RvEhFOZHguRGVjb2RlcnMuQ29yZSKfBAoDUHBw",
            "EhcKD1BwcEhkbGNGcmFnbWVudBgBIAEoDBITCgtQcHBIZGxjRGF0YRgCIAEo",
            "DBIUCgxQcHBEaXJlY3Rpb24YAyABKA0SEgoKUHBwQWRkcmVzcxgEIAEoDRIS",
            "CgpQcHBDb250cm9sGAUgASgNEhMKC1BwcFByb3RvY29sGAYgASgNEg8KB1Bw",
            "cENvZGUYByABKA0SFQoNUHBwSWRlbnRpZmllchgIIAEoDRIRCglQcHBMZW5n",
            "dGgYCSABKA0SFgoOUHBwTWFnaWNOdW1iZXIYCiABKA0SDgoGUHBwT3VpGAsg",
            "ASgNEg8KB1BwcEtpbmQYDCABKA0SDwoHUHBwRGF0YRgNIAEoDBIQCghQcHBG",
            "Y3MxNhgOIAEoDRIQCghQcHBGY3MzMhgPIAEoDRIUCgxQcHBGY3NTdGF0dXMY",
            "ECABKA0SGAoQUHBwbXV4Y3BGbGFnc1BpZBgRIAEoCBIgChhQcHBtdXhjcEZs",
            "YWdzRmllbGRMZW5ndGgYEiABKAgSFwoPUHBwbXV4Y3BPcHRUeXBlGBMgASgN",
            "EhkKEVBwcG11eGNwT3B0TGVuZ3RoGBQgASgNEhUKDVBwcG11eGNwRmxhZ3MY",
            "FSABKA0SHgoWUHBwbXV4Y3BTdWJGcmFtZUxlbmd0aBgWIAEoDRIZChFQcHBt",
            "dXhjcERlZlByb3RJZBgXIAEoDRIWCg5QcHBtdXhQcm90b2NvbBgYIAEoDWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Ppp), global::Ndx.Decoders.Core.Ppp.Parser, new[]{ "PppHdlcFragment", "PppHdlcData", "PppDirection", "PppAddress", "PppControl", "PppProtocol", "PppCode", "PppIdentifier", "PppLength", "PppMagicNumber", "PppOui", "PppKind", "PppData", "PppFcs16", "PppFcs32", "PppFcsStatus", "PppmuxcpFlagsPid", "PppmuxcpFlagsFieldLength", "PppmuxcpOptType", "PppmuxcpOptLength", "PppmuxcpFlags", "PppmuxcpSubFrameLength", "PppmuxcpDefProtId", "PppmuxProtocol" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ppp : pb::IMessage<Ppp> {
    private static readonly pb::MessageParser<Ppp> _parser = new pb::MessageParser<Ppp>(() => new Ppp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ppp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketPppReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ppp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ppp(Ppp other) : this() {
      pppHdlcFragment_ = other.pppHdlcFragment_;
      pppHdlcData_ = other.pppHdlcData_;
      pppDirection_ = other.pppDirection_;
      pppAddress_ = other.pppAddress_;
      pppControl_ = other.pppControl_;
      pppProtocol_ = other.pppProtocol_;
      pppCode_ = other.pppCode_;
      pppIdentifier_ = other.pppIdentifier_;
      pppLength_ = other.pppLength_;
      pppMagicNumber_ = other.pppMagicNumber_;
      pppOui_ = other.pppOui_;
      pppKind_ = other.pppKind_;
      pppData_ = other.pppData_;
      pppFcs16_ = other.pppFcs16_;
      pppFcs32_ = other.pppFcs32_;
      pppFcsStatus_ = other.pppFcsStatus_;
      pppmuxcpFlagsPid_ = other.pppmuxcpFlagsPid_;
      pppmuxcpFlagsFieldLength_ = other.pppmuxcpFlagsFieldLength_;
      pppmuxcpOptType_ = other.pppmuxcpOptType_;
      pppmuxcpOptLength_ = other.pppmuxcpOptLength_;
      pppmuxcpFlags_ = other.pppmuxcpFlags_;
      pppmuxcpSubFrameLength_ = other.pppmuxcpSubFrameLength_;
      pppmuxcpDefProtId_ = other.pppmuxcpDefProtId_;
      pppmuxProtocol_ = other.pppmuxProtocol_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ppp Clone() {
      return new Ppp(this);
    }

    /// <summary>Field number for the "PppHdlcFragment" field.</summary>
    public const int PppHdlcFragmentFieldNumber = 1;
    private pb::ByteString pppHdlcFragment_ = pb::ByteString.Empty;
    /// <summary>
    /// PPP Fragment ('ppp_ppp_hdlc_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PppHdlcFragment {
      get { return pppHdlcFragment_; }
      set {
        pppHdlcFragment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PppHdlcData" field.</summary>
    public const int PppHdlcDataFieldNumber = 2;
    private pb::ByteString pppHdlcData_ = pb::ByteString.Empty;
    /// <summary>
    /// PPP Data ('ppp_ppp_hdlc_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PppHdlcData {
      get { return pppHdlcData_; }
      set {
        pppHdlcData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PppDirection" field.</summary>
    public const int PppDirectionFieldNumber = 3;
    private uint pppDirection_;
    /// <summary>
    /// Direction ('ppp_ppp_direction')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppDirection {
      get { return pppDirection_; }
      set {
        pppDirection_ = value;
      }
    }

    /// <summary>Field number for the "PppAddress" field.</summary>
    public const int PppAddressFieldNumber = 4;
    private uint pppAddress_;
    /// <summary>
    /// Address ('ppp_ppp_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppAddress {
      get { return pppAddress_; }
      set {
        pppAddress_ = value;
      }
    }

    /// <summary>Field number for the "PppControl" field.</summary>
    public const int PppControlFieldNumber = 5;
    private uint pppControl_;
    /// <summary>
    /// Control ('ppp_ppp_control')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppControl {
      get { return pppControl_; }
      set {
        pppControl_ = value;
      }
    }

    /// <summary>Field number for the "PppProtocol" field.</summary>
    public const int PppProtocolFieldNumber = 6;
    private uint pppProtocol_;
    /// <summary>
    /// Protocol ('ppp_ppp_protocol')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppProtocol {
      get { return pppProtocol_; }
      set {
        pppProtocol_ = value;
      }
    }

    /// <summary>Field number for the "PppCode" field.</summary>
    public const int PppCodeFieldNumber = 7;
    private uint pppCode_;
    /// <summary>
    /// Code ('ppp_ppp_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppCode {
      get { return pppCode_; }
      set {
        pppCode_ = value;
      }
    }

    /// <summary>Field number for the "PppIdentifier" field.</summary>
    public const int PppIdentifierFieldNumber = 8;
    private uint pppIdentifier_;
    /// <summary>
    /// Identifier ('ppp_ppp_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppIdentifier {
      get { return pppIdentifier_; }
      set {
        pppIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "PppLength" field.</summary>
    public const int PppLengthFieldNumber = 9;
    private uint pppLength_;
    /// <summary>
    /// Length ('ppp_ppp_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppLength {
      get { return pppLength_; }
      set {
        pppLength_ = value;
      }
    }

    /// <summary>Field number for the "PppMagicNumber" field.</summary>
    public const int PppMagicNumberFieldNumber = 10;
    private uint pppMagicNumber_;
    /// <summary>
    /// Magic Number ('ppp_ppp_magic_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppMagicNumber {
      get { return pppMagicNumber_; }
      set {
        pppMagicNumber_ = value;
      }
    }

    /// <summary>Field number for the "PppOui" field.</summary>
    public const int PppOuiFieldNumber = 11;
    private uint pppOui_;
    /// <summary>
    /// OUI ('ppp_ppp_oui')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppOui {
      get { return pppOui_; }
      set {
        pppOui_ = value;
      }
    }

    /// <summary>Field number for the "PppKind" field.</summary>
    public const int PppKindFieldNumber = 12;
    private uint pppKind_;
    /// <summary>
    /// Kind ('ppp_ppp_kind')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppKind {
      get { return pppKind_; }
      set {
        pppKind_ = value;
      }
    }

    /// <summary>Field number for the "PppData" field.</summary>
    public const int PppDataFieldNumber = 13;
    private pb::ByteString pppData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('ppp_ppp_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PppData {
      get { return pppData_; }
      set {
        pppData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PppFcs16" field.</summary>
    public const int PppFcs16FieldNumber = 14;
    private uint pppFcs16_;
    /// <summary>
    /// FCS 16 ('ppp_ppp_fcs_16')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppFcs16 {
      get { return pppFcs16_; }
      set {
        pppFcs16_ = value;
      }
    }

    /// <summary>Field number for the "PppFcs32" field.</summary>
    public const int PppFcs32FieldNumber = 15;
    private uint pppFcs32_;
    /// <summary>
    /// FCS 32 ('ppp_ppp_fcs_32')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppFcs32 {
      get { return pppFcs32_; }
      set {
        pppFcs32_ = value;
      }
    }

    /// <summary>Field number for the "PppFcsStatus" field.</summary>
    public const int PppFcsStatusFieldNumber = 16;
    private uint pppFcsStatus_;
    /// <summary>
    /// FCS Status ('ppp_ppp_fcs_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppFcsStatus {
      get { return pppFcsStatus_; }
      set {
        pppFcsStatus_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpFlagsPid" field.</summary>
    public const int PppmuxcpFlagsPidFieldNumber = 17;
    private bool pppmuxcpFlagsPid_;
    /// <summary>
    /// PID ('pppmuxcp_flags_pppmuxcp_flags_pid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PppmuxcpFlagsPid {
      get { return pppmuxcpFlagsPid_; }
      set {
        pppmuxcpFlagsPid_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpFlagsFieldLength" field.</summary>
    public const int PppmuxcpFlagsFieldLengthFieldNumber = 18;
    private bool pppmuxcpFlagsFieldLength_;
    /// <summary>
    /// Length field ('pppmuxcp_flags_pppmuxcp_flags_field_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PppmuxcpFlagsFieldLength {
      get { return pppmuxcpFlagsFieldLength_; }
      set {
        pppmuxcpFlagsFieldLength_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpOptType" field.</summary>
    public const int PppmuxcpOptTypeFieldNumber = 19;
    private uint pppmuxcpOptType_;
    /// <summary>
    /// Type ('ppp_pppmuxcp_opt_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxcpOptType {
      get { return pppmuxcpOptType_; }
      set {
        pppmuxcpOptType_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpOptLength" field.</summary>
    public const int PppmuxcpOptLengthFieldNumber = 20;
    private uint pppmuxcpOptLength_;
    /// <summary>
    /// Length ('ppp_pppmuxcp_opt_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxcpOptLength {
      get { return pppmuxcpOptLength_; }
      set {
        pppmuxcpOptLength_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpFlags" field.</summary>
    public const int PppmuxcpFlagsFieldNumber = 21;
    private uint pppmuxcpFlags_;
    /// <summary>
    /// PFF/LXT ('ppp_pppmuxcp_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxcpFlags {
      get { return pppmuxcpFlags_; }
      set {
        pppmuxcpFlags_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpSubFrameLength" field.</summary>
    public const int PppmuxcpSubFrameLengthFieldNumber = 22;
    private uint pppmuxcpSubFrameLength_;
    /// <summary>
    /// Sub-frame Length ('ppp_pppmuxcp_sub_frame_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxcpSubFrameLength {
      get { return pppmuxcpSubFrameLength_; }
      set {
        pppmuxcpSubFrameLength_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxcpDefProtId" field.</summary>
    public const int PppmuxcpDefProtIdFieldNumber = 23;
    private uint pppmuxcpDefProtId_;
    /// <summary>
    /// Default Protocol ID ('ppp_pppmuxcp_def_prot_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxcpDefProtId {
      get { return pppmuxcpDefProtId_; }
      set {
        pppmuxcpDefProtId_ = value;
      }
    }

    /// <summary>Field number for the "PppmuxProtocol" field.</summary>
    public const int PppmuxProtocolFieldNumber = 24;
    private uint pppmuxProtocol_;
    /// <summary>
    /// Protocol ('ppp_pppmux_protocol')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PppmuxProtocol {
      get { return pppmuxProtocol_; }
      set {
        pppmuxProtocol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ppp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ppp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PppHdlcFragment != other.PppHdlcFragment) return false;
      if (PppHdlcData != other.PppHdlcData) return false;
      if (PppDirection != other.PppDirection) return false;
      if (PppAddress != other.PppAddress) return false;
      if (PppControl != other.PppControl) return false;
      if (PppProtocol != other.PppProtocol) return false;
      if (PppCode != other.PppCode) return false;
      if (PppIdentifier != other.PppIdentifier) return false;
      if (PppLength != other.PppLength) return false;
      if (PppMagicNumber != other.PppMagicNumber) return false;
      if (PppOui != other.PppOui) return false;
      if (PppKind != other.PppKind) return false;
      if (PppData != other.PppData) return false;
      if (PppFcs16 != other.PppFcs16) return false;
      if (PppFcs32 != other.PppFcs32) return false;
      if (PppFcsStatus != other.PppFcsStatus) return false;
      if (PppmuxcpFlagsPid != other.PppmuxcpFlagsPid) return false;
      if (PppmuxcpFlagsFieldLength != other.PppmuxcpFlagsFieldLength) return false;
      if (PppmuxcpOptType != other.PppmuxcpOptType) return false;
      if (PppmuxcpOptLength != other.PppmuxcpOptLength) return false;
      if (PppmuxcpFlags != other.PppmuxcpFlags) return false;
      if (PppmuxcpSubFrameLength != other.PppmuxcpSubFrameLength) return false;
      if (PppmuxcpDefProtId != other.PppmuxcpDefProtId) return false;
      if (PppmuxProtocol != other.PppmuxProtocol) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PppHdlcFragment.Length != 0) hash ^= PppHdlcFragment.GetHashCode();
      if (PppHdlcData.Length != 0) hash ^= PppHdlcData.GetHashCode();
      if (PppDirection != 0) hash ^= PppDirection.GetHashCode();
      if (PppAddress != 0) hash ^= PppAddress.GetHashCode();
      if (PppControl != 0) hash ^= PppControl.GetHashCode();
      if (PppProtocol != 0) hash ^= PppProtocol.GetHashCode();
      if (PppCode != 0) hash ^= PppCode.GetHashCode();
      if (PppIdentifier != 0) hash ^= PppIdentifier.GetHashCode();
      if (PppLength != 0) hash ^= PppLength.GetHashCode();
      if (PppMagicNumber != 0) hash ^= PppMagicNumber.GetHashCode();
      if (PppOui != 0) hash ^= PppOui.GetHashCode();
      if (PppKind != 0) hash ^= PppKind.GetHashCode();
      if (PppData.Length != 0) hash ^= PppData.GetHashCode();
      if (PppFcs16 != 0) hash ^= PppFcs16.GetHashCode();
      if (PppFcs32 != 0) hash ^= PppFcs32.GetHashCode();
      if (PppFcsStatus != 0) hash ^= PppFcsStatus.GetHashCode();
      if (PppmuxcpFlagsPid != false) hash ^= PppmuxcpFlagsPid.GetHashCode();
      if (PppmuxcpFlagsFieldLength != false) hash ^= PppmuxcpFlagsFieldLength.GetHashCode();
      if (PppmuxcpOptType != 0) hash ^= PppmuxcpOptType.GetHashCode();
      if (PppmuxcpOptLength != 0) hash ^= PppmuxcpOptLength.GetHashCode();
      if (PppmuxcpFlags != 0) hash ^= PppmuxcpFlags.GetHashCode();
      if (PppmuxcpSubFrameLength != 0) hash ^= PppmuxcpSubFrameLength.GetHashCode();
      if (PppmuxcpDefProtId != 0) hash ^= PppmuxcpDefProtId.GetHashCode();
      if (PppmuxProtocol != 0) hash ^= PppmuxProtocol.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PppHdlcFragment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PppHdlcFragment);
      }
      if (PppHdlcData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PppHdlcData);
      }
      if (PppDirection != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PppDirection);
      }
      if (PppAddress != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PppAddress);
      }
      if (PppControl != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PppControl);
      }
      if (PppProtocol != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PppProtocol);
      }
      if (PppCode != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(PppCode);
      }
      if (PppIdentifier != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PppIdentifier);
      }
      if (PppLength != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PppLength);
      }
      if (PppMagicNumber != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(PppMagicNumber);
      }
      if (PppOui != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PppOui);
      }
      if (PppKind != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PppKind);
      }
      if (PppData.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(PppData);
      }
      if (PppFcs16 != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(PppFcs16);
      }
      if (PppFcs32 != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(PppFcs32);
      }
      if (PppFcsStatus != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PppFcsStatus);
      }
      if (PppmuxcpFlagsPid != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PppmuxcpFlagsPid);
      }
      if (PppmuxcpFlagsFieldLength != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(PppmuxcpFlagsFieldLength);
      }
      if (PppmuxcpOptType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(PppmuxcpOptType);
      }
      if (PppmuxcpOptLength != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(PppmuxcpOptLength);
      }
      if (PppmuxcpFlags != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(PppmuxcpFlags);
      }
      if (PppmuxcpSubFrameLength != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PppmuxcpSubFrameLength);
      }
      if (PppmuxcpDefProtId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PppmuxcpDefProtId);
      }
      if (PppmuxProtocol != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(PppmuxProtocol);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PppHdlcFragment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PppHdlcFragment);
      }
      if (PppHdlcData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PppHdlcData);
      }
      if (PppDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppDirection);
      }
      if (PppAddress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppAddress);
      }
      if (PppControl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppControl);
      }
      if (PppProtocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppProtocol);
      }
      if (PppCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppCode);
      }
      if (PppIdentifier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppIdentifier);
      }
      if (PppLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppLength);
      }
      if (PppMagicNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppMagicNumber);
      }
      if (PppOui != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppOui);
      }
      if (PppKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppKind);
      }
      if (PppData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PppData);
      }
      if (PppFcs16 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppFcs16);
      }
      if (PppFcs32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PppFcs32);
      }
      if (PppFcsStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppFcsStatus);
      }
      if (PppmuxcpFlagsPid != false) {
        size += 2 + 1;
      }
      if (PppmuxcpFlagsFieldLength != false) {
        size += 2 + 1;
      }
      if (PppmuxcpOptType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxcpOptType);
      }
      if (PppmuxcpOptLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxcpOptLength);
      }
      if (PppmuxcpFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxcpFlags);
      }
      if (PppmuxcpSubFrameLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxcpSubFrameLength);
      }
      if (PppmuxcpDefProtId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxcpDefProtId);
      }
      if (PppmuxProtocol != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PppmuxProtocol);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ppp other) {
      if (other == null) {
        return;
      }
      if (other.PppHdlcFragment.Length != 0) {
        PppHdlcFragment = other.PppHdlcFragment;
      }
      if (other.PppHdlcData.Length != 0) {
        PppHdlcData = other.PppHdlcData;
      }
      if (other.PppDirection != 0) {
        PppDirection = other.PppDirection;
      }
      if (other.PppAddress != 0) {
        PppAddress = other.PppAddress;
      }
      if (other.PppControl != 0) {
        PppControl = other.PppControl;
      }
      if (other.PppProtocol != 0) {
        PppProtocol = other.PppProtocol;
      }
      if (other.PppCode != 0) {
        PppCode = other.PppCode;
      }
      if (other.PppIdentifier != 0) {
        PppIdentifier = other.PppIdentifier;
      }
      if (other.PppLength != 0) {
        PppLength = other.PppLength;
      }
      if (other.PppMagicNumber != 0) {
        PppMagicNumber = other.PppMagicNumber;
      }
      if (other.PppOui != 0) {
        PppOui = other.PppOui;
      }
      if (other.PppKind != 0) {
        PppKind = other.PppKind;
      }
      if (other.PppData.Length != 0) {
        PppData = other.PppData;
      }
      if (other.PppFcs16 != 0) {
        PppFcs16 = other.PppFcs16;
      }
      if (other.PppFcs32 != 0) {
        PppFcs32 = other.PppFcs32;
      }
      if (other.PppFcsStatus != 0) {
        PppFcsStatus = other.PppFcsStatus;
      }
      if (other.PppmuxcpFlagsPid != false) {
        PppmuxcpFlagsPid = other.PppmuxcpFlagsPid;
      }
      if (other.PppmuxcpFlagsFieldLength != false) {
        PppmuxcpFlagsFieldLength = other.PppmuxcpFlagsFieldLength;
      }
      if (other.PppmuxcpOptType != 0) {
        PppmuxcpOptType = other.PppmuxcpOptType;
      }
      if (other.PppmuxcpOptLength != 0) {
        PppmuxcpOptLength = other.PppmuxcpOptLength;
      }
      if (other.PppmuxcpFlags != 0) {
        PppmuxcpFlags = other.PppmuxcpFlags;
      }
      if (other.PppmuxcpSubFrameLength != 0) {
        PppmuxcpSubFrameLength = other.PppmuxcpSubFrameLength;
      }
      if (other.PppmuxcpDefProtId != 0) {
        PppmuxcpDefProtId = other.PppmuxcpDefProtId;
      }
      if (other.PppmuxProtocol != 0) {
        PppmuxProtocol = other.PppmuxProtocol;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PppHdlcFragment = input.ReadBytes();
            break;
          }
          case 18: {
            PppHdlcData = input.ReadBytes();
            break;
          }
          case 24: {
            PppDirection = input.ReadUInt32();
            break;
          }
          case 32: {
            PppAddress = input.ReadUInt32();
            break;
          }
          case 40: {
            PppControl = input.ReadUInt32();
            break;
          }
          case 48: {
            PppProtocol = input.ReadUInt32();
            break;
          }
          case 56: {
            PppCode = input.ReadUInt32();
            break;
          }
          case 64: {
            PppIdentifier = input.ReadUInt32();
            break;
          }
          case 72: {
            PppLength = input.ReadUInt32();
            break;
          }
          case 80: {
            PppMagicNumber = input.ReadUInt32();
            break;
          }
          case 88: {
            PppOui = input.ReadUInt32();
            break;
          }
          case 96: {
            PppKind = input.ReadUInt32();
            break;
          }
          case 106: {
            PppData = input.ReadBytes();
            break;
          }
          case 112: {
            PppFcs16 = input.ReadUInt32();
            break;
          }
          case 120: {
            PppFcs32 = input.ReadUInt32();
            break;
          }
          case 128: {
            PppFcsStatus = input.ReadUInt32();
            break;
          }
          case 136: {
            PppmuxcpFlagsPid = input.ReadBool();
            break;
          }
          case 144: {
            PppmuxcpFlagsFieldLength = input.ReadBool();
            break;
          }
          case 152: {
            PppmuxcpOptType = input.ReadUInt32();
            break;
          }
          case 160: {
            PppmuxcpOptLength = input.ReadUInt32();
            break;
          }
          case 168: {
            PppmuxcpFlags = input.ReadUInt32();
            break;
          }
          case 176: {
            PppmuxcpSubFrameLength = input.ReadUInt32();
            break;
          }
          case 184: {
            PppmuxcpDefProtId = input.ReadUInt32();
            break;
          }
          case 192: {
            PppmuxProtocol = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
