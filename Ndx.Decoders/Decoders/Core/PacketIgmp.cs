// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-igmp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-igmp.proto</summary>
  public static partial class PacketIgmpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-igmp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIgmpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYWNrZXQtaWdtcC5wcm90bxIRTmR4LkRlY29kZXJzLkNvcmUi/wcKBEln",
            "bXASEAoISWdtcFR5cGUYASABKA0SFAoMSWdtcFJlc2VydmVkGAIgASgMEhMK",
            "C0lnbXBWZXJzaW9uGAMgASgNEhUKDUlnbXBHcm91cFR5cGUYBCABKA0SEQoJ",
            "SWdtcFJlcGx5GAUgASgNEhgKEElnbXBSZXBseVBlbmRpbmcYBiABKA0SFAoM",
            "SWdtcENoZWNrc3VtGAcgASgNEhoKEklnbXBDaGVja3N1bVN0YXR1cxgIIAEo",
            "DRIWCg5JZ21wSWRlbnRpZmllchgJIAEoDRIVCg1JZ21wQWNjZXNzS2V5GAog",
            "ASgMEhMKC0lnbXBNYXhSZXNwGAsgASgNEg0KBUlnbXBTGAwgASgIEg8KB0ln",
            "bXBRcnYYDSABKA0SEAoISWdtcFFxaWMYDiABKA0SEgoKSWdtcE51bVNyYxgP",
            "IAEoDRIRCglJZ21wU2FkZHIYECABKAwSFgoOSWdtcE51bUdycFJlY3MYESAB",
            "KA0SFgoOSWdtcFJlY29yZFR5cGUYEiABKA0SFgoOSWdtcEF1eERhdGFMZW4Y",
            "EyABKA0SEQoJSWdtcE1hZGRyGBQgASgMEhMKC0lnbXBBdXhEYXRhGBUgASgM",
            "EhAKCElnbXBEYXRhGBYgASgMEhYKDklnbXBNYXhSZXNwRXhwGBcgASgNEhcK",
            "D0lnbXBNYXhSZXNwTWFudBgYIAEoDRIZChFJZ21wTXRyYWNlTWF4SG9wcxgZ",
            "IAEoDRIXCg9JZ21wTXRyYWNlU2FkZHIYGiABKAwSFwoPSWdtcE10cmFjZVJh",
            "ZGRyGBsgASgMEhkKEUlnbXBNdHJhY2VSc3BhZGRyGBwgASgMEhkKEUlnbXBN",
            "dHJhY2VSZXNwVHRsGB0gASgNEhUKDUlnbXBNdHJhY2VRSWQYHiABKA0SGgoS",
            "SWdtcE10cmFjZVFBcnJpdmFsGB8gASgNEhkKEUlnbXBNdHJhY2VRSW5hZGRy",
            "GCAgASgMEhoKEklnbXBNdHJhY2VRT3V0YWRkchghIAEoDBIaChJJZ21wTXRy",
            "YWNlUVByZXZydHIYIiABKAwSGAoQSWdtcE10cmFjZVFJbnBrdBgjIAEoDRIZ",
            "ChFJZ21wTXRyYWNlUU91dHBrdBgkIAEoDRIYChBJZ21wTXRyYWNlUVRvdGFs",
            "GCUgASgNEhsKE0lnbXBNdHJhY2VRUnRnUHJvdG8YJiABKA0SGQoRSWdtcE10",
            "cmFjZVFGd2RUdGwYJyABKA0SFgoOSWdtcE10cmFjZVFNYnoYKCABKA0SFAoM",
            "SWdtcE10cmFjZVFTGCkgASgNEhoKEklnbXBNdHJhY2VRU3JjTWFzaxgqIAEo",
            "DRIaChJJZ21wTXRyYWNlUUZ3ZENvZGUYKyABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Igmp), global::Ndx.Decoders.Core.Igmp.Parser, new[]{ "IgmpType", "IgmpReserved", "IgmpVersion", "IgmpGroupType", "IgmpReply", "IgmpReplyPending", "IgmpChecksum", "IgmpChecksumStatus", "IgmpIdentifier", "IgmpAccessKey", "IgmpMaxResp", "IgmpS", "IgmpQrv", "IgmpQqic", "IgmpNumSrc", "IgmpSaddr", "IgmpNumGrpRecs", "IgmpRecordType", "IgmpAuxDataLen", "IgmpMaddr", "IgmpAuxData", "IgmpData", "IgmpMaxRespExp", "IgmpMaxRespMant", "IgmpMtraceMaxHops", "IgmpMtraceSaddr", "IgmpMtraceRaddr", "IgmpMtraceRspaddr", "IgmpMtraceRespTtl", "IgmpMtraceQId", "IgmpMtraceQArrival", "IgmpMtraceQInaddr", "IgmpMtraceQOutaddr", "IgmpMtraceQPrevrtr", "IgmpMtraceQInpkt", "IgmpMtraceQOutpkt", "IgmpMtraceQTotal", "IgmpMtraceQRtgProto", "IgmpMtraceQFwdTtl", "IgmpMtraceQMbz", "IgmpMtraceQS", "IgmpMtraceQSrcMask", "IgmpMtraceQFwdCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Igmp : pb::IMessage<Igmp> {
    private static readonly pb::MessageParser<Igmp> _parser = new pb::MessageParser<Igmp>(() => new Igmp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Igmp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketIgmpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Igmp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Igmp(Igmp other) : this() {
      igmpType_ = other.igmpType_;
      igmpReserved_ = other.igmpReserved_;
      igmpVersion_ = other.igmpVersion_;
      igmpGroupType_ = other.igmpGroupType_;
      igmpReply_ = other.igmpReply_;
      igmpReplyPending_ = other.igmpReplyPending_;
      igmpChecksum_ = other.igmpChecksum_;
      igmpChecksumStatus_ = other.igmpChecksumStatus_;
      igmpIdentifier_ = other.igmpIdentifier_;
      igmpAccessKey_ = other.igmpAccessKey_;
      igmpMaxResp_ = other.igmpMaxResp_;
      igmpS_ = other.igmpS_;
      igmpQrv_ = other.igmpQrv_;
      igmpQqic_ = other.igmpQqic_;
      igmpNumSrc_ = other.igmpNumSrc_;
      igmpSaddr_ = other.igmpSaddr_;
      igmpNumGrpRecs_ = other.igmpNumGrpRecs_;
      igmpRecordType_ = other.igmpRecordType_;
      igmpAuxDataLen_ = other.igmpAuxDataLen_;
      igmpMaddr_ = other.igmpMaddr_;
      igmpAuxData_ = other.igmpAuxData_;
      igmpData_ = other.igmpData_;
      igmpMaxRespExp_ = other.igmpMaxRespExp_;
      igmpMaxRespMant_ = other.igmpMaxRespMant_;
      igmpMtraceMaxHops_ = other.igmpMtraceMaxHops_;
      igmpMtraceSaddr_ = other.igmpMtraceSaddr_;
      igmpMtraceRaddr_ = other.igmpMtraceRaddr_;
      igmpMtraceRspaddr_ = other.igmpMtraceRspaddr_;
      igmpMtraceRespTtl_ = other.igmpMtraceRespTtl_;
      igmpMtraceQId_ = other.igmpMtraceQId_;
      igmpMtraceQArrival_ = other.igmpMtraceQArrival_;
      igmpMtraceQInaddr_ = other.igmpMtraceQInaddr_;
      igmpMtraceQOutaddr_ = other.igmpMtraceQOutaddr_;
      igmpMtraceQPrevrtr_ = other.igmpMtraceQPrevrtr_;
      igmpMtraceQInpkt_ = other.igmpMtraceQInpkt_;
      igmpMtraceQOutpkt_ = other.igmpMtraceQOutpkt_;
      igmpMtraceQTotal_ = other.igmpMtraceQTotal_;
      igmpMtraceQRtgProto_ = other.igmpMtraceQRtgProto_;
      igmpMtraceQFwdTtl_ = other.igmpMtraceQFwdTtl_;
      igmpMtraceQMbz_ = other.igmpMtraceQMbz_;
      igmpMtraceQS_ = other.igmpMtraceQS_;
      igmpMtraceQSrcMask_ = other.igmpMtraceQSrcMask_;
      igmpMtraceQFwdCode_ = other.igmpMtraceQFwdCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Igmp Clone() {
      return new Igmp(this);
    }

    /// <summary>Field number for the "IgmpType" field.</summary>
    public const int IgmpTypeFieldNumber = 1;
    private uint igmpType_;
    /// <summary>
    /// Type ('igmp_igmp_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpType {
      get { return igmpType_; }
      set {
        igmpType_ = value;
      }
    }

    /// <summary>Field number for the "IgmpReserved" field.</summary>
    public const int IgmpReservedFieldNumber = 2;
    private pb::ByteString igmpReserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('igmp_igmp_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpReserved {
      get { return igmpReserved_; }
      set {
        igmpReserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpVersion" field.</summary>
    public const int IgmpVersionFieldNumber = 3;
    private uint igmpVersion_;
    /// <summary>
    /// IGMP Version ('igmp_igmp_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpVersion {
      get { return igmpVersion_; }
      set {
        igmpVersion_ = value;
      }
    }

    /// <summary>Field number for the "IgmpGroupType" field.</summary>
    public const int IgmpGroupTypeFieldNumber = 4;
    private uint igmpGroupType_;
    /// <summary>
    /// Type Of Group ('igmp_igmp_group_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpGroupType {
      get { return igmpGroupType_; }
      set {
        igmpGroupType_ = value;
      }
    }

    /// <summary>Field number for the "IgmpReply" field.</summary>
    public const int IgmpReplyFieldNumber = 5;
    private uint igmpReply_;
    /// <summary>
    /// Reply ('igmp_igmp_reply')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpReply {
      get { return igmpReply_; }
      set {
        igmpReply_ = value;
      }
    }

    /// <summary>Field number for the "IgmpReplyPending" field.</summary>
    public const int IgmpReplyPendingFieldNumber = 6;
    private uint igmpReplyPending_;
    /// <summary>
    /// Reply Pending ('igmp_reply_igmp_reply_pending')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpReplyPending {
      get { return igmpReplyPending_; }
      set {
        igmpReplyPending_ = value;
      }
    }

    /// <summary>Field number for the "IgmpChecksum" field.</summary>
    public const int IgmpChecksumFieldNumber = 7;
    private uint igmpChecksum_;
    /// <summary>
    /// Checksum ('igmp_igmp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpChecksum {
      get { return igmpChecksum_; }
      set {
        igmpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IgmpChecksumStatus" field.</summary>
    public const int IgmpChecksumStatusFieldNumber = 8;
    private uint igmpChecksumStatus_;
    /// <summary>
    /// Checksum Status ('igmp_checksum_igmp_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpChecksumStatus {
      get { return igmpChecksumStatus_; }
      set {
        igmpChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "IgmpIdentifier" field.</summary>
    public const int IgmpIdentifierFieldNumber = 9;
    private uint igmpIdentifier_;
    /// <summary>
    /// Identifier ('igmp_igmp_identifier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpIdentifier {
      get { return igmpIdentifier_; }
      set {
        igmpIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "IgmpAccessKey" field.</summary>
    public const int IgmpAccessKeyFieldNumber = 10;
    private pb::ByteString igmpAccessKey_ = pb::ByteString.Empty;
    /// <summary>
    /// Access Key ('igmp_igmp_access_key')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpAccessKey {
      get { return igmpAccessKey_; }
      set {
        igmpAccessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMaxResp" field.</summary>
    public const int IgmpMaxRespFieldNumber = 11;
    private uint igmpMaxResp_;
    /// <summary>
    /// Max Resp Time ('igmp_igmp_max_resp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMaxResp {
      get { return igmpMaxResp_; }
      set {
        igmpMaxResp_ = value;
      }
    }

    /// <summary>Field number for the "IgmpS" field.</summary>
    public const int IgmpSFieldNumber = 12;
    private bool igmpS_;
    /// <summary>
    /// S ('igmp_igmp_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgmpS {
      get { return igmpS_; }
      set {
        igmpS_ = value;
      }
    }

    /// <summary>Field number for the "IgmpQrv" field.</summary>
    public const int IgmpQrvFieldNumber = 13;
    private uint igmpQrv_;
    /// <summary>
    /// QRV ('igmp_igmp_qrv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpQrv {
      get { return igmpQrv_; }
      set {
        igmpQrv_ = value;
      }
    }

    /// <summary>Field number for the "IgmpQqic" field.</summary>
    public const int IgmpQqicFieldNumber = 14;
    private uint igmpQqic_;
    /// <summary>
    /// QQIC ('igmp_igmp_qqic')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpQqic {
      get { return igmpQqic_; }
      set {
        igmpQqic_ = value;
      }
    }

    /// <summary>Field number for the "IgmpNumSrc" field.</summary>
    public const int IgmpNumSrcFieldNumber = 15;
    private uint igmpNumSrc_;
    /// <summary>
    /// Num Src ('igmp_igmp_num_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpNumSrc {
      get { return igmpNumSrc_; }
      set {
        igmpNumSrc_ = value;
      }
    }

    /// <summary>Field number for the "IgmpSaddr" field.</summary>
    public const int IgmpSaddrFieldNumber = 16;
    private pb::ByteString igmpSaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Address ('igmp_igmp_saddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpSaddr {
      get { return igmpSaddr_; }
      set {
        igmpSaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpNumGrpRecs" field.</summary>
    public const int IgmpNumGrpRecsFieldNumber = 17;
    private uint igmpNumGrpRecs_;
    /// <summary>
    /// Num Group Records ('igmp_igmp_num_grp_recs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpNumGrpRecs {
      get { return igmpNumGrpRecs_; }
      set {
        igmpNumGrpRecs_ = value;
      }
    }

    /// <summary>Field number for the "IgmpRecordType" field.</summary>
    public const int IgmpRecordTypeFieldNumber = 18;
    private uint igmpRecordType_;
    /// <summary>
    /// Record Type ('igmp_igmp_record_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpRecordType {
      get { return igmpRecordType_; }
      set {
        igmpRecordType_ = value;
      }
    }

    /// <summary>Field number for the "IgmpAuxDataLen" field.</summary>
    public const int IgmpAuxDataLenFieldNumber = 19;
    private uint igmpAuxDataLen_;
    /// <summary>
    /// Aux Data Len ('igmp_igmp_aux_data_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpAuxDataLen {
      get { return igmpAuxDataLen_; }
      set {
        igmpAuxDataLen_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMaddr" field.</summary>
    public const int IgmpMaddrFieldNumber = 20;
    private pb::ByteString igmpMaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Multicast Address ('igmp_igmp_maddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMaddr {
      get { return igmpMaddr_; }
      set {
        igmpMaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpAuxData" field.</summary>
    public const int IgmpAuxDataFieldNumber = 21;
    private pb::ByteString igmpAuxData_ = pb::ByteString.Empty;
    /// <summary>
    /// Aux Data ('igmp_igmp_aux_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpAuxData {
      get { return igmpAuxData_; }
      set {
        igmpAuxData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpData" field.</summary>
    public const int IgmpDataFieldNumber = 22;
    private pb::ByteString igmpData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('igmp_igmp_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpData {
      get { return igmpData_; }
      set {
        igmpData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMaxRespExp" field.</summary>
    public const int IgmpMaxRespExpFieldNumber = 23;
    private uint igmpMaxRespExp_;
    /// <summary>
    /// Exponent ('igmp_max_resp_igmp_max_resp_exp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMaxRespExp {
      get { return igmpMaxRespExp_; }
      set {
        igmpMaxRespExp_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMaxRespMant" field.</summary>
    public const int IgmpMaxRespMantFieldNumber = 24;
    private uint igmpMaxRespMant_;
    /// <summary>
    /// Mantissa ('igmp_max_resp_igmp_max_resp_mant')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMaxRespMant {
      get { return igmpMaxRespMant_; }
      set {
        igmpMaxRespMant_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceMaxHops" field.</summary>
    public const int IgmpMtraceMaxHopsFieldNumber = 25;
    private uint igmpMtraceMaxHops_;
    /// <summary>
    /// # hops ('igmp_igmp_mtrace_max_hops')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceMaxHops {
      get { return igmpMtraceMaxHops_; }
      set {
        igmpMtraceMaxHops_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceSaddr" field.</summary>
    public const int IgmpMtraceSaddrFieldNumber = 26;
    private pb::ByteString igmpMtraceSaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Address ('igmp_igmp_mtrace_saddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceSaddr {
      get { return igmpMtraceSaddr_; }
      set {
        igmpMtraceSaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceRaddr" field.</summary>
    public const int IgmpMtraceRaddrFieldNumber = 27;
    private pb::ByteString igmpMtraceRaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Receiver Address ('igmp_igmp_mtrace_raddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceRaddr {
      get { return igmpMtraceRaddr_; }
      set {
        igmpMtraceRaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceRspaddr" field.</summary>
    public const int IgmpMtraceRspaddrFieldNumber = 28;
    private pb::ByteString igmpMtraceRspaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Response Address ('igmp_igmp_mtrace_rspaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceRspaddr {
      get { return igmpMtraceRspaddr_; }
      set {
        igmpMtraceRspaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceRespTtl" field.</summary>
    public const int IgmpMtraceRespTtlFieldNumber = 29;
    private uint igmpMtraceRespTtl_;
    /// <summary>
    /// Response TTL ('igmp_igmp_mtrace_resp_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceRespTtl {
      get { return igmpMtraceRespTtl_; }
      set {
        igmpMtraceRespTtl_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQId" field.</summary>
    public const int IgmpMtraceQIdFieldNumber = 30;
    private uint igmpMtraceQId_;
    /// <summary>
    /// Query ID ('igmp_igmp_mtrace_q_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQId {
      get { return igmpMtraceQId_; }
      set {
        igmpMtraceQId_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQArrival" field.</summary>
    public const int IgmpMtraceQArrivalFieldNumber = 31;
    private uint igmpMtraceQArrival_;
    /// <summary>
    /// Query Arrival ('igmp_igmp_mtrace_q_arrival')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQArrival {
      get { return igmpMtraceQArrival_; }
      set {
        igmpMtraceQArrival_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQInaddr" field.</summary>
    public const int IgmpMtraceQInaddrFieldNumber = 32;
    private pb::ByteString igmpMtraceQInaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// In itf addr ('igmp_igmp_mtrace_q_inaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceQInaddr {
      get { return igmpMtraceQInaddr_; }
      set {
        igmpMtraceQInaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceQOutaddr" field.</summary>
    public const int IgmpMtraceQOutaddrFieldNumber = 33;
    private pb::ByteString igmpMtraceQOutaddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Out itf addr ('igmp_igmp_mtrace_q_outaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceQOutaddr {
      get { return igmpMtraceQOutaddr_; }
      set {
        igmpMtraceQOutaddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceQPrevrtr" field.</summary>
    public const int IgmpMtraceQPrevrtrFieldNumber = 34;
    private pb::ByteString igmpMtraceQPrevrtr_ = pb::ByteString.Empty;
    /// <summary>
    /// Previous rtr addr ('igmp_igmp_mtrace_q_prevrtr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IgmpMtraceQPrevrtr {
      get { return igmpMtraceQPrevrtr_; }
      set {
        igmpMtraceQPrevrtr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgmpMtraceQInpkt" field.</summary>
    public const int IgmpMtraceQInpktFieldNumber = 35;
    private uint igmpMtraceQInpkt_;
    /// <summary>
    /// In pkts ('igmp_igmp_mtrace_q_inpkt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQInpkt {
      get { return igmpMtraceQInpkt_; }
      set {
        igmpMtraceQInpkt_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQOutpkt" field.</summary>
    public const int IgmpMtraceQOutpktFieldNumber = 36;
    private uint igmpMtraceQOutpkt_;
    /// <summary>
    /// Out pkts ('igmp_igmp_mtrace_q_outpkt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQOutpkt {
      get { return igmpMtraceQOutpkt_; }
      set {
        igmpMtraceQOutpkt_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQTotal" field.</summary>
    public const int IgmpMtraceQTotalFieldNumber = 37;
    private uint igmpMtraceQTotal_;
    /// <summary>
    /// S,G pkt count ('igmp_igmp_mtrace_q_total')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQTotal {
      get { return igmpMtraceQTotal_; }
      set {
        igmpMtraceQTotal_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQRtgProto" field.</summary>
    public const int IgmpMtraceQRtgProtoFieldNumber = 38;
    private uint igmpMtraceQRtgProto_;
    /// <summary>
    /// Rtg Protocol ('igmp_igmp_mtrace_q_rtg_proto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQRtgProto {
      get { return igmpMtraceQRtgProto_; }
      set {
        igmpMtraceQRtgProto_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQFwdTtl" field.</summary>
    public const int IgmpMtraceQFwdTtlFieldNumber = 39;
    private uint igmpMtraceQFwdTtl_;
    /// <summary>
    /// FwdTTL ('igmp_igmp_mtrace_q_fwd_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQFwdTtl {
      get { return igmpMtraceQFwdTtl_; }
      set {
        igmpMtraceQFwdTtl_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQMbz" field.</summary>
    public const int IgmpMtraceQMbzFieldNumber = 40;
    private uint igmpMtraceQMbz_;
    /// <summary>
    /// MBZ ('igmp_igmp_mtrace_q_mbz')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQMbz {
      get { return igmpMtraceQMbz_; }
      set {
        igmpMtraceQMbz_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQS" field.</summary>
    public const int IgmpMtraceQSFieldNumber = 41;
    private uint igmpMtraceQS_;
    /// <summary>
    /// S ('igmp_igmp_mtrace_q_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQS {
      get { return igmpMtraceQS_; }
      set {
        igmpMtraceQS_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQSrcMask" field.</summary>
    public const int IgmpMtraceQSrcMaskFieldNumber = 42;
    private uint igmpMtraceQSrcMask_;
    /// <summary>
    /// Src Mask ('igmp_igmp_mtrace_q_src_mask')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQSrcMask {
      get { return igmpMtraceQSrcMask_; }
      set {
        igmpMtraceQSrcMask_ = value;
      }
    }

    /// <summary>Field number for the "IgmpMtraceQFwdCode" field.</summary>
    public const int IgmpMtraceQFwdCodeFieldNumber = 43;
    private uint igmpMtraceQFwdCode_;
    /// <summary>
    /// Forwarding Code ('igmp_igmp_mtrace_q_fwd_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IgmpMtraceQFwdCode {
      get { return igmpMtraceQFwdCode_; }
      set {
        igmpMtraceQFwdCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Igmp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Igmp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgmpType != other.IgmpType) return false;
      if (IgmpReserved != other.IgmpReserved) return false;
      if (IgmpVersion != other.IgmpVersion) return false;
      if (IgmpGroupType != other.IgmpGroupType) return false;
      if (IgmpReply != other.IgmpReply) return false;
      if (IgmpReplyPending != other.IgmpReplyPending) return false;
      if (IgmpChecksum != other.IgmpChecksum) return false;
      if (IgmpChecksumStatus != other.IgmpChecksumStatus) return false;
      if (IgmpIdentifier != other.IgmpIdentifier) return false;
      if (IgmpAccessKey != other.IgmpAccessKey) return false;
      if (IgmpMaxResp != other.IgmpMaxResp) return false;
      if (IgmpS != other.IgmpS) return false;
      if (IgmpQrv != other.IgmpQrv) return false;
      if (IgmpQqic != other.IgmpQqic) return false;
      if (IgmpNumSrc != other.IgmpNumSrc) return false;
      if (IgmpSaddr != other.IgmpSaddr) return false;
      if (IgmpNumGrpRecs != other.IgmpNumGrpRecs) return false;
      if (IgmpRecordType != other.IgmpRecordType) return false;
      if (IgmpAuxDataLen != other.IgmpAuxDataLen) return false;
      if (IgmpMaddr != other.IgmpMaddr) return false;
      if (IgmpAuxData != other.IgmpAuxData) return false;
      if (IgmpData != other.IgmpData) return false;
      if (IgmpMaxRespExp != other.IgmpMaxRespExp) return false;
      if (IgmpMaxRespMant != other.IgmpMaxRespMant) return false;
      if (IgmpMtraceMaxHops != other.IgmpMtraceMaxHops) return false;
      if (IgmpMtraceSaddr != other.IgmpMtraceSaddr) return false;
      if (IgmpMtraceRaddr != other.IgmpMtraceRaddr) return false;
      if (IgmpMtraceRspaddr != other.IgmpMtraceRspaddr) return false;
      if (IgmpMtraceRespTtl != other.IgmpMtraceRespTtl) return false;
      if (IgmpMtraceQId != other.IgmpMtraceQId) return false;
      if (IgmpMtraceQArrival != other.IgmpMtraceQArrival) return false;
      if (IgmpMtraceQInaddr != other.IgmpMtraceQInaddr) return false;
      if (IgmpMtraceQOutaddr != other.IgmpMtraceQOutaddr) return false;
      if (IgmpMtraceQPrevrtr != other.IgmpMtraceQPrevrtr) return false;
      if (IgmpMtraceQInpkt != other.IgmpMtraceQInpkt) return false;
      if (IgmpMtraceQOutpkt != other.IgmpMtraceQOutpkt) return false;
      if (IgmpMtraceQTotal != other.IgmpMtraceQTotal) return false;
      if (IgmpMtraceQRtgProto != other.IgmpMtraceQRtgProto) return false;
      if (IgmpMtraceQFwdTtl != other.IgmpMtraceQFwdTtl) return false;
      if (IgmpMtraceQMbz != other.IgmpMtraceQMbz) return false;
      if (IgmpMtraceQS != other.IgmpMtraceQS) return false;
      if (IgmpMtraceQSrcMask != other.IgmpMtraceQSrcMask) return false;
      if (IgmpMtraceQFwdCode != other.IgmpMtraceQFwdCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgmpType != 0) hash ^= IgmpType.GetHashCode();
      if (IgmpReserved.Length != 0) hash ^= IgmpReserved.GetHashCode();
      if (IgmpVersion != 0) hash ^= IgmpVersion.GetHashCode();
      if (IgmpGroupType != 0) hash ^= IgmpGroupType.GetHashCode();
      if (IgmpReply != 0) hash ^= IgmpReply.GetHashCode();
      if (IgmpReplyPending != 0) hash ^= IgmpReplyPending.GetHashCode();
      if (IgmpChecksum != 0) hash ^= IgmpChecksum.GetHashCode();
      if (IgmpChecksumStatus != 0) hash ^= IgmpChecksumStatus.GetHashCode();
      if (IgmpIdentifier != 0) hash ^= IgmpIdentifier.GetHashCode();
      if (IgmpAccessKey.Length != 0) hash ^= IgmpAccessKey.GetHashCode();
      if (IgmpMaxResp != 0) hash ^= IgmpMaxResp.GetHashCode();
      if (IgmpS != false) hash ^= IgmpS.GetHashCode();
      if (IgmpQrv != 0) hash ^= IgmpQrv.GetHashCode();
      if (IgmpQqic != 0) hash ^= IgmpQqic.GetHashCode();
      if (IgmpNumSrc != 0) hash ^= IgmpNumSrc.GetHashCode();
      if (IgmpSaddr.Length != 0) hash ^= IgmpSaddr.GetHashCode();
      if (IgmpNumGrpRecs != 0) hash ^= IgmpNumGrpRecs.GetHashCode();
      if (IgmpRecordType != 0) hash ^= IgmpRecordType.GetHashCode();
      if (IgmpAuxDataLen != 0) hash ^= IgmpAuxDataLen.GetHashCode();
      if (IgmpMaddr.Length != 0) hash ^= IgmpMaddr.GetHashCode();
      if (IgmpAuxData.Length != 0) hash ^= IgmpAuxData.GetHashCode();
      if (IgmpData.Length != 0) hash ^= IgmpData.GetHashCode();
      if (IgmpMaxRespExp != 0) hash ^= IgmpMaxRespExp.GetHashCode();
      if (IgmpMaxRespMant != 0) hash ^= IgmpMaxRespMant.GetHashCode();
      if (IgmpMtraceMaxHops != 0) hash ^= IgmpMtraceMaxHops.GetHashCode();
      if (IgmpMtraceSaddr.Length != 0) hash ^= IgmpMtraceSaddr.GetHashCode();
      if (IgmpMtraceRaddr.Length != 0) hash ^= IgmpMtraceRaddr.GetHashCode();
      if (IgmpMtraceRspaddr.Length != 0) hash ^= IgmpMtraceRspaddr.GetHashCode();
      if (IgmpMtraceRespTtl != 0) hash ^= IgmpMtraceRespTtl.GetHashCode();
      if (IgmpMtraceQId != 0) hash ^= IgmpMtraceQId.GetHashCode();
      if (IgmpMtraceQArrival != 0) hash ^= IgmpMtraceQArrival.GetHashCode();
      if (IgmpMtraceQInaddr.Length != 0) hash ^= IgmpMtraceQInaddr.GetHashCode();
      if (IgmpMtraceQOutaddr.Length != 0) hash ^= IgmpMtraceQOutaddr.GetHashCode();
      if (IgmpMtraceQPrevrtr.Length != 0) hash ^= IgmpMtraceQPrevrtr.GetHashCode();
      if (IgmpMtraceQInpkt != 0) hash ^= IgmpMtraceQInpkt.GetHashCode();
      if (IgmpMtraceQOutpkt != 0) hash ^= IgmpMtraceQOutpkt.GetHashCode();
      if (IgmpMtraceQTotal != 0) hash ^= IgmpMtraceQTotal.GetHashCode();
      if (IgmpMtraceQRtgProto != 0) hash ^= IgmpMtraceQRtgProto.GetHashCode();
      if (IgmpMtraceQFwdTtl != 0) hash ^= IgmpMtraceQFwdTtl.GetHashCode();
      if (IgmpMtraceQMbz != 0) hash ^= IgmpMtraceQMbz.GetHashCode();
      if (IgmpMtraceQS != 0) hash ^= IgmpMtraceQS.GetHashCode();
      if (IgmpMtraceQSrcMask != 0) hash ^= IgmpMtraceQSrcMask.GetHashCode();
      if (IgmpMtraceQFwdCode != 0) hash ^= IgmpMtraceQFwdCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgmpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IgmpType);
      }
      if (IgmpReserved.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IgmpReserved);
      }
      if (IgmpVersion != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IgmpVersion);
      }
      if (IgmpGroupType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IgmpGroupType);
      }
      if (IgmpReply != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IgmpReply);
      }
      if (IgmpReplyPending != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IgmpReplyPending);
      }
      if (IgmpChecksum != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IgmpChecksum);
      }
      if (IgmpChecksumStatus != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(IgmpChecksumStatus);
      }
      if (IgmpIdentifier != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(IgmpIdentifier);
      }
      if (IgmpAccessKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(IgmpAccessKey);
      }
      if (IgmpMaxResp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(IgmpMaxResp);
      }
      if (IgmpS != false) {
        output.WriteRawTag(96);
        output.WriteBool(IgmpS);
      }
      if (IgmpQrv != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IgmpQrv);
      }
      if (IgmpQqic != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(IgmpQqic);
      }
      if (IgmpNumSrc != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(IgmpNumSrc);
      }
      if (IgmpSaddr.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(IgmpSaddr);
      }
      if (IgmpNumGrpRecs != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(IgmpNumGrpRecs);
      }
      if (IgmpRecordType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IgmpRecordType);
      }
      if (IgmpAuxDataLen != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(IgmpAuxDataLen);
      }
      if (IgmpMaddr.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(IgmpMaddr);
      }
      if (IgmpAuxData.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(IgmpAuxData);
      }
      if (IgmpData.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(IgmpData);
      }
      if (IgmpMaxRespExp != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(IgmpMaxRespExp);
      }
      if (IgmpMaxRespMant != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(IgmpMaxRespMant);
      }
      if (IgmpMtraceMaxHops != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(IgmpMtraceMaxHops);
      }
      if (IgmpMtraceSaddr.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteBytes(IgmpMtraceSaddr);
      }
      if (IgmpMtraceRaddr.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(IgmpMtraceRaddr);
      }
      if (IgmpMtraceRspaddr.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteBytes(IgmpMtraceRspaddr);
      }
      if (IgmpMtraceRespTtl != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(IgmpMtraceRespTtl);
      }
      if (IgmpMtraceQId != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(IgmpMtraceQId);
      }
      if (IgmpMtraceQArrival != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(IgmpMtraceQArrival);
      }
      if (IgmpMtraceQInaddr.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteBytes(IgmpMtraceQInaddr);
      }
      if (IgmpMtraceQOutaddr.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteBytes(IgmpMtraceQOutaddr);
      }
      if (IgmpMtraceQPrevrtr.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteBytes(IgmpMtraceQPrevrtr);
      }
      if (IgmpMtraceQInpkt != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(IgmpMtraceQInpkt);
      }
      if (IgmpMtraceQOutpkt != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(IgmpMtraceQOutpkt);
      }
      if (IgmpMtraceQTotal != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(IgmpMtraceQTotal);
      }
      if (IgmpMtraceQRtgProto != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(IgmpMtraceQRtgProto);
      }
      if (IgmpMtraceQFwdTtl != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(IgmpMtraceQFwdTtl);
      }
      if (IgmpMtraceQMbz != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(IgmpMtraceQMbz);
      }
      if (IgmpMtraceQS != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(IgmpMtraceQS);
      }
      if (IgmpMtraceQSrcMask != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(IgmpMtraceQSrcMask);
      }
      if (IgmpMtraceQFwdCode != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(IgmpMtraceQFwdCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgmpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpType);
      }
      if (IgmpReserved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IgmpReserved);
      }
      if (IgmpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpVersion);
      }
      if (IgmpGroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpGroupType);
      }
      if (IgmpReply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpReply);
      }
      if (IgmpReplyPending != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpReplyPending);
      }
      if (IgmpChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpChecksum);
      }
      if (IgmpChecksumStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpChecksumStatus);
      }
      if (IgmpIdentifier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpIdentifier);
      }
      if (IgmpAccessKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IgmpAccessKey);
      }
      if (IgmpMaxResp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMaxResp);
      }
      if (IgmpS != false) {
        size += 1 + 1;
      }
      if (IgmpQrv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpQrv);
      }
      if (IgmpQqic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpQqic);
      }
      if (IgmpNumSrc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IgmpNumSrc);
      }
      if (IgmpSaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpSaddr);
      }
      if (IgmpNumGrpRecs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpNumGrpRecs);
      }
      if (IgmpRecordType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpRecordType);
      }
      if (IgmpAuxDataLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpAuxDataLen);
      }
      if (IgmpMaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMaddr);
      }
      if (IgmpAuxData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpAuxData);
      }
      if (IgmpData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpData);
      }
      if (IgmpMaxRespExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMaxRespExp);
      }
      if (IgmpMaxRespMant != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMaxRespMant);
      }
      if (IgmpMtraceMaxHops != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceMaxHops);
      }
      if (IgmpMtraceSaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceSaddr);
      }
      if (IgmpMtraceRaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceRaddr);
      }
      if (IgmpMtraceRspaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceRspaddr);
      }
      if (IgmpMtraceRespTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceRespTtl);
      }
      if (IgmpMtraceQId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQId);
      }
      if (IgmpMtraceQArrival != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQArrival);
      }
      if (IgmpMtraceQInaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceQInaddr);
      }
      if (IgmpMtraceQOutaddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceQOutaddr);
      }
      if (IgmpMtraceQPrevrtr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IgmpMtraceQPrevrtr);
      }
      if (IgmpMtraceQInpkt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQInpkt);
      }
      if (IgmpMtraceQOutpkt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQOutpkt);
      }
      if (IgmpMtraceQTotal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQTotal);
      }
      if (IgmpMtraceQRtgProto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQRtgProto);
      }
      if (IgmpMtraceQFwdTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQFwdTtl);
      }
      if (IgmpMtraceQMbz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQMbz);
      }
      if (IgmpMtraceQS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQS);
      }
      if (IgmpMtraceQSrcMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQSrcMask);
      }
      if (IgmpMtraceQFwdCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IgmpMtraceQFwdCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Igmp other) {
      if (other == null) {
        return;
      }
      if (other.IgmpType != 0) {
        IgmpType = other.IgmpType;
      }
      if (other.IgmpReserved.Length != 0) {
        IgmpReserved = other.IgmpReserved;
      }
      if (other.IgmpVersion != 0) {
        IgmpVersion = other.IgmpVersion;
      }
      if (other.IgmpGroupType != 0) {
        IgmpGroupType = other.IgmpGroupType;
      }
      if (other.IgmpReply != 0) {
        IgmpReply = other.IgmpReply;
      }
      if (other.IgmpReplyPending != 0) {
        IgmpReplyPending = other.IgmpReplyPending;
      }
      if (other.IgmpChecksum != 0) {
        IgmpChecksum = other.IgmpChecksum;
      }
      if (other.IgmpChecksumStatus != 0) {
        IgmpChecksumStatus = other.IgmpChecksumStatus;
      }
      if (other.IgmpIdentifier != 0) {
        IgmpIdentifier = other.IgmpIdentifier;
      }
      if (other.IgmpAccessKey.Length != 0) {
        IgmpAccessKey = other.IgmpAccessKey;
      }
      if (other.IgmpMaxResp != 0) {
        IgmpMaxResp = other.IgmpMaxResp;
      }
      if (other.IgmpS != false) {
        IgmpS = other.IgmpS;
      }
      if (other.IgmpQrv != 0) {
        IgmpQrv = other.IgmpQrv;
      }
      if (other.IgmpQqic != 0) {
        IgmpQqic = other.IgmpQqic;
      }
      if (other.IgmpNumSrc != 0) {
        IgmpNumSrc = other.IgmpNumSrc;
      }
      if (other.IgmpSaddr.Length != 0) {
        IgmpSaddr = other.IgmpSaddr;
      }
      if (other.IgmpNumGrpRecs != 0) {
        IgmpNumGrpRecs = other.IgmpNumGrpRecs;
      }
      if (other.IgmpRecordType != 0) {
        IgmpRecordType = other.IgmpRecordType;
      }
      if (other.IgmpAuxDataLen != 0) {
        IgmpAuxDataLen = other.IgmpAuxDataLen;
      }
      if (other.IgmpMaddr.Length != 0) {
        IgmpMaddr = other.IgmpMaddr;
      }
      if (other.IgmpAuxData.Length != 0) {
        IgmpAuxData = other.IgmpAuxData;
      }
      if (other.IgmpData.Length != 0) {
        IgmpData = other.IgmpData;
      }
      if (other.IgmpMaxRespExp != 0) {
        IgmpMaxRespExp = other.IgmpMaxRespExp;
      }
      if (other.IgmpMaxRespMant != 0) {
        IgmpMaxRespMant = other.IgmpMaxRespMant;
      }
      if (other.IgmpMtraceMaxHops != 0) {
        IgmpMtraceMaxHops = other.IgmpMtraceMaxHops;
      }
      if (other.IgmpMtraceSaddr.Length != 0) {
        IgmpMtraceSaddr = other.IgmpMtraceSaddr;
      }
      if (other.IgmpMtraceRaddr.Length != 0) {
        IgmpMtraceRaddr = other.IgmpMtraceRaddr;
      }
      if (other.IgmpMtraceRspaddr.Length != 0) {
        IgmpMtraceRspaddr = other.IgmpMtraceRspaddr;
      }
      if (other.IgmpMtraceRespTtl != 0) {
        IgmpMtraceRespTtl = other.IgmpMtraceRespTtl;
      }
      if (other.IgmpMtraceQId != 0) {
        IgmpMtraceQId = other.IgmpMtraceQId;
      }
      if (other.IgmpMtraceQArrival != 0) {
        IgmpMtraceQArrival = other.IgmpMtraceQArrival;
      }
      if (other.IgmpMtraceQInaddr.Length != 0) {
        IgmpMtraceQInaddr = other.IgmpMtraceQInaddr;
      }
      if (other.IgmpMtraceQOutaddr.Length != 0) {
        IgmpMtraceQOutaddr = other.IgmpMtraceQOutaddr;
      }
      if (other.IgmpMtraceQPrevrtr.Length != 0) {
        IgmpMtraceQPrevrtr = other.IgmpMtraceQPrevrtr;
      }
      if (other.IgmpMtraceQInpkt != 0) {
        IgmpMtraceQInpkt = other.IgmpMtraceQInpkt;
      }
      if (other.IgmpMtraceQOutpkt != 0) {
        IgmpMtraceQOutpkt = other.IgmpMtraceQOutpkt;
      }
      if (other.IgmpMtraceQTotal != 0) {
        IgmpMtraceQTotal = other.IgmpMtraceQTotal;
      }
      if (other.IgmpMtraceQRtgProto != 0) {
        IgmpMtraceQRtgProto = other.IgmpMtraceQRtgProto;
      }
      if (other.IgmpMtraceQFwdTtl != 0) {
        IgmpMtraceQFwdTtl = other.IgmpMtraceQFwdTtl;
      }
      if (other.IgmpMtraceQMbz != 0) {
        IgmpMtraceQMbz = other.IgmpMtraceQMbz;
      }
      if (other.IgmpMtraceQS != 0) {
        IgmpMtraceQS = other.IgmpMtraceQS;
      }
      if (other.IgmpMtraceQSrcMask != 0) {
        IgmpMtraceQSrcMask = other.IgmpMtraceQSrcMask;
      }
      if (other.IgmpMtraceQFwdCode != 0) {
        IgmpMtraceQFwdCode = other.IgmpMtraceQFwdCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IgmpType = input.ReadUInt32();
            break;
          }
          case 18: {
            IgmpReserved = input.ReadBytes();
            break;
          }
          case 24: {
            IgmpVersion = input.ReadUInt32();
            break;
          }
          case 32: {
            IgmpGroupType = input.ReadUInt32();
            break;
          }
          case 40: {
            IgmpReply = input.ReadUInt32();
            break;
          }
          case 48: {
            IgmpReplyPending = input.ReadUInt32();
            break;
          }
          case 56: {
            IgmpChecksum = input.ReadUInt32();
            break;
          }
          case 64: {
            IgmpChecksumStatus = input.ReadUInt32();
            break;
          }
          case 72: {
            IgmpIdentifier = input.ReadUInt32();
            break;
          }
          case 82: {
            IgmpAccessKey = input.ReadBytes();
            break;
          }
          case 88: {
            IgmpMaxResp = input.ReadUInt32();
            break;
          }
          case 96: {
            IgmpS = input.ReadBool();
            break;
          }
          case 104: {
            IgmpQrv = input.ReadUInt32();
            break;
          }
          case 112: {
            IgmpQqic = input.ReadUInt32();
            break;
          }
          case 120: {
            IgmpNumSrc = input.ReadUInt32();
            break;
          }
          case 130: {
            IgmpSaddr = input.ReadBytes();
            break;
          }
          case 136: {
            IgmpNumGrpRecs = input.ReadUInt32();
            break;
          }
          case 144: {
            IgmpRecordType = input.ReadUInt32();
            break;
          }
          case 152: {
            IgmpAuxDataLen = input.ReadUInt32();
            break;
          }
          case 162: {
            IgmpMaddr = input.ReadBytes();
            break;
          }
          case 170: {
            IgmpAuxData = input.ReadBytes();
            break;
          }
          case 178: {
            IgmpData = input.ReadBytes();
            break;
          }
          case 184: {
            IgmpMaxRespExp = input.ReadUInt32();
            break;
          }
          case 192: {
            IgmpMaxRespMant = input.ReadUInt32();
            break;
          }
          case 200: {
            IgmpMtraceMaxHops = input.ReadUInt32();
            break;
          }
          case 210: {
            IgmpMtraceSaddr = input.ReadBytes();
            break;
          }
          case 218: {
            IgmpMtraceRaddr = input.ReadBytes();
            break;
          }
          case 226: {
            IgmpMtraceRspaddr = input.ReadBytes();
            break;
          }
          case 232: {
            IgmpMtraceRespTtl = input.ReadUInt32();
            break;
          }
          case 240: {
            IgmpMtraceQId = input.ReadUInt32();
            break;
          }
          case 248: {
            IgmpMtraceQArrival = input.ReadUInt32();
            break;
          }
          case 258: {
            IgmpMtraceQInaddr = input.ReadBytes();
            break;
          }
          case 266: {
            IgmpMtraceQOutaddr = input.ReadBytes();
            break;
          }
          case 274: {
            IgmpMtraceQPrevrtr = input.ReadBytes();
            break;
          }
          case 280: {
            IgmpMtraceQInpkt = input.ReadUInt32();
            break;
          }
          case 288: {
            IgmpMtraceQOutpkt = input.ReadUInt32();
            break;
          }
          case 296: {
            IgmpMtraceQTotal = input.ReadUInt32();
            break;
          }
          case 304: {
            IgmpMtraceQRtgProto = input.ReadUInt32();
            break;
          }
          case 312: {
            IgmpMtraceQFwdTtl = input.ReadUInt32();
            break;
          }
          case 320: {
            IgmpMtraceQMbz = input.ReadUInt32();
            break;
          }
          case 328: {
            IgmpMtraceQS = input.ReadUInt32();
            break;
          }
          case 336: {
            IgmpMtraceQSrcMask = input.ReadUInt32();
            break;
          }
          case 344: {
            IgmpMtraceQFwdCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
