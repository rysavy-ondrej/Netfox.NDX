// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-http2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-http2.proto</summary>
  public static partial class PacketHttp2Reflection {

    #region Descriptor
    /// <summary>File descriptor for packet-http2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketHttp2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwYWNrZXQtaHR0cDIucHJvdG8SEU5keC5EZWNvZGVycy5Db3JlIqESCgVI",
            "dHRwMhITCgtIdHRwMlN0cmVhbRgBIAEoBRITCgtIdHRwMkxlbmd0aBgCIAEo",
            "DRIRCglIdHRwMlR5cGUYAyABKA0SDgoGSHR0cDJSGAQgASgNEhoKEkh0dHAy",
            "SGVhZGVyc1dlaWdodBgFIAEoDRIeChZIdHRwMkhlYWRlcnNXZWlnaHRSZWFs",
            "GAYgASgNEhUKDUh0dHAyU3RyZWFtaWQYByABKA0SEgoKSHR0cDJNYWdpYxgI",
            "IAEoCRIUCgxIdHRwMlVua25vd24YCSABKAwSEgoKSHR0cDJGbGFncxgKIAEo",
            "DRIbChNIdHRwMkZsYWdzRW5kU3RyZWFtGAsgASgIEhQKDEh0dHAyRmxhZ3NF",
            "aBgMIAEoCBIYChBIdHRwMkZsYWdzUGFkZGVkGA0gASgIEhoKEkh0dHAyRmxh",
            "Z3NQcmlvcml0eRgOIAEoCBIZChFIdHRwMkZsYWdzQWNrUGluZxgPIAEoCBIY",
            "ChBIdHRwMkZsYWdzVW51c2VkGBAgASgNEiAKGEh0dHAyRmxhZ3NVbnVzZWRT",
            "ZXR0aW5ncxgRIAEoDRIcChRIdHRwMkZsYWdzVW51c2VkUGluZxgSIAEoDRIk",
            "ChxIdHRwMkZsYWdzVW51c2VkQ29udGludWF0aW9uGBMgASgNEiMKG0h0dHAy",
            "RmxhZ3NVbnVzZWRQdXNoUHJvbWlzZRgUIAEoDRIcChRIdHRwMkZsYWdzVW51",
            "c2VkRGF0YRgVIAEoDRIfChdIdHRwMkZsYWdzVW51c2VkSGVhZGVycxgWIAEo",
            "DRIdChVIdHRwMkZsYWdzQWNrU2V0dGluZ3MYFyABKAgSFAoMSHR0cDJQYWRk",
            "aW5nGBggASgNEhYKDkh0dHAyUGFkTGVuZ3RoGBkgASgNEhYKDkh0dHAyRXhj",
            "bHVzaXZlGBogASgIEh0KFUh0dHAyU3RyZWFtRGVwZW5kZW5jeRgbIAEoDRIV",
            "Cg1IdHRwMkRhdGFEYXRhGBwgASgMEhgKEEh0dHAyRGF0YVBhZGRpbmcYHSAB",
            "KAwSGgoSSHR0cDJCb2R5RnJhZ21lbnRzGB4gASgFEhkKEUh0dHAyQm9keUZy",
            "YWdtZW50GB8gASgDEiAKGEh0dHAyQm9keUZyYWdtZW50T3ZlcmxhcBggIAEo",
            "CBIpCiFIdHRwMkJvZHlGcmFnbWVudE92ZXJsYXBDb25mbGljdHMYISABKAgS",
            "JgoeSHR0cDJCb2R5RnJhZ21lbnRNdWx0aXBsZVRhaWxzGCIgASgIEigKIEh0",
            "dHAyQm9keUZyYWdtZW50VG9vTG9uZ0ZyYWdtZW50GCMgASgIEh4KFkh0dHAy",
            "Qm9keUZyYWdtZW50RXJyb3IYJCABKAMSHgoWSHR0cDJCb2R5RnJhZ21lbnRD",
            "b3VudBglIAEoDRIeChZIdHRwMkJvZHlSZWFzc2VtYmxlZEluGCYgASgDEiIK",
            "Gkh0dHAyQm9keVJlYXNzZW1ibGVkTGVuZ3RoGCcgASgNEhQKDEh0dHAySGVh",
            "ZGVycxgoIAEoDBIbChNIdHRwMkhlYWRlcnNQYWRkaW5nGCkgASgMEhMKC0h0",
            "dHAySGVhZGVyGCogASgFEhkKEUh0dHAySGVhZGVyTGVuZ3RoGCsgASgNEhgK",
            "EEh0dHAySGVhZGVyQ291bnQYLCABKA0SHQoVSHR0cDJIZWFkZXJOYW1lTGVu",
            "Z3RoGC0gASgNEhcKD0h0dHAySGVhZGVyTmFtZRguIAEoCRIeChZIdHRwMkhl",
            "YWRlclZhbHVlTGVuZ3RoGC8gASgNEhgKEEh0dHAySGVhZGVyVmFsdWUYMCAB",
            "KAkSFwoPSHR0cDJIZWFkZXJSZXByGDEgASgJEhgKEEh0dHAySGVhZGVySW5k",
            "ZXgYMiABKA0SIgoaSHR0cDJIZWFkZXJUYWJsZVNpemVVcGRhdGUYMyABKAUS",
            "MQopSHR0cDJIZWFkZXJUYWJsZVNpemVVcGRhdGVIZWFkZXJUYWJsZVNpemUY",
            "NCABKA0SGwoTSHR0cDJSc3RTdHJlYW1FcnJvchg1IAEoDRIVCg1IdHRwMlNl",
            "dHRpbmdzGDYgASgFEhcKD0h0dHAyU2V0dGluZ3NJZBg3IAEoDRIkChxIdHRw",
            "MlNldHRpbmdzSGVhZGVyVGFibGVTaXplGDggASgNEh8KF0h0dHAyU2V0dGlu",
            "Z3NFbmFibGVQdXNoGDkgASgNEikKIUh0dHAyU2V0dGluZ3NNYXhDb25jdXJy",
            "ZW50U3RyZWFtcxg6IAEoDRImCh5IdHRwMlNldHRpbmdzSW5pdGlhbFdpbmRv",
            "d1NpemUYOyABKA0SIQoZSHR0cDJTZXR0aW5nc01heEZyYW1lU2l6ZRg8IAEo",
            "DRImCh5IdHRwMlNldHRpbmdzTWF4SGVhZGVyTGlzdFNpemUYPSABKA0SHAoU",
            "SHR0cDJTZXR0aW5nc1Vua25vd24YPiABKA0SGQoRSHR0cDJQdXNoUHJvbWlz",
            "ZVIYPyABKA0SKAogSHR0cDJQdXNoUHJvbWlzZVByb21pc2VkU3RyZWFtSWQY",
            "QCABKA0SHgoWSHR0cDJQdXNoUHJvbWlzZUhlYWRlchhBIAEoDBIfChdIdHRw",
            "MlB1c2hQcm9taXNlUGFkZGluZxhCIAEoDBIRCglIdHRwMlBpbmcYQyABKAwS",
            "EQoJSHR0cDJQb25nGEQgASgMEhMKC0h0dHAyR293YXlSGEUgASgNEh8KF0h0",
            "dHAyR29hd2F5TGFzdFN0cmVhbUlkGEYgASgNEhgKEEh0dHAyR29hd2F5RXJy",
            "b3IYRyABKA0SGQoRSHR0cDJHb2F3YXlBZGRhdGEYSCABKAwSGgoSSHR0cDJX",
            "aW5kb3dVcGRhdGVSGEkgASgNEiwKJEh0dHAyV2luZG93VXBkYXRlV2luZG93",
            "U2l6ZUluY3JlbWVudBhKIAEoDRIfChdIdHRwMkNvbnRpbnVhdGlvbkhlYWRl",
            "chhLIAEoCRIgChhIdHRwMkNvbnRpbnVhdGlvblBhZGRpbmcYTCABKAwSHAoU",
            "SHR0cDJBbHRzdmNPcmlnaW5MZW4YTSABKA0SGQoRSHR0cDJBbHRzdmNPcmln",
            "aW4YTiABKAkSHQoVSHR0cDJBbHRzdmNGaWVsZFZhbHVlGE8gASgJYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Http2), global::Ndx.Decoders.Core.Http2.Parser, new[]{ "Http2Stream", "Http2Length", "Http2Type", "Http2R", "Http2HeadersWeight", "Http2HeadersWeightReal", "Http2Streamid", "Http2Magic", "Http2Unknown", "Http2Flags", "Http2FlagsEndStream", "Http2FlagsEh", "Http2FlagsPadded", "Http2FlagsPriority", "Http2FlagsAckPing", "Http2FlagsUnused", "Http2FlagsUnusedSettings", "Http2FlagsUnusedPing", "Http2FlagsUnusedContinuation", "Http2FlagsUnusedPushPromise", "Http2FlagsUnusedData", "Http2FlagsUnusedHeaders", "Http2FlagsAckSettings", "Http2Padding", "Http2PadLength", "Http2Exclusive", "Http2StreamDependency", "Http2DataData", "Http2DataPadding", "Http2BodyFragments", "Http2BodyFragment", "Http2BodyFragmentOverlap", "Http2BodyFragmentOverlapConflicts", "Http2BodyFragmentMultipleTails", "Http2BodyFragmentTooLongFragment", "Http2BodyFragmentError", "Http2BodyFragmentCount", "Http2BodyReassembledIn", "Http2BodyReassembledLength", "Http2Headers", "Http2HeadersPadding", "Http2Header", "Http2HeaderLength", "Http2HeaderCount", "Http2HeaderNameLength", "Http2HeaderName", "Http2HeaderValueLength", "Http2HeaderValue", "Http2HeaderRepr", "Http2HeaderIndex", "Http2HeaderTableSizeUpdate", "Http2HeaderTableSizeUpdateHeaderTableSize", "Http2RstStreamError", "Http2Settings", "Http2SettingsId", "Http2SettingsHeaderTableSize", "Http2SettingsEnablePush", "Http2SettingsMaxConcurrentStreams", "Http2SettingsInitialWindowSize", "Http2SettingsMaxFrameSize", "Http2SettingsMaxHeaderListSize", "Http2SettingsUnknown", "Http2PushPromiseR", "Http2PushPromisePromisedStreamId", "Http2PushPromiseHeader", "Http2PushPromisePadding", "Http2Ping", "Http2Pong", "Http2GowayR", "Http2GoawayLastStreamId", "Http2GoawayError", "Http2GoawayAddata", "Http2WindowUpdateR", "Http2WindowUpdateWindowSizeIncrement", "Http2ContinuationHeader", "Http2ContinuationPadding", "Http2AltsvcOriginLen", "Http2AltsvcOrigin", "Http2AltsvcFieldValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Http2 : pb::IMessage<Http2> {
    private static readonly pb::MessageParser<Http2> _parser = new pb::MessageParser<Http2>(() => new Http2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Http2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketHttp2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2(Http2 other) : this() {
      http2Stream_ = other.http2Stream_;
      http2Length_ = other.http2Length_;
      http2Type_ = other.http2Type_;
      http2R_ = other.http2R_;
      http2HeadersWeight_ = other.http2HeadersWeight_;
      http2HeadersWeightReal_ = other.http2HeadersWeightReal_;
      http2Streamid_ = other.http2Streamid_;
      http2Magic_ = other.http2Magic_;
      http2Unknown_ = other.http2Unknown_;
      http2Flags_ = other.http2Flags_;
      http2FlagsEndStream_ = other.http2FlagsEndStream_;
      http2FlagsEh_ = other.http2FlagsEh_;
      http2FlagsPadded_ = other.http2FlagsPadded_;
      http2FlagsPriority_ = other.http2FlagsPriority_;
      http2FlagsAckPing_ = other.http2FlagsAckPing_;
      http2FlagsUnused_ = other.http2FlagsUnused_;
      http2FlagsUnusedSettings_ = other.http2FlagsUnusedSettings_;
      http2FlagsUnusedPing_ = other.http2FlagsUnusedPing_;
      http2FlagsUnusedContinuation_ = other.http2FlagsUnusedContinuation_;
      http2FlagsUnusedPushPromise_ = other.http2FlagsUnusedPushPromise_;
      http2FlagsUnusedData_ = other.http2FlagsUnusedData_;
      http2FlagsUnusedHeaders_ = other.http2FlagsUnusedHeaders_;
      http2FlagsAckSettings_ = other.http2FlagsAckSettings_;
      http2Padding_ = other.http2Padding_;
      http2PadLength_ = other.http2PadLength_;
      http2Exclusive_ = other.http2Exclusive_;
      http2StreamDependency_ = other.http2StreamDependency_;
      http2DataData_ = other.http2DataData_;
      http2DataPadding_ = other.http2DataPadding_;
      http2BodyFragments_ = other.http2BodyFragments_;
      http2BodyFragment_ = other.http2BodyFragment_;
      http2BodyFragmentOverlap_ = other.http2BodyFragmentOverlap_;
      http2BodyFragmentOverlapConflicts_ = other.http2BodyFragmentOverlapConflicts_;
      http2BodyFragmentMultipleTails_ = other.http2BodyFragmentMultipleTails_;
      http2BodyFragmentTooLongFragment_ = other.http2BodyFragmentTooLongFragment_;
      http2BodyFragmentError_ = other.http2BodyFragmentError_;
      http2BodyFragmentCount_ = other.http2BodyFragmentCount_;
      http2BodyReassembledIn_ = other.http2BodyReassembledIn_;
      http2BodyReassembledLength_ = other.http2BodyReassembledLength_;
      http2Headers_ = other.http2Headers_;
      http2HeadersPadding_ = other.http2HeadersPadding_;
      http2Header_ = other.http2Header_;
      http2HeaderLength_ = other.http2HeaderLength_;
      http2HeaderCount_ = other.http2HeaderCount_;
      http2HeaderNameLength_ = other.http2HeaderNameLength_;
      http2HeaderName_ = other.http2HeaderName_;
      http2HeaderValueLength_ = other.http2HeaderValueLength_;
      http2HeaderValue_ = other.http2HeaderValue_;
      http2HeaderRepr_ = other.http2HeaderRepr_;
      http2HeaderIndex_ = other.http2HeaderIndex_;
      http2HeaderTableSizeUpdate_ = other.http2HeaderTableSizeUpdate_;
      http2HeaderTableSizeUpdateHeaderTableSize_ = other.http2HeaderTableSizeUpdateHeaderTableSize_;
      http2RstStreamError_ = other.http2RstStreamError_;
      http2Settings_ = other.http2Settings_;
      http2SettingsId_ = other.http2SettingsId_;
      http2SettingsHeaderTableSize_ = other.http2SettingsHeaderTableSize_;
      http2SettingsEnablePush_ = other.http2SettingsEnablePush_;
      http2SettingsMaxConcurrentStreams_ = other.http2SettingsMaxConcurrentStreams_;
      http2SettingsInitialWindowSize_ = other.http2SettingsInitialWindowSize_;
      http2SettingsMaxFrameSize_ = other.http2SettingsMaxFrameSize_;
      http2SettingsMaxHeaderListSize_ = other.http2SettingsMaxHeaderListSize_;
      http2SettingsUnknown_ = other.http2SettingsUnknown_;
      http2PushPromiseR_ = other.http2PushPromiseR_;
      http2PushPromisePromisedStreamId_ = other.http2PushPromisePromisedStreamId_;
      http2PushPromiseHeader_ = other.http2PushPromiseHeader_;
      http2PushPromisePadding_ = other.http2PushPromisePadding_;
      http2Ping_ = other.http2Ping_;
      http2Pong_ = other.http2Pong_;
      http2GowayR_ = other.http2GowayR_;
      http2GoawayLastStreamId_ = other.http2GoawayLastStreamId_;
      http2GoawayError_ = other.http2GoawayError_;
      http2GoawayAddata_ = other.http2GoawayAddata_;
      http2WindowUpdateR_ = other.http2WindowUpdateR_;
      http2WindowUpdateWindowSizeIncrement_ = other.http2WindowUpdateWindowSizeIncrement_;
      http2ContinuationHeader_ = other.http2ContinuationHeader_;
      http2ContinuationPadding_ = other.http2ContinuationPadding_;
      http2AltsvcOriginLen_ = other.http2AltsvcOriginLen_;
      http2AltsvcOrigin_ = other.http2AltsvcOrigin_;
      http2AltsvcFieldValue_ = other.http2AltsvcFieldValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2 Clone() {
      return new Http2(this);
    }

    /// <summary>Field number for the "Http2Stream" field.</summary>
    public const int Http2StreamFieldNumber = 1;
    private int http2Stream_;
    /// <summary>
    /// Stream ('http2_http2_stream')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Http2Stream {
      get { return http2Stream_; }
      set {
        http2Stream_ = value;
      }
    }

    /// <summary>Field number for the "Http2Length" field.</summary>
    public const int Http2LengthFieldNumber = 2;
    private uint http2Length_;
    /// <summary>
    /// Length ('http2_http2_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2Length {
      get { return http2Length_; }
      set {
        http2Length_ = value;
      }
    }

    /// <summary>Field number for the "Http2Type" field.</summary>
    public const int Http2TypeFieldNumber = 3;
    private uint http2Type_;
    /// <summary>
    /// Type ('http2_http2_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2Type {
      get { return http2Type_; }
      set {
        http2Type_ = value;
      }
    }

    /// <summary>Field number for the "Http2R" field.</summary>
    public const int Http2RFieldNumber = 4;
    private uint http2R_;
    /// <summary>
    /// Reserved ('http2_http2_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2R {
      get { return http2R_; }
      set {
        http2R_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeadersWeight" field.</summary>
    public const int Http2HeadersWeightFieldNumber = 5;
    private uint http2HeadersWeight_;
    /// <summary>
    /// Weight ('http2_headers_http2_headers_weight')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeadersWeight {
      get { return http2HeadersWeight_; }
      set {
        http2HeadersWeight_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeadersWeightReal" field.</summary>
    public const int Http2HeadersWeightRealFieldNumber = 6;
    private uint http2HeadersWeightReal_;
    /// <summary>
    /// Weight real ('http2_headers_http2_headers_weight_real')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeadersWeightReal {
      get { return http2HeadersWeightReal_; }
      set {
        http2HeadersWeightReal_ = value;
      }
    }

    /// <summary>Field number for the "Http2Streamid" field.</summary>
    public const int Http2StreamidFieldNumber = 7;
    private uint http2Streamid_;
    /// <summary>
    /// Stream Identifier ('http2_http2_streamid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2Streamid {
      get { return http2Streamid_; }
      set {
        http2Streamid_ = value;
      }
    }

    /// <summary>Field number for the "Http2Magic" field.</summary>
    public const int Http2MagicFieldNumber = 8;
    private string http2Magic_ = "";
    /// <summary>
    /// Magic ('http2_http2_magic')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2Magic {
      get { return http2Magic_; }
      set {
        http2Magic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2Unknown" field.</summary>
    public const int Http2UnknownFieldNumber = 9;
    private pb::ByteString http2Unknown_ = pb::ByteString.Empty;
    /// <summary>
    /// Unknown ('http2_http2_unknown')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2Unknown {
      get { return http2Unknown_; }
      set {
        http2Unknown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2Flags" field.</summary>
    public const int Http2FlagsFieldNumber = 10;
    private uint http2Flags_;
    /// <summary>
    /// Flags ('http2_http2_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2Flags {
      get { return http2Flags_; }
      set {
        http2Flags_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsEndStream" field.</summary>
    public const int Http2FlagsEndStreamFieldNumber = 11;
    private bool http2FlagsEndStream_;
    /// <summary>
    /// End Stream ('http2_flags_http2_flags_end_stream')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsEndStream {
      get { return http2FlagsEndStream_; }
      set {
        http2FlagsEndStream_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsEh" field.</summary>
    public const int Http2FlagsEhFieldNumber = 12;
    private bool http2FlagsEh_;
    /// <summary>
    /// End Headers ('http2_flags_http2_flags_eh')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsEh {
      get { return http2FlagsEh_; }
      set {
        http2FlagsEh_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsPadded" field.</summary>
    public const int Http2FlagsPaddedFieldNumber = 13;
    private bool http2FlagsPadded_;
    /// <summary>
    /// Padded ('http2_flags_http2_flags_padded')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsPadded {
      get { return http2FlagsPadded_; }
      set {
        http2FlagsPadded_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsPriority" field.</summary>
    public const int Http2FlagsPriorityFieldNumber = 14;
    private bool http2FlagsPriority_;
    /// <summary>
    /// Priority ('http2_flags_http2_flags_priority')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsPriority {
      get { return http2FlagsPriority_; }
      set {
        http2FlagsPriority_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsAckPing" field.</summary>
    public const int Http2FlagsAckPingFieldNumber = 15;
    private bool http2FlagsAckPing_;
    /// <summary>
    /// ACK ('http2_http2_flags_ack_ping')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsAckPing {
      get { return http2FlagsAckPing_; }
      set {
        http2FlagsAckPing_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnused" field.</summary>
    public const int Http2FlagsUnusedFieldNumber = 16;
    private uint http2FlagsUnused_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnused {
      get { return http2FlagsUnused_; }
      set {
        http2FlagsUnused_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedSettings" field.</summary>
    public const int Http2FlagsUnusedSettingsFieldNumber = 17;
    private uint http2FlagsUnusedSettings_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_settings')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedSettings {
      get { return http2FlagsUnusedSettings_; }
      set {
        http2FlagsUnusedSettings_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedPing" field.</summary>
    public const int Http2FlagsUnusedPingFieldNumber = 18;
    private uint http2FlagsUnusedPing_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_ping')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedPing {
      get { return http2FlagsUnusedPing_; }
      set {
        http2FlagsUnusedPing_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedContinuation" field.</summary>
    public const int Http2FlagsUnusedContinuationFieldNumber = 19;
    private uint http2FlagsUnusedContinuation_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_continuation')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedContinuation {
      get { return http2FlagsUnusedContinuation_; }
      set {
        http2FlagsUnusedContinuation_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedPushPromise" field.</summary>
    public const int Http2FlagsUnusedPushPromiseFieldNumber = 20;
    private uint http2FlagsUnusedPushPromise_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_push_promise')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedPushPromise {
      get { return http2FlagsUnusedPushPromise_; }
      set {
        http2FlagsUnusedPushPromise_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedData" field.</summary>
    public const int Http2FlagsUnusedDataFieldNumber = 21;
    private uint http2FlagsUnusedData_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedData {
      get { return http2FlagsUnusedData_; }
      set {
        http2FlagsUnusedData_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsUnusedHeaders" field.</summary>
    public const int Http2FlagsUnusedHeadersFieldNumber = 22;
    private uint http2FlagsUnusedHeaders_;
    /// <summary>
    /// Unused ('http2_flags_http2_flags_unused_headers')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2FlagsUnusedHeaders {
      get { return http2FlagsUnusedHeaders_; }
      set {
        http2FlagsUnusedHeaders_ = value;
      }
    }

    /// <summary>Field number for the "Http2FlagsAckSettings" field.</summary>
    public const int Http2FlagsAckSettingsFieldNumber = 23;
    private bool http2FlagsAckSettings_;
    /// <summary>
    /// ACK ('http2_http2_flags_ack_settings')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2FlagsAckSettings {
      get { return http2FlagsAckSettings_; }
      set {
        http2FlagsAckSettings_ = value;
      }
    }

    /// <summary>Field number for the "Http2Padding" field.</summary>
    public const int Http2PaddingFieldNumber = 24;
    private uint http2Padding_;
    /// <summary>
    /// Pad Length ('http2_http2_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2Padding {
      get { return http2Padding_; }
      set {
        http2Padding_ = value;
      }
    }

    /// <summary>Field number for the "Http2PadLength" field.</summary>
    public const int Http2PadLengthFieldNumber = 25;
    private uint http2PadLength_;
    /// <summary>
    /// Pad Length ('http2_http2_pad_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2PadLength {
      get { return http2PadLength_; }
      set {
        http2PadLength_ = value;
      }
    }

    /// <summary>Field number for the "Http2Exclusive" field.</summary>
    public const int Http2ExclusiveFieldNumber = 26;
    private bool http2Exclusive_;
    /// <summary>
    /// Exclusive ('http2_http2_exclusive')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2Exclusive {
      get { return http2Exclusive_; }
      set {
        http2Exclusive_ = value;
      }
    }

    /// <summary>Field number for the "Http2StreamDependency" field.</summary>
    public const int Http2StreamDependencyFieldNumber = 27;
    private uint http2StreamDependency_;
    /// <summary>
    /// Stream Dependency ('http2_http2_stream_dependency')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2StreamDependency {
      get { return http2StreamDependency_; }
      set {
        http2StreamDependency_ = value;
      }
    }

    /// <summary>Field number for the "Http2DataData" field.</summary>
    public const int Http2DataDataFieldNumber = 28;
    private pb::ByteString http2DataData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('http2_http2_data_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2DataData {
      get { return http2DataData_; }
      set {
        http2DataData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2DataPadding" field.</summary>
    public const int Http2DataPaddingFieldNumber = 29;
    private pb::ByteString http2DataPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('http2_http2_data_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2DataPadding {
      get { return http2DataPadding_; }
      set {
        http2DataPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2BodyFragments" field.</summary>
    public const int Http2BodyFragmentsFieldNumber = 30;
    private int http2BodyFragments_;
    /// <summary>
    /// Body fragments ('http2_http2_body_fragments')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Http2BodyFragments {
      get { return http2BodyFragments_; }
      set {
        http2BodyFragments_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragment" field.</summary>
    public const int Http2BodyFragmentFieldNumber = 31;
    private long http2BodyFragment_;
    /// <summary>
    /// Body fragment ('http2_http2_body_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Http2BodyFragment {
      get { return http2BodyFragment_; }
      set {
        http2BodyFragment_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentOverlap" field.</summary>
    public const int Http2BodyFragmentOverlapFieldNumber = 32;
    private bool http2BodyFragmentOverlap_;
    /// <summary>
    /// Body fragment overlap ('http2_body_fragment_http2_body_fragment_overlap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2BodyFragmentOverlap {
      get { return http2BodyFragmentOverlap_; }
      set {
        http2BodyFragmentOverlap_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentOverlapConflicts" field.</summary>
    public const int Http2BodyFragmentOverlapConflictsFieldNumber = 33;
    private bool http2BodyFragmentOverlapConflicts_;
    /// <summary>
    /// Body fragment overlapping with conflicting data ('http2_body_fragment_overlap_http2_body_fragment_overlap_conflicts')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2BodyFragmentOverlapConflicts {
      get { return http2BodyFragmentOverlapConflicts_; }
      set {
        http2BodyFragmentOverlapConflicts_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentMultipleTails" field.</summary>
    public const int Http2BodyFragmentMultipleTailsFieldNumber = 34;
    private bool http2BodyFragmentMultipleTails_;
    /// <summary>
    /// Body has multiple tail fragments ('http2_body_fragment_http2_body_fragment_multiple_tails')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2BodyFragmentMultipleTails {
      get { return http2BodyFragmentMultipleTails_; }
      set {
        http2BodyFragmentMultipleTails_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentTooLongFragment" field.</summary>
    public const int Http2BodyFragmentTooLongFragmentFieldNumber = 35;
    private bool http2BodyFragmentTooLongFragment_;
    /// <summary>
    /// Body fragment too long ('http2_body_fragment_http2_body_fragment_too_long_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Http2BodyFragmentTooLongFragment {
      get { return http2BodyFragmentTooLongFragment_; }
      set {
        http2BodyFragmentTooLongFragment_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentError" field.</summary>
    public const int Http2BodyFragmentErrorFieldNumber = 36;
    private long http2BodyFragmentError_;
    /// <summary>
    /// Body defragment error ('http2_body_fragment_http2_body_fragment_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Http2BodyFragmentError {
      get { return http2BodyFragmentError_; }
      set {
        http2BodyFragmentError_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyFragmentCount" field.</summary>
    public const int Http2BodyFragmentCountFieldNumber = 37;
    private uint http2BodyFragmentCount_;
    /// <summary>
    /// Body fragment count ('http2_body_fragment_http2_body_fragment_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2BodyFragmentCount {
      get { return http2BodyFragmentCount_; }
      set {
        http2BodyFragmentCount_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyReassembledIn" field.</summary>
    public const int Http2BodyReassembledInFieldNumber = 38;
    private long http2BodyReassembledIn_;
    /// <summary>
    /// Reassembled body in frame ('http2_http2_body_reassembled_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Http2BodyReassembledIn {
      get { return http2BodyReassembledIn_; }
      set {
        http2BodyReassembledIn_ = value;
      }
    }

    /// <summary>Field number for the "Http2BodyReassembledLength" field.</summary>
    public const int Http2BodyReassembledLengthFieldNumber = 39;
    private uint http2BodyReassembledLength_;
    /// <summary>
    /// Reassembled body length ('http2_http2_body_reassembled_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2BodyReassembledLength {
      get { return http2BodyReassembledLength_; }
      set {
        http2BodyReassembledLength_ = value;
      }
    }

    /// <summary>Field number for the "Http2Headers" field.</summary>
    public const int Http2HeadersFieldNumber = 40;
    private pb::ByteString http2Headers_ = pb::ByteString.Empty;
    /// <summary>
    /// Header Block Fragment ('http2_http2_headers')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2Headers {
      get { return http2Headers_; }
      set {
        http2Headers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2HeadersPadding" field.</summary>
    public const int Http2HeadersPaddingFieldNumber = 41;
    private pb::ByteString http2HeadersPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('http2_headers_http2_headers_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2HeadersPadding {
      get { return http2HeadersPadding_; }
      set {
        http2HeadersPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2Header" field.</summary>
    public const int Http2HeaderFieldNumber = 42;
    private int http2Header_;
    /// <summary>
    /// Header ('http2_http2_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Http2Header {
      get { return http2Header_; }
      set {
        http2Header_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderLength" field.</summary>
    public const int Http2HeaderLengthFieldNumber = 43;
    private uint http2HeaderLength_;
    /// <summary>
    /// Header Length ('http2_header_http2_header_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderLength {
      get { return http2HeaderLength_; }
      set {
        http2HeaderLength_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderCount" field.</summary>
    public const int Http2HeaderCountFieldNumber = 44;
    private uint http2HeaderCount_;
    /// <summary>
    /// Header Count ('http2_header_http2_header_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderCount {
      get { return http2HeaderCount_; }
      set {
        http2HeaderCount_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderNameLength" field.</summary>
    public const int Http2HeaderNameLengthFieldNumber = 45;
    private uint http2HeaderNameLength_;
    /// <summary>
    /// Name Length ('http2_header_name_http2_header_name_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderNameLength {
      get { return http2HeaderNameLength_; }
      set {
        http2HeaderNameLength_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderName" field.</summary>
    public const int Http2HeaderNameFieldNumber = 46;
    private string http2HeaderName_ = "";
    /// <summary>
    /// Name ('http2_header_http2_header_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2HeaderName {
      get { return http2HeaderName_; }
      set {
        http2HeaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2HeaderValueLength" field.</summary>
    public const int Http2HeaderValueLengthFieldNumber = 47;
    private uint http2HeaderValueLength_;
    /// <summary>
    /// Value Length ('http2_header_value_http2_header_value_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderValueLength {
      get { return http2HeaderValueLength_; }
      set {
        http2HeaderValueLength_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderValue" field.</summary>
    public const int Http2HeaderValueFieldNumber = 48;
    private string http2HeaderValue_ = "";
    /// <summary>
    /// Value ('http2_header_http2_header_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2HeaderValue {
      get { return http2HeaderValue_; }
      set {
        http2HeaderValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2HeaderRepr" field.</summary>
    public const int Http2HeaderReprFieldNumber = 49;
    private string http2HeaderRepr_ = "";
    /// <summary>
    /// Representation ('http2_header_http2_header_repr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2HeaderRepr {
      get { return http2HeaderRepr_; }
      set {
        http2HeaderRepr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2HeaderIndex" field.</summary>
    public const int Http2HeaderIndexFieldNumber = 50;
    private uint http2HeaderIndex_;
    /// <summary>
    /// Index ('http2_header_http2_header_index')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderIndex {
      get { return http2HeaderIndex_; }
      set {
        http2HeaderIndex_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderTableSizeUpdate" field.</summary>
    public const int Http2HeaderTableSizeUpdateFieldNumber = 51;
    private int http2HeaderTableSizeUpdate_;
    /// <summary>
    /// Header table size update ('http2_http2_header_table_size_update')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Http2HeaderTableSizeUpdate {
      get { return http2HeaderTableSizeUpdate_; }
      set {
        http2HeaderTableSizeUpdate_ = value;
      }
    }

    /// <summary>Field number for the "Http2HeaderTableSizeUpdateHeaderTableSize" field.</summary>
    public const int Http2HeaderTableSizeUpdateHeaderTableSizeFieldNumber = 52;
    private uint http2HeaderTableSizeUpdateHeaderTableSize_;
    /// <summary>
    /// Header table size ('http2_header_table_size_update_http2_header_table_size_update_header_table_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2HeaderTableSizeUpdateHeaderTableSize {
      get { return http2HeaderTableSizeUpdateHeaderTableSize_; }
      set {
        http2HeaderTableSizeUpdateHeaderTableSize_ = value;
      }
    }

    /// <summary>Field number for the "Http2RstStreamError" field.</summary>
    public const int Http2RstStreamErrorFieldNumber = 53;
    private uint http2RstStreamError_;
    /// <summary>
    /// Error ('http2_http2_rst_stream_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2RstStreamError {
      get { return http2RstStreamError_; }
      set {
        http2RstStreamError_ = value;
      }
    }

    /// <summary>Field number for the "Http2Settings" field.</summary>
    public const int Http2SettingsFieldNumber = 54;
    private int http2Settings_;
    /// <summary>
    /// Settings ('http2_http2_settings')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Http2Settings {
      get { return http2Settings_; }
      set {
        http2Settings_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsId" field.</summary>
    public const int Http2SettingsIdFieldNumber = 55;
    private uint http2SettingsId_;
    /// <summary>
    /// Settings Identifier ('http2_settings_http2_settings_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsId {
      get { return http2SettingsId_; }
      set {
        http2SettingsId_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsHeaderTableSize" field.</summary>
    public const int Http2SettingsHeaderTableSizeFieldNumber = 56;
    private uint http2SettingsHeaderTableSize_;
    /// <summary>
    /// Header table size ('http2_settings_http2_settings_header_table_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsHeaderTableSize {
      get { return http2SettingsHeaderTableSize_; }
      set {
        http2SettingsHeaderTableSize_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsEnablePush" field.</summary>
    public const int Http2SettingsEnablePushFieldNumber = 57;
    private uint http2SettingsEnablePush_;
    /// <summary>
    /// Enable PUSH ('http2_settings_http2_settings_enable_push')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsEnablePush {
      get { return http2SettingsEnablePush_; }
      set {
        http2SettingsEnablePush_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsMaxConcurrentStreams" field.</summary>
    public const int Http2SettingsMaxConcurrentStreamsFieldNumber = 58;
    private uint http2SettingsMaxConcurrentStreams_;
    /// <summary>
    /// Max concurrent streams ('http2_settings_http2_settings_max_concurrent_streams')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsMaxConcurrentStreams {
      get { return http2SettingsMaxConcurrentStreams_; }
      set {
        http2SettingsMaxConcurrentStreams_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsInitialWindowSize" field.</summary>
    public const int Http2SettingsInitialWindowSizeFieldNumber = 59;
    private uint http2SettingsInitialWindowSize_;
    /// <summary>
    /// Initial Windows Size ('http2_settings_http2_settings_initial_window_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsInitialWindowSize {
      get { return http2SettingsInitialWindowSize_; }
      set {
        http2SettingsInitialWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsMaxFrameSize" field.</summary>
    public const int Http2SettingsMaxFrameSizeFieldNumber = 60;
    private uint http2SettingsMaxFrameSize_;
    /// <summary>
    /// Max frame size ('http2_settings_http2_settings_max_frame_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsMaxFrameSize {
      get { return http2SettingsMaxFrameSize_; }
      set {
        http2SettingsMaxFrameSize_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsMaxHeaderListSize" field.</summary>
    public const int Http2SettingsMaxHeaderListSizeFieldNumber = 61;
    private uint http2SettingsMaxHeaderListSize_;
    /// <summary>
    /// Max header list size ('http2_settings_http2_settings_max_header_list_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsMaxHeaderListSize {
      get { return http2SettingsMaxHeaderListSize_; }
      set {
        http2SettingsMaxHeaderListSize_ = value;
      }
    }

    /// <summary>Field number for the "Http2SettingsUnknown" field.</summary>
    public const int Http2SettingsUnknownFieldNumber = 62;
    private uint http2SettingsUnknown_;
    /// <summary>
    /// Unknown Settings ('http2_settings_http2_settings_unknown')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2SettingsUnknown {
      get { return http2SettingsUnknown_; }
      set {
        http2SettingsUnknown_ = value;
      }
    }

    /// <summary>Field number for the "Http2PushPromiseR" field.</summary>
    public const int Http2PushPromiseRFieldNumber = 63;
    private uint http2PushPromiseR_;
    /// <summary>
    /// Reserved ('http2_http2_push_promise_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2PushPromiseR {
      get { return http2PushPromiseR_; }
      set {
        http2PushPromiseR_ = value;
      }
    }

    /// <summary>Field number for the "Http2PushPromisePromisedStreamId" field.</summary>
    public const int Http2PushPromisePromisedStreamIdFieldNumber = 64;
    private uint http2PushPromisePromisedStreamId_;
    /// <summary>
    /// Promised-Stream-ID ('http2_http2_push_promise_promised_stream_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2PushPromisePromisedStreamId {
      get { return http2PushPromisePromisedStreamId_; }
      set {
        http2PushPromisePromisedStreamId_ = value;
      }
    }

    /// <summary>Field number for the "Http2PushPromiseHeader" field.</summary>
    public const int Http2PushPromiseHeaderFieldNumber = 65;
    private pb::ByteString http2PushPromiseHeader_ = pb::ByteString.Empty;
    /// <summary>
    /// Header Block Fragment ('http2_http2_push_promise_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2PushPromiseHeader {
      get { return http2PushPromiseHeader_; }
      set {
        http2PushPromiseHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2PushPromisePadding" field.</summary>
    public const int Http2PushPromisePaddingFieldNumber = 66;
    private pb::ByteString http2PushPromisePadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('http2_http2_push_promise_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2PushPromisePadding {
      get { return http2PushPromisePadding_; }
      set {
        http2PushPromisePadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2Ping" field.</summary>
    public const int Http2PingFieldNumber = 67;
    private pb::ByteString http2Ping_ = pb::ByteString.Empty;
    /// <summary>
    /// Ping ('http2_http2_ping')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2Ping {
      get { return http2Ping_; }
      set {
        http2Ping_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2Pong" field.</summary>
    public const int Http2PongFieldNumber = 68;
    private pb::ByteString http2Pong_ = pb::ByteString.Empty;
    /// <summary>
    /// Pong ('http2_http2_pong')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2Pong {
      get { return http2Pong_; }
      set {
        http2Pong_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2GowayR" field.</summary>
    public const int Http2GowayRFieldNumber = 69;
    private uint http2GowayR_;
    /// <summary>
    /// Reserved ('http2_http2_goway_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2GowayR {
      get { return http2GowayR_; }
      set {
        http2GowayR_ = value;
      }
    }

    /// <summary>Field number for the "Http2GoawayLastStreamId" field.</summary>
    public const int Http2GoawayLastStreamIdFieldNumber = 70;
    private uint http2GoawayLastStreamId_;
    /// <summary>
    /// Promised-Stream-ID ('http2_http2_goaway_last_stream_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2GoawayLastStreamId {
      get { return http2GoawayLastStreamId_; }
      set {
        http2GoawayLastStreamId_ = value;
      }
    }

    /// <summary>Field number for the "Http2GoawayError" field.</summary>
    public const int Http2GoawayErrorFieldNumber = 71;
    private uint http2GoawayError_;
    /// <summary>
    /// Error ('http2_http2_goaway_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2GoawayError {
      get { return http2GoawayError_; }
      set {
        http2GoawayError_ = value;
      }
    }

    /// <summary>Field number for the "Http2GoawayAddata" field.</summary>
    public const int Http2GoawayAddataFieldNumber = 72;
    private pb::ByteString http2GoawayAddata_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional Debug Data ('http2_http2_goaway_addata')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2GoawayAddata {
      get { return http2GoawayAddata_; }
      set {
        http2GoawayAddata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2WindowUpdateR" field.</summary>
    public const int Http2WindowUpdateRFieldNumber = 73;
    private uint http2WindowUpdateR_;
    /// <summary>
    /// Reserved ('http2_http2_window_update_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2WindowUpdateR {
      get { return http2WindowUpdateR_; }
      set {
        http2WindowUpdateR_ = value;
      }
    }

    /// <summary>Field number for the "Http2WindowUpdateWindowSizeIncrement" field.</summary>
    public const int Http2WindowUpdateWindowSizeIncrementFieldNumber = 74;
    private uint http2WindowUpdateWindowSizeIncrement_;
    /// <summary>
    /// Window Size Increment ('http2_http2_window_update_window_size_increment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2WindowUpdateWindowSizeIncrement {
      get { return http2WindowUpdateWindowSizeIncrement_; }
      set {
        http2WindowUpdateWindowSizeIncrement_ = value;
      }
    }

    /// <summary>Field number for the "Http2ContinuationHeader" field.</summary>
    public const int Http2ContinuationHeaderFieldNumber = 75;
    private string http2ContinuationHeader_ = "";
    /// <summary>
    /// Continuation Header ('http2_http2_continuation_header')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2ContinuationHeader {
      get { return http2ContinuationHeader_; }
      set {
        http2ContinuationHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2ContinuationPadding" field.</summary>
    public const int Http2ContinuationPaddingFieldNumber = 76;
    private pb::ByteString http2ContinuationPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('http2_http2_continuation_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Http2ContinuationPadding {
      get { return http2ContinuationPadding_; }
      set {
        http2ContinuationPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2AltsvcOriginLen" field.</summary>
    public const int Http2AltsvcOriginLenFieldNumber = 77;
    private uint http2AltsvcOriginLen_;
    /// <summary>
    /// Origin Length ('http2_altsvc_origin_http2_altsvc_origin_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Http2AltsvcOriginLen {
      get { return http2AltsvcOriginLen_; }
      set {
        http2AltsvcOriginLen_ = value;
      }
    }

    /// <summary>Field number for the "Http2AltsvcOrigin" field.</summary>
    public const int Http2AltsvcOriginFieldNumber = 78;
    private string http2AltsvcOrigin_ = "";
    /// <summary>
    /// Origin ('http2_http2_altsvc_origin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2AltsvcOrigin {
      get { return http2AltsvcOrigin_; }
      set {
        http2AltsvcOrigin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Http2AltsvcFieldValue" field.</summary>
    public const int Http2AltsvcFieldValueFieldNumber = 79;
    private string http2AltsvcFieldValue_ = "";
    /// <summary>
    /// Field/Value ('http2_http2_altsvc_field_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Http2AltsvcFieldValue {
      get { return http2AltsvcFieldValue_; }
      set {
        http2AltsvcFieldValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Http2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Http2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Http2Stream != other.Http2Stream) return false;
      if (Http2Length != other.Http2Length) return false;
      if (Http2Type != other.Http2Type) return false;
      if (Http2R != other.Http2R) return false;
      if (Http2HeadersWeight != other.Http2HeadersWeight) return false;
      if (Http2HeadersWeightReal != other.Http2HeadersWeightReal) return false;
      if (Http2Streamid != other.Http2Streamid) return false;
      if (Http2Magic != other.Http2Magic) return false;
      if (Http2Unknown != other.Http2Unknown) return false;
      if (Http2Flags != other.Http2Flags) return false;
      if (Http2FlagsEndStream != other.Http2FlagsEndStream) return false;
      if (Http2FlagsEh != other.Http2FlagsEh) return false;
      if (Http2FlagsPadded != other.Http2FlagsPadded) return false;
      if (Http2FlagsPriority != other.Http2FlagsPriority) return false;
      if (Http2FlagsAckPing != other.Http2FlagsAckPing) return false;
      if (Http2FlagsUnused != other.Http2FlagsUnused) return false;
      if (Http2FlagsUnusedSettings != other.Http2FlagsUnusedSettings) return false;
      if (Http2FlagsUnusedPing != other.Http2FlagsUnusedPing) return false;
      if (Http2FlagsUnusedContinuation != other.Http2FlagsUnusedContinuation) return false;
      if (Http2FlagsUnusedPushPromise != other.Http2FlagsUnusedPushPromise) return false;
      if (Http2FlagsUnusedData != other.Http2FlagsUnusedData) return false;
      if (Http2FlagsUnusedHeaders != other.Http2FlagsUnusedHeaders) return false;
      if (Http2FlagsAckSettings != other.Http2FlagsAckSettings) return false;
      if (Http2Padding != other.Http2Padding) return false;
      if (Http2PadLength != other.Http2PadLength) return false;
      if (Http2Exclusive != other.Http2Exclusive) return false;
      if (Http2StreamDependency != other.Http2StreamDependency) return false;
      if (Http2DataData != other.Http2DataData) return false;
      if (Http2DataPadding != other.Http2DataPadding) return false;
      if (Http2BodyFragments != other.Http2BodyFragments) return false;
      if (Http2BodyFragment != other.Http2BodyFragment) return false;
      if (Http2BodyFragmentOverlap != other.Http2BodyFragmentOverlap) return false;
      if (Http2BodyFragmentOverlapConflicts != other.Http2BodyFragmentOverlapConflicts) return false;
      if (Http2BodyFragmentMultipleTails != other.Http2BodyFragmentMultipleTails) return false;
      if (Http2BodyFragmentTooLongFragment != other.Http2BodyFragmentTooLongFragment) return false;
      if (Http2BodyFragmentError != other.Http2BodyFragmentError) return false;
      if (Http2BodyFragmentCount != other.Http2BodyFragmentCount) return false;
      if (Http2BodyReassembledIn != other.Http2BodyReassembledIn) return false;
      if (Http2BodyReassembledLength != other.Http2BodyReassembledLength) return false;
      if (Http2Headers != other.Http2Headers) return false;
      if (Http2HeadersPadding != other.Http2HeadersPadding) return false;
      if (Http2Header != other.Http2Header) return false;
      if (Http2HeaderLength != other.Http2HeaderLength) return false;
      if (Http2HeaderCount != other.Http2HeaderCount) return false;
      if (Http2HeaderNameLength != other.Http2HeaderNameLength) return false;
      if (Http2HeaderName != other.Http2HeaderName) return false;
      if (Http2HeaderValueLength != other.Http2HeaderValueLength) return false;
      if (Http2HeaderValue != other.Http2HeaderValue) return false;
      if (Http2HeaderRepr != other.Http2HeaderRepr) return false;
      if (Http2HeaderIndex != other.Http2HeaderIndex) return false;
      if (Http2HeaderTableSizeUpdate != other.Http2HeaderTableSizeUpdate) return false;
      if (Http2HeaderTableSizeUpdateHeaderTableSize != other.Http2HeaderTableSizeUpdateHeaderTableSize) return false;
      if (Http2RstStreamError != other.Http2RstStreamError) return false;
      if (Http2Settings != other.Http2Settings) return false;
      if (Http2SettingsId != other.Http2SettingsId) return false;
      if (Http2SettingsHeaderTableSize != other.Http2SettingsHeaderTableSize) return false;
      if (Http2SettingsEnablePush != other.Http2SettingsEnablePush) return false;
      if (Http2SettingsMaxConcurrentStreams != other.Http2SettingsMaxConcurrentStreams) return false;
      if (Http2SettingsInitialWindowSize != other.Http2SettingsInitialWindowSize) return false;
      if (Http2SettingsMaxFrameSize != other.Http2SettingsMaxFrameSize) return false;
      if (Http2SettingsMaxHeaderListSize != other.Http2SettingsMaxHeaderListSize) return false;
      if (Http2SettingsUnknown != other.Http2SettingsUnknown) return false;
      if (Http2PushPromiseR != other.Http2PushPromiseR) return false;
      if (Http2PushPromisePromisedStreamId != other.Http2PushPromisePromisedStreamId) return false;
      if (Http2PushPromiseHeader != other.Http2PushPromiseHeader) return false;
      if (Http2PushPromisePadding != other.Http2PushPromisePadding) return false;
      if (Http2Ping != other.Http2Ping) return false;
      if (Http2Pong != other.Http2Pong) return false;
      if (Http2GowayR != other.Http2GowayR) return false;
      if (Http2GoawayLastStreamId != other.Http2GoawayLastStreamId) return false;
      if (Http2GoawayError != other.Http2GoawayError) return false;
      if (Http2GoawayAddata != other.Http2GoawayAddata) return false;
      if (Http2WindowUpdateR != other.Http2WindowUpdateR) return false;
      if (Http2WindowUpdateWindowSizeIncrement != other.Http2WindowUpdateWindowSizeIncrement) return false;
      if (Http2ContinuationHeader != other.Http2ContinuationHeader) return false;
      if (Http2ContinuationPadding != other.Http2ContinuationPadding) return false;
      if (Http2AltsvcOriginLen != other.Http2AltsvcOriginLen) return false;
      if (Http2AltsvcOrigin != other.Http2AltsvcOrigin) return false;
      if (Http2AltsvcFieldValue != other.Http2AltsvcFieldValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Http2Stream != 0) hash ^= Http2Stream.GetHashCode();
      if (Http2Length != 0) hash ^= Http2Length.GetHashCode();
      if (Http2Type != 0) hash ^= Http2Type.GetHashCode();
      if (Http2R != 0) hash ^= Http2R.GetHashCode();
      if (Http2HeadersWeight != 0) hash ^= Http2HeadersWeight.GetHashCode();
      if (Http2HeadersWeightReal != 0) hash ^= Http2HeadersWeightReal.GetHashCode();
      if (Http2Streamid != 0) hash ^= Http2Streamid.GetHashCode();
      if (Http2Magic.Length != 0) hash ^= Http2Magic.GetHashCode();
      if (Http2Unknown.Length != 0) hash ^= Http2Unknown.GetHashCode();
      if (Http2Flags != 0) hash ^= Http2Flags.GetHashCode();
      if (Http2FlagsEndStream != false) hash ^= Http2FlagsEndStream.GetHashCode();
      if (Http2FlagsEh != false) hash ^= Http2FlagsEh.GetHashCode();
      if (Http2FlagsPadded != false) hash ^= Http2FlagsPadded.GetHashCode();
      if (Http2FlagsPriority != false) hash ^= Http2FlagsPriority.GetHashCode();
      if (Http2FlagsAckPing != false) hash ^= Http2FlagsAckPing.GetHashCode();
      if (Http2FlagsUnused != 0) hash ^= Http2FlagsUnused.GetHashCode();
      if (Http2FlagsUnusedSettings != 0) hash ^= Http2FlagsUnusedSettings.GetHashCode();
      if (Http2FlagsUnusedPing != 0) hash ^= Http2FlagsUnusedPing.GetHashCode();
      if (Http2FlagsUnusedContinuation != 0) hash ^= Http2FlagsUnusedContinuation.GetHashCode();
      if (Http2FlagsUnusedPushPromise != 0) hash ^= Http2FlagsUnusedPushPromise.GetHashCode();
      if (Http2FlagsUnusedData != 0) hash ^= Http2FlagsUnusedData.GetHashCode();
      if (Http2FlagsUnusedHeaders != 0) hash ^= Http2FlagsUnusedHeaders.GetHashCode();
      if (Http2FlagsAckSettings != false) hash ^= Http2FlagsAckSettings.GetHashCode();
      if (Http2Padding != 0) hash ^= Http2Padding.GetHashCode();
      if (Http2PadLength != 0) hash ^= Http2PadLength.GetHashCode();
      if (Http2Exclusive != false) hash ^= Http2Exclusive.GetHashCode();
      if (Http2StreamDependency != 0) hash ^= Http2StreamDependency.GetHashCode();
      if (Http2DataData.Length != 0) hash ^= Http2DataData.GetHashCode();
      if (Http2DataPadding.Length != 0) hash ^= Http2DataPadding.GetHashCode();
      if (Http2BodyFragments != 0) hash ^= Http2BodyFragments.GetHashCode();
      if (Http2BodyFragment != 0L) hash ^= Http2BodyFragment.GetHashCode();
      if (Http2BodyFragmentOverlap != false) hash ^= Http2BodyFragmentOverlap.GetHashCode();
      if (Http2BodyFragmentOverlapConflicts != false) hash ^= Http2BodyFragmentOverlapConflicts.GetHashCode();
      if (Http2BodyFragmentMultipleTails != false) hash ^= Http2BodyFragmentMultipleTails.GetHashCode();
      if (Http2BodyFragmentTooLongFragment != false) hash ^= Http2BodyFragmentTooLongFragment.GetHashCode();
      if (Http2BodyFragmentError != 0L) hash ^= Http2BodyFragmentError.GetHashCode();
      if (Http2BodyFragmentCount != 0) hash ^= Http2BodyFragmentCount.GetHashCode();
      if (Http2BodyReassembledIn != 0L) hash ^= Http2BodyReassembledIn.GetHashCode();
      if (Http2BodyReassembledLength != 0) hash ^= Http2BodyReassembledLength.GetHashCode();
      if (Http2Headers.Length != 0) hash ^= Http2Headers.GetHashCode();
      if (Http2HeadersPadding.Length != 0) hash ^= Http2HeadersPadding.GetHashCode();
      if (Http2Header != 0) hash ^= Http2Header.GetHashCode();
      if (Http2HeaderLength != 0) hash ^= Http2HeaderLength.GetHashCode();
      if (Http2HeaderCount != 0) hash ^= Http2HeaderCount.GetHashCode();
      if (Http2HeaderNameLength != 0) hash ^= Http2HeaderNameLength.GetHashCode();
      if (Http2HeaderName.Length != 0) hash ^= Http2HeaderName.GetHashCode();
      if (Http2HeaderValueLength != 0) hash ^= Http2HeaderValueLength.GetHashCode();
      if (Http2HeaderValue.Length != 0) hash ^= Http2HeaderValue.GetHashCode();
      if (Http2HeaderRepr.Length != 0) hash ^= Http2HeaderRepr.GetHashCode();
      if (Http2HeaderIndex != 0) hash ^= Http2HeaderIndex.GetHashCode();
      if (Http2HeaderTableSizeUpdate != 0) hash ^= Http2HeaderTableSizeUpdate.GetHashCode();
      if (Http2HeaderTableSizeUpdateHeaderTableSize != 0) hash ^= Http2HeaderTableSizeUpdateHeaderTableSize.GetHashCode();
      if (Http2RstStreamError != 0) hash ^= Http2RstStreamError.GetHashCode();
      if (Http2Settings != 0) hash ^= Http2Settings.GetHashCode();
      if (Http2SettingsId != 0) hash ^= Http2SettingsId.GetHashCode();
      if (Http2SettingsHeaderTableSize != 0) hash ^= Http2SettingsHeaderTableSize.GetHashCode();
      if (Http2SettingsEnablePush != 0) hash ^= Http2SettingsEnablePush.GetHashCode();
      if (Http2SettingsMaxConcurrentStreams != 0) hash ^= Http2SettingsMaxConcurrentStreams.GetHashCode();
      if (Http2SettingsInitialWindowSize != 0) hash ^= Http2SettingsInitialWindowSize.GetHashCode();
      if (Http2SettingsMaxFrameSize != 0) hash ^= Http2SettingsMaxFrameSize.GetHashCode();
      if (Http2SettingsMaxHeaderListSize != 0) hash ^= Http2SettingsMaxHeaderListSize.GetHashCode();
      if (Http2SettingsUnknown != 0) hash ^= Http2SettingsUnknown.GetHashCode();
      if (Http2PushPromiseR != 0) hash ^= Http2PushPromiseR.GetHashCode();
      if (Http2PushPromisePromisedStreamId != 0) hash ^= Http2PushPromisePromisedStreamId.GetHashCode();
      if (Http2PushPromiseHeader.Length != 0) hash ^= Http2PushPromiseHeader.GetHashCode();
      if (Http2PushPromisePadding.Length != 0) hash ^= Http2PushPromisePadding.GetHashCode();
      if (Http2Ping.Length != 0) hash ^= Http2Ping.GetHashCode();
      if (Http2Pong.Length != 0) hash ^= Http2Pong.GetHashCode();
      if (Http2GowayR != 0) hash ^= Http2GowayR.GetHashCode();
      if (Http2GoawayLastStreamId != 0) hash ^= Http2GoawayLastStreamId.GetHashCode();
      if (Http2GoawayError != 0) hash ^= Http2GoawayError.GetHashCode();
      if (Http2GoawayAddata.Length != 0) hash ^= Http2GoawayAddata.GetHashCode();
      if (Http2WindowUpdateR != 0) hash ^= Http2WindowUpdateR.GetHashCode();
      if (Http2WindowUpdateWindowSizeIncrement != 0) hash ^= Http2WindowUpdateWindowSizeIncrement.GetHashCode();
      if (Http2ContinuationHeader.Length != 0) hash ^= Http2ContinuationHeader.GetHashCode();
      if (Http2ContinuationPadding.Length != 0) hash ^= Http2ContinuationPadding.GetHashCode();
      if (Http2AltsvcOriginLen != 0) hash ^= Http2AltsvcOriginLen.GetHashCode();
      if (Http2AltsvcOrigin.Length != 0) hash ^= Http2AltsvcOrigin.GetHashCode();
      if (Http2AltsvcFieldValue.Length != 0) hash ^= Http2AltsvcFieldValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Http2Stream != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Http2Stream);
      }
      if (Http2Length != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Http2Length);
      }
      if (Http2Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Http2Type);
      }
      if (Http2R != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Http2R);
      }
      if (Http2HeadersWeight != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Http2HeadersWeight);
      }
      if (Http2HeadersWeightReal != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Http2HeadersWeightReal);
      }
      if (Http2Streamid != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Http2Streamid);
      }
      if (Http2Magic.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Http2Magic);
      }
      if (Http2Unknown.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Http2Unknown);
      }
      if (Http2Flags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Http2Flags);
      }
      if (Http2FlagsEndStream != false) {
        output.WriteRawTag(88);
        output.WriteBool(Http2FlagsEndStream);
      }
      if (Http2FlagsEh != false) {
        output.WriteRawTag(96);
        output.WriteBool(Http2FlagsEh);
      }
      if (Http2FlagsPadded != false) {
        output.WriteRawTag(104);
        output.WriteBool(Http2FlagsPadded);
      }
      if (Http2FlagsPriority != false) {
        output.WriteRawTag(112);
        output.WriteBool(Http2FlagsPriority);
      }
      if (Http2FlagsAckPing != false) {
        output.WriteRawTag(120);
        output.WriteBool(Http2FlagsAckPing);
      }
      if (Http2FlagsUnused != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Http2FlagsUnused);
      }
      if (Http2FlagsUnusedSettings != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Http2FlagsUnusedSettings);
      }
      if (Http2FlagsUnusedPing != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Http2FlagsUnusedPing);
      }
      if (Http2FlagsUnusedContinuation != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Http2FlagsUnusedContinuation);
      }
      if (Http2FlagsUnusedPushPromise != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Http2FlagsUnusedPushPromise);
      }
      if (Http2FlagsUnusedData != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Http2FlagsUnusedData);
      }
      if (Http2FlagsUnusedHeaders != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(Http2FlagsUnusedHeaders);
      }
      if (Http2FlagsAckSettings != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(Http2FlagsAckSettings);
      }
      if (Http2Padding != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Http2Padding);
      }
      if (Http2PadLength != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Http2PadLength);
      }
      if (Http2Exclusive != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Http2Exclusive);
      }
      if (Http2StreamDependency != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Http2StreamDependency);
      }
      if (Http2DataData.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteBytes(Http2DataData);
      }
      if (Http2DataPadding.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteBytes(Http2DataPadding);
      }
      if (Http2BodyFragments != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Http2BodyFragments);
      }
      if (Http2BodyFragment != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(Http2BodyFragment);
      }
      if (Http2BodyFragmentOverlap != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(Http2BodyFragmentOverlap);
      }
      if (Http2BodyFragmentOverlapConflicts != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Http2BodyFragmentOverlapConflicts);
      }
      if (Http2BodyFragmentMultipleTails != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(Http2BodyFragmentMultipleTails);
      }
      if (Http2BodyFragmentTooLongFragment != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Http2BodyFragmentTooLongFragment);
      }
      if (Http2BodyFragmentError != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(Http2BodyFragmentError);
      }
      if (Http2BodyFragmentCount != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(Http2BodyFragmentCount);
      }
      if (Http2BodyReassembledIn != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(Http2BodyReassembledIn);
      }
      if (Http2BodyReassembledLength != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(Http2BodyReassembledLength);
      }
      if (Http2Headers.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(Http2Headers);
      }
      if (Http2HeadersPadding.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteBytes(Http2HeadersPadding);
      }
      if (Http2Header != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Http2Header);
      }
      if (Http2HeaderLength != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(Http2HeaderLength);
      }
      if (Http2HeaderCount != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(Http2HeaderCount);
      }
      if (Http2HeaderNameLength != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(Http2HeaderNameLength);
      }
      if (Http2HeaderName.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(Http2HeaderName);
      }
      if (Http2HeaderValueLength != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(Http2HeaderValueLength);
      }
      if (Http2HeaderValue.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Http2HeaderValue);
      }
      if (Http2HeaderRepr.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Http2HeaderRepr);
      }
      if (Http2HeaderIndex != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(Http2HeaderIndex);
      }
      if (Http2HeaderTableSizeUpdate != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(Http2HeaderTableSizeUpdate);
      }
      if (Http2HeaderTableSizeUpdateHeaderTableSize != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(Http2HeaderTableSizeUpdateHeaderTableSize);
      }
      if (Http2RstStreamError != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(Http2RstStreamError);
      }
      if (Http2Settings != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Http2Settings);
      }
      if (Http2SettingsId != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(Http2SettingsId);
      }
      if (Http2SettingsHeaderTableSize != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(Http2SettingsHeaderTableSize);
      }
      if (Http2SettingsEnablePush != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(Http2SettingsEnablePush);
      }
      if (Http2SettingsMaxConcurrentStreams != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(Http2SettingsMaxConcurrentStreams);
      }
      if (Http2SettingsInitialWindowSize != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(Http2SettingsInitialWindowSize);
      }
      if (Http2SettingsMaxFrameSize != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(Http2SettingsMaxFrameSize);
      }
      if (Http2SettingsMaxHeaderListSize != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(Http2SettingsMaxHeaderListSize);
      }
      if (Http2SettingsUnknown != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(Http2SettingsUnknown);
      }
      if (Http2PushPromiseR != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(Http2PushPromiseR);
      }
      if (Http2PushPromisePromisedStreamId != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(Http2PushPromisePromisedStreamId);
      }
      if (Http2PushPromiseHeader.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteBytes(Http2PushPromiseHeader);
      }
      if (Http2PushPromisePadding.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteBytes(Http2PushPromisePadding);
      }
      if (Http2Ping.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteBytes(Http2Ping);
      }
      if (Http2Pong.Length != 0) {
        output.WriteRawTag(162, 4);
        output.WriteBytes(Http2Pong);
      }
      if (Http2GowayR != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(Http2GowayR);
      }
      if (Http2GoawayLastStreamId != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(Http2GoawayLastStreamId);
      }
      if (Http2GoawayError != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(Http2GoawayError);
      }
      if (Http2GoawayAddata.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteBytes(Http2GoawayAddata);
      }
      if (Http2WindowUpdateR != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(Http2WindowUpdateR);
      }
      if (Http2WindowUpdateWindowSizeIncrement != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(Http2WindowUpdateWindowSizeIncrement);
      }
      if (Http2ContinuationHeader.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(Http2ContinuationHeader);
      }
      if (Http2ContinuationPadding.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteBytes(Http2ContinuationPadding);
      }
      if (Http2AltsvcOriginLen != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(Http2AltsvcOriginLen);
      }
      if (Http2AltsvcOrigin.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(Http2AltsvcOrigin);
      }
      if (Http2AltsvcFieldValue.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(Http2AltsvcFieldValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Http2Stream != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Http2Stream);
      }
      if (Http2Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2Length);
      }
      if (Http2Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2Type);
      }
      if (Http2R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2R);
      }
      if (Http2HeadersWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeadersWeight);
      }
      if (Http2HeadersWeightReal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeadersWeightReal);
      }
      if (Http2Streamid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2Streamid);
      }
      if (Http2Magic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Http2Magic);
      }
      if (Http2Unknown.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Http2Unknown);
      }
      if (Http2Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Http2Flags);
      }
      if (Http2FlagsEndStream != false) {
        size += 1 + 1;
      }
      if (Http2FlagsEh != false) {
        size += 1 + 1;
      }
      if (Http2FlagsPadded != false) {
        size += 1 + 1;
      }
      if (Http2FlagsPriority != false) {
        size += 1 + 1;
      }
      if (Http2FlagsAckPing != false) {
        size += 1 + 1;
      }
      if (Http2FlagsUnused != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnused);
      }
      if (Http2FlagsUnusedSettings != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedSettings);
      }
      if (Http2FlagsUnusedPing != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedPing);
      }
      if (Http2FlagsUnusedContinuation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedContinuation);
      }
      if (Http2FlagsUnusedPushPromise != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedPushPromise);
      }
      if (Http2FlagsUnusedData != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedData);
      }
      if (Http2FlagsUnusedHeaders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2FlagsUnusedHeaders);
      }
      if (Http2FlagsAckSettings != false) {
        size += 2 + 1;
      }
      if (Http2Padding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2Padding);
      }
      if (Http2PadLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2PadLength);
      }
      if (Http2Exclusive != false) {
        size += 2 + 1;
      }
      if (Http2StreamDependency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2StreamDependency);
      }
      if (Http2DataData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2DataData);
      }
      if (Http2DataPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2DataPadding);
      }
      if (Http2BodyFragments != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Http2BodyFragments);
      }
      if (Http2BodyFragment != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Http2BodyFragment);
      }
      if (Http2BodyFragmentOverlap != false) {
        size += 2 + 1;
      }
      if (Http2BodyFragmentOverlapConflicts != false) {
        size += 2 + 1;
      }
      if (Http2BodyFragmentMultipleTails != false) {
        size += 2 + 1;
      }
      if (Http2BodyFragmentTooLongFragment != false) {
        size += 2 + 1;
      }
      if (Http2BodyFragmentError != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Http2BodyFragmentError);
      }
      if (Http2BodyFragmentCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2BodyFragmentCount);
      }
      if (Http2BodyReassembledIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Http2BodyReassembledIn);
      }
      if (Http2BodyReassembledLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2BodyReassembledLength);
      }
      if (Http2Headers.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2Headers);
      }
      if (Http2HeadersPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2HeadersPadding);
      }
      if (Http2Header != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Http2Header);
      }
      if (Http2HeaderLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderLength);
      }
      if (Http2HeaderCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderCount);
      }
      if (Http2HeaderNameLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderNameLength);
      }
      if (Http2HeaderName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2HeaderName);
      }
      if (Http2HeaderValueLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderValueLength);
      }
      if (Http2HeaderValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2HeaderValue);
      }
      if (Http2HeaderRepr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2HeaderRepr);
      }
      if (Http2HeaderIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderIndex);
      }
      if (Http2HeaderTableSizeUpdate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Http2HeaderTableSizeUpdate);
      }
      if (Http2HeaderTableSizeUpdateHeaderTableSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2HeaderTableSizeUpdateHeaderTableSize);
      }
      if (Http2RstStreamError != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2RstStreamError);
      }
      if (Http2Settings != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Http2Settings);
      }
      if (Http2SettingsId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsId);
      }
      if (Http2SettingsHeaderTableSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsHeaderTableSize);
      }
      if (Http2SettingsEnablePush != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsEnablePush);
      }
      if (Http2SettingsMaxConcurrentStreams != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsMaxConcurrentStreams);
      }
      if (Http2SettingsInitialWindowSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsInitialWindowSize);
      }
      if (Http2SettingsMaxFrameSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsMaxFrameSize);
      }
      if (Http2SettingsMaxHeaderListSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsMaxHeaderListSize);
      }
      if (Http2SettingsUnknown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2SettingsUnknown);
      }
      if (Http2PushPromiseR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2PushPromiseR);
      }
      if (Http2PushPromisePromisedStreamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2PushPromisePromisedStreamId);
      }
      if (Http2PushPromiseHeader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2PushPromiseHeader);
      }
      if (Http2PushPromisePadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2PushPromisePadding);
      }
      if (Http2Ping.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2Ping);
      }
      if (Http2Pong.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2Pong);
      }
      if (Http2GowayR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2GowayR);
      }
      if (Http2GoawayLastStreamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2GoawayLastStreamId);
      }
      if (Http2GoawayError != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2GoawayError);
      }
      if (Http2GoawayAddata.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2GoawayAddata);
      }
      if (Http2WindowUpdateR != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2WindowUpdateR);
      }
      if (Http2WindowUpdateWindowSizeIncrement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2WindowUpdateWindowSizeIncrement);
      }
      if (Http2ContinuationHeader.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2ContinuationHeader);
      }
      if (Http2ContinuationPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Http2ContinuationPadding);
      }
      if (Http2AltsvcOriginLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Http2AltsvcOriginLen);
      }
      if (Http2AltsvcOrigin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2AltsvcOrigin);
      }
      if (Http2AltsvcFieldValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Http2AltsvcFieldValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Http2 other) {
      if (other == null) {
        return;
      }
      if (other.Http2Stream != 0) {
        Http2Stream = other.Http2Stream;
      }
      if (other.Http2Length != 0) {
        Http2Length = other.Http2Length;
      }
      if (other.Http2Type != 0) {
        Http2Type = other.Http2Type;
      }
      if (other.Http2R != 0) {
        Http2R = other.Http2R;
      }
      if (other.Http2HeadersWeight != 0) {
        Http2HeadersWeight = other.Http2HeadersWeight;
      }
      if (other.Http2HeadersWeightReal != 0) {
        Http2HeadersWeightReal = other.Http2HeadersWeightReal;
      }
      if (other.Http2Streamid != 0) {
        Http2Streamid = other.Http2Streamid;
      }
      if (other.Http2Magic.Length != 0) {
        Http2Magic = other.Http2Magic;
      }
      if (other.Http2Unknown.Length != 0) {
        Http2Unknown = other.Http2Unknown;
      }
      if (other.Http2Flags != 0) {
        Http2Flags = other.Http2Flags;
      }
      if (other.Http2FlagsEndStream != false) {
        Http2FlagsEndStream = other.Http2FlagsEndStream;
      }
      if (other.Http2FlagsEh != false) {
        Http2FlagsEh = other.Http2FlagsEh;
      }
      if (other.Http2FlagsPadded != false) {
        Http2FlagsPadded = other.Http2FlagsPadded;
      }
      if (other.Http2FlagsPriority != false) {
        Http2FlagsPriority = other.Http2FlagsPriority;
      }
      if (other.Http2FlagsAckPing != false) {
        Http2FlagsAckPing = other.Http2FlagsAckPing;
      }
      if (other.Http2FlagsUnused != 0) {
        Http2FlagsUnused = other.Http2FlagsUnused;
      }
      if (other.Http2FlagsUnusedSettings != 0) {
        Http2FlagsUnusedSettings = other.Http2FlagsUnusedSettings;
      }
      if (other.Http2FlagsUnusedPing != 0) {
        Http2FlagsUnusedPing = other.Http2FlagsUnusedPing;
      }
      if (other.Http2FlagsUnusedContinuation != 0) {
        Http2FlagsUnusedContinuation = other.Http2FlagsUnusedContinuation;
      }
      if (other.Http2FlagsUnusedPushPromise != 0) {
        Http2FlagsUnusedPushPromise = other.Http2FlagsUnusedPushPromise;
      }
      if (other.Http2FlagsUnusedData != 0) {
        Http2FlagsUnusedData = other.Http2FlagsUnusedData;
      }
      if (other.Http2FlagsUnusedHeaders != 0) {
        Http2FlagsUnusedHeaders = other.Http2FlagsUnusedHeaders;
      }
      if (other.Http2FlagsAckSettings != false) {
        Http2FlagsAckSettings = other.Http2FlagsAckSettings;
      }
      if (other.Http2Padding != 0) {
        Http2Padding = other.Http2Padding;
      }
      if (other.Http2PadLength != 0) {
        Http2PadLength = other.Http2PadLength;
      }
      if (other.Http2Exclusive != false) {
        Http2Exclusive = other.Http2Exclusive;
      }
      if (other.Http2StreamDependency != 0) {
        Http2StreamDependency = other.Http2StreamDependency;
      }
      if (other.Http2DataData.Length != 0) {
        Http2DataData = other.Http2DataData;
      }
      if (other.Http2DataPadding.Length != 0) {
        Http2DataPadding = other.Http2DataPadding;
      }
      if (other.Http2BodyFragments != 0) {
        Http2BodyFragments = other.Http2BodyFragments;
      }
      if (other.Http2BodyFragment != 0L) {
        Http2BodyFragment = other.Http2BodyFragment;
      }
      if (other.Http2BodyFragmentOverlap != false) {
        Http2BodyFragmentOverlap = other.Http2BodyFragmentOverlap;
      }
      if (other.Http2BodyFragmentOverlapConflicts != false) {
        Http2BodyFragmentOverlapConflicts = other.Http2BodyFragmentOverlapConflicts;
      }
      if (other.Http2BodyFragmentMultipleTails != false) {
        Http2BodyFragmentMultipleTails = other.Http2BodyFragmentMultipleTails;
      }
      if (other.Http2BodyFragmentTooLongFragment != false) {
        Http2BodyFragmentTooLongFragment = other.Http2BodyFragmentTooLongFragment;
      }
      if (other.Http2BodyFragmentError != 0L) {
        Http2BodyFragmentError = other.Http2BodyFragmentError;
      }
      if (other.Http2BodyFragmentCount != 0) {
        Http2BodyFragmentCount = other.Http2BodyFragmentCount;
      }
      if (other.Http2BodyReassembledIn != 0L) {
        Http2BodyReassembledIn = other.Http2BodyReassembledIn;
      }
      if (other.Http2BodyReassembledLength != 0) {
        Http2BodyReassembledLength = other.Http2BodyReassembledLength;
      }
      if (other.Http2Headers.Length != 0) {
        Http2Headers = other.Http2Headers;
      }
      if (other.Http2HeadersPadding.Length != 0) {
        Http2HeadersPadding = other.Http2HeadersPadding;
      }
      if (other.Http2Header != 0) {
        Http2Header = other.Http2Header;
      }
      if (other.Http2HeaderLength != 0) {
        Http2HeaderLength = other.Http2HeaderLength;
      }
      if (other.Http2HeaderCount != 0) {
        Http2HeaderCount = other.Http2HeaderCount;
      }
      if (other.Http2HeaderNameLength != 0) {
        Http2HeaderNameLength = other.Http2HeaderNameLength;
      }
      if (other.Http2HeaderName.Length != 0) {
        Http2HeaderName = other.Http2HeaderName;
      }
      if (other.Http2HeaderValueLength != 0) {
        Http2HeaderValueLength = other.Http2HeaderValueLength;
      }
      if (other.Http2HeaderValue.Length != 0) {
        Http2HeaderValue = other.Http2HeaderValue;
      }
      if (other.Http2HeaderRepr.Length != 0) {
        Http2HeaderRepr = other.Http2HeaderRepr;
      }
      if (other.Http2HeaderIndex != 0) {
        Http2HeaderIndex = other.Http2HeaderIndex;
      }
      if (other.Http2HeaderTableSizeUpdate != 0) {
        Http2HeaderTableSizeUpdate = other.Http2HeaderTableSizeUpdate;
      }
      if (other.Http2HeaderTableSizeUpdateHeaderTableSize != 0) {
        Http2HeaderTableSizeUpdateHeaderTableSize = other.Http2HeaderTableSizeUpdateHeaderTableSize;
      }
      if (other.Http2RstStreamError != 0) {
        Http2RstStreamError = other.Http2RstStreamError;
      }
      if (other.Http2Settings != 0) {
        Http2Settings = other.Http2Settings;
      }
      if (other.Http2SettingsId != 0) {
        Http2SettingsId = other.Http2SettingsId;
      }
      if (other.Http2SettingsHeaderTableSize != 0) {
        Http2SettingsHeaderTableSize = other.Http2SettingsHeaderTableSize;
      }
      if (other.Http2SettingsEnablePush != 0) {
        Http2SettingsEnablePush = other.Http2SettingsEnablePush;
      }
      if (other.Http2SettingsMaxConcurrentStreams != 0) {
        Http2SettingsMaxConcurrentStreams = other.Http2SettingsMaxConcurrentStreams;
      }
      if (other.Http2SettingsInitialWindowSize != 0) {
        Http2SettingsInitialWindowSize = other.Http2SettingsInitialWindowSize;
      }
      if (other.Http2SettingsMaxFrameSize != 0) {
        Http2SettingsMaxFrameSize = other.Http2SettingsMaxFrameSize;
      }
      if (other.Http2SettingsMaxHeaderListSize != 0) {
        Http2SettingsMaxHeaderListSize = other.Http2SettingsMaxHeaderListSize;
      }
      if (other.Http2SettingsUnknown != 0) {
        Http2SettingsUnknown = other.Http2SettingsUnknown;
      }
      if (other.Http2PushPromiseR != 0) {
        Http2PushPromiseR = other.Http2PushPromiseR;
      }
      if (other.Http2PushPromisePromisedStreamId != 0) {
        Http2PushPromisePromisedStreamId = other.Http2PushPromisePromisedStreamId;
      }
      if (other.Http2PushPromiseHeader.Length != 0) {
        Http2PushPromiseHeader = other.Http2PushPromiseHeader;
      }
      if (other.Http2PushPromisePadding.Length != 0) {
        Http2PushPromisePadding = other.Http2PushPromisePadding;
      }
      if (other.Http2Ping.Length != 0) {
        Http2Ping = other.Http2Ping;
      }
      if (other.Http2Pong.Length != 0) {
        Http2Pong = other.Http2Pong;
      }
      if (other.Http2GowayR != 0) {
        Http2GowayR = other.Http2GowayR;
      }
      if (other.Http2GoawayLastStreamId != 0) {
        Http2GoawayLastStreamId = other.Http2GoawayLastStreamId;
      }
      if (other.Http2GoawayError != 0) {
        Http2GoawayError = other.Http2GoawayError;
      }
      if (other.Http2GoawayAddata.Length != 0) {
        Http2GoawayAddata = other.Http2GoawayAddata;
      }
      if (other.Http2WindowUpdateR != 0) {
        Http2WindowUpdateR = other.Http2WindowUpdateR;
      }
      if (other.Http2WindowUpdateWindowSizeIncrement != 0) {
        Http2WindowUpdateWindowSizeIncrement = other.Http2WindowUpdateWindowSizeIncrement;
      }
      if (other.Http2ContinuationHeader.Length != 0) {
        Http2ContinuationHeader = other.Http2ContinuationHeader;
      }
      if (other.Http2ContinuationPadding.Length != 0) {
        Http2ContinuationPadding = other.Http2ContinuationPadding;
      }
      if (other.Http2AltsvcOriginLen != 0) {
        Http2AltsvcOriginLen = other.Http2AltsvcOriginLen;
      }
      if (other.Http2AltsvcOrigin.Length != 0) {
        Http2AltsvcOrigin = other.Http2AltsvcOrigin;
      }
      if (other.Http2AltsvcFieldValue.Length != 0) {
        Http2AltsvcFieldValue = other.Http2AltsvcFieldValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Http2Stream = input.ReadInt32();
            break;
          }
          case 16: {
            Http2Length = input.ReadUInt32();
            break;
          }
          case 24: {
            Http2Type = input.ReadUInt32();
            break;
          }
          case 32: {
            Http2R = input.ReadUInt32();
            break;
          }
          case 40: {
            Http2HeadersWeight = input.ReadUInt32();
            break;
          }
          case 48: {
            Http2HeadersWeightReal = input.ReadUInt32();
            break;
          }
          case 56: {
            Http2Streamid = input.ReadUInt32();
            break;
          }
          case 66: {
            Http2Magic = input.ReadString();
            break;
          }
          case 74: {
            Http2Unknown = input.ReadBytes();
            break;
          }
          case 80: {
            Http2Flags = input.ReadUInt32();
            break;
          }
          case 88: {
            Http2FlagsEndStream = input.ReadBool();
            break;
          }
          case 96: {
            Http2FlagsEh = input.ReadBool();
            break;
          }
          case 104: {
            Http2FlagsPadded = input.ReadBool();
            break;
          }
          case 112: {
            Http2FlagsPriority = input.ReadBool();
            break;
          }
          case 120: {
            Http2FlagsAckPing = input.ReadBool();
            break;
          }
          case 128: {
            Http2FlagsUnused = input.ReadUInt32();
            break;
          }
          case 136: {
            Http2FlagsUnusedSettings = input.ReadUInt32();
            break;
          }
          case 144: {
            Http2FlagsUnusedPing = input.ReadUInt32();
            break;
          }
          case 152: {
            Http2FlagsUnusedContinuation = input.ReadUInt32();
            break;
          }
          case 160: {
            Http2FlagsUnusedPushPromise = input.ReadUInt32();
            break;
          }
          case 168: {
            Http2FlagsUnusedData = input.ReadUInt32();
            break;
          }
          case 176: {
            Http2FlagsUnusedHeaders = input.ReadUInt32();
            break;
          }
          case 184: {
            Http2FlagsAckSettings = input.ReadBool();
            break;
          }
          case 192: {
            Http2Padding = input.ReadUInt32();
            break;
          }
          case 200: {
            Http2PadLength = input.ReadUInt32();
            break;
          }
          case 208: {
            Http2Exclusive = input.ReadBool();
            break;
          }
          case 216: {
            Http2StreamDependency = input.ReadUInt32();
            break;
          }
          case 226: {
            Http2DataData = input.ReadBytes();
            break;
          }
          case 234: {
            Http2DataPadding = input.ReadBytes();
            break;
          }
          case 240: {
            Http2BodyFragments = input.ReadInt32();
            break;
          }
          case 248: {
            Http2BodyFragment = input.ReadInt64();
            break;
          }
          case 256: {
            Http2BodyFragmentOverlap = input.ReadBool();
            break;
          }
          case 264: {
            Http2BodyFragmentOverlapConflicts = input.ReadBool();
            break;
          }
          case 272: {
            Http2BodyFragmentMultipleTails = input.ReadBool();
            break;
          }
          case 280: {
            Http2BodyFragmentTooLongFragment = input.ReadBool();
            break;
          }
          case 288: {
            Http2BodyFragmentError = input.ReadInt64();
            break;
          }
          case 296: {
            Http2BodyFragmentCount = input.ReadUInt32();
            break;
          }
          case 304: {
            Http2BodyReassembledIn = input.ReadInt64();
            break;
          }
          case 312: {
            Http2BodyReassembledLength = input.ReadUInt32();
            break;
          }
          case 322: {
            Http2Headers = input.ReadBytes();
            break;
          }
          case 330: {
            Http2HeadersPadding = input.ReadBytes();
            break;
          }
          case 336: {
            Http2Header = input.ReadInt32();
            break;
          }
          case 344: {
            Http2HeaderLength = input.ReadUInt32();
            break;
          }
          case 352: {
            Http2HeaderCount = input.ReadUInt32();
            break;
          }
          case 360: {
            Http2HeaderNameLength = input.ReadUInt32();
            break;
          }
          case 370: {
            Http2HeaderName = input.ReadString();
            break;
          }
          case 376: {
            Http2HeaderValueLength = input.ReadUInt32();
            break;
          }
          case 386: {
            Http2HeaderValue = input.ReadString();
            break;
          }
          case 394: {
            Http2HeaderRepr = input.ReadString();
            break;
          }
          case 400: {
            Http2HeaderIndex = input.ReadUInt32();
            break;
          }
          case 408: {
            Http2HeaderTableSizeUpdate = input.ReadInt32();
            break;
          }
          case 416: {
            Http2HeaderTableSizeUpdateHeaderTableSize = input.ReadUInt32();
            break;
          }
          case 424: {
            Http2RstStreamError = input.ReadUInt32();
            break;
          }
          case 432: {
            Http2Settings = input.ReadInt32();
            break;
          }
          case 440: {
            Http2SettingsId = input.ReadUInt32();
            break;
          }
          case 448: {
            Http2SettingsHeaderTableSize = input.ReadUInt32();
            break;
          }
          case 456: {
            Http2SettingsEnablePush = input.ReadUInt32();
            break;
          }
          case 464: {
            Http2SettingsMaxConcurrentStreams = input.ReadUInt32();
            break;
          }
          case 472: {
            Http2SettingsInitialWindowSize = input.ReadUInt32();
            break;
          }
          case 480: {
            Http2SettingsMaxFrameSize = input.ReadUInt32();
            break;
          }
          case 488: {
            Http2SettingsMaxHeaderListSize = input.ReadUInt32();
            break;
          }
          case 496: {
            Http2SettingsUnknown = input.ReadUInt32();
            break;
          }
          case 504: {
            Http2PushPromiseR = input.ReadUInt32();
            break;
          }
          case 512: {
            Http2PushPromisePromisedStreamId = input.ReadUInt32();
            break;
          }
          case 522: {
            Http2PushPromiseHeader = input.ReadBytes();
            break;
          }
          case 530: {
            Http2PushPromisePadding = input.ReadBytes();
            break;
          }
          case 538: {
            Http2Ping = input.ReadBytes();
            break;
          }
          case 546: {
            Http2Pong = input.ReadBytes();
            break;
          }
          case 552: {
            Http2GowayR = input.ReadUInt32();
            break;
          }
          case 560: {
            Http2GoawayLastStreamId = input.ReadUInt32();
            break;
          }
          case 568: {
            Http2GoawayError = input.ReadUInt32();
            break;
          }
          case 578: {
            Http2GoawayAddata = input.ReadBytes();
            break;
          }
          case 584: {
            Http2WindowUpdateR = input.ReadUInt32();
            break;
          }
          case 592: {
            Http2WindowUpdateWindowSizeIncrement = input.ReadUInt32();
            break;
          }
          case 602: {
            Http2ContinuationHeader = input.ReadString();
            break;
          }
          case 610: {
            Http2ContinuationPadding = input.ReadBytes();
            break;
          }
          case 616: {
            Http2AltsvcOriginLen = input.ReadUInt32();
            break;
          }
          case 626: {
            Http2AltsvcOrigin = input.ReadString();
            break;
          }
          case 634: {
            Http2AltsvcFieldValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
