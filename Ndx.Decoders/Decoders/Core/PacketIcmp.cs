// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-icmp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Core {

  /// <summary>Holder for reflection information generated from packet-icmp.proto</summary>
  public static partial class PacketIcmpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-icmp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIcmpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYWNrZXQtaWNtcC5wcm90bxIRTmR4LkRlY29kZXJzLkNvcmUi1w0KBElj",
            "bXASEAoISWNtcFR5cGUYASABKA0SEAoISWNtcENvZGUYAiABKA0SFAoMSWNt",
            "cENoZWNrc3VtGAMgASgNEhoKEkljbXBDaGVja3N1bVN0YXR1cxgEIAEoDRIS",
            "CgpJY21wVW51c2VkGAUgASgMEhQKDEljbXBSZXNlcnZlZBgGIAEoDBIRCglJ",
            "Y21wSWRlbnQYByABKA0SDwoHSWNtcFNlcRgIIAEoDRIRCglJY21wU2VxTGUY",
            "CSABKA0SDwoHSWNtcE10dRgKIAEoDRIUCgxJY21wTnVtQWRkcnMYCyABKA0S",
            "GQoRSWNtcEFkZHJFbnRyeVNpemUYDCABKA0SFAoMSWNtcExpZmV0aW1lGA0g",
            "ASgNEhMKC0ljbXBQb2ludGVyGA4gASgNEhkKEUljbXBSb3V0ZXJBZGRyZXNz",
            "GA8gASgMEhUKDUljbXBQcmVmTGV2ZWwYECABKAUSHgoWSWNtcE9yaWdpbmF0",
            "ZVRpbWVzdGFtcBgRIAEoDRIcChRJY21wUmVjZWl2ZVRpbWVzdGFtcBgSIAEo",
            "DRIdChVJY21wVHJhbnNtaXRUaW1lc3RhbXAYEyABKA0SFwoPSWNtcEFkZHJl",
            "c3NNYXNrGBQgASgMEhMKC0ljbXBSZWRpckd3GBUgASgMEhMKC0ljbXBNaXBU",
            "eXBlGBYgASgNEhUKDUljbXBNaXBMZW5ndGgYFyABKA0SGwoTSWNtcE1pcFBy",
            "ZWZpeGxlbmd0aBgYIAEoDRISCgpJY21wTWlwU2VxGBkgASgNEhMKC0ljbXBN",
            "aXBMaWZlGBogASgNEhQKDEljbXBNaXBGbGFncxgbIAEoDRIQCghJY21wTWlw",
            "UhgcIAEoCBIQCghJY21wTWlwQhgdIAEoCBIQCghJY21wTWlwSBgeIAEoCBIQ",
            "CghJY21wTWlwRhgfIAEoCBIQCghJY21wTWlwTRggIAEoCBIQCghJY21wTWlw",
            "RxghIAEoCBIQCghJY21wTWlwVhgiIAEoCBIRCglJY21wTWlwUnQYIyABKAgS",
            "EAoISWNtcE1pcFUYJCABKAgSEAoISWNtcE1pcFgYJSABKAgSFwoPSWNtcE1p",
            "cFJlc2VydmVkGCYgASgNEhIKCkljbXBNaXBDb2EYJyABKAwSGAoQSWNtcE1p",
            "cENoYWxsZW5nZRgoIAEoDBIWCg5JY21wTWlwQ29udGVudBgpIAEoDBIPCgdJ",
            "Y21wRXh0GCogASgFEhYKDkljbXBFeHRWZXJzaW9uGCsgASgNEhIKCkljbXBF",
            "eHRSZXMYLCABKA0SFwoPSWNtcEV4dENoZWNrc3VtGC0gASgNEh0KFUljbXBF",
            "eHRDaGVja3N1bVN0YXR1cxguIAEoDRIVCg1JY21wRXh0TGVuZ3RoGC8gASgN",
            "EhQKDEljbXBFeHRDbGFzcxgwIAEoDRIUCgxJY21wRXh0Q3R5cGUYMSABKA0S",
            "EwoLSWNtcEV4dERhdGEYMiABKAwSFQoNSWNtcE1wbHNMYWJlbBgzIAEoDRIT",
            "CgtJY21wTXBsc0V4cBg0IAEoDRIRCglJY21wTXBsc1MYNSABKAgSEwoLSWNt",
            "cE1wbHNUdGwYNiABKA0SFAoMSWNtcE1wbHNEYXRhGDcgASgMEhIKCkljbXBS",
            "ZXNwSW4YOCABKAMSEgoKSWNtcE5vUmVzcBg5IAEoBRISCgpJY21wUmVzcFRv",
            "GDogASgDEhQKDEljbXBSZXNwdGltZRg7IAEoARIUCgxJY21wRGF0YVRpbWUY",
            "PCABKAMSHAoUSWNtcERhdGFUaW1lUmVsYXRpdmUYPSABKAMSEgoKSWNtcExl",
            "bmd0aBg+IAEoDRIiChpJY21wTGVuZ3RoT3JpZ2luYWxEYXRhZ3JhbRg/IAEo",
            "DRIXCg9JY21wSW50SW5mb1JvbGUYQCABKA0SGwoTSWNtcEludEluZm9SZXNl",
            "cnZlZBhBIAEoDRIaChJJY21wSW50SW5mb0lmaW5kZXgYQiABKAgSGQoRSWNt",
            "cEludEluZm9JcGFkZHIYQyABKAgSHgoWSWNtcEludEluZm9OYW1lUHJlc2Vu",
            "dBhEIAEoCBIWCg5JY21wSW50SW5mb010dRhFIAEoCBIYChBJY21wSW50SW5m",
            "b0luZGV4GEYgASgNEhYKDkljbXBJbnRJbmZvQWZpGEcgASgNEhcKD0ljbXBJ",
            "bnRJbmZvSXB2NBhIIAEoDBIXCg9JY21wSW50SW5mb0lwdjYYSSABKAwSHAoU",
            "SWNtcEludEluZm9JcHVua25vd24YSiABKAwSHQoVSWNtcEludEluZm9OYW1l",
            "TGVuZ3RoGEsgASgNEhcKD0ljbXBJbnRJbmZvTmFtZRhMIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Core.Icmp), global::Ndx.Decoders.Core.Icmp.Parser, new[]{ "IcmpType", "IcmpCode", "IcmpChecksum", "IcmpChecksumStatus", "IcmpUnused", "IcmpReserved", "IcmpIdent", "IcmpSeq", "IcmpSeqLe", "IcmpMtu", "IcmpNumAddrs", "IcmpAddrEntrySize", "IcmpLifetime", "IcmpPointer", "IcmpRouterAddress", "IcmpPrefLevel", "IcmpOriginateTimestamp", "IcmpReceiveTimestamp", "IcmpTransmitTimestamp", "IcmpAddressMask", "IcmpRedirGw", "IcmpMipType", "IcmpMipLength", "IcmpMipPrefixlength", "IcmpMipSeq", "IcmpMipLife", "IcmpMipFlags", "IcmpMipR", "IcmpMipB", "IcmpMipH", "IcmpMipF", "IcmpMipM", "IcmpMipG", "IcmpMipV", "IcmpMipRt", "IcmpMipU", "IcmpMipX", "IcmpMipReserved", "IcmpMipCoa", "IcmpMipChallenge", "IcmpMipContent", "IcmpExt", "IcmpExtVersion", "IcmpExtRes", "IcmpExtChecksum", "IcmpExtChecksumStatus", "IcmpExtLength", "IcmpExtClass", "IcmpExtCtype", "IcmpExtData", "IcmpMplsLabel", "IcmpMplsExp", "IcmpMplsS", "IcmpMplsTtl", "IcmpMplsData", "IcmpRespIn", "IcmpNoResp", "IcmpRespTo", "IcmpResptime", "IcmpDataTime", "IcmpDataTimeRelative", "IcmpLength", "IcmpLengthOriginalDatagram", "IcmpIntInfoRole", "IcmpIntInfoReserved", "IcmpIntInfoIfindex", "IcmpIntInfoIpaddr", "IcmpIntInfoNamePresent", "IcmpIntInfoMtu", "IcmpIntInfoIndex", "IcmpIntInfoAfi", "IcmpIntInfoIpv4", "IcmpIntInfoIpv6", "IcmpIntInfoIpunknown", "IcmpIntInfoNameLength", "IcmpIntInfoName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Icmp : pb::IMessage<Icmp> {
    private static readonly pb::MessageParser<Icmp> _parser = new pb::MessageParser<Icmp>(() => new Icmp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Icmp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Core.PacketIcmpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmp(Icmp other) : this() {
      icmpType_ = other.icmpType_;
      icmpCode_ = other.icmpCode_;
      icmpChecksum_ = other.icmpChecksum_;
      icmpChecksumStatus_ = other.icmpChecksumStatus_;
      icmpUnused_ = other.icmpUnused_;
      icmpReserved_ = other.icmpReserved_;
      icmpIdent_ = other.icmpIdent_;
      icmpSeq_ = other.icmpSeq_;
      icmpSeqLe_ = other.icmpSeqLe_;
      icmpMtu_ = other.icmpMtu_;
      icmpNumAddrs_ = other.icmpNumAddrs_;
      icmpAddrEntrySize_ = other.icmpAddrEntrySize_;
      icmpLifetime_ = other.icmpLifetime_;
      icmpPointer_ = other.icmpPointer_;
      icmpRouterAddress_ = other.icmpRouterAddress_;
      icmpPrefLevel_ = other.icmpPrefLevel_;
      icmpOriginateTimestamp_ = other.icmpOriginateTimestamp_;
      icmpReceiveTimestamp_ = other.icmpReceiveTimestamp_;
      icmpTransmitTimestamp_ = other.icmpTransmitTimestamp_;
      icmpAddressMask_ = other.icmpAddressMask_;
      icmpRedirGw_ = other.icmpRedirGw_;
      icmpMipType_ = other.icmpMipType_;
      icmpMipLength_ = other.icmpMipLength_;
      icmpMipPrefixlength_ = other.icmpMipPrefixlength_;
      icmpMipSeq_ = other.icmpMipSeq_;
      icmpMipLife_ = other.icmpMipLife_;
      icmpMipFlags_ = other.icmpMipFlags_;
      icmpMipR_ = other.icmpMipR_;
      icmpMipB_ = other.icmpMipB_;
      icmpMipH_ = other.icmpMipH_;
      icmpMipF_ = other.icmpMipF_;
      icmpMipM_ = other.icmpMipM_;
      icmpMipG_ = other.icmpMipG_;
      icmpMipV_ = other.icmpMipV_;
      icmpMipRt_ = other.icmpMipRt_;
      icmpMipU_ = other.icmpMipU_;
      icmpMipX_ = other.icmpMipX_;
      icmpMipReserved_ = other.icmpMipReserved_;
      icmpMipCoa_ = other.icmpMipCoa_;
      icmpMipChallenge_ = other.icmpMipChallenge_;
      icmpMipContent_ = other.icmpMipContent_;
      icmpExt_ = other.icmpExt_;
      icmpExtVersion_ = other.icmpExtVersion_;
      icmpExtRes_ = other.icmpExtRes_;
      icmpExtChecksum_ = other.icmpExtChecksum_;
      icmpExtChecksumStatus_ = other.icmpExtChecksumStatus_;
      icmpExtLength_ = other.icmpExtLength_;
      icmpExtClass_ = other.icmpExtClass_;
      icmpExtCtype_ = other.icmpExtCtype_;
      icmpExtData_ = other.icmpExtData_;
      icmpMplsLabel_ = other.icmpMplsLabel_;
      icmpMplsExp_ = other.icmpMplsExp_;
      icmpMplsS_ = other.icmpMplsS_;
      icmpMplsTtl_ = other.icmpMplsTtl_;
      icmpMplsData_ = other.icmpMplsData_;
      icmpRespIn_ = other.icmpRespIn_;
      icmpNoResp_ = other.icmpNoResp_;
      icmpRespTo_ = other.icmpRespTo_;
      icmpResptime_ = other.icmpResptime_;
      icmpDataTime_ = other.icmpDataTime_;
      icmpDataTimeRelative_ = other.icmpDataTimeRelative_;
      icmpLength_ = other.icmpLength_;
      icmpLengthOriginalDatagram_ = other.icmpLengthOriginalDatagram_;
      icmpIntInfoRole_ = other.icmpIntInfoRole_;
      icmpIntInfoReserved_ = other.icmpIntInfoReserved_;
      icmpIntInfoIfindex_ = other.icmpIntInfoIfindex_;
      icmpIntInfoIpaddr_ = other.icmpIntInfoIpaddr_;
      icmpIntInfoNamePresent_ = other.icmpIntInfoNamePresent_;
      icmpIntInfoMtu_ = other.icmpIntInfoMtu_;
      icmpIntInfoIndex_ = other.icmpIntInfoIndex_;
      icmpIntInfoAfi_ = other.icmpIntInfoAfi_;
      icmpIntInfoIpv4_ = other.icmpIntInfoIpv4_;
      icmpIntInfoIpv6_ = other.icmpIntInfoIpv6_;
      icmpIntInfoIpunknown_ = other.icmpIntInfoIpunknown_;
      icmpIntInfoNameLength_ = other.icmpIntInfoNameLength_;
      icmpIntInfoName_ = other.icmpIntInfoName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icmp Clone() {
      return new Icmp(this);
    }

    /// <summary>Field number for the "IcmpType" field.</summary>
    public const int IcmpTypeFieldNumber = 1;
    private uint icmpType_;
    /// <summary>
    /// Type ('icmp_icmp_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpType {
      get { return icmpType_; }
      set {
        icmpType_ = value;
      }
    }

    /// <summary>Field number for the "IcmpCode" field.</summary>
    public const int IcmpCodeFieldNumber = 2;
    private uint icmpCode_;
    /// <summary>
    /// Code ('icmp_icmp_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpCode {
      get { return icmpCode_; }
      set {
        icmpCode_ = value;
      }
    }

    /// <summary>Field number for the "IcmpChecksum" field.</summary>
    public const int IcmpChecksumFieldNumber = 3;
    private uint icmpChecksum_;
    /// <summary>
    /// Checksum ('icmp_icmp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpChecksum {
      get { return icmpChecksum_; }
      set {
        icmpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IcmpChecksumStatus" field.</summary>
    public const int IcmpChecksumStatusFieldNumber = 4;
    private uint icmpChecksumStatus_;
    /// <summary>
    /// Checksum Status ('icmp_checksum_icmp_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpChecksumStatus {
      get { return icmpChecksumStatus_; }
      set {
        icmpChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "IcmpUnused" field.</summary>
    public const int IcmpUnusedFieldNumber = 5;
    private pb::ByteString icmpUnused_ = pb::ByteString.Empty;
    /// <summary>
    /// Unused ('icmp_icmp_unused')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpUnused {
      get { return icmpUnused_; }
      set {
        icmpUnused_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpReserved" field.</summary>
    public const int IcmpReservedFieldNumber = 6;
    private pb::ByteString icmpReserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('icmp_icmp_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpReserved {
      get { return icmpReserved_; }
      set {
        icmpReserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpIdent" field.</summary>
    public const int IcmpIdentFieldNumber = 7;
    private uint icmpIdent_;
    /// <summary>
    /// Identifier (BE) ('icmp_icmp_ident')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIdent {
      get { return icmpIdent_; }
      set {
        icmpIdent_ = value;
      }
    }

    /// <summary>Field number for the "IcmpSeq" field.</summary>
    public const int IcmpSeqFieldNumber = 8;
    private uint icmpSeq_;
    /// <summary>
    /// Sequence number (BE) ('icmp_icmp_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpSeq {
      get { return icmpSeq_; }
      set {
        icmpSeq_ = value;
      }
    }

    /// <summary>Field number for the "IcmpSeqLe" field.</summary>
    public const int IcmpSeqLeFieldNumber = 9;
    private uint icmpSeqLe_;
    /// <summary>
    /// Sequence number (LE) ('icmp_icmp_seq_le')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpSeqLe {
      get { return icmpSeqLe_; }
      set {
        icmpSeqLe_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMtu" field.</summary>
    public const int IcmpMtuFieldNumber = 10;
    private uint icmpMtu_;
    /// <summary>
    /// MTU of next hop ('icmp_icmp_mtu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMtu {
      get { return icmpMtu_; }
      set {
        icmpMtu_ = value;
      }
    }

    /// <summary>Field number for the "IcmpNumAddrs" field.</summary>
    public const int IcmpNumAddrsFieldNumber = 11;
    private uint icmpNumAddrs_;
    /// <summary>
    /// Number of addresses ('icmp_icmp_num_addrs')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpNumAddrs {
      get { return icmpNumAddrs_; }
      set {
        icmpNumAddrs_ = value;
      }
    }

    /// <summary>Field number for the "IcmpAddrEntrySize" field.</summary>
    public const int IcmpAddrEntrySizeFieldNumber = 12;
    private uint icmpAddrEntrySize_;
    /// <summary>
    /// Address entry size ('icmp_icmp_addr_entry_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpAddrEntrySize {
      get { return icmpAddrEntrySize_; }
      set {
        icmpAddrEntrySize_ = value;
      }
    }

    /// <summary>Field number for the "IcmpLifetime" field.</summary>
    public const int IcmpLifetimeFieldNumber = 13;
    private uint icmpLifetime_;
    /// <summary>
    /// Lifetime ('icmp_icmp_lifetime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpLifetime {
      get { return icmpLifetime_; }
      set {
        icmpLifetime_ = value;
      }
    }

    /// <summary>Field number for the "IcmpPointer" field.</summary>
    public const int IcmpPointerFieldNumber = 14;
    private uint icmpPointer_;
    /// <summary>
    /// Pointer ('icmp_icmp_pointer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpPointer {
      get { return icmpPointer_; }
      set {
        icmpPointer_ = value;
      }
    }

    /// <summary>Field number for the "IcmpRouterAddress" field.</summary>
    public const int IcmpRouterAddressFieldNumber = 15;
    private pb::ByteString icmpRouterAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Router address ('icmp_icmp_router_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpRouterAddress {
      get { return icmpRouterAddress_; }
      set {
        icmpRouterAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpPrefLevel" field.</summary>
    public const int IcmpPrefLevelFieldNumber = 16;
    private int icmpPrefLevel_;
    /// <summary>
    /// Preference level ('icmp_icmp_pref_level')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IcmpPrefLevel {
      get { return icmpPrefLevel_; }
      set {
        icmpPrefLevel_ = value;
      }
    }

    /// <summary>Field number for the "IcmpOriginateTimestamp" field.</summary>
    public const int IcmpOriginateTimestampFieldNumber = 17;
    private uint icmpOriginateTimestamp_;
    /// <summary>
    /// Originate timestamp ('icmp_icmp_originate_timestamp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpOriginateTimestamp {
      get { return icmpOriginateTimestamp_; }
      set {
        icmpOriginateTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "IcmpReceiveTimestamp" field.</summary>
    public const int IcmpReceiveTimestampFieldNumber = 18;
    private uint icmpReceiveTimestamp_;
    /// <summary>
    /// Receive timestamp ('icmp_icmp_receive_timestamp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpReceiveTimestamp {
      get { return icmpReceiveTimestamp_; }
      set {
        icmpReceiveTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "IcmpTransmitTimestamp" field.</summary>
    public const int IcmpTransmitTimestampFieldNumber = 19;
    private uint icmpTransmitTimestamp_;
    /// <summary>
    /// Transmit timestamp ('icmp_icmp_transmit_timestamp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpTransmitTimestamp {
      get { return icmpTransmitTimestamp_; }
      set {
        icmpTransmitTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "IcmpAddressMask" field.</summary>
    public const int IcmpAddressMaskFieldNumber = 20;
    private pb::ByteString icmpAddressMask_ = pb::ByteString.Empty;
    /// <summary>
    /// Address Mask ('icmp_icmp_address_mask')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpAddressMask {
      get { return icmpAddressMask_; }
      set {
        icmpAddressMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpRedirGw" field.</summary>
    public const int IcmpRedirGwFieldNumber = 21;
    private pb::ByteString icmpRedirGw_ = pb::ByteString.Empty;
    /// <summary>
    /// Gateway address ('icmp_icmp_redir_gw')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpRedirGw {
      get { return icmpRedirGw_; }
      set {
        icmpRedirGw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpMipType" field.</summary>
    public const int IcmpMipTypeFieldNumber = 22;
    private uint icmpMipType_;
    /// <summary>
    /// Extension Type ('icmp_icmp_mip_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipType {
      get { return icmpMipType_; }
      set {
        icmpMipType_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipLength" field.</summary>
    public const int IcmpMipLengthFieldNumber = 23;
    private uint icmpMipLength_;
    /// <summary>
    /// Length ('icmp_icmp_mip_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipLength {
      get { return icmpMipLength_; }
      set {
        icmpMipLength_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipPrefixlength" field.</summary>
    public const int IcmpMipPrefixlengthFieldNumber = 24;
    private uint icmpMipPrefixlength_;
    /// <summary>
    /// Prefix Length ('icmp_icmp_mip_prefixlength')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipPrefixlength {
      get { return icmpMipPrefixlength_; }
      set {
        icmpMipPrefixlength_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipSeq" field.</summary>
    public const int IcmpMipSeqFieldNumber = 25;
    private uint icmpMipSeq_;
    /// <summary>
    /// Sequence Number ('icmp_icmp_mip_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipSeq {
      get { return icmpMipSeq_; }
      set {
        icmpMipSeq_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipLife" field.</summary>
    public const int IcmpMipLifeFieldNumber = 26;
    private uint icmpMipLife_;
    /// <summary>
    /// Registration Lifetime ('icmp_icmp_mip_life')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipLife {
      get { return icmpMipLife_; }
      set {
        icmpMipLife_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipFlags" field.</summary>
    public const int IcmpMipFlagsFieldNumber = 27;
    private uint icmpMipFlags_;
    /// <summary>
    /// Flags ('icmp_icmp_mip_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipFlags {
      get { return icmpMipFlags_; }
      set {
        icmpMipFlags_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipR" field.</summary>
    public const int IcmpMipRFieldNumber = 28;
    private bool icmpMipR_;
    /// <summary>
    /// Registration Required ('icmp_icmp_mip_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipR {
      get { return icmpMipR_; }
      set {
        icmpMipR_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipB" field.</summary>
    public const int IcmpMipBFieldNumber = 29;
    private bool icmpMipB_;
    /// <summary>
    /// Busy ('icmp_icmp_mip_b')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipB {
      get { return icmpMipB_; }
      set {
        icmpMipB_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipH" field.</summary>
    public const int IcmpMipHFieldNumber = 30;
    private bool icmpMipH_;
    /// <summary>
    /// Home Agent ('icmp_icmp_mip_h')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipH {
      get { return icmpMipH_; }
      set {
        icmpMipH_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipF" field.</summary>
    public const int IcmpMipFFieldNumber = 31;
    private bool icmpMipF_;
    /// <summary>
    /// Foreign Agent ('icmp_icmp_mip_f')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipF {
      get { return icmpMipF_; }
      set {
        icmpMipF_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipM" field.</summary>
    public const int IcmpMipMFieldNumber = 32;
    private bool icmpMipM_;
    /// <summary>
    /// Minimal Encapsulation ('icmp_icmp_mip_m')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipM {
      get { return icmpMipM_; }
      set {
        icmpMipM_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipG" field.</summary>
    public const int IcmpMipGFieldNumber = 33;
    private bool icmpMipG_;
    /// <summary>
    /// GRE ('icmp_icmp_mip_g')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipG {
      get { return icmpMipG_; }
      set {
        icmpMipG_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipV" field.</summary>
    public const int IcmpMipVFieldNumber = 34;
    private bool icmpMipV_;
    /// <summary>
    /// VJ Comp ('icmp_icmp_mip_v')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipV {
      get { return icmpMipV_; }
      set {
        icmpMipV_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipRt" field.</summary>
    public const int IcmpMipRtFieldNumber = 35;
    private bool icmpMipRt_;
    /// <summary>
    /// Reverse tunneling ('icmp_icmp_mip_rt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipRt {
      get { return icmpMipRt_; }
      set {
        icmpMipRt_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipU" field.</summary>
    public const int IcmpMipUFieldNumber = 36;
    private bool icmpMipU_;
    /// <summary>
    /// UDP tunneling ('icmp_icmp_mip_u')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipU {
      get { return icmpMipU_; }
      set {
        icmpMipU_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipX" field.</summary>
    public const int IcmpMipXFieldNumber = 37;
    private bool icmpMipX_;
    /// <summary>
    /// Revocation support ('icmp_icmp_mip_x')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMipX {
      get { return icmpMipX_; }
      set {
        icmpMipX_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipReserved" field.</summary>
    public const int IcmpMipReservedFieldNumber = 38;
    private uint icmpMipReserved_;
    /// <summary>
    /// Reserved ('icmp_icmp_mip_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMipReserved {
      get { return icmpMipReserved_; }
      set {
        icmpMipReserved_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMipCoa" field.</summary>
    public const int IcmpMipCoaFieldNumber = 39;
    private pb::ByteString icmpMipCoa_ = pb::ByteString.Empty;
    /// <summary>
    /// Care-Of-Address ('icmp_icmp_mip_coa')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpMipCoa {
      get { return icmpMipCoa_; }
      set {
        icmpMipCoa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpMipChallenge" field.</summary>
    public const int IcmpMipChallengeFieldNumber = 40;
    private pb::ByteString icmpMipChallenge_ = pb::ByteString.Empty;
    /// <summary>
    /// Challenge ('icmp_icmp_mip_challenge')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpMipChallenge {
      get { return icmpMipChallenge_; }
      set {
        icmpMipChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpMipContent" field.</summary>
    public const int IcmpMipContentFieldNumber = 41;
    private pb::ByteString icmpMipContent_ = pb::ByteString.Empty;
    /// <summary>
    /// Content ('icmp_icmp_mip_content')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpMipContent {
      get { return icmpMipContent_; }
      set {
        icmpMipContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpExt" field.</summary>
    public const int IcmpExtFieldNumber = 42;
    private int icmpExt_;
    /// <summary>
    /// ICMP Extensions ('icmp_icmp_ext')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IcmpExt {
      get { return icmpExt_; }
      set {
        icmpExt_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtVersion" field.</summary>
    public const int IcmpExtVersionFieldNumber = 43;
    private uint icmpExtVersion_;
    /// <summary>
    /// Version ('icmp_ext_icmp_ext_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtVersion {
      get { return icmpExtVersion_; }
      set {
        icmpExtVersion_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtRes" field.</summary>
    public const int IcmpExtResFieldNumber = 44;
    private uint icmpExtRes_;
    /// <summary>
    /// Reserved ('icmp_ext_icmp_ext_res')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtRes {
      get { return icmpExtRes_; }
      set {
        icmpExtRes_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtChecksum" field.</summary>
    public const int IcmpExtChecksumFieldNumber = 45;
    private uint icmpExtChecksum_;
    /// <summary>
    /// Checksum ('icmp_ext_icmp_ext_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtChecksum {
      get { return icmpExtChecksum_; }
      set {
        icmpExtChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtChecksumStatus" field.</summary>
    public const int IcmpExtChecksumStatusFieldNumber = 46;
    private uint icmpExtChecksumStatus_;
    /// <summary>
    /// Checksum Status ('icmp_ext_checksum_icmp_ext_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtChecksumStatus {
      get { return icmpExtChecksumStatus_; }
      set {
        icmpExtChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtLength" field.</summary>
    public const int IcmpExtLengthFieldNumber = 47;
    private uint icmpExtLength_;
    /// <summary>
    /// Length ('icmp_ext_icmp_ext_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtLength {
      get { return icmpExtLength_; }
      set {
        icmpExtLength_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtClass" field.</summary>
    public const int IcmpExtClassFieldNumber = 48;
    private uint icmpExtClass_;
    /// <summary>
    /// Class ('icmp_ext_icmp_ext_class')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtClass {
      get { return icmpExtClass_; }
      set {
        icmpExtClass_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtCtype" field.</summary>
    public const int IcmpExtCtypeFieldNumber = 49;
    private uint icmpExtCtype_;
    /// <summary>
    /// C-Type ('icmp_ext_icmp_ext_ctype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpExtCtype {
      get { return icmpExtCtype_; }
      set {
        icmpExtCtype_ = value;
      }
    }

    /// <summary>Field number for the "IcmpExtData" field.</summary>
    public const int IcmpExtDataFieldNumber = 50;
    private pb::ByteString icmpExtData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('icmp_ext_icmp_ext_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpExtData {
      get { return icmpExtData_; }
      set {
        icmpExtData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpMplsLabel" field.</summary>
    public const int IcmpMplsLabelFieldNumber = 51;
    private uint icmpMplsLabel_;
    /// <summary>
    /// Label ('icmp_icmp_mpls_label')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMplsLabel {
      get { return icmpMplsLabel_; }
      set {
        icmpMplsLabel_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMplsExp" field.</summary>
    public const int IcmpMplsExpFieldNumber = 52;
    private uint icmpMplsExp_;
    /// <summary>
    /// Experimental ('icmp_icmp_mpls_exp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMplsExp {
      get { return icmpMplsExp_; }
      set {
        icmpMplsExp_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMplsS" field.</summary>
    public const int IcmpMplsSFieldNumber = 53;
    private bool icmpMplsS_;
    /// <summary>
    /// Stack bit ('icmp_icmp_mpls_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpMplsS {
      get { return icmpMplsS_; }
      set {
        icmpMplsS_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMplsTtl" field.</summary>
    public const int IcmpMplsTtlFieldNumber = 54;
    private uint icmpMplsTtl_;
    /// <summary>
    /// Time to live ('icmp_icmp_mpls_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpMplsTtl {
      get { return icmpMplsTtl_; }
      set {
        icmpMplsTtl_ = value;
      }
    }

    /// <summary>Field number for the "IcmpMplsData" field.</summary>
    public const int IcmpMplsDataFieldNumber = 55;
    private pb::ByteString icmpMplsData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('icmp_icmp_mpls_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpMplsData {
      get { return icmpMplsData_; }
      set {
        icmpMplsData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpRespIn" field.</summary>
    public const int IcmpRespInFieldNumber = 56;
    private long icmpRespIn_;
    /// <summary>
    /// Response frame ('icmp_icmp_resp_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IcmpRespIn {
      get { return icmpRespIn_; }
      set {
        icmpRespIn_ = value;
      }
    }

    /// <summary>Field number for the "IcmpNoResp" field.</summary>
    public const int IcmpNoRespFieldNumber = 57;
    private int icmpNoResp_;
    /// <summary>
    /// No response seen ('icmp_icmp_no_resp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IcmpNoResp {
      get { return icmpNoResp_; }
      set {
        icmpNoResp_ = value;
      }
    }

    /// <summary>Field number for the "IcmpRespTo" field.</summary>
    public const int IcmpRespToFieldNumber = 58;
    private long icmpRespTo_;
    /// <summary>
    /// Request frame ('icmp_icmp_resp_to')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IcmpRespTo {
      get { return icmpRespTo_; }
      set {
        icmpRespTo_ = value;
      }
    }

    /// <summary>Field number for the "IcmpResptime" field.</summary>
    public const int IcmpResptimeFieldNumber = 59;
    private double icmpResptime_;
    /// <summary>
    /// Response time ('icmp_icmp_resptime')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IcmpResptime {
      get { return icmpResptime_; }
      set {
        icmpResptime_ = value;
      }
    }

    /// <summary>Field number for the "IcmpDataTime" field.</summary>
    public const int IcmpDataTimeFieldNumber = 60;
    private long icmpDataTime_;
    /// <summary>
    /// Timestamp from icmp data ('icmp_icmp_data_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IcmpDataTime {
      get { return icmpDataTime_; }
      set {
        icmpDataTime_ = value;
      }
    }

    /// <summary>Field number for the "IcmpDataTimeRelative" field.</summary>
    public const int IcmpDataTimeRelativeFieldNumber = 61;
    private long icmpDataTimeRelative_;
    /// <summary>
    /// Timestamp from icmp data (relative) ('icmp_icmp_data_time_relative')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IcmpDataTimeRelative {
      get { return icmpDataTimeRelative_; }
      set {
        icmpDataTimeRelative_ = value;
      }
    }

    /// <summary>Field number for the "IcmpLength" field.</summary>
    public const int IcmpLengthFieldNumber = 62;
    private uint icmpLength_;
    /// <summary>
    /// Length ('icmp_icmp_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpLength {
      get { return icmpLength_; }
      set {
        icmpLength_ = value;
      }
    }

    /// <summary>Field number for the "IcmpLengthOriginalDatagram" field.</summary>
    public const int IcmpLengthOriginalDatagramFieldNumber = 63;
    private uint icmpLengthOriginalDatagram_;
    /// <summary>
    /// Length of original datagram ('icmp_length_icmp_length_original_datagram')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpLengthOriginalDatagram {
      get { return icmpLengthOriginalDatagram_; }
      set {
        icmpLengthOriginalDatagram_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoRole" field.</summary>
    public const int IcmpIntInfoRoleFieldNumber = 64;
    private uint icmpIntInfoRole_;
    /// <summary>
    /// Interface Role ('icmp_icmp_int_info_role')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIntInfoRole {
      get { return icmpIntInfoRole_; }
      set {
        icmpIntInfoRole_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoReserved" field.</summary>
    public const int IcmpIntInfoReservedFieldNumber = 65;
    private uint icmpIntInfoReserved_;
    /// <summary>
    /// Reserved ('icmp_icmp_int_info_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIntInfoReserved {
      get { return icmpIntInfoReserved_; }
      set {
        icmpIntInfoReserved_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIfindex" field.</summary>
    public const int IcmpIntInfoIfindexFieldNumber = 66;
    private bool icmpIntInfoIfindex_;
    /// <summary>
    /// ifIndex ('icmp_icmp_int_info_ifindex')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpIntInfoIfindex {
      get { return icmpIntInfoIfindex_; }
      set {
        icmpIntInfoIfindex_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIpaddr" field.</summary>
    public const int IcmpIntInfoIpaddrFieldNumber = 67;
    private bool icmpIntInfoIpaddr_;
    /// <summary>
    /// IP Address ('icmp_icmp_int_info_ipaddr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpIntInfoIpaddr {
      get { return icmpIntInfoIpaddr_; }
      set {
        icmpIntInfoIpaddr_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoNamePresent" field.</summary>
    public const int IcmpIntInfoNamePresentFieldNumber = 68;
    private bool icmpIntInfoNamePresent_;
    /// <summary>
    /// Interface Name ('icmp_icmp_int_info_name_present')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpIntInfoNamePresent {
      get { return icmpIntInfoNamePresent_; }
      set {
        icmpIntInfoNamePresent_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoMtu" field.</summary>
    public const int IcmpIntInfoMtuFieldNumber = 69;
    private bool icmpIntInfoMtu_;
    /// <summary>
    /// MTU ('icmp_icmp_int_info_mtu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IcmpIntInfoMtu {
      get { return icmpIntInfoMtu_; }
      set {
        icmpIntInfoMtu_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIndex" field.</summary>
    public const int IcmpIntInfoIndexFieldNumber = 70;
    private uint icmpIntInfoIndex_;
    /// <summary>
    /// Interface Index ('icmp_icmp_int_info_index')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIntInfoIndex {
      get { return icmpIntInfoIndex_; }
      set {
        icmpIntInfoIndex_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoAfi" field.</summary>
    public const int IcmpIntInfoAfiFieldNumber = 71;
    private uint icmpIntInfoAfi_;
    /// <summary>
    /// Address Family Identifier ('icmp_icmp_int_info_afi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIntInfoAfi {
      get { return icmpIntInfoAfi_; }
      set {
        icmpIntInfoAfi_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIpv4" field.</summary>
    public const int IcmpIntInfoIpv4FieldNumber = 72;
    private pb::ByteString icmpIntInfoIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('icmp_icmp_int_info_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpIntInfoIpv4 {
      get { return icmpIntInfoIpv4_; }
      set {
        icmpIntInfoIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIpv6" field.</summary>
    public const int IcmpIntInfoIpv6FieldNumber = 73;
    private pb::ByteString icmpIntInfoIpv6_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('icmp_icmp_int_info_ipv6')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpIntInfoIpv6 {
      get { return icmpIntInfoIpv6_; }
      set {
        icmpIntInfoIpv6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpIntInfoIpunknown" field.</summary>
    public const int IcmpIntInfoIpunknownFieldNumber = 74;
    private pb::ByteString icmpIntInfoIpunknown_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('icmp_icmp_int_info_ipunknown')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IcmpIntInfoIpunknown {
      get { return icmpIntInfoIpunknown_; }
      set {
        icmpIntInfoIpunknown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IcmpIntInfoNameLength" field.</summary>
    public const int IcmpIntInfoNameLengthFieldNumber = 75;
    private uint icmpIntInfoNameLength_;
    /// <summary>
    /// Name Length ('icmp_icmp_int_info_name_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpIntInfoNameLength {
      get { return icmpIntInfoNameLength_; }
      set {
        icmpIntInfoNameLength_ = value;
      }
    }

    /// <summary>Field number for the "IcmpIntInfoName" field.</summary>
    public const int IcmpIntInfoNameFieldNumber = 76;
    private string icmpIntInfoName_ = "";
    /// <summary>
    /// Name ('icmp_icmp_int_info_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IcmpIntInfoName {
      get { return icmpIntInfoName_; }
      set {
        icmpIntInfoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Icmp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Icmp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IcmpType != other.IcmpType) return false;
      if (IcmpCode != other.IcmpCode) return false;
      if (IcmpChecksum != other.IcmpChecksum) return false;
      if (IcmpChecksumStatus != other.IcmpChecksumStatus) return false;
      if (IcmpUnused != other.IcmpUnused) return false;
      if (IcmpReserved != other.IcmpReserved) return false;
      if (IcmpIdent != other.IcmpIdent) return false;
      if (IcmpSeq != other.IcmpSeq) return false;
      if (IcmpSeqLe != other.IcmpSeqLe) return false;
      if (IcmpMtu != other.IcmpMtu) return false;
      if (IcmpNumAddrs != other.IcmpNumAddrs) return false;
      if (IcmpAddrEntrySize != other.IcmpAddrEntrySize) return false;
      if (IcmpLifetime != other.IcmpLifetime) return false;
      if (IcmpPointer != other.IcmpPointer) return false;
      if (IcmpRouterAddress != other.IcmpRouterAddress) return false;
      if (IcmpPrefLevel != other.IcmpPrefLevel) return false;
      if (IcmpOriginateTimestamp != other.IcmpOriginateTimestamp) return false;
      if (IcmpReceiveTimestamp != other.IcmpReceiveTimestamp) return false;
      if (IcmpTransmitTimestamp != other.IcmpTransmitTimestamp) return false;
      if (IcmpAddressMask != other.IcmpAddressMask) return false;
      if (IcmpRedirGw != other.IcmpRedirGw) return false;
      if (IcmpMipType != other.IcmpMipType) return false;
      if (IcmpMipLength != other.IcmpMipLength) return false;
      if (IcmpMipPrefixlength != other.IcmpMipPrefixlength) return false;
      if (IcmpMipSeq != other.IcmpMipSeq) return false;
      if (IcmpMipLife != other.IcmpMipLife) return false;
      if (IcmpMipFlags != other.IcmpMipFlags) return false;
      if (IcmpMipR != other.IcmpMipR) return false;
      if (IcmpMipB != other.IcmpMipB) return false;
      if (IcmpMipH != other.IcmpMipH) return false;
      if (IcmpMipF != other.IcmpMipF) return false;
      if (IcmpMipM != other.IcmpMipM) return false;
      if (IcmpMipG != other.IcmpMipG) return false;
      if (IcmpMipV != other.IcmpMipV) return false;
      if (IcmpMipRt != other.IcmpMipRt) return false;
      if (IcmpMipU != other.IcmpMipU) return false;
      if (IcmpMipX != other.IcmpMipX) return false;
      if (IcmpMipReserved != other.IcmpMipReserved) return false;
      if (IcmpMipCoa != other.IcmpMipCoa) return false;
      if (IcmpMipChallenge != other.IcmpMipChallenge) return false;
      if (IcmpMipContent != other.IcmpMipContent) return false;
      if (IcmpExt != other.IcmpExt) return false;
      if (IcmpExtVersion != other.IcmpExtVersion) return false;
      if (IcmpExtRes != other.IcmpExtRes) return false;
      if (IcmpExtChecksum != other.IcmpExtChecksum) return false;
      if (IcmpExtChecksumStatus != other.IcmpExtChecksumStatus) return false;
      if (IcmpExtLength != other.IcmpExtLength) return false;
      if (IcmpExtClass != other.IcmpExtClass) return false;
      if (IcmpExtCtype != other.IcmpExtCtype) return false;
      if (IcmpExtData != other.IcmpExtData) return false;
      if (IcmpMplsLabel != other.IcmpMplsLabel) return false;
      if (IcmpMplsExp != other.IcmpMplsExp) return false;
      if (IcmpMplsS != other.IcmpMplsS) return false;
      if (IcmpMplsTtl != other.IcmpMplsTtl) return false;
      if (IcmpMplsData != other.IcmpMplsData) return false;
      if (IcmpRespIn != other.IcmpRespIn) return false;
      if (IcmpNoResp != other.IcmpNoResp) return false;
      if (IcmpRespTo != other.IcmpRespTo) return false;
      if (IcmpResptime != other.IcmpResptime) return false;
      if (IcmpDataTime != other.IcmpDataTime) return false;
      if (IcmpDataTimeRelative != other.IcmpDataTimeRelative) return false;
      if (IcmpLength != other.IcmpLength) return false;
      if (IcmpLengthOriginalDatagram != other.IcmpLengthOriginalDatagram) return false;
      if (IcmpIntInfoRole != other.IcmpIntInfoRole) return false;
      if (IcmpIntInfoReserved != other.IcmpIntInfoReserved) return false;
      if (IcmpIntInfoIfindex != other.IcmpIntInfoIfindex) return false;
      if (IcmpIntInfoIpaddr != other.IcmpIntInfoIpaddr) return false;
      if (IcmpIntInfoNamePresent != other.IcmpIntInfoNamePresent) return false;
      if (IcmpIntInfoMtu != other.IcmpIntInfoMtu) return false;
      if (IcmpIntInfoIndex != other.IcmpIntInfoIndex) return false;
      if (IcmpIntInfoAfi != other.IcmpIntInfoAfi) return false;
      if (IcmpIntInfoIpv4 != other.IcmpIntInfoIpv4) return false;
      if (IcmpIntInfoIpv6 != other.IcmpIntInfoIpv6) return false;
      if (IcmpIntInfoIpunknown != other.IcmpIntInfoIpunknown) return false;
      if (IcmpIntInfoNameLength != other.IcmpIntInfoNameLength) return false;
      if (IcmpIntInfoName != other.IcmpIntInfoName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IcmpType != 0) hash ^= IcmpType.GetHashCode();
      if (IcmpCode != 0) hash ^= IcmpCode.GetHashCode();
      if (IcmpChecksum != 0) hash ^= IcmpChecksum.GetHashCode();
      if (IcmpChecksumStatus != 0) hash ^= IcmpChecksumStatus.GetHashCode();
      if (IcmpUnused.Length != 0) hash ^= IcmpUnused.GetHashCode();
      if (IcmpReserved.Length != 0) hash ^= IcmpReserved.GetHashCode();
      if (IcmpIdent != 0) hash ^= IcmpIdent.GetHashCode();
      if (IcmpSeq != 0) hash ^= IcmpSeq.GetHashCode();
      if (IcmpSeqLe != 0) hash ^= IcmpSeqLe.GetHashCode();
      if (IcmpMtu != 0) hash ^= IcmpMtu.GetHashCode();
      if (IcmpNumAddrs != 0) hash ^= IcmpNumAddrs.GetHashCode();
      if (IcmpAddrEntrySize != 0) hash ^= IcmpAddrEntrySize.GetHashCode();
      if (IcmpLifetime != 0) hash ^= IcmpLifetime.GetHashCode();
      if (IcmpPointer != 0) hash ^= IcmpPointer.GetHashCode();
      if (IcmpRouterAddress.Length != 0) hash ^= IcmpRouterAddress.GetHashCode();
      if (IcmpPrefLevel != 0) hash ^= IcmpPrefLevel.GetHashCode();
      if (IcmpOriginateTimestamp != 0) hash ^= IcmpOriginateTimestamp.GetHashCode();
      if (IcmpReceiveTimestamp != 0) hash ^= IcmpReceiveTimestamp.GetHashCode();
      if (IcmpTransmitTimestamp != 0) hash ^= IcmpTransmitTimestamp.GetHashCode();
      if (IcmpAddressMask.Length != 0) hash ^= IcmpAddressMask.GetHashCode();
      if (IcmpRedirGw.Length != 0) hash ^= IcmpRedirGw.GetHashCode();
      if (IcmpMipType != 0) hash ^= IcmpMipType.GetHashCode();
      if (IcmpMipLength != 0) hash ^= IcmpMipLength.GetHashCode();
      if (IcmpMipPrefixlength != 0) hash ^= IcmpMipPrefixlength.GetHashCode();
      if (IcmpMipSeq != 0) hash ^= IcmpMipSeq.GetHashCode();
      if (IcmpMipLife != 0) hash ^= IcmpMipLife.GetHashCode();
      if (IcmpMipFlags != 0) hash ^= IcmpMipFlags.GetHashCode();
      if (IcmpMipR != false) hash ^= IcmpMipR.GetHashCode();
      if (IcmpMipB != false) hash ^= IcmpMipB.GetHashCode();
      if (IcmpMipH != false) hash ^= IcmpMipH.GetHashCode();
      if (IcmpMipF != false) hash ^= IcmpMipF.GetHashCode();
      if (IcmpMipM != false) hash ^= IcmpMipM.GetHashCode();
      if (IcmpMipG != false) hash ^= IcmpMipG.GetHashCode();
      if (IcmpMipV != false) hash ^= IcmpMipV.GetHashCode();
      if (IcmpMipRt != false) hash ^= IcmpMipRt.GetHashCode();
      if (IcmpMipU != false) hash ^= IcmpMipU.GetHashCode();
      if (IcmpMipX != false) hash ^= IcmpMipX.GetHashCode();
      if (IcmpMipReserved != 0) hash ^= IcmpMipReserved.GetHashCode();
      if (IcmpMipCoa.Length != 0) hash ^= IcmpMipCoa.GetHashCode();
      if (IcmpMipChallenge.Length != 0) hash ^= IcmpMipChallenge.GetHashCode();
      if (IcmpMipContent.Length != 0) hash ^= IcmpMipContent.GetHashCode();
      if (IcmpExt != 0) hash ^= IcmpExt.GetHashCode();
      if (IcmpExtVersion != 0) hash ^= IcmpExtVersion.GetHashCode();
      if (IcmpExtRes != 0) hash ^= IcmpExtRes.GetHashCode();
      if (IcmpExtChecksum != 0) hash ^= IcmpExtChecksum.GetHashCode();
      if (IcmpExtChecksumStatus != 0) hash ^= IcmpExtChecksumStatus.GetHashCode();
      if (IcmpExtLength != 0) hash ^= IcmpExtLength.GetHashCode();
      if (IcmpExtClass != 0) hash ^= IcmpExtClass.GetHashCode();
      if (IcmpExtCtype != 0) hash ^= IcmpExtCtype.GetHashCode();
      if (IcmpExtData.Length != 0) hash ^= IcmpExtData.GetHashCode();
      if (IcmpMplsLabel != 0) hash ^= IcmpMplsLabel.GetHashCode();
      if (IcmpMplsExp != 0) hash ^= IcmpMplsExp.GetHashCode();
      if (IcmpMplsS != false) hash ^= IcmpMplsS.GetHashCode();
      if (IcmpMplsTtl != 0) hash ^= IcmpMplsTtl.GetHashCode();
      if (IcmpMplsData.Length != 0) hash ^= IcmpMplsData.GetHashCode();
      if (IcmpRespIn != 0L) hash ^= IcmpRespIn.GetHashCode();
      if (IcmpNoResp != 0) hash ^= IcmpNoResp.GetHashCode();
      if (IcmpRespTo != 0L) hash ^= IcmpRespTo.GetHashCode();
      if (IcmpResptime != 0D) hash ^= IcmpResptime.GetHashCode();
      if (IcmpDataTime != 0L) hash ^= IcmpDataTime.GetHashCode();
      if (IcmpDataTimeRelative != 0L) hash ^= IcmpDataTimeRelative.GetHashCode();
      if (IcmpLength != 0) hash ^= IcmpLength.GetHashCode();
      if (IcmpLengthOriginalDatagram != 0) hash ^= IcmpLengthOriginalDatagram.GetHashCode();
      if (IcmpIntInfoRole != 0) hash ^= IcmpIntInfoRole.GetHashCode();
      if (IcmpIntInfoReserved != 0) hash ^= IcmpIntInfoReserved.GetHashCode();
      if (IcmpIntInfoIfindex != false) hash ^= IcmpIntInfoIfindex.GetHashCode();
      if (IcmpIntInfoIpaddr != false) hash ^= IcmpIntInfoIpaddr.GetHashCode();
      if (IcmpIntInfoNamePresent != false) hash ^= IcmpIntInfoNamePresent.GetHashCode();
      if (IcmpIntInfoMtu != false) hash ^= IcmpIntInfoMtu.GetHashCode();
      if (IcmpIntInfoIndex != 0) hash ^= IcmpIntInfoIndex.GetHashCode();
      if (IcmpIntInfoAfi != 0) hash ^= IcmpIntInfoAfi.GetHashCode();
      if (IcmpIntInfoIpv4.Length != 0) hash ^= IcmpIntInfoIpv4.GetHashCode();
      if (IcmpIntInfoIpv6.Length != 0) hash ^= IcmpIntInfoIpv6.GetHashCode();
      if (IcmpIntInfoIpunknown.Length != 0) hash ^= IcmpIntInfoIpunknown.GetHashCode();
      if (IcmpIntInfoNameLength != 0) hash ^= IcmpIntInfoNameLength.GetHashCode();
      if (IcmpIntInfoName.Length != 0) hash ^= IcmpIntInfoName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IcmpType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IcmpType);
      }
      if (IcmpCode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IcmpCode);
      }
      if (IcmpChecksum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IcmpChecksum);
      }
      if (IcmpChecksumStatus != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IcmpChecksumStatus);
      }
      if (IcmpUnused.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IcmpUnused);
      }
      if (IcmpReserved.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(IcmpReserved);
      }
      if (IcmpIdent != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IcmpIdent);
      }
      if (IcmpSeq != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(IcmpSeq);
      }
      if (IcmpSeqLe != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(IcmpSeqLe);
      }
      if (IcmpMtu != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(IcmpMtu);
      }
      if (IcmpNumAddrs != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(IcmpNumAddrs);
      }
      if (IcmpAddrEntrySize != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IcmpAddrEntrySize);
      }
      if (IcmpLifetime != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IcmpLifetime);
      }
      if (IcmpPointer != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(IcmpPointer);
      }
      if (IcmpRouterAddress.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(IcmpRouterAddress);
      }
      if (IcmpPrefLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IcmpPrefLevel);
      }
      if (IcmpOriginateTimestamp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(IcmpOriginateTimestamp);
      }
      if (IcmpReceiveTimestamp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(IcmpReceiveTimestamp);
      }
      if (IcmpTransmitTimestamp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(IcmpTransmitTimestamp);
      }
      if (IcmpAddressMask.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(IcmpAddressMask);
      }
      if (IcmpRedirGw.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(IcmpRedirGw);
      }
      if (IcmpMipType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(IcmpMipType);
      }
      if (IcmpMipLength != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(IcmpMipLength);
      }
      if (IcmpMipPrefixlength != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(IcmpMipPrefixlength);
      }
      if (IcmpMipSeq != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(IcmpMipSeq);
      }
      if (IcmpMipLife != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(IcmpMipLife);
      }
      if (IcmpMipFlags != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(IcmpMipFlags);
      }
      if (IcmpMipR != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IcmpMipR);
      }
      if (IcmpMipB != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IcmpMipB);
      }
      if (IcmpMipH != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IcmpMipH);
      }
      if (IcmpMipF != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IcmpMipF);
      }
      if (IcmpMipM != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IcmpMipM);
      }
      if (IcmpMipG != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IcmpMipG);
      }
      if (IcmpMipV != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(IcmpMipV);
      }
      if (IcmpMipRt != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IcmpMipRt);
      }
      if (IcmpMipU != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(IcmpMipU);
      }
      if (IcmpMipX != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IcmpMipX);
      }
      if (IcmpMipReserved != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(IcmpMipReserved);
      }
      if (IcmpMipCoa.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteBytes(IcmpMipCoa);
      }
      if (IcmpMipChallenge.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteBytes(IcmpMipChallenge);
      }
      if (IcmpMipContent.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteBytes(IcmpMipContent);
      }
      if (IcmpExt != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(IcmpExt);
      }
      if (IcmpExtVersion != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(IcmpExtVersion);
      }
      if (IcmpExtRes != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(IcmpExtRes);
      }
      if (IcmpExtChecksum != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(IcmpExtChecksum);
      }
      if (IcmpExtChecksumStatus != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(IcmpExtChecksumStatus);
      }
      if (IcmpExtLength != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(IcmpExtLength);
      }
      if (IcmpExtClass != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(IcmpExtClass);
      }
      if (IcmpExtCtype != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(IcmpExtCtype);
      }
      if (IcmpExtData.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteBytes(IcmpExtData);
      }
      if (IcmpMplsLabel != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(IcmpMplsLabel);
      }
      if (IcmpMplsExp != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(IcmpMplsExp);
      }
      if (IcmpMplsS != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IcmpMplsS);
      }
      if (IcmpMplsTtl != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(IcmpMplsTtl);
      }
      if (IcmpMplsData.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteBytes(IcmpMplsData);
      }
      if (IcmpRespIn != 0L) {
        output.WriteRawTag(192, 3);
        output.WriteInt64(IcmpRespIn);
      }
      if (IcmpNoResp != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(IcmpNoResp);
      }
      if (IcmpRespTo != 0L) {
        output.WriteRawTag(208, 3);
        output.WriteInt64(IcmpRespTo);
      }
      if (IcmpResptime != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(IcmpResptime);
      }
      if (IcmpDataTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(IcmpDataTime);
      }
      if (IcmpDataTimeRelative != 0L) {
        output.WriteRawTag(232, 3);
        output.WriteInt64(IcmpDataTimeRelative);
      }
      if (IcmpLength != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(IcmpLength);
      }
      if (IcmpLengthOriginalDatagram != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(IcmpLengthOriginalDatagram);
      }
      if (IcmpIntInfoRole != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(IcmpIntInfoRole);
      }
      if (IcmpIntInfoReserved != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(IcmpIntInfoReserved);
      }
      if (IcmpIntInfoIfindex != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(IcmpIntInfoIfindex);
      }
      if (IcmpIntInfoIpaddr != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IcmpIntInfoIpaddr);
      }
      if (IcmpIntInfoNamePresent != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(IcmpIntInfoNamePresent);
      }
      if (IcmpIntInfoMtu != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(IcmpIntInfoMtu);
      }
      if (IcmpIntInfoIndex != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(IcmpIntInfoIndex);
      }
      if (IcmpIntInfoAfi != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(IcmpIntInfoAfi);
      }
      if (IcmpIntInfoIpv4.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteBytes(IcmpIntInfoIpv4);
      }
      if (IcmpIntInfoIpv6.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteBytes(IcmpIntInfoIpv6);
      }
      if (IcmpIntInfoIpunknown.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteBytes(IcmpIntInfoIpunknown);
      }
      if (IcmpIntInfoNameLength != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(IcmpIntInfoNameLength);
      }
      if (IcmpIntInfoName.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(IcmpIntInfoName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IcmpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpType);
      }
      if (IcmpCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpCode);
      }
      if (IcmpChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpChecksum);
      }
      if (IcmpChecksumStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpChecksumStatus);
      }
      if (IcmpUnused.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IcmpUnused);
      }
      if (IcmpReserved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IcmpReserved);
      }
      if (IcmpIdent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIdent);
      }
      if (IcmpSeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpSeq);
      }
      if (IcmpSeqLe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpSeqLe);
      }
      if (IcmpMtu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMtu);
      }
      if (IcmpNumAddrs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpNumAddrs);
      }
      if (IcmpAddrEntrySize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpAddrEntrySize);
      }
      if (IcmpLifetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpLifetime);
      }
      if (IcmpPointer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IcmpPointer);
      }
      if (IcmpRouterAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IcmpRouterAddress);
      }
      if (IcmpPrefLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IcmpPrefLevel);
      }
      if (IcmpOriginateTimestamp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpOriginateTimestamp);
      }
      if (IcmpReceiveTimestamp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpReceiveTimestamp);
      }
      if (IcmpTransmitTimestamp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpTransmitTimestamp);
      }
      if (IcmpAddressMask.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpAddressMask);
      }
      if (IcmpRedirGw.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpRedirGw);
      }
      if (IcmpMipType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipType);
      }
      if (IcmpMipLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipLength);
      }
      if (IcmpMipPrefixlength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipPrefixlength);
      }
      if (IcmpMipSeq != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipSeq);
      }
      if (IcmpMipLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipLife);
      }
      if (IcmpMipFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipFlags);
      }
      if (IcmpMipR != false) {
        size += 2 + 1;
      }
      if (IcmpMipB != false) {
        size += 2 + 1;
      }
      if (IcmpMipH != false) {
        size += 2 + 1;
      }
      if (IcmpMipF != false) {
        size += 2 + 1;
      }
      if (IcmpMipM != false) {
        size += 2 + 1;
      }
      if (IcmpMipG != false) {
        size += 2 + 1;
      }
      if (IcmpMipV != false) {
        size += 2 + 1;
      }
      if (IcmpMipRt != false) {
        size += 2 + 1;
      }
      if (IcmpMipU != false) {
        size += 2 + 1;
      }
      if (IcmpMipX != false) {
        size += 2 + 1;
      }
      if (IcmpMipReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMipReserved);
      }
      if (IcmpMipCoa.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpMipCoa);
      }
      if (IcmpMipChallenge.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpMipChallenge);
      }
      if (IcmpMipContent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpMipContent);
      }
      if (IcmpExt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IcmpExt);
      }
      if (IcmpExtVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtVersion);
      }
      if (IcmpExtRes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtRes);
      }
      if (IcmpExtChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtChecksum);
      }
      if (IcmpExtChecksumStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtChecksumStatus);
      }
      if (IcmpExtLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtLength);
      }
      if (IcmpExtClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtClass);
      }
      if (IcmpExtCtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpExtCtype);
      }
      if (IcmpExtData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpExtData);
      }
      if (IcmpMplsLabel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMplsLabel);
      }
      if (IcmpMplsExp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMplsExp);
      }
      if (IcmpMplsS != false) {
        size += 2 + 1;
      }
      if (IcmpMplsTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpMplsTtl);
      }
      if (IcmpMplsData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpMplsData);
      }
      if (IcmpRespIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IcmpRespIn);
      }
      if (IcmpNoResp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IcmpNoResp);
      }
      if (IcmpRespTo != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IcmpRespTo);
      }
      if (IcmpResptime != 0D) {
        size += 2 + 8;
      }
      if (IcmpDataTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IcmpDataTime);
      }
      if (IcmpDataTimeRelative != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IcmpDataTimeRelative);
      }
      if (IcmpLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpLength);
      }
      if (IcmpLengthOriginalDatagram != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpLengthOriginalDatagram);
      }
      if (IcmpIntInfoRole != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIntInfoRole);
      }
      if (IcmpIntInfoReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIntInfoReserved);
      }
      if (IcmpIntInfoIfindex != false) {
        size += 2 + 1;
      }
      if (IcmpIntInfoIpaddr != false) {
        size += 2 + 1;
      }
      if (IcmpIntInfoNamePresent != false) {
        size += 2 + 1;
      }
      if (IcmpIntInfoMtu != false) {
        size += 2 + 1;
      }
      if (IcmpIntInfoIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIntInfoIndex);
      }
      if (IcmpIntInfoAfi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIntInfoAfi);
      }
      if (IcmpIntInfoIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpIntInfoIpv4);
      }
      if (IcmpIntInfoIpv6.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpIntInfoIpv6);
      }
      if (IcmpIntInfoIpunknown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IcmpIntInfoIpunknown);
      }
      if (IcmpIntInfoNameLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpIntInfoNameLength);
      }
      if (IcmpIntInfoName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IcmpIntInfoName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Icmp other) {
      if (other == null) {
        return;
      }
      if (other.IcmpType != 0) {
        IcmpType = other.IcmpType;
      }
      if (other.IcmpCode != 0) {
        IcmpCode = other.IcmpCode;
      }
      if (other.IcmpChecksum != 0) {
        IcmpChecksum = other.IcmpChecksum;
      }
      if (other.IcmpChecksumStatus != 0) {
        IcmpChecksumStatus = other.IcmpChecksumStatus;
      }
      if (other.IcmpUnused.Length != 0) {
        IcmpUnused = other.IcmpUnused;
      }
      if (other.IcmpReserved.Length != 0) {
        IcmpReserved = other.IcmpReserved;
      }
      if (other.IcmpIdent != 0) {
        IcmpIdent = other.IcmpIdent;
      }
      if (other.IcmpSeq != 0) {
        IcmpSeq = other.IcmpSeq;
      }
      if (other.IcmpSeqLe != 0) {
        IcmpSeqLe = other.IcmpSeqLe;
      }
      if (other.IcmpMtu != 0) {
        IcmpMtu = other.IcmpMtu;
      }
      if (other.IcmpNumAddrs != 0) {
        IcmpNumAddrs = other.IcmpNumAddrs;
      }
      if (other.IcmpAddrEntrySize != 0) {
        IcmpAddrEntrySize = other.IcmpAddrEntrySize;
      }
      if (other.IcmpLifetime != 0) {
        IcmpLifetime = other.IcmpLifetime;
      }
      if (other.IcmpPointer != 0) {
        IcmpPointer = other.IcmpPointer;
      }
      if (other.IcmpRouterAddress.Length != 0) {
        IcmpRouterAddress = other.IcmpRouterAddress;
      }
      if (other.IcmpPrefLevel != 0) {
        IcmpPrefLevel = other.IcmpPrefLevel;
      }
      if (other.IcmpOriginateTimestamp != 0) {
        IcmpOriginateTimestamp = other.IcmpOriginateTimestamp;
      }
      if (other.IcmpReceiveTimestamp != 0) {
        IcmpReceiveTimestamp = other.IcmpReceiveTimestamp;
      }
      if (other.IcmpTransmitTimestamp != 0) {
        IcmpTransmitTimestamp = other.IcmpTransmitTimestamp;
      }
      if (other.IcmpAddressMask.Length != 0) {
        IcmpAddressMask = other.IcmpAddressMask;
      }
      if (other.IcmpRedirGw.Length != 0) {
        IcmpRedirGw = other.IcmpRedirGw;
      }
      if (other.IcmpMipType != 0) {
        IcmpMipType = other.IcmpMipType;
      }
      if (other.IcmpMipLength != 0) {
        IcmpMipLength = other.IcmpMipLength;
      }
      if (other.IcmpMipPrefixlength != 0) {
        IcmpMipPrefixlength = other.IcmpMipPrefixlength;
      }
      if (other.IcmpMipSeq != 0) {
        IcmpMipSeq = other.IcmpMipSeq;
      }
      if (other.IcmpMipLife != 0) {
        IcmpMipLife = other.IcmpMipLife;
      }
      if (other.IcmpMipFlags != 0) {
        IcmpMipFlags = other.IcmpMipFlags;
      }
      if (other.IcmpMipR != false) {
        IcmpMipR = other.IcmpMipR;
      }
      if (other.IcmpMipB != false) {
        IcmpMipB = other.IcmpMipB;
      }
      if (other.IcmpMipH != false) {
        IcmpMipH = other.IcmpMipH;
      }
      if (other.IcmpMipF != false) {
        IcmpMipF = other.IcmpMipF;
      }
      if (other.IcmpMipM != false) {
        IcmpMipM = other.IcmpMipM;
      }
      if (other.IcmpMipG != false) {
        IcmpMipG = other.IcmpMipG;
      }
      if (other.IcmpMipV != false) {
        IcmpMipV = other.IcmpMipV;
      }
      if (other.IcmpMipRt != false) {
        IcmpMipRt = other.IcmpMipRt;
      }
      if (other.IcmpMipU != false) {
        IcmpMipU = other.IcmpMipU;
      }
      if (other.IcmpMipX != false) {
        IcmpMipX = other.IcmpMipX;
      }
      if (other.IcmpMipReserved != 0) {
        IcmpMipReserved = other.IcmpMipReserved;
      }
      if (other.IcmpMipCoa.Length != 0) {
        IcmpMipCoa = other.IcmpMipCoa;
      }
      if (other.IcmpMipChallenge.Length != 0) {
        IcmpMipChallenge = other.IcmpMipChallenge;
      }
      if (other.IcmpMipContent.Length != 0) {
        IcmpMipContent = other.IcmpMipContent;
      }
      if (other.IcmpExt != 0) {
        IcmpExt = other.IcmpExt;
      }
      if (other.IcmpExtVersion != 0) {
        IcmpExtVersion = other.IcmpExtVersion;
      }
      if (other.IcmpExtRes != 0) {
        IcmpExtRes = other.IcmpExtRes;
      }
      if (other.IcmpExtChecksum != 0) {
        IcmpExtChecksum = other.IcmpExtChecksum;
      }
      if (other.IcmpExtChecksumStatus != 0) {
        IcmpExtChecksumStatus = other.IcmpExtChecksumStatus;
      }
      if (other.IcmpExtLength != 0) {
        IcmpExtLength = other.IcmpExtLength;
      }
      if (other.IcmpExtClass != 0) {
        IcmpExtClass = other.IcmpExtClass;
      }
      if (other.IcmpExtCtype != 0) {
        IcmpExtCtype = other.IcmpExtCtype;
      }
      if (other.IcmpExtData.Length != 0) {
        IcmpExtData = other.IcmpExtData;
      }
      if (other.IcmpMplsLabel != 0) {
        IcmpMplsLabel = other.IcmpMplsLabel;
      }
      if (other.IcmpMplsExp != 0) {
        IcmpMplsExp = other.IcmpMplsExp;
      }
      if (other.IcmpMplsS != false) {
        IcmpMplsS = other.IcmpMplsS;
      }
      if (other.IcmpMplsTtl != 0) {
        IcmpMplsTtl = other.IcmpMplsTtl;
      }
      if (other.IcmpMplsData.Length != 0) {
        IcmpMplsData = other.IcmpMplsData;
      }
      if (other.IcmpRespIn != 0L) {
        IcmpRespIn = other.IcmpRespIn;
      }
      if (other.IcmpNoResp != 0) {
        IcmpNoResp = other.IcmpNoResp;
      }
      if (other.IcmpRespTo != 0L) {
        IcmpRespTo = other.IcmpRespTo;
      }
      if (other.IcmpResptime != 0D) {
        IcmpResptime = other.IcmpResptime;
      }
      if (other.IcmpDataTime != 0L) {
        IcmpDataTime = other.IcmpDataTime;
      }
      if (other.IcmpDataTimeRelative != 0L) {
        IcmpDataTimeRelative = other.IcmpDataTimeRelative;
      }
      if (other.IcmpLength != 0) {
        IcmpLength = other.IcmpLength;
      }
      if (other.IcmpLengthOriginalDatagram != 0) {
        IcmpLengthOriginalDatagram = other.IcmpLengthOriginalDatagram;
      }
      if (other.IcmpIntInfoRole != 0) {
        IcmpIntInfoRole = other.IcmpIntInfoRole;
      }
      if (other.IcmpIntInfoReserved != 0) {
        IcmpIntInfoReserved = other.IcmpIntInfoReserved;
      }
      if (other.IcmpIntInfoIfindex != false) {
        IcmpIntInfoIfindex = other.IcmpIntInfoIfindex;
      }
      if (other.IcmpIntInfoIpaddr != false) {
        IcmpIntInfoIpaddr = other.IcmpIntInfoIpaddr;
      }
      if (other.IcmpIntInfoNamePresent != false) {
        IcmpIntInfoNamePresent = other.IcmpIntInfoNamePresent;
      }
      if (other.IcmpIntInfoMtu != false) {
        IcmpIntInfoMtu = other.IcmpIntInfoMtu;
      }
      if (other.IcmpIntInfoIndex != 0) {
        IcmpIntInfoIndex = other.IcmpIntInfoIndex;
      }
      if (other.IcmpIntInfoAfi != 0) {
        IcmpIntInfoAfi = other.IcmpIntInfoAfi;
      }
      if (other.IcmpIntInfoIpv4.Length != 0) {
        IcmpIntInfoIpv4 = other.IcmpIntInfoIpv4;
      }
      if (other.IcmpIntInfoIpv6.Length != 0) {
        IcmpIntInfoIpv6 = other.IcmpIntInfoIpv6;
      }
      if (other.IcmpIntInfoIpunknown.Length != 0) {
        IcmpIntInfoIpunknown = other.IcmpIntInfoIpunknown;
      }
      if (other.IcmpIntInfoNameLength != 0) {
        IcmpIntInfoNameLength = other.IcmpIntInfoNameLength;
      }
      if (other.IcmpIntInfoName.Length != 0) {
        IcmpIntInfoName = other.IcmpIntInfoName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IcmpType = input.ReadUInt32();
            break;
          }
          case 16: {
            IcmpCode = input.ReadUInt32();
            break;
          }
          case 24: {
            IcmpChecksum = input.ReadUInt32();
            break;
          }
          case 32: {
            IcmpChecksumStatus = input.ReadUInt32();
            break;
          }
          case 42: {
            IcmpUnused = input.ReadBytes();
            break;
          }
          case 50: {
            IcmpReserved = input.ReadBytes();
            break;
          }
          case 56: {
            IcmpIdent = input.ReadUInt32();
            break;
          }
          case 64: {
            IcmpSeq = input.ReadUInt32();
            break;
          }
          case 72: {
            IcmpSeqLe = input.ReadUInt32();
            break;
          }
          case 80: {
            IcmpMtu = input.ReadUInt32();
            break;
          }
          case 88: {
            IcmpNumAddrs = input.ReadUInt32();
            break;
          }
          case 96: {
            IcmpAddrEntrySize = input.ReadUInt32();
            break;
          }
          case 104: {
            IcmpLifetime = input.ReadUInt32();
            break;
          }
          case 112: {
            IcmpPointer = input.ReadUInt32();
            break;
          }
          case 122: {
            IcmpRouterAddress = input.ReadBytes();
            break;
          }
          case 128: {
            IcmpPrefLevel = input.ReadInt32();
            break;
          }
          case 136: {
            IcmpOriginateTimestamp = input.ReadUInt32();
            break;
          }
          case 144: {
            IcmpReceiveTimestamp = input.ReadUInt32();
            break;
          }
          case 152: {
            IcmpTransmitTimestamp = input.ReadUInt32();
            break;
          }
          case 162: {
            IcmpAddressMask = input.ReadBytes();
            break;
          }
          case 170: {
            IcmpRedirGw = input.ReadBytes();
            break;
          }
          case 176: {
            IcmpMipType = input.ReadUInt32();
            break;
          }
          case 184: {
            IcmpMipLength = input.ReadUInt32();
            break;
          }
          case 192: {
            IcmpMipPrefixlength = input.ReadUInt32();
            break;
          }
          case 200: {
            IcmpMipSeq = input.ReadUInt32();
            break;
          }
          case 208: {
            IcmpMipLife = input.ReadUInt32();
            break;
          }
          case 216: {
            IcmpMipFlags = input.ReadUInt32();
            break;
          }
          case 224: {
            IcmpMipR = input.ReadBool();
            break;
          }
          case 232: {
            IcmpMipB = input.ReadBool();
            break;
          }
          case 240: {
            IcmpMipH = input.ReadBool();
            break;
          }
          case 248: {
            IcmpMipF = input.ReadBool();
            break;
          }
          case 256: {
            IcmpMipM = input.ReadBool();
            break;
          }
          case 264: {
            IcmpMipG = input.ReadBool();
            break;
          }
          case 272: {
            IcmpMipV = input.ReadBool();
            break;
          }
          case 280: {
            IcmpMipRt = input.ReadBool();
            break;
          }
          case 288: {
            IcmpMipU = input.ReadBool();
            break;
          }
          case 296: {
            IcmpMipX = input.ReadBool();
            break;
          }
          case 304: {
            IcmpMipReserved = input.ReadUInt32();
            break;
          }
          case 314: {
            IcmpMipCoa = input.ReadBytes();
            break;
          }
          case 322: {
            IcmpMipChallenge = input.ReadBytes();
            break;
          }
          case 330: {
            IcmpMipContent = input.ReadBytes();
            break;
          }
          case 336: {
            IcmpExt = input.ReadInt32();
            break;
          }
          case 344: {
            IcmpExtVersion = input.ReadUInt32();
            break;
          }
          case 352: {
            IcmpExtRes = input.ReadUInt32();
            break;
          }
          case 360: {
            IcmpExtChecksum = input.ReadUInt32();
            break;
          }
          case 368: {
            IcmpExtChecksumStatus = input.ReadUInt32();
            break;
          }
          case 376: {
            IcmpExtLength = input.ReadUInt32();
            break;
          }
          case 384: {
            IcmpExtClass = input.ReadUInt32();
            break;
          }
          case 392: {
            IcmpExtCtype = input.ReadUInt32();
            break;
          }
          case 402: {
            IcmpExtData = input.ReadBytes();
            break;
          }
          case 408: {
            IcmpMplsLabel = input.ReadUInt32();
            break;
          }
          case 416: {
            IcmpMplsExp = input.ReadUInt32();
            break;
          }
          case 424: {
            IcmpMplsS = input.ReadBool();
            break;
          }
          case 432: {
            IcmpMplsTtl = input.ReadUInt32();
            break;
          }
          case 442: {
            IcmpMplsData = input.ReadBytes();
            break;
          }
          case 448: {
            IcmpRespIn = input.ReadInt64();
            break;
          }
          case 456: {
            IcmpNoResp = input.ReadInt32();
            break;
          }
          case 464: {
            IcmpRespTo = input.ReadInt64();
            break;
          }
          case 473: {
            IcmpResptime = input.ReadDouble();
            break;
          }
          case 480: {
            IcmpDataTime = input.ReadInt64();
            break;
          }
          case 488: {
            IcmpDataTimeRelative = input.ReadInt64();
            break;
          }
          case 496: {
            IcmpLength = input.ReadUInt32();
            break;
          }
          case 504: {
            IcmpLengthOriginalDatagram = input.ReadUInt32();
            break;
          }
          case 512: {
            IcmpIntInfoRole = input.ReadUInt32();
            break;
          }
          case 520: {
            IcmpIntInfoReserved = input.ReadUInt32();
            break;
          }
          case 528: {
            IcmpIntInfoIfindex = input.ReadBool();
            break;
          }
          case 536: {
            IcmpIntInfoIpaddr = input.ReadBool();
            break;
          }
          case 544: {
            IcmpIntInfoNamePresent = input.ReadBool();
            break;
          }
          case 552: {
            IcmpIntInfoMtu = input.ReadBool();
            break;
          }
          case 560: {
            IcmpIntInfoIndex = input.ReadUInt32();
            break;
          }
          case 568: {
            IcmpIntInfoAfi = input.ReadUInt32();
            break;
          }
          case 578: {
            IcmpIntInfoIpv4 = input.ReadBytes();
            break;
          }
          case 586: {
            IcmpIntInfoIpv6 = input.ReadBytes();
            break;
          }
          case 594: {
            IcmpIntInfoIpunknown = input.ReadBytes();
            break;
          }
          case 600: {
            IcmpIntInfoNameLength = input.ReadUInt32();
            break;
          }
          case 610: {
            IcmpIntInfoName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
