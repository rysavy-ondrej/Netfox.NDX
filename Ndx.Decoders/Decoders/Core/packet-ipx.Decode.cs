// This is file was generated by netdx on (2017-11-24 12:35:42 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Core
{
  public sealed partial class Ipx
  {
    public static Ipx DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Ipx DecodeJson(JToken token)
    {
      var obj = new Ipx();
      {
        var val = token["ipx_ipx_checksum"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxChecksum = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_ipx_src"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxSrc = propValue; }
      }
      {
        var val = token["ipx_ipx_dst"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxDst = propValue; }
      }
      {
        var val = token["ipx_ipx_addr"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxAddr = propValue; }
      }
      {
        var val = token["ipx_ipx_len"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxLen = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipx_hops"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxHops = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipx_packet_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxPacketType = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_dst_ipx_dst_net"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxDstNet = default(ByteString); }
      }
      {
        var val = token["ipx_dst_ipx_dst_node"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxDstNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); }
      }
      {
        var val = token["ipx_dst_ipx_dst_socket"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxDstSocket = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_src_ipx_src_net"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxSrcNet = default(ByteString); }
      }
      {
        var val = token["ipx_src_ipx_src_node"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxSrcNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); }
      }
      {
        var val = token["ipx_src_ipx_src_socket"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxSrcSocket = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_ipx_net"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxNet = default(ByteString); }
      }
      {
        var val = token["ipx_ipx_node"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); }
      }
      {
        var val = token["ipx_ipx_socket"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxSocket = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_ipxrip_request"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripRequest = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ipx_ipxrip_response"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripResponse = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ipx_ipxrip_packet_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripPacketType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxrip_route_vector"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripRouteVector = default(ByteString); }
      }
      {
        var val = token["ipx_ipxrip_hops"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripHops = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxrip_ticks"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxripTicks = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxsap_request"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapRequest = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ipx_ipxsap_response"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapResponse = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ipx_ipxsap_packet_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapPacketType = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxsap_server_name"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapServerName = default(String); }
      }
      {
        var val = token["ipx_ipxsap_server_type"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapServerType = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_ipxsap_network"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapNetwork = default(ByteString); }
      }
      {
        var val = token["ipx_ipxsap_node"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); }
      }
      {
        var val = token["ipx_ipxsap_socket"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapSocket = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ipx_ipxsap_intermediate_networks"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxsapIntermediateNetworks = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxmsg_conn"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxmsgConn = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ipx_ipxmsg_sigchar"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpxmsgSigchar = Convert.ToUInt32(propValue, 16); }
      }
      return obj;
    }
    public static Ipx DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Ipx();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Ipx obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "ipx_ipx_checksum": obj.IpxChecksum = Convert.ToUInt32(propValue, 16); break;
      case "ipx_ipx_src": obj.IpxSrc = propValue; break;
      case "ipx_ipx_dst": obj.IpxDst = propValue; break;
      case "ipx_ipx_addr": obj.IpxAddr = propValue; break;
      case "ipx_ipx_len": obj.IpxLen = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipx_hops": obj.IpxHops = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipx_packet_type": obj.IpxPacketType = Convert.ToUInt32(propValue, 16); break;
      case "ipx_dst_ipx_dst_net": obj.IpxDstNet = default(ByteString); break;
      case "ipx_dst_ipx_dst_node": obj.IpxDstNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); break;
      case "ipx_dst_ipx_dst_socket": obj.IpxDstSocket = Convert.ToUInt32(propValue, 16); break;
      case "ipx_src_ipx_src_net": obj.IpxSrcNet = default(ByteString); break;
      case "ipx_src_ipx_src_node": obj.IpxSrcNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); break;
      case "ipx_src_ipx_src_socket": obj.IpxSrcSocket = Convert.ToUInt32(propValue, 16); break;
      case "ipx_ipx_net": obj.IpxNet = default(ByteString); break;
      case "ipx_ipx_node": obj.IpxNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); break;
      case "ipx_ipx_socket": obj.IpxSocket = Convert.ToUInt32(propValue, 16); break;
      case "ipx_ipxrip_request": obj.IpxripRequest = Convert.ToInt32(propValue, 10) != 0; break;
      case "ipx_ipxrip_response": obj.IpxripResponse = Convert.ToInt32(propValue, 10) != 0; break;
      case "ipx_ipxrip_packet_type": obj.IpxripPacketType = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxrip_route_vector": obj.IpxripRouteVector = default(ByteString); break;
      case "ipx_ipxrip_hops": obj.IpxripHops = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxrip_ticks": obj.IpxripTicks = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxsap_request": obj.IpxsapRequest = Convert.ToInt32(propValue, 10) != 0; break;
      case "ipx_ipxsap_response": obj.IpxsapResponse = Convert.ToInt32(propValue, 10) != 0; break;
      case "ipx_ipxsap_packet_type": obj.IpxsapPacketType = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxsap_server_name": obj.IpxsapServerName = default(String); break;
      case "ipx_ipxsap_server_type": obj.IpxsapServerType = Convert.ToUInt32(propValue, 16); break;
      case "ipx_ipxsap_network": obj.IpxsapNetwork = default(ByteString); break;
      case "ipx_ipxsap_node": obj.IpxsapNode = Google.Protobuf.ByteString.CopyFrom(System.Net.NetworkInformation.PhysicalAddress.Parse(propValue.ToUpperInvariant().Replace(':','-')).GetAddressBytes()); break;
      case "ipx_ipxsap_socket": obj.IpxsapSocket = Convert.ToUInt32(propValue, 16); break;
      case "ipx_ipxsap_intermediate_networks": obj.IpxsapIntermediateNetworks = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxmsg_conn": obj.IpxmsgConn = Convert.ToUInt32(propValue, 10); break;
      case "ipx_ipxmsg_sigchar": obj.IpxmsgSigchar = Convert.ToUInt32(propValue, 16); break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
