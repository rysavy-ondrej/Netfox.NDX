// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-udp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-udp.proto</summary>
  public static partial class PacketUdpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-udp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketUdpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtdWRwLnByb3RvEhFOZHguRGVjb2RlcnMuQmFzZSKDAQoDVWRw",
            "EhIKClVkcFNyY3BvcnQYASABKA0SEgoKVWRwRHN0cG9ydBgCIAEoDRIRCglV",
            "ZHBTdHJlYW0YAyABKA0SEQoJVWRwTGVuZ3RoGAQgASgNEhMKC1VkcENoZWNr",
            "c3VtGAUgASgNEhkKEVVkcENoZWNrc3VtU3RhdHVzGAYgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Udp), global::Ndx.Decoders.Base.Udp.Parser, new[]{ "UdpSrcport", "UdpDstport", "UdpStream", "UdpLength", "UdpChecksum", "UdpChecksumStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Udp : pb::IMessage<Udp> {
    private static readonly pb::MessageParser<Udp> _parser = new pb::MessageParser<Udp>(() => new Udp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Udp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketUdpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Udp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Udp(Udp other) : this() {
      udpSrcport_ = other.udpSrcport_;
      udpDstport_ = other.udpDstport_;
      udpStream_ = other.udpStream_;
      udpLength_ = other.udpLength_;
      udpChecksum_ = other.udpChecksum_;
      udpChecksumStatus_ = other.udpChecksumStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Udp Clone() {
      return new Udp(this);
    }

    /// <summary>Field number for the "UdpSrcport" field.</summary>
    public const int UdpSrcportFieldNumber = 1;
    private uint udpSrcport_;
    /// <summary>
    /// Source Port ('udp_udp_srcport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpSrcport {
      get { return udpSrcport_; }
      set {
        udpSrcport_ = value;
      }
    }

    /// <summary>Field number for the "UdpDstport" field.</summary>
    public const int UdpDstportFieldNumber = 2;
    private uint udpDstport_;
    /// <summary>
    /// Destination Port ('udp_udp_dstport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpDstport {
      get { return udpDstport_; }
      set {
        udpDstport_ = value;
      }
    }

    /// <summary>Field number for the "UdpStream" field.</summary>
    public const int UdpStreamFieldNumber = 3;
    private uint udpStream_;
    /// <summary>
    /// Stream index ('udp_udp_stream')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpStream {
      get { return udpStream_; }
      set {
        udpStream_ = value;
      }
    }

    /// <summary>Field number for the "UdpLength" field.</summary>
    public const int UdpLengthFieldNumber = 4;
    private uint udpLength_;
    /// <summary>
    /// Length ('udp_udp_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpLength {
      get { return udpLength_; }
      set {
        udpLength_ = value;
      }
    }

    /// <summary>Field number for the "UdpChecksum" field.</summary>
    public const int UdpChecksumFieldNumber = 5;
    private uint udpChecksum_;
    /// <summary>
    /// Checksum ('udp_udp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpChecksum {
      get { return udpChecksum_; }
      set {
        udpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "UdpChecksumStatus" field.</summary>
    public const int UdpChecksumStatusFieldNumber = 6;
    private uint udpChecksumStatus_;
    /// <summary>
    /// Checksum Status ('udp_checksum_udp_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UdpChecksumStatus {
      get { return udpChecksumStatus_; }
      set {
        udpChecksumStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Udp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Udp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UdpSrcport != other.UdpSrcport) return false;
      if (UdpDstport != other.UdpDstport) return false;
      if (UdpStream != other.UdpStream) return false;
      if (UdpLength != other.UdpLength) return false;
      if (UdpChecksum != other.UdpChecksum) return false;
      if (UdpChecksumStatus != other.UdpChecksumStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UdpSrcport != 0) hash ^= UdpSrcport.GetHashCode();
      if (UdpDstport != 0) hash ^= UdpDstport.GetHashCode();
      if (UdpStream != 0) hash ^= UdpStream.GetHashCode();
      if (UdpLength != 0) hash ^= UdpLength.GetHashCode();
      if (UdpChecksum != 0) hash ^= UdpChecksum.GetHashCode();
      if (UdpChecksumStatus != 0) hash ^= UdpChecksumStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UdpSrcport != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UdpSrcport);
      }
      if (UdpDstport != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UdpDstport);
      }
      if (UdpStream != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UdpStream);
      }
      if (UdpLength != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UdpLength);
      }
      if (UdpChecksum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UdpChecksum);
      }
      if (UdpChecksumStatus != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UdpChecksumStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UdpSrcport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpSrcport);
      }
      if (UdpDstport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpDstport);
      }
      if (UdpStream != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpStream);
      }
      if (UdpLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpLength);
      }
      if (UdpChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpChecksum);
      }
      if (UdpChecksumStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UdpChecksumStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Udp other) {
      if (other == null) {
        return;
      }
      if (other.UdpSrcport != 0) {
        UdpSrcport = other.UdpSrcport;
      }
      if (other.UdpDstport != 0) {
        UdpDstport = other.UdpDstport;
      }
      if (other.UdpStream != 0) {
        UdpStream = other.UdpStream;
      }
      if (other.UdpLength != 0) {
        UdpLength = other.UdpLength;
      }
      if (other.UdpChecksum != 0) {
        UdpChecksum = other.UdpChecksum;
      }
      if (other.UdpChecksumStatus != 0) {
        UdpChecksumStatus = other.UdpChecksumStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UdpSrcport = input.ReadUInt32();
            break;
          }
          case 16: {
            UdpDstport = input.ReadUInt32();
            break;
          }
          case 24: {
            UdpStream = input.ReadUInt32();
            break;
          }
          case 32: {
            UdpLength = input.ReadUInt32();
            break;
          }
          case 40: {
            UdpChecksum = input.ReadUInt32();
            break;
          }
          case 48: {
            UdpChecksumStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
