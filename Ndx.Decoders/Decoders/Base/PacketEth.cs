// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-eth.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-eth.proto</summary>
  public static partial class PacketEthReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-eth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketEthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtZXRoLnByb3RvEhFOZHguRGVjb2RlcnMuQmFzZSJ2CgNFdGgS",
            "DgoGRXRoRHN0GAEgASgMEhYKDkV0aERzdFJlc29sdmVkGAIgASgJEg4KBkV0",
            "aFNyYxgDIAEoDBIWCg5FdGhTcmNSZXNvbHZlZBgEIAEoCRIOCgZFdGhMZW4Y",
            "BSABKA0SDwoHRXRoVHlwZRgGIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Eth), global::Ndx.Decoders.Base.Eth.Parser, new[]{ "EthDst", "EthDstResolved", "EthSrc", "EthSrcResolved", "EthLen", "EthType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Eth : pb::IMessage<Eth> {
    private static readonly pb::MessageParser<Eth> _parser = new pb::MessageParser<Eth>(() => new Eth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Eth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketEthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eth(Eth other) : this() {
      ethDst_ = other.ethDst_;
      ethDstResolved_ = other.ethDstResolved_;
      ethSrc_ = other.ethSrc_;
      ethSrcResolved_ = other.ethSrcResolved_;
      ethLen_ = other.ethLen_;
      ethType_ = other.ethType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Eth Clone() {
      return new Eth(this);
    }

    /// <summary>Field number for the "EthDst" field.</summary>
    public const int EthDstFieldNumber = 1;
    private pb::ByteString ethDst_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination ('eth_eth_dst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EthDst {
      get { return ethDst_; }
      set {
        ethDst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EthDstResolved" field.</summary>
    public const int EthDstResolvedFieldNumber = 2;
    private string ethDstResolved_ = "";
    /// <summary>
    /// Destination (resolved) ('eth_dst_eth_dst_resolved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EthDstResolved {
      get { return ethDstResolved_; }
      set {
        ethDstResolved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EthSrc" field.</summary>
    public const int EthSrcFieldNumber = 3;
    private pb::ByteString ethSrc_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('eth_eth_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EthSrc {
      get { return ethSrc_; }
      set {
        ethSrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EthSrcResolved" field.</summary>
    public const int EthSrcResolvedFieldNumber = 4;
    private string ethSrcResolved_ = "";
    /// <summary>
    /// Source (resolved) ('eth_src_eth_src_resolved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EthSrcResolved {
      get { return ethSrcResolved_; }
      set {
        ethSrcResolved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EthLen" field.</summary>
    public const int EthLenFieldNumber = 5;
    private uint ethLen_;
    /// <summary>
    /// Length ('eth_eth_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EthLen {
      get { return ethLen_; }
      set {
        ethLen_ = value;
      }
    }

    /// <summary>Field number for the "EthType" field.</summary>
    public const int EthTypeFieldNumber = 6;
    private uint ethType_;
    /// <summary>
    /// Type ('eth_eth_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EthType {
      get { return ethType_; }
      set {
        ethType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Eth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Eth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EthDst != other.EthDst) return false;
      if (EthDstResolved != other.EthDstResolved) return false;
      if (EthSrc != other.EthSrc) return false;
      if (EthSrcResolved != other.EthSrcResolved) return false;
      if (EthLen != other.EthLen) return false;
      if (EthType != other.EthType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EthDst.Length != 0) hash ^= EthDst.GetHashCode();
      if (EthDstResolved.Length != 0) hash ^= EthDstResolved.GetHashCode();
      if (EthSrc.Length != 0) hash ^= EthSrc.GetHashCode();
      if (EthSrcResolved.Length != 0) hash ^= EthSrcResolved.GetHashCode();
      if (EthLen != 0) hash ^= EthLen.GetHashCode();
      if (EthType != 0) hash ^= EthType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EthDst.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EthDst);
      }
      if (EthDstResolved.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EthDstResolved);
      }
      if (EthSrc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EthSrc);
      }
      if (EthSrcResolved.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EthSrcResolved);
      }
      if (EthLen != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EthLen);
      }
      if (EthType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(EthType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EthDst.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EthDst);
      }
      if (EthDstResolved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EthDstResolved);
      }
      if (EthSrc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EthSrc);
      }
      if (EthSrcResolved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EthSrcResolved);
      }
      if (EthLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EthLen);
      }
      if (EthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EthType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Eth other) {
      if (other == null) {
        return;
      }
      if (other.EthDst.Length != 0) {
        EthDst = other.EthDst;
      }
      if (other.EthDstResolved.Length != 0) {
        EthDstResolved = other.EthDstResolved;
      }
      if (other.EthSrc.Length != 0) {
        EthSrc = other.EthSrc;
      }
      if (other.EthSrcResolved.Length != 0) {
        EthSrcResolved = other.EthSrcResolved;
      }
      if (other.EthLen != 0) {
        EthLen = other.EthLen;
      }
      if (other.EthType != 0) {
        EthType = other.EthType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EthDst = input.ReadBytes();
            break;
          }
          case 18: {
            EthDstResolved = input.ReadString();
            break;
          }
          case 26: {
            EthSrc = input.ReadBytes();
            break;
          }
          case 34: {
            EthSrcResolved = input.ReadString();
            break;
          }
          case 40: {
            EthLen = input.ReadUInt32();
            break;
          }
          case 48: {
            EthType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
