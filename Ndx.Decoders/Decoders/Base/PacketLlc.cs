// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-llc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-llc.proto</summary>
  public static partial class PacketLlcReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-llc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketLlcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtbGxjLnByb3RvEhFOZHguRGVjb2RlcnMuQmFzZSKEAwoDTGxj",
            "Eg8KB0xsY0RzYXAYASABKA0SEgoKTGxjRHNhcFNhcBgCIAEoDRIRCglMbGNE",
            "c2FwSWcYAyABKAgSDwoHTGxjU3NhcBgEIAEoDRISCgpMbGNTc2FwU2FwGAUg",
            "ASgNEhEKCUxsY1NzYXBDchgGIAEoCBISCgpMbGNDb250cm9sGAcgASgNEhQK",
            "DExsY0NvbnRyb2xOUhgIIAEoDRIUCgxMbGNDb250cm9sTlMYCSABKA0SEwoL",
            "TGxjQ29udHJvbFAYCiABKAgSEwoLTGxjQ29udHJvbEYYCyABKAgSGAoQTGxj",
            "Q29udHJvbFNGdHlwZRgMIAEoDRIeChZMbGNDb250cm9sVU1vZGlmaWVyQ21k",
            "GA0gASgNEh8KF0xsY0NvbnRyb2xVTW9kaWZpZXJSZXNwGA4gASgNEhcKD0xs",
            "Y0NvbnRyb2xGdHlwZRgPIAEoDRIPCgdMbGNUeXBlGBAgASgNEg4KBkxsY091",
            "aRgRIAEoDRIOCgZMbGNQaWQYEiABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Llc), global::Ndx.Decoders.Base.Llc.Parser, new[]{ "LlcDsap", "LlcDsapSap", "LlcDsapIg", "LlcSsap", "LlcSsapSap", "LlcSsapCr", "LlcControl", "LlcControlNR", "LlcControlNS", "LlcControlP", "LlcControlF", "LlcControlSFtype", "LlcControlUModifierCmd", "LlcControlUModifierResp", "LlcControlFtype", "LlcType", "LlcOui", "LlcPid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Llc : pb::IMessage<Llc> {
    private static readonly pb::MessageParser<Llc> _parser = new pb::MessageParser<Llc>(() => new Llc());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Llc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketLlcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc(Llc other) : this() {
      llcDsap_ = other.llcDsap_;
      llcDsapSap_ = other.llcDsapSap_;
      llcDsapIg_ = other.llcDsapIg_;
      llcSsap_ = other.llcSsap_;
      llcSsapSap_ = other.llcSsapSap_;
      llcSsapCr_ = other.llcSsapCr_;
      llcControl_ = other.llcControl_;
      llcControlNR_ = other.llcControlNR_;
      llcControlNS_ = other.llcControlNS_;
      llcControlP_ = other.llcControlP_;
      llcControlF_ = other.llcControlF_;
      llcControlSFtype_ = other.llcControlSFtype_;
      llcControlUModifierCmd_ = other.llcControlUModifierCmd_;
      llcControlUModifierResp_ = other.llcControlUModifierResp_;
      llcControlFtype_ = other.llcControlFtype_;
      llcType_ = other.llcType_;
      llcOui_ = other.llcOui_;
      llcPid_ = other.llcPid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Llc Clone() {
      return new Llc(this);
    }

    /// <summary>Field number for the "LlcDsap" field.</summary>
    public const int LlcDsapFieldNumber = 1;
    private uint llcDsap_;
    /// <summary>
    /// DSAP ('llc_llc_dsap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcDsap {
      get { return llcDsap_; }
      set {
        llcDsap_ = value;
      }
    }

    /// <summary>Field number for the "LlcDsapSap" field.</summary>
    public const int LlcDsapSapFieldNumber = 2;
    private uint llcDsapSap_;
    /// <summary>
    /// SAP ('llc_dsap_llc_dsap_sap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcDsapSap {
      get { return llcDsapSap_; }
      set {
        llcDsapSap_ = value;
      }
    }

    /// <summary>Field number for the "LlcDsapIg" field.</summary>
    public const int LlcDsapIgFieldNumber = 3;
    private bool llcDsapIg_;
    /// <summary>
    /// IG Bit ('llc_dsap_llc_dsap_ig')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcDsapIg {
      get { return llcDsapIg_; }
      set {
        llcDsapIg_ = value;
      }
    }

    /// <summary>Field number for the "LlcSsap" field.</summary>
    public const int LlcSsapFieldNumber = 4;
    private uint llcSsap_;
    /// <summary>
    /// SSAP ('llc_llc_ssap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcSsap {
      get { return llcSsap_; }
      set {
        llcSsap_ = value;
      }
    }

    /// <summary>Field number for the "LlcSsapSap" field.</summary>
    public const int LlcSsapSapFieldNumber = 5;
    private uint llcSsapSap_;
    /// <summary>
    /// SAP ('llc_ssap_llc_ssap_sap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcSsapSap {
      get { return llcSsapSap_; }
      set {
        llcSsapSap_ = value;
      }
    }

    /// <summary>Field number for the "LlcSsapCr" field.</summary>
    public const int LlcSsapCrFieldNumber = 6;
    private bool llcSsapCr_;
    /// <summary>
    /// CR Bit ('llc_ssap_llc_ssap_cr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcSsapCr {
      get { return llcSsapCr_; }
      set {
        llcSsapCr_ = value;
      }
    }

    /// <summary>Field number for the "LlcControl" field.</summary>
    public const int LlcControlFieldNumber = 7;
    private uint llcControl_;
    /// <summary>
    /// Control ('llc_llc_control')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControl {
      get { return llcControl_; }
      set {
        llcControl_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlNR" field.</summary>
    public const int LlcControlNRFieldNumber = 8;
    private uint llcControlNR_;
    /// <summary>
    /// N(R) ('llc_control_llc_control_n_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlNR {
      get { return llcControlNR_; }
      set {
        llcControlNR_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlNS" field.</summary>
    public const int LlcControlNSFieldNumber = 9;
    private uint llcControlNS_;
    /// <summary>
    /// N(S) ('llc_control_llc_control_n_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlNS {
      get { return llcControlNS_; }
      set {
        llcControlNS_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlP" field.</summary>
    public const int LlcControlPFieldNumber = 10;
    private bool llcControlP_;
    /// <summary>
    /// Poll ('llc_control_llc_control_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcControlP {
      get { return llcControlP_; }
      set {
        llcControlP_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlF" field.</summary>
    public const int LlcControlFFieldNumber = 11;
    private bool llcControlF_;
    /// <summary>
    /// Final ('llc_control_llc_control_f')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LlcControlF {
      get { return llcControlF_; }
      set {
        llcControlF_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlSFtype" field.</summary>
    public const int LlcControlSFtypeFieldNumber = 12;
    private uint llcControlSFtype_;
    /// <summary>
    /// Supervisory frame type ('llc_control_llc_control_s_ftype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlSFtype {
      get { return llcControlSFtype_; }
      set {
        llcControlSFtype_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlUModifierCmd" field.</summary>
    public const int LlcControlUModifierCmdFieldNumber = 13;
    private uint llcControlUModifierCmd_;
    /// <summary>
    /// Command ('llc_control_llc_control_u_modifier_cmd')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlUModifierCmd {
      get { return llcControlUModifierCmd_; }
      set {
        llcControlUModifierCmd_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlUModifierResp" field.</summary>
    public const int LlcControlUModifierRespFieldNumber = 14;
    private uint llcControlUModifierResp_;
    /// <summary>
    /// Response ('llc_control_llc_control_u_modifier_resp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlUModifierResp {
      get { return llcControlUModifierResp_; }
      set {
        llcControlUModifierResp_ = value;
      }
    }

    /// <summary>Field number for the "LlcControlFtype" field.</summary>
    public const int LlcControlFtypeFieldNumber = 15;
    private uint llcControlFtype_;
    /// <summary>
    /// Frame type ('llc_control_llc_control_ftype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcControlFtype {
      get { return llcControlFtype_; }
      set {
        llcControlFtype_ = value;
      }
    }

    /// <summary>Field number for the "LlcType" field.</summary>
    public const int LlcTypeFieldNumber = 16;
    private uint llcType_;
    /// <summary>
    /// Type ('llc_llc_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcType {
      get { return llcType_; }
      set {
        llcType_ = value;
      }
    }

    /// <summary>Field number for the "LlcOui" field.</summary>
    public const int LlcOuiFieldNumber = 17;
    private uint llcOui_;
    /// <summary>
    /// Organization Code ('llc_llc_oui')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcOui {
      get { return llcOui_; }
      set {
        llcOui_ = value;
      }
    }

    /// <summary>Field number for the "LlcPid" field.</summary>
    public const int LlcPidFieldNumber = 18;
    private uint llcPid_;
    /// <summary>
    /// Protocol ID ('llc_llc_pid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LlcPid {
      get { return llcPid_; }
      set {
        llcPid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Llc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Llc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LlcDsap != other.LlcDsap) return false;
      if (LlcDsapSap != other.LlcDsapSap) return false;
      if (LlcDsapIg != other.LlcDsapIg) return false;
      if (LlcSsap != other.LlcSsap) return false;
      if (LlcSsapSap != other.LlcSsapSap) return false;
      if (LlcSsapCr != other.LlcSsapCr) return false;
      if (LlcControl != other.LlcControl) return false;
      if (LlcControlNR != other.LlcControlNR) return false;
      if (LlcControlNS != other.LlcControlNS) return false;
      if (LlcControlP != other.LlcControlP) return false;
      if (LlcControlF != other.LlcControlF) return false;
      if (LlcControlSFtype != other.LlcControlSFtype) return false;
      if (LlcControlUModifierCmd != other.LlcControlUModifierCmd) return false;
      if (LlcControlUModifierResp != other.LlcControlUModifierResp) return false;
      if (LlcControlFtype != other.LlcControlFtype) return false;
      if (LlcType != other.LlcType) return false;
      if (LlcOui != other.LlcOui) return false;
      if (LlcPid != other.LlcPid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LlcDsap != 0) hash ^= LlcDsap.GetHashCode();
      if (LlcDsapSap != 0) hash ^= LlcDsapSap.GetHashCode();
      if (LlcDsapIg != false) hash ^= LlcDsapIg.GetHashCode();
      if (LlcSsap != 0) hash ^= LlcSsap.GetHashCode();
      if (LlcSsapSap != 0) hash ^= LlcSsapSap.GetHashCode();
      if (LlcSsapCr != false) hash ^= LlcSsapCr.GetHashCode();
      if (LlcControl != 0) hash ^= LlcControl.GetHashCode();
      if (LlcControlNR != 0) hash ^= LlcControlNR.GetHashCode();
      if (LlcControlNS != 0) hash ^= LlcControlNS.GetHashCode();
      if (LlcControlP != false) hash ^= LlcControlP.GetHashCode();
      if (LlcControlF != false) hash ^= LlcControlF.GetHashCode();
      if (LlcControlSFtype != 0) hash ^= LlcControlSFtype.GetHashCode();
      if (LlcControlUModifierCmd != 0) hash ^= LlcControlUModifierCmd.GetHashCode();
      if (LlcControlUModifierResp != 0) hash ^= LlcControlUModifierResp.GetHashCode();
      if (LlcControlFtype != 0) hash ^= LlcControlFtype.GetHashCode();
      if (LlcType != 0) hash ^= LlcType.GetHashCode();
      if (LlcOui != 0) hash ^= LlcOui.GetHashCode();
      if (LlcPid != 0) hash ^= LlcPid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LlcDsap != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LlcDsap);
      }
      if (LlcDsapSap != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LlcDsapSap);
      }
      if (LlcDsapIg != false) {
        output.WriteRawTag(24);
        output.WriteBool(LlcDsapIg);
      }
      if (LlcSsap != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LlcSsap);
      }
      if (LlcSsapSap != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LlcSsapSap);
      }
      if (LlcSsapCr != false) {
        output.WriteRawTag(48);
        output.WriteBool(LlcSsapCr);
      }
      if (LlcControl != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LlcControl);
      }
      if (LlcControlNR != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LlcControlNR);
      }
      if (LlcControlNS != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LlcControlNS);
      }
      if (LlcControlP != false) {
        output.WriteRawTag(80);
        output.WriteBool(LlcControlP);
      }
      if (LlcControlF != false) {
        output.WriteRawTag(88);
        output.WriteBool(LlcControlF);
      }
      if (LlcControlSFtype != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(LlcControlSFtype);
      }
      if (LlcControlUModifierCmd != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(LlcControlUModifierCmd);
      }
      if (LlcControlUModifierResp != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(LlcControlUModifierResp);
      }
      if (LlcControlFtype != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(LlcControlFtype);
      }
      if (LlcType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LlcType);
      }
      if (LlcOui != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(LlcOui);
      }
      if (LlcPid != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LlcPid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LlcDsap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcDsap);
      }
      if (LlcDsapSap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcDsapSap);
      }
      if (LlcDsapIg != false) {
        size += 1 + 1;
      }
      if (LlcSsap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcSsap);
      }
      if (LlcSsapSap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcSsapSap);
      }
      if (LlcSsapCr != false) {
        size += 1 + 1;
      }
      if (LlcControl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControl);
      }
      if (LlcControlNR != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlNR);
      }
      if (LlcControlNS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlNS);
      }
      if (LlcControlP != false) {
        size += 1 + 1;
      }
      if (LlcControlF != false) {
        size += 1 + 1;
      }
      if (LlcControlSFtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlSFtype);
      }
      if (LlcControlUModifierCmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlUModifierCmd);
      }
      if (LlcControlUModifierResp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlUModifierResp);
      }
      if (LlcControlFtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LlcControlFtype);
      }
      if (LlcType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LlcType);
      }
      if (LlcOui != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LlcOui);
      }
      if (LlcPid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LlcPid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Llc other) {
      if (other == null) {
        return;
      }
      if (other.LlcDsap != 0) {
        LlcDsap = other.LlcDsap;
      }
      if (other.LlcDsapSap != 0) {
        LlcDsapSap = other.LlcDsapSap;
      }
      if (other.LlcDsapIg != false) {
        LlcDsapIg = other.LlcDsapIg;
      }
      if (other.LlcSsap != 0) {
        LlcSsap = other.LlcSsap;
      }
      if (other.LlcSsapSap != 0) {
        LlcSsapSap = other.LlcSsapSap;
      }
      if (other.LlcSsapCr != false) {
        LlcSsapCr = other.LlcSsapCr;
      }
      if (other.LlcControl != 0) {
        LlcControl = other.LlcControl;
      }
      if (other.LlcControlNR != 0) {
        LlcControlNR = other.LlcControlNR;
      }
      if (other.LlcControlNS != 0) {
        LlcControlNS = other.LlcControlNS;
      }
      if (other.LlcControlP != false) {
        LlcControlP = other.LlcControlP;
      }
      if (other.LlcControlF != false) {
        LlcControlF = other.LlcControlF;
      }
      if (other.LlcControlSFtype != 0) {
        LlcControlSFtype = other.LlcControlSFtype;
      }
      if (other.LlcControlUModifierCmd != 0) {
        LlcControlUModifierCmd = other.LlcControlUModifierCmd;
      }
      if (other.LlcControlUModifierResp != 0) {
        LlcControlUModifierResp = other.LlcControlUModifierResp;
      }
      if (other.LlcControlFtype != 0) {
        LlcControlFtype = other.LlcControlFtype;
      }
      if (other.LlcType != 0) {
        LlcType = other.LlcType;
      }
      if (other.LlcOui != 0) {
        LlcOui = other.LlcOui;
      }
      if (other.LlcPid != 0) {
        LlcPid = other.LlcPid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LlcDsap = input.ReadUInt32();
            break;
          }
          case 16: {
            LlcDsapSap = input.ReadUInt32();
            break;
          }
          case 24: {
            LlcDsapIg = input.ReadBool();
            break;
          }
          case 32: {
            LlcSsap = input.ReadUInt32();
            break;
          }
          case 40: {
            LlcSsapSap = input.ReadUInt32();
            break;
          }
          case 48: {
            LlcSsapCr = input.ReadBool();
            break;
          }
          case 56: {
            LlcControl = input.ReadUInt32();
            break;
          }
          case 64: {
            LlcControlNR = input.ReadUInt32();
            break;
          }
          case 72: {
            LlcControlNS = input.ReadUInt32();
            break;
          }
          case 80: {
            LlcControlP = input.ReadBool();
            break;
          }
          case 88: {
            LlcControlF = input.ReadBool();
            break;
          }
          case 96: {
            LlcControlSFtype = input.ReadUInt32();
            break;
          }
          case 104: {
            LlcControlUModifierCmd = input.ReadUInt32();
            break;
          }
          case 112: {
            LlcControlUModifierResp = input.ReadUInt32();
            break;
          }
          case 120: {
            LlcControlFtype = input.ReadUInt32();
            break;
          }
          case 128: {
            LlcType = input.ReadUInt32();
            break;
          }
          case 136: {
            LlcOui = input.ReadUInt32();
            break;
          }
          case 144: {
            LlcPid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
