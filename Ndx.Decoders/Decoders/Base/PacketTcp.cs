// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-tcp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Basic {

  /// <summary>Holder for reflection information generated from packet-tcp.proto</summary>
  public static partial class PacketTcpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-tcp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketTcpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtdGNwLnByb3RvEhJOZHguRGVjb2RlcnMuQmFzaWMivScKA1Rj",
            "cBISCgpUY3BTcmNwb3J0GAEgASgNEhIKClRjcERzdHBvcnQYAiABKA0SDwoH",
            "VGNwUG9ydBgDIAEoDRIRCglUY3BTdHJlYW0YBCABKA0SDgoGVGNwU2VxGAUg",
            "ASgNEhEKCVRjcE54dHNlcRgGIAEoDRIOCgZUY3BBY2sYByABKA0SEQoJVGNw",
            "SGRyTGVuGAggASgNEhAKCFRjcEZsYWdzGAkgASgNEhMKC1RjcEZsYWdzUmVz",
            "GAogASgIEhIKClRjcEZsYWdzTnMYCyABKAgSEwoLVGNwRmxhZ3NDd3IYDCAB",
            "KAgSEwoLVGNwRmxhZ3NFY24YDSABKAgSEwoLVGNwRmxhZ3NVcmcYDiABKAgS",
            "EwoLVGNwRmxhZ3NBY2sYDyABKAgSFAoMVGNwRmxhZ3NQdXNoGBAgASgIEhUK",
            "DVRjcEZsYWdzUmVzZXQYESABKAgSEwoLVGNwRmxhZ3NTeW4YEiABKAgSEwoL",
            "VGNwRmxhZ3NGaW4YEyABKAgSEwoLVGNwRmxhZ3NTdHIYFCABKAkSGgoSVGNw",
            "V2luZG93U2l6ZVZhbHVlGBUgASgNEhUKDVRjcFdpbmRvd1NpemUYFiABKA0S",
            "IAoYVGNwV2luZG93U2l6ZVNjYWxlZmFjdG9yGBcgASgFEhMKC1RjcENoZWNr",
            "c3VtGBggASgNEhkKEVRjcENoZWNrc3VtU3RhdHVzGBkgASgNEh0KFVRjcENo",
            "ZWNrc3VtQ2FsY3VsYXRlZBgaIAEoDRITCgtUY3BBbmFseXNpcxgbIAEoBRIY",
            "ChBUY3BBbmFseXNpc0ZsYWdzGBwgASgFEh8KF1RjcEFuYWx5c2lzRHVwbGlj",
            "YXRlQWNrGB0gASgFEiIKGlRjcEFuYWx5c2lzRHVwbGljYXRlQWNrTnVtGB4g",
            "ASgNEiQKHFRjcEFuYWx5c2lzRHVwbGljYXRlQWNrRnJhbWUYHyABKAMSGQoR",
            "VGNwQ29udGludWF0aW9uVG8YICABKAMSDgoGVGNwTGVuGCEgASgNEhwKFFRj",
            "cEFuYWx5c2lzQWNrc0ZyYW1lGCIgASgDEiAKGFRjcEFuYWx5c2lzQnl0ZXNJ",
            "bkZsaWdodBgjIAEoDRIgChhUY3BBbmFseXNpc1B1c2hCeXRlc1NlbnQYJCAB",
            "KA0SGQoRVGNwQW5hbHlzaXNBY2tSdHQYJSABKAMSHQoVVGNwQW5hbHlzaXNJ",
            "bml0aWFsUnR0GCYgASgDEhYKDlRjcEFuYWx5c2lzUnRvGCcgASgDEhsKE1Rj",
            "cEFuYWx5c2lzUnRvRnJhbWUYKCABKAMSGAoQVGNwVXJnZW50UG9pbnRlchgp",
            "IAEoDRIZChFUY3BTZWdtZW50T3ZlcmxhcBgqIAEoCBIhChlUY3BTZWdtZW50",
            "T3ZlcmxhcENvbmZsaWN0GCsgASgIEh8KF1RjcFNlZ21lbnRNdWx0aXBsZXRh",
            "aWxzGCwgASgIEiEKGVRjcFNlZ21lbnRUb29sb25nZnJhZ21lbnQYLSABKAgS",
            "FwoPVGNwU2VnbWVudEVycm9yGC4gASgDEhcKD1RjcFNlZ21lbnRDb3VudBgv",
            "IAEoDRISCgpUY3BTZWdtZW50GDAgASgDEhMKC1RjcFNlZ21lbnRzGDEgASgF",
            "EhgKEFRjcFJlYXNzZW1ibGVkSW4YMiABKAMSHAoUVGNwUmVhc3NlbWJsZWRM",
            "ZW5ndGgYMyABKA0SGgoSVGNwUmVhc3NlbWJsZWREYXRhGDQgASgMEhUKDVRj",
            "cE9wdGlvbktpbmQYNSABKA0SFAoMVGNwT3B0aW9uTGVuGDYgASgNEhIKClRj",
            "cE9wdGlvbnMYNyABKAwSGAoQVGNwT3B0aW9uc01zc1ZhbBg4IAEoDRIdChVU",
            "Y3BPcHRpb25zV3NjYWxlU2hpZnQYOSABKA0SIgoaVGNwT3B0aW9uc1dzY2Fs",
            "ZU11bHRpcGxpZXIYOiABKA0SIgoaVGNwT3B0aW9uc0V4cGVyaW1lbnRhbERh",
            "dGEYOyABKAwSKQohVGNwT3B0aW9uc0V4cGVyaW1lbnRhbE1hZ2ljTnVtYmVy",
            "GDwgASgNEhgKEFRjcE9wdGlvbnNTYWNrTGUYPSABKA0SGAoQVGNwT3B0aW9u",
            "c1NhY2tSZRg+IAEoDRIbChNUY3BPcHRpb25zU2Fja0NvdW50GD8gASgNEhsK",
            "E1RjcE9wdGlvbnNFY2hvVmFsdWUYQCABKA0SIAoYVGNwT3B0aW9uc1RpbWVz",
            "dGFtcFRzdmFsGEEgASgNEiAKGFRjcE9wdGlvbnNUaW1lc3RhbXBUc2VjchhC",
            "IAEoDRIeChZUY3BPcHRpb25zTXB0Y3BTdWJ0eXBlGEMgASgNEh4KFlRjcE9w",
            "dGlvbnNNcHRjcFZlcnNpb24YRCABKA0SHwoXVGNwT3B0aW9uc01wdGNwUmVz",
            "ZXJ2ZWQYRSABKA0SHAoUVGNwT3B0aW9uc01wdGNwRmxhZ3MYRiABKA0SIQoZ",
            "VGNwT3B0aW9uc01wdGNwQmFja3VwRmxhZxhHIAEoDRInCh9UY3BPcHRpb25z",
            "TXB0Y3BDaGVja3N1bXJlcUZsYWdzGEggASgNEigKIFRjcE9wdGlvbnNNcHRj",
            "cEV4dGVuc2liaWxpdHlGbGFnGEkgASgNEh8KF1RjcE9wdGlvbnNNcHRjcFNo",
            "YTFGbGFnGEogASgNEiIKGlRjcE9wdGlvbnNNcHRjcERhdGFmaW5GbGFnGEsg",
            "ASgNEiEKGVRjcE9wdGlvbnNNcHRjcERzZXFuOEZsYWcYTCABKA0SJwofVGNw",
            "T3B0aW9uc01wdGNwRHNlcW5wcmVzZW50RmxhZxhNIAEoDRIjChtUY3BPcHRp",
            "b25zTXB0Y3BEYXRhYWNrOEZsYWcYTiABKA0SKQohVGNwT3B0aW9uc01wdGNw",
            "RGF0YWFja3ByZXNlbnRGbGFnGE8gASgNEiMKG1RjcE9wdGlvbnNNcHRjcFJl",
            "c2VydmVkRmxhZxhQIAEoDRIdChVUY3BPcHRpb25zTXB0Y3BBZGRyaWQYUSAB",
            "KA0SHgoWVGNwT3B0aW9uc01wdGNwU2VuZGtleRhSIAEoBBIeChZUY3BPcHRp",
            "b25zTXB0Y3BSZWN2a2V5GFMgASgEEh4KFlRjcE9wdGlvbnNNcHRjcFJlY3Z0",
            "b2sYVCABKA0SHwoXVGNwT3B0aW9uc01wdGNwU2VuZHJhbmQYVSABKA0SJAoc",
            "VGNwT3B0aW9uc01wdGNwU2VuZHRydW5jaG1hYxhWIAEoBBIfChdUY3BPcHRp",
            "b25zTXB0Y3BTZW5kaG1hYxhXIAEoDBInCh9UY3BPcHRpb25zTXB0Y3BBZGRh",
            "ZGRydHJ1bmNobWFjGFggASgEEiEKGVRjcE9wdGlvbnNNcHRjcFJhd2RhdGFh",
            "Y2sYWSABKAQSIwobVGNwT3B0aW9uc01wdGNwUmF3ZGF0YXNlcW5vGFogASgE",
            "EiMKG1RjcE9wdGlvbnNNcHRjcFN1YmZsb3dzZXFubxhbIAEoDRIhChlUY3BP",
            "cHRpb25zTXB0Y3BEYXRhbHZsbGVuGFwgASgNEh8KF1RjcE9wdGlvbnNNcHRj",
            "cENoZWNrc3VtGF0gASgNEhwKFFRjcE9wdGlvbnNNcHRjcElwdmVyGF4gASgN",
            "EhsKE1RjcE9wdGlvbnNNcHRjcElwdjQYXyABKAwSGwoTVGNwT3B0aW9uc01w",
            "dGNwSXB2NhhgIAEoDBIbChNUY3BPcHRpb25zTXB0Y3BQb3J0GGEgASgNEhkK",
            "EVRjcE9wdGlvbnNDY1ZhbHVlGGIgASgNEhsKE1RjcE9wdGlvbnNNZDVEaWdl",
            "c3QYYyABKAwSGAoQVGNwT3B0aW9uc1FzUmF0ZRhkIAEoDRIbChNUY3BPcHRp",
            "b25zUXNUdGxEaWZmGGUgASgNEhwKFFRjcE9wdGlvbnNTY3BzVmVjdG9yGGYg",
            "ASgNEh8KF1RjcE9wdGlvbnNTY3BzQmluZGluZ0lkGGcgASgNEiAKGFRjcE9w",
            "dGlvbnNTY3BzQmluZGluZ0xlbhhoIAEoDRIdChVUY3BPcHRpb25zU25hY2tP",
            "ZmZzZXQYaSABKA0SGwoTVGNwT3B0aW9uc1NuYWNrU2l6ZRhqIAEoDRIZChFU",
            "Y3BPcHRpb25zU25hY2tMZRhrIAEoDRIZChFUY3BPcHRpb25zU25hY2tSZRhs",
            "IAEoDRIfChdUY3BPcHRpb25zU2Nwc2ZsYWdzQmV0cxhtIAEoCBIhChlUY3BP",
            "cHRpb25zU2Nwc2ZsYWdzU25hY2sxGG4gASgIEiEKGVRjcE9wdGlvbnNTY3Bz",
            "ZmxhZ3NTbmFjazIYbyABKAgSIwobVGNwT3B0aW9uc1NjcHNmbGFnc0NvbXBy",
            "ZXNzGHAgASgIEh8KF1RjcE9wdGlvbnNTY3BzZmxhZ3NObHRzGHEgASgIEiMK",
            "G1RjcE9wdGlvbnNTY3BzZmxhZ3NSZXNlcnZlZBhyIAEoDRIdChVUY3BPcHRp",
            "b25zU2Nwc0JpbmRpbmcYcyABKA0SIwobVGNwT3B0aW9uc1VzZXJUb0dyYW51",
            "bGFyaXR5GHQgASgIEhsKE1RjcE9wdGlvbnNVc2VyVG9WYWwYdSABKA0SIAoY",
            "VGNwT3B0aW9uc1J2YmRQcm9iZVR5cGUxGHYgASgNEiAKGFRjcE9wdGlvbnNS",
            "dmJkUHJvYmVUeXBlMhh3IAEoDRIiChpUY3BPcHRpb25zUnZiZFByb2JlVmVy",
            "c2lvbhh4IAEoDRIlCh1UY3BPcHRpb25zUnZiZFByb2JlVmVyc2lvblJhdxh5",
            "IAEoDRIeChZUY3BPcHRpb25zUnZiZFByb2JlTGVuGHogASgNEiEKGVRjcE9w",
            "dGlvbnNSdmJkUHJvYmVQcm9iZXIYeyABKAwSIgoaVGNwT3B0aW9uc1J2YmRQ",
            "cm9iZVByb3h5SXAYfCABKAwSJAocVGNwT3B0aW9uc1J2YmRQcm9iZVByb3h5",
            "UG9ydBh9IAEoDRIjChtUY3BPcHRpb25zUnZiZFByb2JlQXBwbGlWZXIYfiAB",
            "KA0SIwobVGNwT3B0aW9uc1J2YmRQcm9iZUNsaWVudElwGH8gASgMEiMKGlRj",
            "cE9wdGlvbnNSdmJkUHJvYmVTdG9yZWlkGIABIAEoDRIhChhUY3BPcHRpb25z",
            "UnZiZFByb2JlRmxhZ3MYgQEgASgNEicKHlRjcE9wdGlvbnNSdmJkUHJvYmVG",
            "bGFnc05vdGNmZRiCASABKAgSJQocVGNwT3B0aW9uc1J2YmRQcm9iZUZsYWdz",
            "TGFzdBiDASABKAgSJgodVGNwT3B0aW9uc1J2YmRQcm9iZUZsYWdzUHJvYmUY",
            "hAEgASgIEiQKG1RjcE9wdGlvbnNSdmJkUHJvYmVGbGFnc1NzbBiFASABKAgS",
            "JwoeVGNwT3B0aW9uc1J2YmRQcm9iZUZsYWdzU2VydmVyGIYBIAEoCBIgChdU",
            "Y3BPcHRpb25zUnZiZFRycHlGbGFncxiHASABKA0SKgohVGNwT3B0aW9uc1J2",
            "YmRUcnB5RmxhZ3NGd1JzdFByb2JlGIgBIAEoCBIqCiFUY3BPcHRpb25zUnZi",
            "ZFRycHlGbGFnc0Z3UnN0SW5uZXIYiQEgASgIEiUKHFRjcE9wdGlvbnNSdmJk",
            "VHJweUZsYWdzRndSc3QYigEgASgIEiYKHVRjcE9wdGlvbnNSdmJkVHJweUZs",
            "YWdzQ2hrc3VtGIsBIAEoCBIjChpUY3BPcHRpb25zUnZiZFRycHlGbGFnc09v",
            "YhiMASABKAgSJAobVGNwT3B0aW9uc1J2YmRUcnB5RmxhZ3NNb2RlGI0BIAEo",
            "CBIgChdUY3BPcHRpb25zUnZiZFRycHlTcmNJcBiOASABKAwSIAoXVGNwT3B0",
            "aW9uc1J2YmRUcnB5RHN0SXAYjwEgASgMEiIKGVRjcE9wdGlvbnNSdmJkVHJw",
            "eVNyY1BvcnQYkAEgASgNEiIKGVRjcE9wdGlvbnNSdmJkVHJweURzdFBvcnQY",
            "kQEgASgNEiUKHFRjcE9wdGlvbnNSdmJkVHJweUNsaWVudFBvcnQYkgEgASgN",
            "Eh0KFFRjcE9wdGlvbnNUZm9SZXF1ZXN0GJMBIAEoBRIcChNUY3BPcHRpb25z",
            "VGZvQ29va2llGJQBIAEoDBITCgpUY3BQZHVUaW1lGJUBIAEoAxITCgpUY3BQ",
            "ZHVTaXplGJYBIAEoDRIYCg9UY3BQZHVMYXN0RnJhbWUYlwEgASgDEhgKD1Rj",
            "cFRpbWVSZWxhdGl2ZRiYASABKAMSFQoMVGNwVGltZURlbHRhGJkBIAEoAxIW",
            "Cg1UY3BQcm9jU3JjdWlkGJoBIAEoDRIWCg1UY3BQcm9jU3JjcGlkGJsBIAEo",
            "DRIYCg9UY3BQcm9jU3JjdW5hbWUYnAEgASgJEhYKDVRjcFByb2NTcmNjbWQY",
            "nQEgASgJEhYKDVRjcFByb2NEc3R1aWQYngEgASgNEhYKDVRjcFByb2NEc3Rw",
            "aWQYnwEgASgNEhgKD1RjcFByb2NEc3R1bmFtZRigASABKAkSFgoNVGNwUHJv",
            "Y0RzdGNtZBihASABKAkSFwoOVGNwU2VnbWVudERhdGEYogEgASgMEhMKClRj",
            "cFBheWxvYWQYowEgASgMEiIKGVRjcE9wdGlvbnNTY3BzQmluZGluZ0RhdGEY",
            "pAEgASgMEiQKG1RjcE9wdGlvbnNSdmJkUHJvYmVSZXNlcnZlZBilASABKA0S",
            "HQoUVGNwRmluUmV0cmFuc21pc3Npb24YpgEgASgDEhYKDVRjcFJlc2V0Q2F1",
            "c2UYpwEgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Basic.Tcp), global::Ndx.Decoders.Basic.Tcp.Parser, new[]{ "TcpSrcport", "TcpDstport", "TcpPort", "TcpStream", "TcpSeq", "TcpNxtseq", "TcpAck", "TcpHdrLen", "TcpFlags", "TcpFlagsRes", "TcpFlagsNs", "TcpFlagsCwr", "TcpFlagsEcn", "TcpFlagsUrg", "TcpFlagsAck", "TcpFlagsPush", "TcpFlagsReset", "TcpFlagsSyn", "TcpFlagsFin", "TcpFlagsStr", "TcpWindowSizeValue", "TcpWindowSize", "TcpWindowSizeScalefactor", "TcpChecksum", "TcpChecksumStatus", "TcpChecksumCalculated", "TcpAnalysis", "TcpAnalysisFlags", "TcpAnalysisDuplicateAck", "TcpAnalysisDuplicateAckNum", "TcpAnalysisDuplicateAckFrame", "TcpContinuationTo", "TcpLen", "TcpAnalysisAcksFrame", "TcpAnalysisBytesInFlight", "TcpAnalysisPushBytesSent", "TcpAnalysisAckRtt", "TcpAnalysisInitialRtt", "TcpAnalysisRto", "TcpAnalysisRtoFrame", "TcpUrgentPointer", "TcpSegmentOverlap", "TcpSegmentOverlapConflict", "TcpSegmentMultipletails", "TcpSegmentToolongfragment", "TcpSegmentError", "TcpSegmentCount", "TcpSegment", "TcpSegments", "TcpReassembledIn", "TcpReassembledLength", "TcpReassembledData", "TcpOptionKind", "TcpOptionLen", "TcpOptions", "TcpOptionsMssVal", "TcpOptionsWscaleShift", "TcpOptionsWscaleMultiplier", "TcpOptionsExperimentalData", "TcpOptionsExperimentalMagicNumber", "TcpOptionsSackLe", "TcpOptionsSackRe", "TcpOptionsSackCount", "TcpOptionsEchoValue", "TcpOptionsTimestampTsval", "TcpOptionsTimestampTsecr", "TcpOptionsMptcpSubtype", "TcpOptionsMptcpVersion", "TcpOptionsMptcpReserved", "TcpOptionsMptcpFlags", "TcpOptionsMptcpBackupFlag", "TcpOptionsMptcpChecksumreqFlags", "TcpOptionsMptcpExtensibilityFlag", "TcpOptionsMptcpSha1Flag", "TcpOptionsMptcpDatafinFlag", "TcpOptionsMptcpDseqn8Flag", "TcpOptionsMptcpDseqnpresentFlag", "TcpOptionsMptcpDataack8Flag", "TcpOptionsMptcpDataackpresentFlag", "TcpOptionsMptcpReservedFlag", "TcpOptionsMptcpAddrid", "TcpOptionsMptcpSendkey", "TcpOptionsMptcpRecvkey", "TcpOptionsMptcpRecvtok", "TcpOptionsMptcpSendrand", "TcpOptionsMptcpSendtrunchmac", "TcpOptionsMptcpSendhmac", "TcpOptionsMptcpAddaddrtrunchmac", "TcpOptionsMptcpRawdataack", "TcpOptionsMptcpRawdataseqno", "TcpOptionsMptcpSubflowseqno", "TcpOptionsMptcpDatalvllen", "TcpOptionsMptcpChecksum", "TcpOptionsMptcpIpver", "TcpOptionsMptcpIpv4", "TcpOptionsMptcpIpv6", "TcpOptionsMptcpPort", "TcpOptionsCcValue", "TcpOptionsMd5Digest", "TcpOptionsQsRate", "TcpOptionsQsTtlDiff", "TcpOptionsScpsVector", "TcpOptionsScpsBindingId", "TcpOptionsScpsBindingLen", "TcpOptionsSnackOffset", "TcpOptionsSnackSize", "TcpOptionsSnackLe", "TcpOptionsSnackRe", "TcpOptionsScpsflagsBets", "TcpOptionsScpsflagsSnack1", "TcpOptionsScpsflagsSnack2", "TcpOptionsScpsflagsCompress", "TcpOptionsScpsflagsNlts", "TcpOptionsScpsflagsReserved", "TcpOptionsScpsBinding", "TcpOptionsUserToGranularity", "TcpOptionsUserToVal", "TcpOptionsRvbdProbeType1", "TcpOptionsRvbdProbeType2", "TcpOptionsRvbdProbeVersion", "TcpOptionsRvbdProbeVersionRaw", "TcpOptionsRvbdProbeLen", "TcpOptionsRvbdProbeProber", "TcpOptionsRvbdProbeProxyIp", "TcpOptionsRvbdProbeProxyPort", "TcpOptionsRvbdProbeAppliVer", "TcpOptionsRvbdProbeClientIp", "TcpOptionsRvbdProbeStoreid", "TcpOptionsRvbdProbeFlags", "TcpOptionsRvbdProbeFlagsNotcfe", "TcpOptionsRvbdProbeFlagsLast", "TcpOptionsRvbdProbeFlagsProbe", "TcpOptionsRvbdProbeFlagsSsl", "TcpOptionsRvbdProbeFlagsServer", "TcpOptionsRvbdTrpyFlags", "TcpOptionsRvbdTrpyFlagsFwRstProbe", "TcpOptionsRvbdTrpyFlagsFwRstInner", "TcpOptionsRvbdTrpyFlagsFwRst", "TcpOptionsRvbdTrpyFlagsChksum", "TcpOptionsRvbdTrpyFlagsOob", "TcpOptionsRvbdTrpyFlagsMode", "TcpOptionsRvbdTrpySrcIp", "TcpOptionsRvbdTrpyDstIp", "TcpOptionsRvbdTrpySrcPort", "TcpOptionsRvbdTrpyDstPort", "TcpOptionsRvbdTrpyClientPort", "TcpOptionsTfoRequest", "TcpOptionsTfoCookie", "TcpPduTime", "TcpPduSize", "TcpPduLastFrame", "TcpTimeRelative", "TcpTimeDelta", "TcpProcSrcuid", "TcpProcSrcpid", "TcpProcSrcuname", "TcpProcSrccmd", "TcpProcDstuid", "TcpProcDstpid", "TcpProcDstuname", "TcpProcDstcmd", "TcpSegmentData", "TcpPayload", "TcpOptionsScpsBindingData", "TcpOptionsRvbdProbeReserved", "TcpFinRetransmission", "TcpResetCause" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Tcp : pb::IMessage<Tcp> {
    private static readonly pb::MessageParser<Tcp> _parser = new pb::MessageParser<Tcp>(() => new Tcp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tcp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Basic.PacketTcpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp(Tcp other) : this() {
      tcpSrcport_ = other.tcpSrcport_;
      tcpDstport_ = other.tcpDstport_;
      tcpPort_ = other.tcpPort_;
      tcpStream_ = other.tcpStream_;
      tcpSeq_ = other.tcpSeq_;
      tcpNxtseq_ = other.tcpNxtseq_;
      tcpAck_ = other.tcpAck_;
      tcpHdrLen_ = other.tcpHdrLen_;
      tcpFlags_ = other.tcpFlags_;
      tcpFlagsRes_ = other.tcpFlagsRes_;
      tcpFlagsNs_ = other.tcpFlagsNs_;
      tcpFlagsCwr_ = other.tcpFlagsCwr_;
      tcpFlagsEcn_ = other.tcpFlagsEcn_;
      tcpFlagsUrg_ = other.tcpFlagsUrg_;
      tcpFlagsAck_ = other.tcpFlagsAck_;
      tcpFlagsPush_ = other.tcpFlagsPush_;
      tcpFlagsReset_ = other.tcpFlagsReset_;
      tcpFlagsSyn_ = other.tcpFlagsSyn_;
      tcpFlagsFin_ = other.tcpFlagsFin_;
      tcpFlagsStr_ = other.tcpFlagsStr_;
      tcpWindowSizeValue_ = other.tcpWindowSizeValue_;
      tcpWindowSize_ = other.tcpWindowSize_;
      tcpWindowSizeScalefactor_ = other.tcpWindowSizeScalefactor_;
      tcpChecksum_ = other.tcpChecksum_;
      tcpChecksumStatus_ = other.tcpChecksumStatus_;
      tcpChecksumCalculated_ = other.tcpChecksumCalculated_;
      tcpAnalysis_ = other.tcpAnalysis_;
      tcpAnalysisFlags_ = other.tcpAnalysisFlags_;
      tcpAnalysisDuplicateAck_ = other.tcpAnalysisDuplicateAck_;
      tcpAnalysisDuplicateAckNum_ = other.tcpAnalysisDuplicateAckNum_;
      tcpAnalysisDuplicateAckFrame_ = other.tcpAnalysisDuplicateAckFrame_;
      tcpContinuationTo_ = other.tcpContinuationTo_;
      tcpLen_ = other.tcpLen_;
      tcpAnalysisAcksFrame_ = other.tcpAnalysisAcksFrame_;
      tcpAnalysisBytesInFlight_ = other.tcpAnalysisBytesInFlight_;
      tcpAnalysisPushBytesSent_ = other.tcpAnalysisPushBytesSent_;
      tcpAnalysisAckRtt_ = other.tcpAnalysisAckRtt_;
      tcpAnalysisInitialRtt_ = other.tcpAnalysisInitialRtt_;
      tcpAnalysisRto_ = other.tcpAnalysisRto_;
      tcpAnalysisRtoFrame_ = other.tcpAnalysisRtoFrame_;
      tcpUrgentPointer_ = other.tcpUrgentPointer_;
      tcpSegmentOverlap_ = other.tcpSegmentOverlap_;
      tcpSegmentOverlapConflict_ = other.tcpSegmentOverlapConflict_;
      tcpSegmentMultipletails_ = other.tcpSegmentMultipletails_;
      tcpSegmentToolongfragment_ = other.tcpSegmentToolongfragment_;
      tcpSegmentError_ = other.tcpSegmentError_;
      tcpSegmentCount_ = other.tcpSegmentCount_;
      tcpSegment_ = other.tcpSegment_;
      tcpSegments_ = other.tcpSegments_;
      tcpReassembledIn_ = other.tcpReassembledIn_;
      tcpReassembledLength_ = other.tcpReassembledLength_;
      tcpReassembledData_ = other.tcpReassembledData_;
      tcpOptionKind_ = other.tcpOptionKind_;
      tcpOptionLen_ = other.tcpOptionLen_;
      tcpOptions_ = other.tcpOptions_;
      tcpOptionsMssVal_ = other.tcpOptionsMssVal_;
      tcpOptionsWscaleShift_ = other.tcpOptionsWscaleShift_;
      tcpOptionsWscaleMultiplier_ = other.tcpOptionsWscaleMultiplier_;
      tcpOptionsExperimentalData_ = other.tcpOptionsExperimentalData_;
      tcpOptionsExperimentalMagicNumber_ = other.tcpOptionsExperimentalMagicNumber_;
      tcpOptionsSackLe_ = other.tcpOptionsSackLe_;
      tcpOptionsSackRe_ = other.tcpOptionsSackRe_;
      tcpOptionsSackCount_ = other.tcpOptionsSackCount_;
      tcpOptionsEchoValue_ = other.tcpOptionsEchoValue_;
      tcpOptionsTimestampTsval_ = other.tcpOptionsTimestampTsval_;
      tcpOptionsTimestampTsecr_ = other.tcpOptionsTimestampTsecr_;
      tcpOptionsMptcpSubtype_ = other.tcpOptionsMptcpSubtype_;
      tcpOptionsMptcpVersion_ = other.tcpOptionsMptcpVersion_;
      tcpOptionsMptcpReserved_ = other.tcpOptionsMptcpReserved_;
      tcpOptionsMptcpFlags_ = other.tcpOptionsMptcpFlags_;
      tcpOptionsMptcpBackupFlag_ = other.tcpOptionsMptcpBackupFlag_;
      tcpOptionsMptcpChecksumreqFlags_ = other.tcpOptionsMptcpChecksumreqFlags_;
      tcpOptionsMptcpExtensibilityFlag_ = other.tcpOptionsMptcpExtensibilityFlag_;
      tcpOptionsMptcpSha1Flag_ = other.tcpOptionsMptcpSha1Flag_;
      tcpOptionsMptcpDatafinFlag_ = other.tcpOptionsMptcpDatafinFlag_;
      tcpOptionsMptcpDseqn8Flag_ = other.tcpOptionsMptcpDseqn8Flag_;
      tcpOptionsMptcpDseqnpresentFlag_ = other.tcpOptionsMptcpDseqnpresentFlag_;
      tcpOptionsMptcpDataack8Flag_ = other.tcpOptionsMptcpDataack8Flag_;
      tcpOptionsMptcpDataackpresentFlag_ = other.tcpOptionsMptcpDataackpresentFlag_;
      tcpOptionsMptcpReservedFlag_ = other.tcpOptionsMptcpReservedFlag_;
      tcpOptionsMptcpAddrid_ = other.tcpOptionsMptcpAddrid_;
      tcpOptionsMptcpSendkey_ = other.tcpOptionsMptcpSendkey_;
      tcpOptionsMptcpRecvkey_ = other.tcpOptionsMptcpRecvkey_;
      tcpOptionsMptcpRecvtok_ = other.tcpOptionsMptcpRecvtok_;
      tcpOptionsMptcpSendrand_ = other.tcpOptionsMptcpSendrand_;
      tcpOptionsMptcpSendtrunchmac_ = other.tcpOptionsMptcpSendtrunchmac_;
      tcpOptionsMptcpSendhmac_ = other.tcpOptionsMptcpSendhmac_;
      tcpOptionsMptcpAddaddrtrunchmac_ = other.tcpOptionsMptcpAddaddrtrunchmac_;
      tcpOptionsMptcpRawdataack_ = other.tcpOptionsMptcpRawdataack_;
      tcpOptionsMptcpRawdataseqno_ = other.tcpOptionsMptcpRawdataseqno_;
      tcpOptionsMptcpSubflowseqno_ = other.tcpOptionsMptcpSubflowseqno_;
      tcpOptionsMptcpDatalvllen_ = other.tcpOptionsMptcpDatalvllen_;
      tcpOptionsMptcpChecksum_ = other.tcpOptionsMptcpChecksum_;
      tcpOptionsMptcpIpver_ = other.tcpOptionsMptcpIpver_;
      tcpOptionsMptcpIpv4_ = other.tcpOptionsMptcpIpv4_;
      tcpOptionsMptcpIpv6_ = other.tcpOptionsMptcpIpv6_;
      tcpOptionsMptcpPort_ = other.tcpOptionsMptcpPort_;
      tcpOptionsCcValue_ = other.tcpOptionsCcValue_;
      tcpOptionsMd5Digest_ = other.tcpOptionsMd5Digest_;
      tcpOptionsQsRate_ = other.tcpOptionsQsRate_;
      tcpOptionsQsTtlDiff_ = other.tcpOptionsQsTtlDiff_;
      tcpOptionsScpsVector_ = other.tcpOptionsScpsVector_;
      tcpOptionsScpsBindingId_ = other.tcpOptionsScpsBindingId_;
      tcpOptionsScpsBindingLen_ = other.tcpOptionsScpsBindingLen_;
      tcpOptionsSnackOffset_ = other.tcpOptionsSnackOffset_;
      tcpOptionsSnackSize_ = other.tcpOptionsSnackSize_;
      tcpOptionsSnackLe_ = other.tcpOptionsSnackLe_;
      tcpOptionsSnackRe_ = other.tcpOptionsSnackRe_;
      tcpOptionsScpsflagsBets_ = other.tcpOptionsScpsflagsBets_;
      tcpOptionsScpsflagsSnack1_ = other.tcpOptionsScpsflagsSnack1_;
      tcpOptionsScpsflagsSnack2_ = other.tcpOptionsScpsflagsSnack2_;
      tcpOptionsScpsflagsCompress_ = other.tcpOptionsScpsflagsCompress_;
      tcpOptionsScpsflagsNlts_ = other.tcpOptionsScpsflagsNlts_;
      tcpOptionsScpsflagsReserved_ = other.tcpOptionsScpsflagsReserved_;
      tcpOptionsScpsBinding_ = other.tcpOptionsScpsBinding_;
      tcpOptionsUserToGranularity_ = other.tcpOptionsUserToGranularity_;
      tcpOptionsUserToVal_ = other.tcpOptionsUserToVal_;
      tcpOptionsRvbdProbeType1_ = other.tcpOptionsRvbdProbeType1_;
      tcpOptionsRvbdProbeType2_ = other.tcpOptionsRvbdProbeType2_;
      tcpOptionsRvbdProbeVersion_ = other.tcpOptionsRvbdProbeVersion_;
      tcpOptionsRvbdProbeVersionRaw_ = other.tcpOptionsRvbdProbeVersionRaw_;
      tcpOptionsRvbdProbeLen_ = other.tcpOptionsRvbdProbeLen_;
      tcpOptionsRvbdProbeProber_ = other.tcpOptionsRvbdProbeProber_;
      tcpOptionsRvbdProbeProxyIp_ = other.tcpOptionsRvbdProbeProxyIp_;
      tcpOptionsRvbdProbeProxyPort_ = other.tcpOptionsRvbdProbeProxyPort_;
      tcpOptionsRvbdProbeAppliVer_ = other.tcpOptionsRvbdProbeAppliVer_;
      tcpOptionsRvbdProbeClientIp_ = other.tcpOptionsRvbdProbeClientIp_;
      tcpOptionsRvbdProbeStoreid_ = other.tcpOptionsRvbdProbeStoreid_;
      tcpOptionsRvbdProbeFlags_ = other.tcpOptionsRvbdProbeFlags_;
      tcpOptionsRvbdProbeFlagsNotcfe_ = other.tcpOptionsRvbdProbeFlagsNotcfe_;
      tcpOptionsRvbdProbeFlagsLast_ = other.tcpOptionsRvbdProbeFlagsLast_;
      tcpOptionsRvbdProbeFlagsProbe_ = other.tcpOptionsRvbdProbeFlagsProbe_;
      tcpOptionsRvbdProbeFlagsSsl_ = other.tcpOptionsRvbdProbeFlagsSsl_;
      tcpOptionsRvbdProbeFlagsServer_ = other.tcpOptionsRvbdProbeFlagsServer_;
      tcpOptionsRvbdTrpyFlags_ = other.tcpOptionsRvbdTrpyFlags_;
      tcpOptionsRvbdTrpyFlagsFwRstProbe_ = other.tcpOptionsRvbdTrpyFlagsFwRstProbe_;
      tcpOptionsRvbdTrpyFlagsFwRstInner_ = other.tcpOptionsRvbdTrpyFlagsFwRstInner_;
      tcpOptionsRvbdTrpyFlagsFwRst_ = other.tcpOptionsRvbdTrpyFlagsFwRst_;
      tcpOptionsRvbdTrpyFlagsChksum_ = other.tcpOptionsRvbdTrpyFlagsChksum_;
      tcpOptionsRvbdTrpyFlagsOob_ = other.tcpOptionsRvbdTrpyFlagsOob_;
      tcpOptionsRvbdTrpyFlagsMode_ = other.tcpOptionsRvbdTrpyFlagsMode_;
      tcpOptionsRvbdTrpySrcIp_ = other.tcpOptionsRvbdTrpySrcIp_;
      tcpOptionsRvbdTrpyDstIp_ = other.tcpOptionsRvbdTrpyDstIp_;
      tcpOptionsRvbdTrpySrcPort_ = other.tcpOptionsRvbdTrpySrcPort_;
      tcpOptionsRvbdTrpyDstPort_ = other.tcpOptionsRvbdTrpyDstPort_;
      tcpOptionsRvbdTrpyClientPort_ = other.tcpOptionsRvbdTrpyClientPort_;
      tcpOptionsTfoRequest_ = other.tcpOptionsTfoRequest_;
      tcpOptionsTfoCookie_ = other.tcpOptionsTfoCookie_;
      tcpPduTime_ = other.tcpPduTime_;
      tcpPduSize_ = other.tcpPduSize_;
      tcpPduLastFrame_ = other.tcpPduLastFrame_;
      tcpTimeRelative_ = other.tcpTimeRelative_;
      tcpTimeDelta_ = other.tcpTimeDelta_;
      tcpProcSrcuid_ = other.tcpProcSrcuid_;
      tcpProcSrcpid_ = other.tcpProcSrcpid_;
      tcpProcSrcuname_ = other.tcpProcSrcuname_;
      tcpProcSrccmd_ = other.tcpProcSrccmd_;
      tcpProcDstuid_ = other.tcpProcDstuid_;
      tcpProcDstpid_ = other.tcpProcDstpid_;
      tcpProcDstuname_ = other.tcpProcDstuname_;
      tcpProcDstcmd_ = other.tcpProcDstcmd_;
      tcpSegmentData_ = other.tcpSegmentData_;
      tcpPayload_ = other.tcpPayload_;
      tcpOptionsScpsBindingData_ = other.tcpOptionsScpsBindingData_;
      tcpOptionsRvbdProbeReserved_ = other.tcpOptionsRvbdProbeReserved_;
      tcpFinRetransmission_ = other.tcpFinRetransmission_;
      tcpResetCause_ = other.tcpResetCause_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp Clone() {
      return new Tcp(this);
    }

    /// <summary>Field number for the "TcpSrcport" field.</summary>
    public const int TcpSrcportFieldNumber = 1;
    private uint tcpSrcport_;
    /// <summary>
    /// Source Port ('tcp_tcp_srcport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpSrcport {
      get { return tcpSrcport_; }
      set {
        tcpSrcport_ = value;
      }
    }

    /// <summary>Field number for the "TcpDstport" field.</summary>
    public const int TcpDstportFieldNumber = 2;
    private uint tcpDstport_;
    /// <summary>
    /// Destination Port ('tcp_tcp_dstport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpDstport {
      get { return tcpDstport_; }
      set {
        tcpDstport_ = value;
      }
    }

    /// <summary>Field number for the "TcpPort" field.</summary>
    public const int TcpPortFieldNumber = 3;
    private uint tcpPort_;
    /// <summary>
    /// Source or Destination Port ('tcp_tcp_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpPort {
      get { return tcpPort_; }
      set {
        tcpPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpStream" field.</summary>
    public const int TcpStreamFieldNumber = 4;
    private uint tcpStream_;
    /// <summary>
    /// Stream index ('tcp_tcp_stream')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpStream {
      get { return tcpStream_; }
      set {
        tcpStream_ = value;
      }
    }

    /// <summary>Field number for the "TcpSeq" field.</summary>
    public const int TcpSeqFieldNumber = 5;
    private uint tcpSeq_;
    /// <summary>
    /// Sequence number ('tcp_tcp_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpSeq {
      get { return tcpSeq_; }
      set {
        tcpSeq_ = value;
      }
    }

    /// <summary>Field number for the "TcpNxtseq" field.</summary>
    public const int TcpNxtseqFieldNumber = 6;
    private uint tcpNxtseq_;
    /// <summary>
    /// Next sequence number ('tcp_tcp_nxtseq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpNxtseq {
      get { return tcpNxtseq_; }
      set {
        tcpNxtseq_ = value;
      }
    }

    /// <summary>Field number for the "TcpAck" field.</summary>
    public const int TcpAckFieldNumber = 7;
    private uint tcpAck_;
    /// <summary>
    /// Acknowledgment number ('tcp_tcp_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpAck {
      get { return tcpAck_; }
      set {
        tcpAck_ = value;
      }
    }

    /// <summary>Field number for the "TcpHdrLen" field.</summary>
    public const int TcpHdrLenFieldNumber = 8;
    private uint tcpHdrLen_;
    /// <summary>
    /// Header Length ('tcp_tcp_hdr_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpHdrLen {
      get { return tcpHdrLen_; }
      set {
        tcpHdrLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlags" field.</summary>
    public const int TcpFlagsFieldNumber = 9;
    private uint tcpFlags_;
    /// <summary>
    /// Flags ('tcp_tcp_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpFlags {
      get { return tcpFlags_; }
      set {
        tcpFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsRes" field.</summary>
    public const int TcpFlagsResFieldNumber = 10;
    private bool tcpFlagsRes_;
    /// <summary>
    /// Reserved ('tcp_flags_tcp_flags_res')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsRes {
      get { return tcpFlagsRes_; }
      set {
        tcpFlagsRes_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsNs" field.</summary>
    public const int TcpFlagsNsFieldNumber = 11;
    private bool tcpFlagsNs_;
    /// <summary>
    /// Nonce ('tcp_flags_tcp_flags_ns')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsNs {
      get { return tcpFlagsNs_; }
      set {
        tcpFlagsNs_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsCwr" field.</summary>
    public const int TcpFlagsCwrFieldNumber = 12;
    private bool tcpFlagsCwr_;
    /// <summary>
    /// Congestion Window Reduced (CWR) ('tcp_flags_tcp_flags_cwr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsCwr {
      get { return tcpFlagsCwr_; }
      set {
        tcpFlagsCwr_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsEcn" field.</summary>
    public const int TcpFlagsEcnFieldNumber = 13;
    private bool tcpFlagsEcn_;
    /// <summary>
    /// ECN-Echo ('tcp_flags_tcp_flags_ecn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsEcn {
      get { return tcpFlagsEcn_; }
      set {
        tcpFlagsEcn_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsUrg" field.</summary>
    public const int TcpFlagsUrgFieldNumber = 14;
    private bool tcpFlagsUrg_;
    /// <summary>
    /// Urgent ('tcp_flags_tcp_flags_urg')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsUrg {
      get { return tcpFlagsUrg_; }
      set {
        tcpFlagsUrg_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsAck" field.</summary>
    public const int TcpFlagsAckFieldNumber = 15;
    private bool tcpFlagsAck_;
    /// <summary>
    /// Acknowledgment ('tcp_flags_tcp_flags_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsAck {
      get { return tcpFlagsAck_; }
      set {
        tcpFlagsAck_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsPush" field.</summary>
    public const int TcpFlagsPushFieldNumber = 16;
    private bool tcpFlagsPush_;
    /// <summary>
    /// Push ('tcp_flags_tcp_flags_push')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsPush {
      get { return tcpFlagsPush_; }
      set {
        tcpFlagsPush_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsReset" field.</summary>
    public const int TcpFlagsResetFieldNumber = 17;
    private bool tcpFlagsReset_;
    /// <summary>
    /// Reset ('tcp_flags_tcp_flags_reset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsReset {
      get { return tcpFlagsReset_; }
      set {
        tcpFlagsReset_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsSyn" field.</summary>
    public const int TcpFlagsSynFieldNumber = 18;
    private bool tcpFlagsSyn_;
    /// <summary>
    /// Syn ('tcp_flags_tcp_flags_syn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsSyn {
      get { return tcpFlagsSyn_; }
      set {
        tcpFlagsSyn_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsFin" field.</summary>
    public const int TcpFlagsFinFieldNumber = 19;
    private bool tcpFlagsFin_;
    /// <summary>
    /// Fin ('tcp_flags_tcp_flags_fin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsFin {
      get { return tcpFlagsFin_; }
      set {
        tcpFlagsFin_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsStr" field.</summary>
    public const int TcpFlagsStrFieldNumber = 20;
    private string tcpFlagsStr_ = "";
    /// <summary>
    /// TCP Flags ('tcp_flags_tcp_flags_str')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpFlagsStr {
      get { return tcpFlagsStr_; }
      set {
        tcpFlagsStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpWindowSizeValue" field.</summary>
    public const int TcpWindowSizeValueFieldNumber = 21;
    private uint tcpWindowSizeValue_;
    /// <summary>
    /// Window size value ('tcp_tcp_window_size_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpWindowSizeValue {
      get { return tcpWindowSizeValue_; }
      set {
        tcpWindowSizeValue_ = value;
      }
    }

    /// <summary>Field number for the "TcpWindowSize" field.</summary>
    public const int TcpWindowSizeFieldNumber = 22;
    private uint tcpWindowSize_;
    /// <summary>
    /// Calculated window size ('tcp_tcp_window_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpWindowSize {
      get { return tcpWindowSize_; }
      set {
        tcpWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "TcpWindowSizeScalefactor" field.</summary>
    public const int TcpWindowSizeScalefactorFieldNumber = 23;
    private int tcpWindowSizeScalefactor_;
    /// <summary>
    /// Window size scaling factor ('tcp_tcp_window_size_scalefactor')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpWindowSizeScalefactor {
      get { return tcpWindowSizeScalefactor_; }
      set {
        tcpWindowSizeScalefactor_ = value;
      }
    }

    /// <summary>Field number for the "TcpChecksum" field.</summary>
    public const int TcpChecksumFieldNumber = 24;
    private uint tcpChecksum_;
    /// <summary>
    /// Checksum ('tcp_tcp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpChecksum {
      get { return tcpChecksum_; }
      set {
        tcpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "TcpChecksumStatus" field.</summary>
    public const int TcpChecksumStatusFieldNumber = 25;
    private uint tcpChecksumStatus_;
    /// <summary>
    /// Checksum Status ('tcp_checksum_tcp_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpChecksumStatus {
      get { return tcpChecksumStatus_; }
      set {
        tcpChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "TcpChecksumCalculated" field.</summary>
    public const int TcpChecksumCalculatedFieldNumber = 26;
    private uint tcpChecksumCalculated_;
    /// <summary>
    /// Calculated Checksum ('tcp_tcp_checksum_calculated')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpChecksumCalculated {
      get { return tcpChecksumCalculated_; }
      set {
        tcpChecksumCalculated_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysis" field.</summary>
    public const int TcpAnalysisFieldNumber = 27;
    private int tcpAnalysis_;
    /// <summary>
    /// SEQ/ACK analysis ('tcp_tcp_analysis')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpAnalysis {
      get { return tcpAnalysis_; }
      set {
        tcpAnalysis_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisFlags" field.</summary>
    public const int TcpAnalysisFlagsFieldNumber = 28;
    private int tcpAnalysisFlags_;
    /// <summary>
    /// TCP Analysis Flags ('tcp_analysis_tcp_analysis_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpAnalysisFlags {
      get { return tcpAnalysisFlags_; }
      set {
        tcpAnalysisFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisDuplicateAck" field.</summary>
    public const int TcpAnalysisDuplicateAckFieldNumber = 29;
    private int tcpAnalysisDuplicateAck_;
    /// <summary>
    /// Duplicate ACK ('tcp_analysis_tcp_analysis_duplicate_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpAnalysisDuplicateAck {
      get { return tcpAnalysisDuplicateAck_; }
      set {
        tcpAnalysisDuplicateAck_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisDuplicateAckNum" field.</summary>
    public const int TcpAnalysisDuplicateAckNumFieldNumber = 30;
    private uint tcpAnalysisDuplicateAckNum_;
    /// <summary>
    /// Duplicate ACK # ('tcp_analysis_tcp_analysis_duplicate_ack_num')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpAnalysisDuplicateAckNum {
      get { return tcpAnalysisDuplicateAckNum_; }
      set {
        tcpAnalysisDuplicateAckNum_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisDuplicateAckFrame" field.</summary>
    public const int TcpAnalysisDuplicateAckFrameFieldNumber = 31;
    private long tcpAnalysisDuplicateAckFrame_;
    /// <summary>
    /// Duplicate to the ACK in frame ('tcp_analysis_tcp_analysis_duplicate_ack_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisDuplicateAckFrame {
      get { return tcpAnalysisDuplicateAckFrame_; }
      set {
        tcpAnalysisDuplicateAckFrame_ = value;
      }
    }

    /// <summary>Field number for the "TcpContinuationTo" field.</summary>
    public const int TcpContinuationToFieldNumber = 32;
    private long tcpContinuationTo_;
    /// <summary>
    /// This is a continuation to the PDU in frame ('tcp_tcp_continuation_to')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpContinuationTo {
      get { return tcpContinuationTo_; }
      set {
        tcpContinuationTo_ = value;
      }
    }

    /// <summary>Field number for the "TcpLen" field.</summary>
    public const int TcpLenFieldNumber = 33;
    private uint tcpLen_;
    /// <summary>
    /// TCP Segment Len ('tcp_tcp_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpLen {
      get { return tcpLen_; }
      set {
        tcpLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisAcksFrame" field.</summary>
    public const int TcpAnalysisAcksFrameFieldNumber = 34;
    private long tcpAnalysisAcksFrame_;
    /// <summary>
    /// This is an ACK to the segment in frame ('tcp_analysis_tcp_analysis_acks_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisAcksFrame {
      get { return tcpAnalysisAcksFrame_; }
      set {
        tcpAnalysisAcksFrame_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisBytesInFlight" field.</summary>
    public const int TcpAnalysisBytesInFlightFieldNumber = 35;
    private uint tcpAnalysisBytesInFlight_;
    /// <summary>
    /// Bytes in flight ('tcp_analysis_tcp_analysis_bytes_in_flight')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpAnalysisBytesInFlight {
      get { return tcpAnalysisBytesInFlight_; }
      set {
        tcpAnalysisBytesInFlight_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisPushBytesSent" field.</summary>
    public const int TcpAnalysisPushBytesSentFieldNumber = 36;
    private uint tcpAnalysisPushBytesSent_;
    /// <summary>
    /// Bytes sent since last PSH flag ('tcp_analysis_tcp_analysis_push_bytes_sent')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpAnalysisPushBytesSent {
      get { return tcpAnalysisPushBytesSent_; }
      set {
        tcpAnalysisPushBytesSent_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisAckRtt" field.</summary>
    public const int TcpAnalysisAckRttFieldNumber = 37;
    private long tcpAnalysisAckRtt_;
    /// <summary>
    /// The RTT to ACK the segment was ('tcp_analysis_tcp_analysis_ack_rtt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisAckRtt {
      get { return tcpAnalysisAckRtt_; }
      set {
        tcpAnalysisAckRtt_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisInitialRtt" field.</summary>
    public const int TcpAnalysisInitialRttFieldNumber = 38;
    private long tcpAnalysisInitialRtt_;
    /// <summary>
    /// iRTT ('tcp_analysis_tcp_analysis_initial_rtt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisInitialRtt {
      get { return tcpAnalysisInitialRtt_; }
      set {
        tcpAnalysisInitialRtt_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisRto" field.</summary>
    public const int TcpAnalysisRtoFieldNumber = 39;
    private long tcpAnalysisRto_;
    /// <summary>
    /// The RTO for this segment was ('tcp_analysis_tcp_analysis_rto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisRto {
      get { return tcpAnalysisRto_; }
      set {
        tcpAnalysisRto_ = value;
      }
    }

    /// <summary>Field number for the "TcpAnalysisRtoFrame" field.</summary>
    public const int TcpAnalysisRtoFrameFieldNumber = 40;
    private long tcpAnalysisRtoFrame_;
    /// <summary>
    /// RTO based on delta from frame ('tcp_analysis_tcp_analysis_rto_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpAnalysisRtoFrame {
      get { return tcpAnalysisRtoFrame_; }
      set {
        tcpAnalysisRtoFrame_ = value;
      }
    }

    /// <summary>Field number for the "TcpUrgentPointer" field.</summary>
    public const int TcpUrgentPointerFieldNumber = 41;
    private uint tcpUrgentPointer_;
    /// <summary>
    /// Urgent pointer ('tcp_tcp_urgent_pointer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpUrgentPointer {
      get { return tcpUrgentPointer_; }
      set {
        tcpUrgentPointer_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentOverlap" field.</summary>
    public const int TcpSegmentOverlapFieldNumber = 42;
    private bool tcpSegmentOverlap_;
    /// <summary>
    /// Segment overlap ('tcp_segment_tcp_segment_overlap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpSegmentOverlap {
      get { return tcpSegmentOverlap_; }
      set {
        tcpSegmentOverlap_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentOverlapConflict" field.</summary>
    public const int TcpSegmentOverlapConflictFieldNumber = 43;
    private bool tcpSegmentOverlapConflict_;
    /// <summary>
    /// Conflicting data in segment overlap ('tcp_segment_overlap_tcp_segment_overlap_conflict')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpSegmentOverlapConflict {
      get { return tcpSegmentOverlapConflict_; }
      set {
        tcpSegmentOverlapConflict_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentMultipletails" field.</summary>
    public const int TcpSegmentMultipletailsFieldNumber = 44;
    private bool tcpSegmentMultipletails_;
    /// <summary>
    /// Multiple tail segments found ('tcp_segment_tcp_segment_multipletails')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpSegmentMultipletails {
      get { return tcpSegmentMultipletails_; }
      set {
        tcpSegmentMultipletails_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentToolongfragment" field.</summary>
    public const int TcpSegmentToolongfragmentFieldNumber = 45;
    private bool tcpSegmentToolongfragment_;
    /// <summary>
    /// Segment too long ('tcp_segment_tcp_segment_toolongfragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpSegmentToolongfragment {
      get { return tcpSegmentToolongfragment_; }
      set {
        tcpSegmentToolongfragment_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentError" field.</summary>
    public const int TcpSegmentErrorFieldNumber = 46;
    private long tcpSegmentError_;
    /// <summary>
    /// Reassembling error ('tcp_segment_tcp_segment_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpSegmentError {
      get { return tcpSegmentError_; }
      set {
        tcpSegmentError_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegmentCount" field.</summary>
    public const int TcpSegmentCountFieldNumber = 47;
    private uint tcpSegmentCount_;
    /// <summary>
    /// Segment count ('tcp_segment_tcp_segment_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpSegmentCount {
      get { return tcpSegmentCount_; }
      set {
        tcpSegmentCount_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegment" field.</summary>
    public const int TcpSegmentFieldNumber = 48;
    private long tcpSegment_;
    /// <summary>
    /// TCP Segment ('tcp_tcp_segment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpSegment {
      get { return tcpSegment_; }
      set {
        tcpSegment_ = value;
      }
    }

    /// <summary>Field number for the "TcpSegments" field.</summary>
    public const int TcpSegmentsFieldNumber = 49;
    private int tcpSegments_;
    /// <summary>
    /// Reassembled TCP Segments ('tcp_tcp_segments')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpSegments {
      get { return tcpSegments_; }
      set {
        tcpSegments_ = value;
      }
    }

    /// <summary>Field number for the "TcpReassembledIn" field.</summary>
    public const int TcpReassembledInFieldNumber = 50;
    private long tcpReassembledIn_;
    /// <summary>
    /// Reassembled PDU in frame ('tcp_tcp_reassembled_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpReassembledIn {
      get { return tcpReassembledIn_; }
      set {
        tcpReassembledIn_ = value;
      }
    }

    /// <summary>Field number for the "TcpReassembledLength" field.</summary>
    public const int TcpReassembledLengthFieldNumber = 51;
    private uint tcpReassembledLength_;
    /// <summary>
    /// Reassembled TCP length ('tcp_tcp_reassembled_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpReassembledLength {
      get { return tcpReassembledLength_; }
      set {
        tcpReassembledLength_ = value;
      }
    }

    /// <summary>Field number for the "TcpReassembledData" field.</summary>
    public const int TcpReassembledDataFieldNumber = 52;
    private pb::ByteString tcpReassembledData_ = pb::ByteString.Empty;
    /// <summary>
    /// Reassembled TCP Data ('tcp_tcp_reassembled_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpReassembledData {
      get { return tcpReassembledData_; }
      set {
        tcpReassembledData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionKind" field.</summary>
    public const int TcpOptionKindFieldNumber = 53;
    private uint tcpOptionKind_;
    /// <summary>
    /// Kind ('tcp_tcp_option_kind')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionKind {
      get { return tcpOptionKind_; }
      set {
        tcpOptionKind_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionLen" field.</summary>
    public const int TcpOptionLenFieldNumber = 54;
    private uint tcpOptionLen_;
    /// <summary>
    /// Length ('tcp_tcp_option_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionLen {
      get { return tcpOptionLen_; }
      set {
        tcpOptionLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptions" field.</summary>
    public const int TcpOptionsFieldNumber = 55;
    private pb::ByteString tcpOptions_ = pb::ByteString.Empty;
    /// <summary>
    /// TCP Options ('tcp_tcp_options')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptions {
      get { return tcpOptions_; }
      set {
        tcpOptions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsMssVal" field.</summary>
    public const int TcpOptionsMssValFieldNumber = 56;
    private uint tcpOptionsMssVal_;
    /// <summary>
    /// MSS Value ('tcp_options_tcp_options_mss_val')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMssVal {
      get { return tcpOptionsMssVal_; }
      set {
        tcpOptionsMssVal_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsWscaleShift" field.</summary>
    public const int TcpOptionsWscaleShiftFieldNumber = 57;
    private uint tcpOptionsWscaleShift_;
    /// <summary>
    /// Shift count ('tcp_tcp_options_wscale_shift')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsWscaleShift {
      get { return tcpOptionsWscaleShift_; }
      set {
        tcpOptionsWscaleShift_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsWscaleMultiplier" field.</summary>
    public const int TcpOptionsWscaleMultiplierFieldNumber = 58;
    private uint tcpOptionsWscaleMultiplier_;
    /// <summary>
    /// Multiplier ('tcp_tcp_options_wscale_multiplier')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsWscaleMultiplier {
      get { return tcpOptionsWscaleMultiplier_; }
      set {
        tcpOptionsWscaleMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsExperimentalData" field.</summary>
    public const int TcpOptionsExperimentalDataFieldNumber = 59;
    private pb::ByteString tcpOptionsExperimentalData_ = pb::ByteString.Empty;
    /// <summary>
    /// Data ('tcp_tcp_options_experimental_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsExperimentalData {
      get { return tcpOptionsExperimentalData_; }
      set {
        tcpOptionsExperimentalData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsExperimentalMagicNumber" field.</summary>
    public const int TcpOptionsExperimentalMagicNumberFieldNumber = 60;
    private uint tcpOptionsExperimentalMagicNumber_;
    /// <summary>
    /// Magic Number ('tcp_tcp_options_experimental_magic_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsExperimentalMagicNumber {
      get { return tcpOptionsExperimentalMagicNumber_; }
      set {
        tcpOptionsExperimentalMagicNumber_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSackLe" field.</summary>
    public const int TcpOptionsSackLeFieldNumber = 61;
    private uint tcpOptionsSackLe_;
    /// <summary>
    /// TCP SACK Left Edge ('tcp_options_tcp_options_sack_le')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSackLe {
      get { return tcpOptionsSackLe_; }
      set {
        tcpOptionsSackLe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSackRe" field.</summary>
    public const int TcpOptionsSackReFieldNumber = 62;
    private uint tcpOptionsSackRe_;
    /// <summary>
    /// TCP SACK Right Edge ('tcp_options_tcp_options_sack_re')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSackRe {
      get { return tcpOptionsSackRe_; }
      set {
        tcpOptionsSackRe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSackCount" field.</summary>
    public const int TcpOptionsSackCountFieldNumber = 63;
    private uint tcpOptionsSackCount_;
    /// <summary>
    /// TCP SACK Count ('tcp_tcp_options_sack_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSackCount {
      get { return tcpOptionsSackCount_; }
      set {
        tcpOptionsSackCount_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsEchoValue" field.</summary>
    public const int TcpOptionsEchoValueFieldNumber = 64;
    private uint tcpOptionsEchoValue_;
    /// <summary>
    /// TCP Echo Option ('tcp_options_tcp_options_echo_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsEchoValue {
      get { return tcpOptionsEchoValue_; }
      set {
        tcpOptionsEchoValue_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsTimestampTsval" field.</summary>
    public const int TcpOptionsTimestampTsvalFieldNumber = 65;
    private uint tcpOptionsTimestampTsval_;
    /// <summary>
    /// Timestamp value ('tcp_tcp_options_timestamp_tsval')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsTimestampTsval {
      get { return tcpOptionsTimestampTsval_; }
      set {
        tcpOptionsTimestampTsval_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsTimestampTsecr" field.</summary>
    public const int TcpOptionsTimestampTsecrFieldNumber = 66;
    private uint tcpOptionsTimestampTsecr_;
    /// <summary>
    /// Timestamp echo reply ('tcp_tcp_options_timestamp_tsecr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsTimestampTsecr {
      get { return tcpOptionsTimestampTsecr_; }
      set {
        tcpOptionsTimestampTsecr_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSubtype" field.</summary>
    public const int TcpOptionsMptcpSubtypeFieldNumber = 67;
    private uint tcpOptionsMptcpSubtype_;
    /// <summary>
    /// Multipath TCP subtype ('tcp_tcp_options_mptcp_subtype')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpSubtype {
      get { return tcpOptionsMptcpSubtype_; }
      set {
        tcpOptionsMptcpSubtype_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpVersion" field.</summary>
    public const int TcpOptionsMptcpVersionFieldNumber = 68;
    private uint tcpOptionsMptcpVersion_;
    /// <summary>
    /// Multipath TCP version ('tcp_tcp_options_mptcp_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpVersion {
      get { return tcpOptionsMptcpVersion_; }
      set {
        tcpOptionsMptcpVersion_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpReserved" field.</summary>
    public const int TcpOptionsMptcpReservedFieldNumber = 69;
    private uint tcpOptionsMptcpReserved_;
    /// <summary>
    /// Reserved ('tcp_tcp_options_mptcp_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpReserved {
      get { return tcpOptionsMptcpReserved_; }
      set {
        tcpOptionsMptcpReserved_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpFlags" field.</summary>
    public const int TcpOptionsMptcpFlagsFieldNumber = 70;
    private uint tcpOptionsMptcpFlags_;
    /// <summary>
    /// Multipath TCP flags ('tcp_tcp_options_mptcp_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpFlags {
      get { return tcpOptionsMptcpFlags_; }
      set {
        tcpOptionsMptcpFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpBackupFlag" field.</summary>
    public const int TcpOptionsMptcpBackupFlagFieldNumber = 71;
    private uint tcpOptionsMptcpBackupFlag_;
    /// <summary>
    /// Backup flag ('tcp_tcp_options_mptcp_backup_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpBackupFlag {
      get { return tcpOptionsMptcpBackupFlag_; }
      set {
        tcpOptionsMptcpBackupFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpChecksumreqFlags" field.</summary>
    public const int TcpOptionsMptcpChecksumreqFlagsFieldNumber = 72;
    private uint tcpOptionsMptcpChecksumreqFlags_;
    /// <summary>
    /// Checksum required ('tcp_tcp_options_mptcp_checksumreq_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpChecksumreqFlags {
      get { return tcpOptionsMptcpChecksumreqFlags_; }
      set {
        tcpOptionsMptcpChecksumreqFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpExtensibilityFlag" field.</summary>
    public const int TcpOptionsMptcpExtensibilityFlagFieldNumber = 73;
    private uint tcpOptionsMptcpExtensibilityFlag_;
    /// <summary>
    /// Extensibility ('tcp_tcp_options_mptcp_extensibility_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpExtensibilityFlag {
      get { return tcpOptionsMptcpExtensibilityFlag_; }
      set {
        tcpOptionsMptcpExtensibilityFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSha1Flag" field.</summary>
    public const int TcpOptionsMptcpSha1FlagFieldNumber = 74;
    private uint tcpOptionsMptcpSha1Flag_;
    /// <summary>
    /// Use HMAC-SHA1 ('tcp_tcp_options_mptcp_sha1_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpSha1Flag {
      get { return tcpOptionsMptcpSha1Flag_; }
      set {
        tcpOptionsMptcpSha1Flag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDatafinFlag" field.</summary>
    public const int TcpOptionsMptcpDatafinFlagFieldNumber = 75;
    private uint tcpOptionsMptcpDatafinFlag_;
    /// <summary>
    /// DATA_FIN ('tcp_tcp_options_mptcp_datafin_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDatafinFlag {
      get { return tcpOptionsMptcpDatafinFlag_; }
      set {
        tcpOptionsMptcpDatafinFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDseqn8Flag" field.</summary>
    public const int TcpOptionsMptcpDseqn8FlagFieldNumber = 76;
    private uint tcpOptionsMptcpDseqn8Flag_;
    /// <summary>
    /// Data Sequence Number is 8 octets ('tcp_tcp_options_mptcp_dseqn8_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDseqn8Flag {
      get { return tcpOptionsMptcpDseqn8Flag_; }
      set {
        tcpOptionsMptcpDseqn8Flag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDseqnpresentFlag" field.</summary>
    public const int TcpOptionsMptcpDseqnpresentFlagFieldNumber = 77;
    private uint tcpOptionsMptcpDseqnpresentFlag_;
    /// <summary>
    /// Data Sequence Number, Subflow Sequence Number, Data-level Length, Checksum present ('tcp_tcp_options_mptcp_dseqnpresent_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDseqnpresentFlag {
      get { return tcpOptionsMptcpDseqnpresentFlag_; }
      set {
        tcpOptionsMptcpDseqnpresentFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDataack8Flag" field.</summary>
    public const int TcpOptionsMptcpDataack8FlagFieldNumber = 78;
    private uint tcpOptionsMptcpDataack8Flag_;
    /// <summary>
    /// Data ACK is 8 octets ('tcp_tcp_options_mptcp_dataack8_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDataack8Flag {
      get { return tcpOptionsMptcpDataack8Flag_; }
      set {
        tcpOptionsMptcpDataack8Flag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDataackpresentFlag" field.</summary>
    public const int TcpOptionsMptcpDataackpresentFlagFieldNumber = 79;
    private uint tcpOptionsMptcpDataackpresentFlag_;
    /// <summary>
    /// Data ACK is present ('tcp_tcp_options_mptcp_dataackpresent_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDataackpresentFlag {
      get { return tcpOptionsMptcpDataackpresentFlag_; }
      set {
        tcpOptionsMptcpDataackpresentFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpReservedFlag" field.</summary>
    public const int TcpOptionsMptcpReservedFlagFieldNumber = 80;
    private uint tcpOptionsMptcpReservedFlag_;
    /// <summary>
    /// Reserved ('tcp_options_mptcp_reserved_tcp_options_mptcp_reserved_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpReservedFlag {
      get { return tcpOptionsMptcpReservedFlag_; }
      set {
        tcpOptionsMptcpReservedFlag_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpAddrid" field.</summary>
    public const int TcpOptionsMptcpAddridFieldNumber = 81;
    private uint tcpOptionsMptcpAddrid_;
    /// <summary>
    /// Address ID ('tcp_tcp_options_mptcp_addrid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpAddrid {
      get { return tcpOptionsMptcpAddrid_; }
      set {
        tcpOptionsMptcpAddrid_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSendkey" field.</summary>
    public const int TcpOptionsMptcpSendkeyFieldNumber = 82;
    private ulong tcpOptionsMptcpSendkey_;
    /// <summary>
    /// Sender's Key ('tcp_tcp_options_mptcp_sendkey')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpSendkey {
      get { return tcpOptionsMptcpSendkey_; }
      set {
        tcpOptionsMptcpSendkey_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpRecvkey" field.</summary>
    public const int TcpOptionsMptcpRecvkeyFieldNumber = 83;
    private ulong tcpOptionsMptcpRecvkey_;
    /// <summary>
    /// Receiver's Key ('tcp_tcp_options_mptcp_recvkey')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpRecvkey {
      get { return tcpOptionsMptcpRecvkey_; }
      set {
        tcpOptionsMptcpRecvkey_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpRecvtok" field.</summary>
    public const int TcpOptionsMptcpRecvtokFieldNumber = 84;
    private uint tcpOptionsMptcpRecvtok_;
    /// <summary>
    /// Receiver's Token ('tcp_tcp_options_mptcp_recvtok')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpRecvtok {
      get { return tcpOptionsMptcpRecvtok_; }
      set {
        tcpOptionsMptcpRecvtok_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSendrand" field.</summary>
    public const int TcpOptionsMptcpSendrandFieldNumber = 85;
    private uint tcpOptionsMptcpSendrand_;
    /// <summary>
    /// Sender's Random Number ('tcp_tcp_options_mptcp_sendrand')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpSendrand {
      get { return tcpOptionsMptcpSendrand_; }
      set {
        tcpOptionsMptcpSendrand_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSendtrunchmac" field.</summary>
    public const int TcpOptionsMptcpSendtrunchmacFieldNumber = 86;
    private ulong tcpOptionsMptcpSendtrunchmac_;
    /// <summary>
    /// Sender's Truncated HMAC ('tcp_tcp_options_mptcp_sendtrunchmac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpSendtrunchmac {
      get { return tcpOptionsMptcpSendtrunchmac_; }
      set {
        tcpOptionsMptcpSendtrunchmac_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSendhmac" field.</summary>
    public const int TcpOptionsMptcpSendhmacFieldNumber = 87;
    private pb::ByteString tcpOptionsMptcpSendhmac_ = pb::ByteString.Empty;
    /// <summary>
    /// Sender's HMAC ('tcp_tcp_options_mptcp_sendhmac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsMptcpSendhmac {
      get { return tcpOptionsMptcpSendhmac_; }
      set {
        tcpOptionsMptcpSendhmac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpAddaddrtrunchmac" field.</summary>
    public const int TcpOptionsMptcpAddaddrtrunchmacFieldNumber = 88;
    private ulong tcpOptionsMptcpAddaddrtrunchmac_;
    /// <summary>
    /// Truncated HMAC ('tcp_tcp_options_mptcp_addaddrtrunchmac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpAddaddrtrunchmac {
      get { return tcpOptionsMptcpAddaddrtrunchmac_; }
      set {
        tcpOptionsMptcpAddaddrtrunchmac_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpRawdataack" field.</summary>
    public const int TcpOptionsMptcpRawdataackFieldNumber = 89;
    private ulong tcpOptionsMptcpRawdataack_;
    /// <summary>
    /// Original MPTCP Data ACK ('tcp_tcp_options_mptcp_rawdataack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpRawdataack {
      get { return tcpOptionsMptcpRawdataack_; }
      set {
        tcpOptionsMptcpRawdataack_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpRawdataseqno" field.</summary>
    public const int TcpOptionsMptcpRawdataseqnoFieldNumber = 90;
    private ulong tcpOptionsMptcpRawdataseqno_;
    /// <summary>
    /// Data Sequence Number ('tcp_tcp_options_mptcp_rawdataseqno')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TcpOptionsMptcpRawdataseqno {
      get { return tcpOptionsMptcpRawdataseqno_; }
      set {
        tcpOptionsMptcpRawdataseqno_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpSubflowseqno" field.</summary>
    public const int TcpOptionsMptcpSubflowseqnoFieldNumber = 91;
    private uint tcpOptionsMptcpSubflowseqno_;
    /// <summary>
    /// Subflow Sequence Number ('tcp_tcp_options_mptcp_subflowseqno')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpSubflowseqno {
      get { return tcpOptionsMptcpSubflowseqno_; }
      set {
        tcpOptionsMptcpSubflowseqno_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpDatalvllen" field.</summary>
    public const int TcpOptionsMptcpDatalvllenFieldNumber = 92;
    private uint tcpOptionsMptcpDatalvllen_;
    /// <summary>
    /// Data-level Length ('tcp_tcp_options_mptcp_datalvllen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpDatalvllen {
      get { return tcpOptionsMptcpDatalvllen_; }
      set {
        tcpOptionsMptcpDatalvllen_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpChecksum" field.</summary>
    public const int TcpOptionsMptcpChecksumFieldNumber = 93;
    private uint tcpOptionsMptcpChecksum_;
    /// <summary>
    /// Checksum ('tcp_tcp_options_mptcp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpChecksum {
      get { return tcpOptionsMptcpChecksum_; }
      set {
        tcpOptionsMptcpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpIpver" field.</summary>
    public const int TcpOptionsMptcpIpverFieldNumber = 94;
    private uint tcpOptionsMptcpIpver_;
    /// <summary>
    /// IP version ('tcp_tcp_options_mptcp_ipver')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpIpver {
      get { return tcpOptionsMptcpIpver_; }
      set {
        tcpOptionsMptcpIpver_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpIpv4" field.</summary>
    public const int TcpOptionsMptcpIpv4FieldNumber = 95;
    private pb::ByteString tcpOptionsMptcpIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Advertised IPv4 Address ('tcp_tcp_options_mptcp_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsMptcpIpv4 {
      get { return tcpOptionsMptcpIpv4_; }
      set {
        tcpOptionsMptcpIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpIpv6" field.</summary>
    public const int TcpOptionsMptcpIpv6FieldNumber = 96;
    private pb::ByteString tcpOptionsMptcpIpv6_ = pb::ByteString.Empty;
    /// <summary>
    /// Advertised IPv6 Address ('tcp_tcp_options_mptcp_ipv6')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsMptcpIpv6 {
      get { return tcpOptionsMptcpIpv6_; }
      set {
        tcpOptionsMptcpIpv6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsMptcpPort" field.</summary>
    public const int TcpOptionsMptcpPortFieldNumber = 97;
    private uint tcpOptionsMptcpPort_;
    /// <summary>
    /// Advertised port ('tcp_tcp_options_mptcp_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsMptcpPort {
      get { return tcpOptionsMptcpPort_; }
      set {
        tcpOptionsMptcpPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsCcValue" field.</summary>
    public const int TcpOptionsCcValueFieldNumber = 98;
    private uint tcpOptionsCcValue_;
    /// <summary>
    /// TCP CC Option ('tcp_options_tcp_options_cc_value')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsCcValue {
      get { return tcpOptionsCcValue_; }
      set {
        tcpOptionsCcValue_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsMd5Digest" field.</summary>
    public const int TcpOptionsMd5DigestFieldNumber = 99;
    private pb::ByteString tcpOptionsMd5Digest_ = pb::ByteString.Empty;
    /// <summary>
    /// MD5 digest ('tcp_tcp_options_md5_digest')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsMd5Digest {
      get { return tcpOptionsMd5Digest_; }
      set {
        tcpOptionsMd5Digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsQsRate" field.</summary>
    public const int TcpOptionsQsRateFieldNumber = 100;
    private uint tcpOptionsQsRate_;
    /// <summary>
    /// QS Rate ('tcp_tcp_options_qs_rate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsQsRate {
      get { return tcpOptionsQsRate_; }
      set {
        tcpOptionsQsRate_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsQsTtlDiff" field.</summary>
    public const int TcpOptionsQsTtlDiffFieldNumber = 101;
    private uint tcpOptionsQsTtlDiff_;
    /// <summary>
    /// QS Rate ('tcp_tcp_options_qs_ttl_diff')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsQsTtlDiff {
      get { return tcpOptionsQsTtlDiff_; }
      set {
        tcpOptionsQsTtlDiff_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsVector" field.</summary>
    public const int TcpOptionsScpsVectorFieldNumber = 102;
    private uint tcpOptionsScpsVector_;
    /// <summary>
    /// TCP SCPS Capabilities Vector ('tcp_tcp_options_scps_vector')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsScpsVector {
      get { return tcpOptionsScpsVector_; }
      set {
        tcpOptionsScpsVector_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsBindingId" field.</summary>
    public const int TcpOptionsScpsBindingIdFieldNumber = 103;
    private uint tcpOptionsScpsBindingId_;
    /// <summary>
    /// Binding Space (Community) ID ('tcp_options_scps_binding_tcp_options_scps_binding_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsScpsBindingId {
      get { return tcpOptionsScpsBindingId_; }
      set {
        tcpOptionsScpsBindingId_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsBindingLen" field.</summary>
    public const int TcpOptionsScpsBindingLenFieldNumber = 104;
    private uint tcpOptionsScpsBindingLen_;
    /// <summary>
    /// Extended Capability Length ('tcp_options_scps_binding_tcp_options_scps_binding_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsScpsBindingLen {
      get { return tcpOptionsScpsBindingLen_; }
      set {
        tcpOptionsScpsBindingLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSnackOffset" field.</summary>
    public const int TcpOptionsSnackOffsetFieldNumber = 105;
    private uint tcpOptionsSnackOffset_;
    /// <summary>
    /// TCP SNACK Offset ('tcp_tcp_options_snack_offset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSnackOffset {
      get { return tcpOptionsSnackOffset_; }
      set {
        tcpOptionsSnackOffset_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSnackSize" field.</summary>
    public const int TcpOptionsSnackSizeFieldNumber = 106;
    private uint tcpOptionsSnackSize_;
    /// <summary>
    /// TCP SNACK Size ('tcp_tcp_options_snack_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSnackSize {
      get { return tcpOptionsSnackSize_; }
      set {
        tcpOptionsSnackSize_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSnackLe" field.</summary>
    public const int TcpOptionsSnackLeFieldNumber = 107;
    private uint tcpOptionsSnackLe_;
    /// <summary>
    /// TCP SNACK Left Edge ('tcp_tcp_options_snack_le')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSnackLe {
      get { return tcpOptionsSnackLe_; }
      set {
        tcpOptionsSnackLe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsSnackRe" field.</summary>
    public const int TcpOptionsSnackReFieldNumber = 108;
    private uint tcpOptionsSnackRe_;
    /// <summary>
    /// TCP SNACK Right Edge ('tcp_tcp_options_snack_re')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsSnackRe {
      get { return tcpOptionsSnackRe_; }
      set {
        tcpOptionsSnackRe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsBets" field.</summary>
    public const int TcpOptionsScpsflagsBetsFieldNumber = 109;
    private bool tcpOptionsScpsflagsBets_;
    /// <summary>
    /// Partial Reliability Capable (BETS) ('tcp_tcp_options_scpsflags_bets')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsScpsflagsBets {
      get { return tcpOptionsScpsflagsBets_; }
      set {
        tcpOptionsScpsflagsBets_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsSnack1" field.</summary>
    public const int TcpOptionsScpsflagsSnack1FieldNumber = 110;
    private bool tcpOptionsScpsflagsSnack1_;
    /// <summary>
    /// Short Form SNACK Capable (SNACK1) ('tcp_tcp_options_scpsflags_snack1')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsScpsflagsSnack1 {
      get { return tcpOptionsScpsflagsSnack1_; }
      set {
        tcpOptionsScpsflagsSnack1_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsSnack2" field.</summary>
    public const int TcpOptionsScpsflagsSnack2FieldNumber = 111;
    private bool tcpOptionsScpsflagsSnack2_;
    /// <summary>
    /// Long Form SNACK Capable (SNACK2) ('tcp_tcp_options_scpsflags_snack2')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsScpsflagsSnack2 {
      get { return tcpOptionsScpsflagsSnack2_; }
      set {
        tcpOptionsScpsflagsSnack2_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsCompress" field.</summary>
    public const int TcpOptionsScpsflagsCompressFieldNumber = 112;
    private bool tcpOptionsScpsflagsCompress_;
    /// <summary>
    /// Lossless Header Compression (COMP) ('tcp_tcp_options_scpsflags_compress')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsScpsflagsCompress {
      get { return tcpOptionsScpsflagsCompress_; }
      set {
        tcpOptionsScpsflagsCompress_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsNlts" field.</summary>
    public const int TcpOptionsScpsflagsNltsFieldNumber = 113;
    private bool tcpOptionsScpsflagsNlts_;
    /// <summary>
    /// Network Layer Timestamp (NLTS) ('tcp_tcp_options_scpsflags_nlts')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsScpsflagsNlts {
      get { return tcpOptionsScpsflagsNlts_; }
      set {
        tcpOptionsScpsflagsNlts_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsflagsReserved" field.</summary>
    public const int TcpOptionsScpsflagsReservedFieldNumber = 114;
    private uint tcpOptionsScpsflagsReserved_;
    /// <summary>
    /// Reserved ('tcp_tcp_options_scpsflags_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsScpsflagsReserved {
      get { return tcpOptionsScpsflagsReserved_; }
      set {
        tcpOptionsScpsflagsReserved_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsBinding" field.</summary>
    public const int TcpOptionsScpsBindingFieldNumber = 115;
    private uint tcpOptionsScpsBinding_;
    /// <summary>
    /// Connection ID ('tcp_tcp_options_scps_binding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsScpsBinding {
      get { return tcpOptionsScpsBinding_; }
      set {
        tcpOptionsScpsBinding_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsUserToGranularity" field.</summary>
    public const int TcpOptionsUserToGranularityFieldNumber = 116;
    private bool tcpOptionsUserToGranularity_;
    /// <summary>
    /// Granularity ('tcp_options_tcp_options_user_to_granularity')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsUserToGranularity {
      get { return tcpOptionsUserToGranularity_; }
      set {
        tcpOptionsUserToGranularity_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsUserToVal" field.</summary>
    public const int TcpOptionsUserToValFieldNumber = 117;
    private uint tcpOptionsUserToVal_;
    /// <summary>
    /// User Timeout ('tcp_options_tcp_options_user_to_val')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsUserToVal {
      get { return tcpOptionsUserToVal_; }
      set {
        tcpOptionsUserToVal_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeType1" field.</summary>
    public const int TcpOptionsRvbdProbeType1FieldNumber = 118;
    private uint tcpOptionsRvbdProbeType1_;
    /// <summary>
    /// Type ('tcp_tcp_options_rvbd_probe_type1')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeType1 {
      get { return tcpOptionsRvbdProbeType1_; }
      set {
        tcpOptionsRvbdProbeType1_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeType2" field.</summary>
    public const int TcpOptionsRvbdProbeType2FieldNumber = 119;
    private uint tcpOptionsRvbdProbeType2_;
    /// <summary>
    /// Type ('tcp_tcp_options_rvbd_probe_type2')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeType2 {
      get { return tcpOptionsRvbdProbeType2_; }
      set {
        tcpOptionsRvbdProbeType2_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeVersion" field.</summary>
    public const int TcpOptionsRvbdProbeVersionFieldNumber = 120;
    private uint tcpOptionsRvbdProbeVersion_;
    /// <summary>
    /// Version ('tcp_tcp_options_rvbd_probe_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeVersion {
      get { return tcpOptionsRvbdProbeVersion_; }
      set {
        tcpOptionsRvbdProbeVersion_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeVersionRaw" field.</summary>
    public const int TcpOptionsRvbdProbeVersionRawFieldNumber = 121;
    private uint tcpOptionsRvbdProbeVersionRaw_;
    /// <summary>
    /// Version ('tcp_tcp_options_rvbd_probe_version_raw')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeVersionRaw {
      get { return tcpOptionsRvbdProbeVersionRaw_; }
      set {
        tcpOptionsRvbdProbeVersionRaw_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeLen" field.</summary>
    public const int TcpOptionsRvbdProbeLenFieldNumber = 122;
    private uint tcpOptionsRvbdProbeLen_;
    /// <summary>
    /// Length ('tcp_tcp_options_rvbd_probe_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeLen {
      get { return tcpOptionsRvbdProbeLen_; }
      set {
        tcpOptionsRvbdProbeLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeProber" field.</summary>
    public const int TcpOptionsRvbdProbeProberFieldNumber = 123;
    private pb::ByteString tcpOptionsRvbdProbeProber_ = pb::ByteString.Empty;
    /// <summary>
    /// CSH IP ('tcp_tcp_options_rvbd_probe_prober')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsRvbdProbeProber {
      get { return tcpOptionsRvbdProbeProber_; }
      set {
        tcpOptionsRvbdProbeProber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeProxyIp" field.</summary>
    public const int TcpOptionsRvbdProbeProxyIpFieldNumber = 124;
    private pb::ByteString tcpOptionsRvbdProbeProxyIp_ = pb::ByteString.Empty;
    /// <summary>
    /// SSH IP ('tcp_tcp_options_rvbd_probe_proxy_ip')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsRvbdProbeProxyIp {
      get { return tcpOptionsRvbdProbeProxyIp_; }
      set {
        tcpOptionsRvbdProbeProxyIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeProxyPort" field.</summary>
    public const int TcpOptionsRvbdProbeProxyPortFieldNumber = 125;
    private uint tcpOptionsRvbdProbeProxyPort_;
    /// <summary>
    /// SSH Port ('tcp_tcp_options_rvbd_probe_proxy_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeProxyPort {
      get { return tcpOptionsRvbdProbeProxyPort_; }
      set {
        tcpOptionsRvbdProbeProxyPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeAppliVer" field.</summary>
    public const int TcpOptionsRvbdProbeAppliVerFieldNumber = 126;
    private uint tcpOptionsRvbdProbeAppliVer_;
    /// <summary>
    /// Application Version ('tcp_tcp_options_rvbd_probe_appli_ver')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeAppliVer {
      get { return tcpOptionsRvbdProbeAppliVer_; }
      set {
        tcpOptionsRvbdProbeAppliVer_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeClientIp" field.</summary>
    public const int TcpOptionsRvbdProbeClientIpFieldNumber = 127;
    private pb::ByteString tcpOptionsRvbdProbeClientIp_ = pb::ByteString.Empty;
    /// <summary>
    /// Client IP ('tcp_tcp_options_rvbd_probe_client_ip')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsRvbdProbeClientIp {
      get { return tcpOptionsRvbdProbeClientIp_; }
      set {
        tcpOptionsRvbdProbeClientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeStoreid" field.</summary>
    public const int TcpOptionsRvbdProbeStoreidFieldNumber = 128;
    private uint tcpOptionsRvbdProbeStoreid_;
    /// <summary>
    /// CFE Store ID ('tcp_tcp_options_rvbd_probe_storeid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeStoreid {
      get { return tcpOptionsRvbdProbeStoreid_; }
      set {
        tcpOptionsRvbdProbeStoreid_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlags" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsFieldNumber = 129;
    private uint tcpOptionsRvbdProbeFlags_;
    /// <summary>
    /// Probe Flags ('tcp_tcp_options_rvbd_probe_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeFlags {
      get { return tcpOptionsRvbdProbeFlags_; }
      set {
        tcpOptionsRvbdProbeFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlagsNotcfe" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsNotcfeFieldNumber = 130;
    private bool tcpOptionsRvbdProbeFlagsNotcfe_;
    /// <summary>
    /// Not CFE ('tcp_options_rvbd_probe_flags_tcp_options_rvbd_probe_flags_notcfe')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdProbeFlagsNotcfe {
      get { return tcpOptionsRvbdProbeFlagsNotcfe_; }
      set {
        tcpOptionsRvbdProbeFlagsNotcfe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlagsLast" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsLastFieldNumber = 131;
    private bool tcpOptionsRvbdProbeFlagsLast_;
    /// <summary>
    /// Last Notify ('tcp_options_rvbd_probe_flags_tcp_options_rvbd_probe_flags_last')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdProbeFlagsLast {
      get { return tcpOptionsRvbdProbeFlagsLast_; }
      set {
        tcpOptionsRvbdProbeFlagsLast_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlagsProbe" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsProbeFieldNumber = 132;
    private bool tcpOptionsRvbdProbeFlagsProbe_;
    /// <summary>
    /// Disable Probe Cache on CSH ('tcp_options_rvbd_probe_flags_tcp_options_rvbd_probe_flags_probe')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdProbeFlagsProbe {
      get { return tcpOptionsRvbdProbeFlagsProbe_; }
      set {
        tcpOptionsRvbdProbeFlagsProbe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlagsSsl" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsSslFieldNumber = 133;
    private bool tcpOptionsRvbdProbeFlagsSsl_;
    /// <summary>
    /// SSL Enabled ('tcp_options_rvbd_probe_flags_tcp_options_rvbd_probe_flags_ssl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdProbeFlagsSsl {
      get { return tcpOptionsRvbdProbeFlagsSsl_; }
      set {
        tcpOptionsRvbdProbeFlagsSsl_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeFlagsServer" field.</summary>
    public const int TcpOptionsRvbdProbeFlagsServerFieldNumber = 134;
    private bool tcpOptionsRvbdProbeFlagsServer_;
    /// <summary>
    /// SSH outer to server established ('tcp_options_rvbd_probe_flags_tcp_options_rvbd_probe_flags_server')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdProbeFlagsServer {
      get { return tcpOptionsRvbdProbeFlagsServer_; }
      set {
        tcpOptionsRvbdProbeFlagsServer_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlags" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsFieldNumber = 135;
    private uint tcpOptionsRvbdTrpyFlags_;
    /// <summary>
    /// Transparency Options ('tcp_tcp_options_rvbd_trpy_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdTrpyFlags {
      get { return tcpOptionsRvbdTrpyFlags_; }
      set {
        tcpOptionsRvbdTrpyFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsFwRstProbe" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsFwRstProbeFieldNumber = 136;
    private bool tcpOptionsRvbdTrpyFlagsFwRstProbe_;
    /// <summary>
    /// Enable FW traversal feature ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_fw_rst_probe')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsFwRstProbe {
      get { return tcpOptionsRvbdTrpyFlagsFwRstProbe_; }
      set {
        tcpOptionsRvbdTrpyFlagsFwRstProbe_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsFwRstInner" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsFwRstInnerFieldNumber = 137;
    private bool tcpOptionsRvbdTrpyFlagsFwRstInner_;
    /// <summary>
    /// Enable Inner FW feature on All FWs ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_fw_rst_inner')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsFwRstInner {
      get { return tcpOptionsRvbdTrpyFlagsFwRstInner_; }
      set {
        tcpOptionsRvbdTrpyFlagsFwRstInner_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsFwRst" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsFwRstFieldNumber = 138;
    private bool tcpOptionsRvbdTrpyFlagsFwRst_;
    /// <summary>
    /// Enable Transparency FW feature on All FWs ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_fw_rst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsFwRst {
      get { return tcpOptionsRvbdTrpyFlagsFwRst_; }
      set {
        tcpOptionsRvbdTrpyFlagsFwRst_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsChksum" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsChksumFieldNumber = 139;
    private bool tcpOptionsRvbdTrpyFlagsChksum_;
    /// <summary>
    /// Reserved ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_chksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsChksum {
      get { return tcpOptionsRvbdTrpyFlagsChksum_; }
      set {
        tcpOptionsRvbdTrpyFlagsChksum_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsOob" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsOobFieldNumber = 140;
    private bool tcpOptionsRvbdTrpyFlagsOob_;
    /// <summary>
    /// Out of band connection ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_oob')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsOob {
      get { return tcpOptionsRvbdTrpyFlagsOob_; }
      set {
        tcpOptionsRvbdTrpyFlagsOob_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyFlagsMode" field.</summary>
    public const int TcpOptionsRvbdTrpyFlagsModeFieldNumber = 141;
    private bool tcpOptionsRvbdTrpyFlagsMode_;
    /// <summary>
    /// Transparency Mode ('tcp_options_rvbd_trpy_flags_tcp_options_rvbd_trpy_flags_mode')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOptionsRvbdTrpyFlagsMode {
      get { return tcpOptionsRvbdTrpyFlagsMode_; }
      set {
        tcpOptionsRvbdTrpyFlagsMode_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpySrcIp" field.</summary>
    public const int TcpOptionsRvbdTrpySrcIpFieldNumber = 142;
    private pb::ByteString tcpOptionsRvbdTrpySrcIp_ = pb::ByteString.Empty;
    /// <summary>
    /// Src SH IP Addr ('tcp_tcp_options_rvbd_trpy_src_ip')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsRvbdTrpySrcIp {
      get { return tcpOptionsRvbdTrpySrcIp_; }
      set {
        tcpOptionsRvbdTrpySrcIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyDstIp" field.</summary>
    public const int TcpOptionsRvbdTrpyDstIpFieldNumber = 143;
    private pb::ByteString tcpOptionsRvbdTrpyDstIp_ = pb::ByteString.Empty;
    /// <summary>
    /// Dst SH IP Addr ('tcp_tcp_options_rvbd_trpy_dst_ip')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsRvbdTrpyDstIp {
      get { return tcpOptionsRvbdTrpyDstIp_; }
      set {
        tcpOptionsRvbdTrpyDstIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpySrcPort" field.</summary>
    public const int TcpOptionsRvbdTrpySrcPortFieldNumber = 144;
    private uint tcpOptionsRvbdTrpySrcPort_;
    /// <summary>
    /// Src SH Inner Port ('tcp_tcp_options_rvbd_trpy_src_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdTrpySrcPort {
      get { return tcpOptionsRvbdTrpySrcPort_; }
      set {
        tcpOptionsRvbdTrpySrcPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyDstPort" field.</summary>
    public const int TcpOptionsRvbdTrpyDstPortFieldNumber = 145;
    private uint tcpOptionsRvbdTrpyDstPort_;
    /// <summary>
    /// Dst SH Inner Port ('tcp_tcp_options_rvbd_trpy_dst_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdTrpyDstPort {
      get { return tcpOptionsRvbdTrpyDstPort_; }
      set {
        tcpOptionsRvbdTrpyDstPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdTrpyClientPort" field.</summary>
    public const int TcpOptionsRvbdTrpyClientPortFieldNumber = 146;
    private uint tcpOptionsRvbdTrpyClientPort_;
    /// <summary>
    /// Out of band connection Client Port ('tcp_tcp_options_rvbd_trpy_client_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdTrpyClientPort {
      get { return tcpOptionsRvbdTrpyClientPort_; }
      set {
        tcpOptionsRvbdTrpyClientPort_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsTfoRequest" field.</summary>
    public const int TcpOptionsTfoRequestFieldNumber = 147;
    private int tcpOptionsTfoRequest_;
    /// <summary>
    /// Fast Open Cookie Request ('tcp_tcp_options_tfo_request')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TcpOptionsTfoRequest {
      get { return tcpOptionsTfoRequest_; }
      set {
        tcpOptionsTfoRequest_ = value;
      }
    }

    /// <summary>Field number for the "TcpOptionsTfoCookie" field.</summary>
    public const int TcpOptionsTfoCookieFieldNumber = 148;
    private pb::ByteString tcpOptionsTfoCookie_ = pb::ByteString.Empty;
    /// <summary>
    /// Fast Open Cookie ('tcp_tcp_options_tfo_cookie')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsTfoCookie {
      get { return tcpOptionsTfoCookie_; }
      set {
        tcpOptionsTfoCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpPduTime" field.</summary>
    public const int TcpPduTimeFieldNumber = 149;
    private long tcpPduTime_;
    /// <summary>
    /// Time until the last segment of this PDU ('tcp_tcp_pdu_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpPduTime {
      get { return tcpPduTime_; }
      set {
        tcpPduTime_ = value;
      }
    }

    /// <summary>Field number for the "TcpPduSize" field.</summary>
    public const int TcpPduSizeFieldNumber = 150;
    private uint tcpPduSize_;
    /// <summary>
    /// PDU Size ('tcp_tcp_pdu_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpPduSize {
      get { return tcpPduSize_; }
      set {
        tcpPduSize_ = value;
      }
    }

    /// <summary>Field number for the "TcpPduLastFrame" field.</summary>
    public const int TcpPduLastFrameFieldNumber = 151;
    private long tcpPduLastFrame_;
    /// <summary>
    /// Last frame of this PDU ('tcp_tcp_pdu_last_frame')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpPduLastFrame {
      get { return tcpPduLastFrame_; }
      set {
        tcpPduLastFrame_ = value;
      }
    }

    /// <summary>Field number for the "TcpTimeRelative" field.</summary>
    public const int TcpTimeRelativeFieldNumber = 152;
    private long tcpTimeRelative_;
    /// <summary>
    /// Time since first frame in this TCP stream ('tcp_tcp_time_relative')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpTimeRelative {
      get { return tcpTimeRelative_; }
      set {
        tcpTimeRelative_ = value;
      }
    }

    /// <summary>Field number for the "TcpTimeDelta" field.</summary>
    public const int TcpTimeDeltaFieldNumber = 153;
    private long tcpTimeDelta_;
    /// <summary>
    /// Time since previous frame in this TCP stream ('tcp_tcp_time_delta')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpTimeDelta {
      get { return tcpTimeDelta_; }
      set {
        tcpTimeDelta_ = value;
      }
    }

    /// <summary>Field number for the "TcpProcSrcuid" field.</summary>
    public const int TcpProcSrcuidFieldNumber = 154;
    private uint tcpProcSrcuid_;
    /// <summary>
    /// Source process user ID ('tcp_tcp_proc_srcuid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpProcSrcuid {
      get { return tcpProcSrcuid_; }
      set {
        tcpProcSrcuid_ = value;
      }
    }

    /// <summary>Field number for the "TcpProcSrcpid" field.</summary>
    public const int TcpProcSrcpidFieldNumber = 155;
    private uint tcpProcSrcpid_;
    /// <summary>
    /// Source process ID ('tcp_tcp_proc_srcpid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpProcSrcpid {
      get { return tcpProcSrcpid_; }
      set {
        tcpProcSrcpid_ = value;
      }
    }

    /// <summary>Field number for the "TcpProcSrcuname" field.</summary>
    public const int TcpProcSrcunameFieldNumber = 156;
    private string tcpProcSrcuname_ = "";
    /// <summary>
    /// Source process user name ('tcp_tcp_proc_srcuname')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpProcSrcuname {
      get { return tcpProcSrcuname_; }
      set {
        tcpProcSrcuname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpProcSrccmd" field.</summary>
    public const int TcpProcSrccmdFieldNumber = 157;
    private string tcpProcSrccmd_ = "";
    /// <summary>
    /// Source process name ('tcp_tcp_proc_srccmd')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpProcSrccmd {
      get { return tcpProcSrccmd_; }
      set {
        tcpProcSrccmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpProcDstuid" field.</summary>
    public const int TcpProcDstuidFieldNumber = 158;
    private uint tcpProcDstuid_;
    /// <summary>
    /// Destination process user ID ('tcp_tcp_proc_dstuid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpProcDstuid {
      get { return tcpProcDstuid_; }
      set {
        tcpProcDstuid_ = value;
      }
    }

    /// <summary>Field number for the "TcpProcDstpid" field.</summary>
    public const int TcpProcDstpidFieldNumber = 159;
    private uint tcpProcDstpid_;
    /// <summary>
    /// Destination process ID ('tcp_tcp_proc_dstpid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpProcDstpid {
      get { return tcpProcDstpid_; }
      set {
        tcpProcDstpid_ = value;
      }
    }

    /// <summary>Field number for the "TcpProcDstuname" field.</summary>
    public const int TcpProcDstunameFieldNumber = 160;
    private string tcpProcDstuname_ = "";
    /// <summary>
    /// Destination process user name ('tcp_tcp_proc_dstuname')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpProcDstuname {
      get { return tcpProcDstuname_; }
      set {
        tcpProcDstuname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpProcDstcmd" field.</summary>
    public const int TcpProcDstcmdFieldNumber = 161;
    private string tcpProcDstcmd_ = "";
    /// <summary>
    /// Destination process name ('tcp_tcp_proc_dstcmd')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpProcDstcmd {
      get { return tcpProcDstcmd_; }
      set {
        tcpProcDstcmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpSegmentData" field.</summary>
    public const int TcpSegmentDataFieldNumber = 162;
    private pb::ByteString tcpSegmentData_ = pb::ByteString.Empty;
    /// <summary>
    /// TCP segment data ('tcp_tcp_segment_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpSegmentData {
      get { return tcpSegmentData_; }
      set {
        tcpSegmentData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpPayload" field.</summary>
    public const int TcpPayloadFieldNumber = 163;
    private pb::ByteString tcpPayload_ = pb::ByteString.Empty;
    /// <summary>
    /// TCP payload ('tcp_tcp_payload')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpPayload {
      get { return tcpPayload_; }
      set {
        tcpPayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsScpsBindingData" field.</summary>
    public const int TcpOptionsScpsBindingDataFieldNumber = 164;
    private pb::ByteString tcpOptionsScpsBindingData_ = pb::ByteString.Empty;
    /// <summary>
    /// Binding Space Data ('tcp_options_scps_binding_tcp_options_scps_binding_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpOptionsScpsBindingData {
      get { return tcpOptionsScpsBindingData_; }
      set {
        tcpOptionsScpsBindingData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TcpOptionsRvbdProbeReserved" field.</summary>
    public const int TcpOptionsRvbdProbeReservedFieldNumber = 165;
    private uint tcpOptionsRvbdProbeReserved_;
    /// <summary>
    /// Reserved ('tcp_tcp_options_rvbd_probe_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpOptionsRvbdProbeReserved {
      get { return tcpOptionsRvbdProbeReserved_; }
      set {
        tcpOptionsRvbdProbeReserved_ = value;
      }
    }

    /// <summary>Field number for the "TcpFinRetransmission" field.</summary>
    public const int TcpFinRetransmissionFieldNumber = 166;
    private long tcpFinRetransmission_;
    /// <summary>
    /// Retransmission of FIN from frame ('tcp_tcp_fin_retransmission')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TcpFinRetransmission {
      get { return tcpFinRetransmission_; }
      set {
        tcpFinRetransmission_ = value;
      }
    }

    /// <summary>Field number for the "TcpResetCause" field.</summary>
    public const int TcpResetCauseFieldNumber = 167;
    private string tcpResetCause_ = "";
    /// <summary>
    /// Reset cause ('tcp_tcp_reset_cause')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TcpResetCause {
      get { return tcpResetCause_; }
      set {
        tcpResetCause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tcp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tcp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TcpSrcport != other.TcpSrcport) return false;
      if (TcpDstport != other.TcpDstport) return false;
      if (TcpPort != other.TcpPort) return false;
      if (TcpStream != other.TcpStream) return false;
      if (TcpSeq != other.TcpSeq) return false;
      if (TcpNxtseq != other.TcpNxtseq) return false;
      if (TcpAck != other.TcpAck) return false;
      if (TcpHdrLen != other.TcpHdrLen) return false;
      if (TcpFlags != other.TcpFlags) return false;
      if (TcpFlagsRes != other.TcpFlagsRes) return false;
      if (TcpFlagsNs != other.TcpFlagsNs) return false;
      if (TcpFlagsCwr != other.TcpFlagsCwr) return false;
      if (TcpFlagsEcn != other.TcpFlagsEcn) return false;
      if (TcpFlagsUrg != other.TcpFlagsUrg) return false;
      if (TcpFlagsAck != other.TcpFlagsAck) return false;
      if (TcpFlagsPush != other.TcpFlagsPush) return false;
      if (TcpFlagsReset != other.TcpFlagsReset) return false;
      if (TcpFlagsSyn != other.TcpFlagsSyn) return false;
      if (TcpFlagsFin != other.TcpFlagsFin) return false;
      if (TcpFlagsStr != other.TcpFlagsStr) return false;
      if (TcpWindowSizeValue != other.TcpWindowSizeValue) return false;
      if (TcpWindowSize != other.TcpWindowSize) return false;
      if (TcpWindowSizeScalefactor != other.TcpWindowSizeScalefactor) return false;
      if (TcpChecksum != other.TcpChecksum) return false;
      if (TcpChecksumStatus != other.TcpChecksumStatus) return false;
      if (TcpChecksumCalculated != other.TcpChecksumCalculated) return false;
      if (TcpAnalysis != other.TcpAnalysis) return false;
      if (TcpAnalysisFlags != other.TcpAnalysisFlags) return false;
      if (TcpAnalysisDuplicateAck != other.TcpAnalysisDuplicateAck) return false;
      if (TcpAnalysisDuplicateAckNum != other.TcpAnalysisDuplicateAckNum) return false;
      if (TcpAnalysisDuplicateAckFrame != other.TcpAnalysisDuplicateAckFrame) return false;
      if (TcpContinuationTo != other.TcpContinuationTo) return false;
      if (TcpLen != other.TcpLen) return false;
      if (TcpAnalysisAcksFrame != other.TcpAnalysisAcksFrame) return false;
      if (TcpAnalysisBytesInFlight != other.TcpAnalysisBytesInFlight) return false;
      if (TcpAnalysisPushBytesSent != other.TcpAnalysisPushBytesSent) return false;
      if (TcpAnalysisAckRtt != other.TcpAnalysisAckRtt) return false;
      if (TcpAnalysisInitialRtt != other.TcpAnalysisInitialRtt) return false;
      if (TcpAnalysisRto != other.TcpAnalysisRto) return false;
      if (TcpAnalysisRtoFrame != other.TcpAnalysisRtoFrame) return false;
      if (TcpUrgentPointer != other.TcpUrgentPointer) return false;
      if (TcpSegmentOverlap != other.TcpSegmentOverlap) return false;
      if (TcpSegmentOverlapConflict != other.TcpSegmentOverlapConflict) return false;
      if (TcpSegmentMultipletails != other.TcpSegmentMultipletails) return false;
      if (TcpSegmentToolongfragment != other.TcpSegmentToolongfragment) return false;
      if (TcpSegmentError != other.TcpSegmentError) return false;
      if (TcpSegmentCount != other.TcpSegmentCount) return false;
      if (TcpSegment != other.TcpSegment) return false;
      if (TcpSegments != other.TcpSegments) return false;
      if (TcpReassembledIn != other.TcpReassembledIn) return false;
      if (TcpReassembledLength != other.TcpReassembledLength) return false;
      if (TcpReassembledData != other.TcpReassembledData) return false;
      if (TcpOptionKind != other.TcpOptionKind) return false;
      if (TcpOptionLen != other.TcpOptionLen) return false;
      if (TcpOptions != other.TcpOptions) return false;
      if (TcpOptionsMssVal != other.TcpOptionsMssVal) return false;
      if (TcpOptionsWscaleShift != other.TcpOptionsWscaleShift) return false;
      if (TcpOptionsWscaleMultiplier != other.TcpOptionsWscaleMultiplier) return false;
      if (TcpOptionsExperimentalData != other.TcpOptionsExperimentalData) return false;
      if (TcpOptionsExperimentalMagicNumber != other.TcpOptionsExperimentalMagicNumber) return false;
      if (TcpOptionsSackLe != other.TcpOptionsSackLe) return false;
      if (TcpOptionsSackRe != other.TcpOptionsSackRe) return false;
      if (TcpOptionsSackCount != other.TcpOptionsSackCount) return false;
      if (TcpOptionsEchoValue != other.TcpOptionsEchoValue) return false;
      if (TcpOptionsTimestampTsval != other.TcpOptionsTimestampTsval) return false;
      if (TcpOptionsTimestampTsecr != other.TcpOptionsTimestampTsecr) return false;
      if (TcpOptionsMptcpSubtype != other.TcpOptionsMptcpSubtype) return false;
      if (TcpOptionsMptcpVersion != other.TcpOptionsMptcpVersion) return false;
      if (TcpOptionsMptcpReserved != other.TcpOptionsMptcpReserved) return false;
      if (TcpOptionsMptcpFlags != other.TcpOptionsMptcpFlags) return false;
      if (TcpOptionsMptcpBackupFlag != other.TcpOptionsMptcpBackupFlag) return false;
      if (TcpOptionsMptcpChecksumreqFlags != other.TcpOptionsMptcpChecksumreqFlags) return false;
      if (TcpOptionsMptcpExtensibilityFlag != other.TcpOptionsMptcpExtensibilityFlag) return false;
      if (TcpOptionsMptcpSha1Flag != other.TcpOptionsMptcpSha1Flag) return false;
      if (TcpOptionsMptcpDatafinFlag != other.TcpOptionsMptcpDatafinFlag) return false;
      if (TcpOptionsMptcpDseqn8Flag != other.TcpOptionsMptcpDseqn8Flag) return false;
      if (TcpOptionsMptcpDseqnpresentFlag != other.TcpOptionsMptcpDseqnpresentFlag) return false;
      if (TcpOptionsMptcpDataack8Flag != other.TcpOptionsMptcpDataack8Flag) return false;
      if (TcpOptionsMptcpDataackpresentFlag != other.TcpOptionsMptcpDataackpresentFlag) return false;
      if (TcpOptionsMptcpReservedFlag != other.TcpOptionsMptcpReservedFlag) return false;
      if (TcpOptionsMptcpAddrid != other.TcpOptionsMptcpAddrid) return false;
      if (TcpOptionsMptcpSendkey != other.TcpOptionsMptcpSendkey) return false;
      if (TcpOptionsMptcpRecvkey != other.TcpOptionsMptcpRecvkey) return false;
      if (TcpOptionsMptcpRecvtok != other.TcpOptionsMptcpRecvtok) return false;
      if (TcpOptionsMptcpSendrand != other.TcpOptionsMptcpSendrand) return false;
      if (TcpOptionsMptcpSendtrunchmac != other.TcpOptionsMptcpSendtrunchmac) return false;
      if (TcpOptionsMptcpSendhmac != other.TcpOptionsMptcpSendhmac) return false;
      if (TcpOptionsMptcpAddaddrtrunchmac != other.TcpOptionsMptcpAddaddrtrunchmac) return false;
      if (TcpOptionsMptcpRawdataack != other.TcpOptionsMptcpRawdataack) return false;
      if (TcpOptionsMptcpRawdataseqno != other.TcpOptionsMptcpRawdataseqno) return false;
      if (TcpOptionsMptcpSubflowseqno != other.TcpOptionsMptcpSubflowseqno) return false;
      if (TcpOptionsMptcpDatalvllen != other.TcpOptionsMptcpDatalvllen) return false;
      if (TcpOptionsMptcpChecksum != other.TcpOptionsMptcpChecksum) return false;
      if (TcpOptionsMptcpIpver != other.TcpOptionsMptcpIpver) return false;
      if (TcpOptionsMptcpIpv4 != other.TcpOptionsMptcpIpv4) return false;
      if (TcpOptionsMptcpIpv6 != other.TcpOptionsMptcpIpv6) return false;
      if (TcpOptionsMptcpPort != other.TcpOptionsMptcpPort) return false;
      if (TcpOptionsCcValue != other.TcpOptionsCcValue) return false;
      if (TcpOptionsMd5Digest != other.TcpOptionsMd5Digest) return false;
      if (TcpOptionsQsRate != other.TcpOptionsQsRate) return false;
      if (TcpOptionsQsTtlDiff != other.TcpOptionsQsTtlDiff) return false;
      if (TcpOptionsScpsVector != other.TcpOptionsScpsVector) return false;
      if (TcpOptionsScpsBindingId != other.TcpOptionsScpsBindingId) return false;
      if (TcpOptionsScpsBindingLen != other.TcpOptionsScpsBindingLen) return false;
      if (TcpOptionsSnackOffset != other.TcpOptionsSnackOffset) return false;
      if (TcpOptionsSnackSize != other.TcpOptionsSnackSize) return false;
      if (TcpOptionsSnackLe != other.TcpOptionsSnackLe) return false;
      if (TcpOptionsSnackRe != other.TcpOptionsSnackRe) return false;
      if (TcpOptionsScpsflagsBets != other.TcpOptionsScpsflagsBets) return false;
      if (TcpOptionsScpsflagsSnack1 != other.TcpOptionsScpsflagsSnack1) return false;
      if (TcpOptionsScpsflagsSnack2 != other.TcpOptionsScpsflagsSnack2) return false;
      if (TcpOptionsScpsflagsCompress != other.TcpOptionsScpsflagsCompress) return false;
      if (TcpOptionsScpsflagsNlts != other.TcpOptionsScpsflagsNlts) return false;
      if (TcpOptionsScpsflagsReserved != other.TcpOptionsScpsflagsReserved) return false;
      if (TcpOptionsScpsBinding != other.TcpOptionsScpsBinding) return false;
      if (TcpOptionsUserToGranularity != other.TcpOptionsUserToGranularity) return false;
      if (TcpOptionsUserToVal != other.TcpOptionsUserToVal) return false;
      if (TcpOptionsRvbdProbeType1 != other.TcpOptionsRvbdProbeType1) return false;
      if (TcpOptionsRvbdProbeType2 != other.TcpOptionsRvbdProbeType2) return false;
      if (TcpOptionsRvbdProbeVersion != other.TcpOptionsRvbdProbeVersion) return false;
      if (TcpOptionsRvbdProbeVersionRaw != other.TcpOptionsRvbdProbeVersionRaw) return false;
      if (TcpOptionsRvbdProbeLen != other.TcpOptionsRvbdProbeLen) return false;
      if (TcpOptionsRvbdProbeProber != other.TcpOptionsRvbdProbeProber) return false;
      if (TcpOptionsRvbdProbeProxyIp != other.TcpOptionsRvbdProbeProxyIp) return false;
      if (TcpOptionsRvbdProbeProxyPort != other.TcpOptionsRvbdProbeProxyPort) return false;
      if (TcpOptionsRvbdProbeAppliVer != other.TcpOptionsRvbdProbeAppliVer) return false;
      if (TcpOptionsRvbdProbeClientIp != other.TcpOptionsRvbdProbeClientIp) return false;
      if (TcpOptionsRvbdProbeStoreid != other.TcpOptionsRvbdProbeStoreid) return false;
      if (TcpOptionsRvbdProbeFlags != other.TcpOptionsRvbdProbeFlags) return false;
      if (TcpOptionsRvbdProbeFlagsNotcfe != other.TcpOptionsRvbdProbeFlagsNotcfe) return false;
      if (TcpOptionsRvbdProbeFlagsLast != other.TcpOptionsRvbdProbeFlagsLast) return false;
      if (TcpOptionsRvbdProbeFlagsProbe != other.TcpOptionsRvbdProbeFlagsProbe) return false;
      if (TcpOptionsRvbdProbeFlagsSsl != other.TcpOptionsRvbdProbeFlagsSsl) return false;
      if (TcpOptionsRvbdProbeFlagsServer != other.TcpOptionsRvbdProbeFlagsServer) return false;
      if (TcpOptionsRvbdTrpyFlags != other.TcpOptionsRvbdTrpyFlags) return false;
      if (TcpOptionsRvbdTrpyFlagsFwRstProbe != other.TcpOptionsRvbdTrpyFlagsFwRstProbe) return false;
      if (TcpOptionsRvbdTrpyFlagsFwRstInner != other.TcpOptionsRvbdTrpyFlagsFwRstInner) return false;
      if (TcpOptionsRvbdTrpyFlagsFwRst != other.TcpOptionsRvbdTrpyFlagsFwRst) return false;
      if (TcpOptionsRvbdTrpyFlagsChksum != other.TcpOptionsRvbdTrpyFlagsChksum) return false;
      if (TcpOptionsRvbdTrpyFlagsOob != other.TcpOptionsRvbdTrpyFlagsOob) return false;
      if (TcpOptionsRvbdTrpyFlagsMode != other.TcpOptionsRvbdTrpyFlagsMode) return false;
      if (TcpOptionsRvbdTrpySrcIp != other.TcpOptionsRvbdTrpySrcIp) return false;
      if (TcpOptionsRvbdTrpyDstIp != other.TcpOptionsRvbdTrpyDstIp) return false;
      if (TcpOptionsRvbdTrpySrcPort != other.TcpOptionsRvbdTrpySrcPort) return false;
      if (TcpOptionsRvbdTrpyDstPort != other.TcpOptionsRvbdTrpyDstPort) return false;
      if (TcpOptionsRvbdTrpyClientPort != other.TcpOptionsRvbdTrpyClientPort) return false;
      if (TcpOptionsTfoRequest != other.TcpOptionsTfoRequest) return false;
      if (TcpOptionsTfoCookie != other.TcpOptionsTfoCookie) return false;
      if (TcpPduTime != other.TcpPduTime) return false;
      if (TcpPduSize != other.TcpPduSize) return false;
      if (TcpPduLastFrame != other.TcpPduLastFrame) return false;
      if (TcpTimeRelative != other.TcpTimeRelative) return false;
      if (TcpTimeDelta != other.TcpTimeDelta) return false;
      if (TcpProcSrcuid != other.TcpProcSrcuid) return false;
      if (TcpProcSrcpid != other.TcpProcSrcpid) return false;
      if (TcpProcSrcuname != other.TcpProcSrcuname) return false;
      if (TcpProcSrccmd != other.TcpProcSrccmd) return false;
      if (TcpProcDstuid != other.TcpProcDstuid) return false;
      if (TcpProcDstpid != other.TcpProcDstpid) return false;
      if (TcpProcDstuname != other.TcpProcDstuname) return false;
      if (TcpProcDstcmd != other.TcpProcDstcmd) return false;
      if (TcpSegmentData != other.TcpSegmentData) return false;
      if (TcpPayload != other.TcpPayload) return false;
      if (TcpOptionsScpsBindingData != other.TcpOptionsScpsBindingData) return false;
      if (TcpOptionsRvbdProbeReserved != other.TcpOptionsRvbdProbeReserved) return false;
      if (TcpFinRetransmission != other.TcpFinRetransmission) return false;
      if (TcpResetCause != other.TcpResetCause) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TcpSrcport != 0) hash ^= TcpSrcport.GetHashCode();
      if (TcpDstport != 0) hash ^= TcpDstport.GetHashCode();
      if (TcpPort != 0) hash ^= TcpPort.GetHashCode();
      if (TcpStream != 0) hash ^= TcpStream.GetHashCode();
      if (TcpSeq != 0) hash ^= TcpSeq.GetHashCode();
      if (TcpNxtseq != 0) hash ^= TcpNxtseq.GetHashCode();
      if (TcpAck != 0) hash ^= TcpAck.GetHashCode();
      if (TcpHdrLen != 0) hash ^= TcpHdrLen.GetHashCode();
      if (TcpFlags != 0) hash ^= TcpFlags.GetHashCode();
      if (TcpFlagsRes != false) hash ^= TcpFlagsRes.GetHashCode();
      if (TcpFlagsNs != false) hash ^= TcpFlagsNs.GetHashCode();
      if (TcpFlagsCwr != false) hash ^= TcpFlagsCwr.GetHashCode();
      if (TcpFlagsEcn != false) hash ^= TcpFlagsEcn.GetHashCode();
      if (TcpFlagsUrg != false) hash ^= TcpFlagsUrg.GetHashCode();
      if (TcpFlagsAck != false) hash ^= TcpFlagsAck.GetHashCode();
      if (TcpFlagsPush != false) hash ^= TcpFlagsPush.GetHashCode();
      if (TcpFlagsReset != false) hash ^= TcpFlagsReset.GetHashCode();
      if (TcpFlagsSyn != false) hash ^= TcpFlagsSyn.GetHashCode();
      if (TcpFlagsFin != false) hash ^= TcpFlagsFin.GetHashCode();
      if (TcpFlagsStr.Length != 0) hash ^= TcpFlagsStr.GetHashCode();
      if (TcpWindowSizeValue != 0) hash ^= TcpWindowSizeValue.GetHashCode();
      if (TcpWindowSize != 0) hash ^= TcpWindowSize.GetHashCode();
      if (TcpWindowSizeScalefactor != 0) hash ^= TcpWindowSizeScalefactor.GetHashCode();
      if (TcpChecksum != 0) hash ^= TcpChecksum.GetHashCode();
      if (TcpChecksumStatus != 0) hash ^= TcpChecksumStatus.GetHashCode();
      if (TcpChecksumCalculated != 0) hash ^= TcpChecksumCalculated.GetHashCode();
      if (TcpAnalysis != 0) hash ^= TcpAnalysis.GetHashCode();
      if (TcpAnalysisFlags != 0) hash ^= TcpAnalysisFlags.GetHashCode();
      if (TcpAnalysisDuplicateAck != 0) hash ^= TcpAnalysisDuplicateAck.GetHashCode();
      if (TcpAnalysisDuplicateAckNum != 0) hash ^= TcpAnalysisDuplicateAckNum.GetHashCode();
      if (TcpAnalysisDuplicateAckFrame != 0L) hash ^= TcpAnalysisDuplicateAckFrame.GetHashCode();
      if (TcpContinuationTo != 0L) hash ^= TcpContinuationTo.GetHashCode();
      if (TcpLen != 0) hash ^= TcpLen.GetHashCode();
      if (TcpAnalysisAcksFrame != 0L) hash ^= TcpAnalysisAcksFrame.GetHashCode();
      if (TcpAnalysisBytesInFlight != 0) hash ^= TcpAnalysisBytesInFlight.GetHashCode();
      if (TcpAnalysisPushBytesSent != 0) hash ^= TcpAnalysisPushBytesSent.GetHashCode();
      if (TcpAnalysisAckRtt != 0L) hash ^= TcpAnalysisAckRtt.GetHashCode();
      if (TcpAnalysisInitialRtt != 0L) hash ^= TcpAnalysisInitialRtt.GetHashCode();
      if (TcpAnalysisRto != 0L) hash ^= TcpAnalysisRto.GetHashCode();
      if (TcpAnalysisRtoFrame != 0L) hash ^= TcpAnalysisRtoFrame.GetHashCode();
      if (TcpUrgentPointer != 0) hash ^= TcpUrgentPointer.GetHashCode();
      if (TcpSegmentOverlap != false) hash ^= TcpSegmentOverlap.GetHashCode();
      if (TcpSegmentOverlapConflict != false) hash ^= TcpSegmentOverlapConflict.GetHashCode();
      if (TcpSegmentMultipletails != false) hash ^= TcpSegmentMultipletails.GetHashCode();
      if (TcpSegmentToolongfragment != false) hash ^= TcpSegmentToolongfragment.GetHashCode();
      if (TcpSegmentError != 0L) hash ^= TcpSegmentError.GetHashCode();
      if (TcpSegmentCount != 0) hash ^= TcpSegmentCount.GetHashCode();
      if (TcpSegment != 0L) hash ^= TcpSegment.GetHashCode();
      if (TcpSegments != 0) hash ^= TcpSegments.GetHashCode();
      if (TcpReassembledIn != 0L) hash ^= TcpReassembledIn.GetHashCode();
      if (TcpReassembledLength != 0) hash ^= TcpReassembledLength.GetHashCode();
      if (TcpReassembledData.Length != 0) hash ^= TcpReassembledData.GetHashCode();
      if (TcpOptionKind != 0) hash ^= TcpOptionKind.GetHashCode();
      if (TcpOptionLen != 0) hash ^= TcpOptionLen.GetHashCode();
      if (TcpOptions.Length != 0) hash ^= TcpOptions.GetHashCode();
      if (TcpOptionsMssVal != 0) hash ^= TcpOptionsMssVal.GetHashCode();
      if (TcpOptionsWscaleShift != 0) hash ^= TcpOptionsWscaleShift.GetHashCode();
      if (TcpOptionsWscaleMultiplier != 0) hash ^= TcpOptionsWscaleMultiplier.GetHashCode();
      if (TcpOptionsExperimentalData.Length != 0) hash ^= TcpOptionsExperimentalData.GetHashCode();
      if (TcpOptionsExperimentalMagicNumber != 0) hash ^= TcpOptionsExperimentalMagicNumber.GetHashCode();
      if (TcpOptionsSackLe != 0) hash ^= TcpOptionsSackLe.GetHashCode();
      if (TcpOptionsSackRe != 0) hash ^= TcpOptionsSackRe.GetHashCode();
      if (TcpOptionsSackCount != 0) hash ^= TcpOptionsSackCount.GetHashCode();
      if (TcpOptionsEchoValue != 0) hash ^= TcpOptionsEchoValue.GetHashCode();
      if (TcpOptionsTimestampTsval != 0) hash ^= TcpOptionsTimestampTsval.GetHashCode();
      if (TcpOptionsTimestampTsecr != 0) hash ^= TcpOptionsTimestampTsecr.GetHashCode();
      if (TcpOptionsMptcpSubtype != 0) hash ^= TcpOptionsMptcpSubtype.GetHashCode();
      if (TcpOptionsMptcpVersion != 0) hash ^= TcpOptionsMptcpVersion.GetHashCode();
      if (TcpOptionsMptcpReserved != 0) hash ^= TcpOptionsMptcpReserved.GetHashCode();
      if (TcpOptionsMptcpFlags != 0) hash ^= TcpOptionsMptcpFlags.GetHashCode();
      if (TcpOptionsMptcpBackupFlag != 0) hash ^= TcpOptionsMptcpBackupFlag.GetHashCode();
      if (TcpOptionsMptcpChecksumreqFlags != 0) hash ^= TcpOptionsMptcpChecksumreqFlags.GetHashCode();
      if (TcpOptionsMptcpExtensibilityFlag != 0) hash ^= TcpOptionsMptcpExtensibilityFlag.GetHashCode();
      if (TcpOptionsMptcpSha1Flag != 0) hash ^= TcpOptionsMptcpSha1Flag.GetHashCode();
      if (TcpOptionsMptcpDatafinFlag != 0) hash ^= TcpOptionsMptcpDatafinFlag.GetHashCode();
      if (TcpOptionsMptcpDseqn8Flag != 0) hash ^= TcpOptionsMptcpDseqn8Flag.GetHashCode();
      if (TcpOptionsMptcpDseqnpresentFlag != 0) hash ^= TcpOptionsMptcpDseqnpresentFlag.GetHashCode();
      if (TcpOptionsMptcpDataack8Flag != 0) hash ^= TcpOptionsMptcpDataack8Flag.GetHashCode();
      if (TcpOptionsMptcpDataackpresentFlag != 0) hash ^= TcpOptionsMptcpDataackpresentFlag.GetHashCode();
      if (TcpOptionsMptcpReservedFlag != 0) hash ^= TcpOptionsMptcpReservedFlag.GetHashCode();
      if (TcpOptionsMptcpAddrid != 0) hash ^= TcpOptionsMptcpAddrid.GetHashCode();
      if (TcpOptionsMptcpSendkey != 0UL) hash ^= TcpOptionsMptcpSendkey.GetHashCode();
      if (TcpOptionsMptcpRecvkey != 0UL) hash ^= TcpOptionsMptcpRecvkey.GetHashCode();
      if (TcpOptionsMptcpRecvtok != 0) hash ^= TcpOptionsMptcpRecvtok.GetHashCode();
      if (TcpOptionsMptcpSendrand != 0) hash ^= TcpOptionsMptcpSendrand.GetHashCode();
      if (TcpOptionsMptcpSendtrunchmac != 0UL) hash ^= TcpOptionsMptcpSendtrunchmac.GetHashCode();
      if (TcpOptionsMptcpSendhmac.Length != 0) hash ^= TcpOptionsMptcpSendhmac.GetHashCode();
      if (TcpOptionsMptcpAddaddrtrunchmac != 0UL) hash ^= TcpOptionsMptcpAddaddrtrunchmac.GetHashCode();
      if (TcpOptionsMptcpRawdataack != 0UL) hash ^= TcpOptionsMptcpRawdataack.GetHashCode();
      if (TcpOptionsMptcpRawdataseqno != 0UL) hash ^= TcpOptionsMptcpRawdataseqno.GetHashCode();
      if (TcpOptionsMptcpSubflowseqno != 0) hash ^= TcpOptionsMptcpSubflowseqno.GetHashCode();
      if (TcpOptionsMptcpDatalvllen != 0) hash ^= TcpOptionsMptcpDatalvllen.GetHashCode();
      if (TcpOptionsMptcpChecksum != 0) hash ^= TcpOptionsMptcpChecksum.GetHashCode();
      if (TcpOptionsMptcpIpver != 0) hash ^= TcpOptionsMptcpIpver.GetHashCode();
      if (TcpOptionsMptcpIpv4.Length != 0) hash ^= TcpOptionsMptcpIpv4.GetHashCode();
      if (TcpOptionsMptcpIpv6.Length != 0) hash ^= TcpOptionsMptcpIpv6.GetHashCode();
      if (TcpOptionsMptcpPort != 0) hash ^= TcpOptionsMptcpPort.GetHashCode();
      if (TcpOptionsCcValue != 0) hash ^= TcpOptionsCcValue.GetHashCode();
      if (TcpOptionsMd5Digest.Length != 0) hash ^= TcpOptionsMd5Digest.GetHashCode();
      if (TcpOptionsQsRate != 0) hash ^= TcpOptionsQsRate.GetHashCode();
      if (TcpOptionsQsTtlDiff != 0) hash ^= TcpOptionsQsTtlDiff.GetHashCode();
      if (TcpOptionsScpsVector != 0) hash ^= TcpOptionsScpsVector.GetHashCode();
      if (TcpOptionsScpsBindingId != 0) hash ^= TcpOptionsScpsBindingId.GetHashCode();
      if (TcpOptionsScpsBindingLen != 0) hash ^= TcpOptionsScpsBindingLen.GetHashCode();
      if (TcpOptionsSnackOffset != 0) hash ^= TcpOptionsSnackOffset.GetHashCode();
      if (TcpOptionsSnackSize != 0) hash ^= TcpOptionsSnackSize.GetHashCode();
      if (TcpOptionsSnackLe != 0) hash ^= TcpOptionsSnackLe.GetHashCode();
      if (TcpOptionsSnackRe != 0) hash ^= TcpOptionsSnackRe.GetHashCode();
      if (TcpOptionsScpsflagsBets != false) hash ^= TcpOptionsScpsflagsBets.GetHashCode();
      if (TcpOptionsScpsflagsSnack1 != false) hash ^= TcpOptionsScpsflagsSnack1.GetHashCode();
      if (TcpOptionsScpsflagsSnack2 != false) hash ^= TcpOptionsScpsflagsSnack2.GetHashCode();
      if (TcpOptionsScpsflagsCompress != false) hash ^= TcpOptionsScpsflagsCompress.GetHashCode();
      if (TcpOptionsScpsflagsNlts != false) hash ^= TcpOptionsScpsflagsNlts.GetHashCode();
      if (TcpOptionsScpsflagsReserved != 0) hash ^= TcpOptionsScpsflagsReserved.GetHashCode();
      if (TcpOptionsScpsBinding != 0) hash ^= TcpOptionsScpsBinding.GetHashCode();
      if (TcpOptionsUserToGranularity != false) hash ^= TcpOptionsUserToGranularity.GetHashCode();
      if (TcpOptionsUserToVal != 0) hash ^= TcpOptionsUserToVal.GetHashCode();
      if (TcpOptionsRvbdProbeType1 != 0) hash ^= TcpOptionsRvbdProbeType1.GetHashCode();
      if (TcpOptionsRvbdProbeType2 != 0) hash ^= TcpOptionsRvbdProbeType2.GetHashCode();
      if (TcpOptionsRvbdProbeVersion != 0) hash ^= TcpOptionsRvbdProbeVersion.GetHashCode();
      if (TcpOptionsRvbdProbeVersionRaw != 0) hash ^= TcpOptionsRvbdProbeVersionRaw.GetHashCode();
      if (TcpOptionsRvbdProbeLen != 0) hash ^= TcpOptionsRvbdProbeLen.GetHashCode();
      if (TcpOptionsRvbdProbeProber.Length != 0) hash ^= TcpOptionsRvbdProbeProber.GetHashCode();
      if (TcpOptionsRvbdProbeProxyIp.Length != 0) hash ^= TcpOptionsRvbdProbeProxyIp.GetHashCode();
      if (TcpOptionsRvbdProbeProxyPort != 0) hash ^= TcpOptionsRvbdProbeProxyPort.GetHashCode();
      if (TcpOptionsRvbdProbeAppliVer != 0) hash ^= TcpOptionsRvbdProbeAppliVer.GetHashCode();
      if (TcpOptionsRvbdProbeClientIp.Length != 0) hash ^= TcpOptionsRvbdProbeClientIp.GetHashCode();
      if (TcpOptionsRvbdProbeStoreid != 0) hash ^= TcpOptionsRvbdProbeStoreid.GetHashCode();
      if (TcpOptionsRvbdProbeFlags != 0) hash ^= TcpOptionsRvbdProbeFlags.GetHashCode();
      if (TcpOptionsRvbdProbeFlagsNotcfe != false) hash ^= TcpOptionsRvbdProbeFlagsNotcfe.GetHashCode();
      if (TcpOptionsRvbdProbeFlagsLast != false) hash ^= TcpOptionsRvbdProbeFlagsLast.GetHashCode();
      if (TcpOptionsRvbdProbeFlagsProbe != false) hash ^= TcpOptionsRvbdProbeFlagsProbe.GetHashCode();
      if (TcpOptionsRvbdProbeFlagsSsl != false) hash ^= TcpOptionsRvbdProbeFlagsSsl.GetHashCode();
      if (TcpOptionsRvbdProbeFlagsServer != false) hash ^= TcpOptionsRvbdProbeFlagsServer.GetHashCode();
      if (TcpOptionsRvbdTrpyFlags != 0) hash ^= TcpOptionsRvbdTrpyFlags.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsFwRstProbe != false) hash ^= TcpOptionsRvbdTrpyFlagsFwRstProbe.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsFwRstInner != false) hash ^= TcpOptionsRvbdTrpyFlagsFwRstInner.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsFwRst != false) hash ^= TcpOptionsRvbdTrpyFlagsFwRst.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsChksum != false) hash ^= TcpOptionsRvbdTrpyFlagsChksum.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsOob != false) hash ^= TcpOptionsRvbdTrpyFlagsOob.GetHashCode();
      if (TcpOptionsRvbdTrpyFlagsMode != false) hash ^= TcpOptionsRvbdTrpyFlagsMode.GetHashCode();
      if (TcpOptionsRvbdTrpySrcIp.Length != 0) hash ^= TcpOptionsRvbdTrpySrcIp.GetHashCode();
      if (TcpOptionsRvbdTrpyDstIp.Length != 0) hash ^= TcpOptionsRvbdTrpyDstIp.GetHashCode();
      if (TcpOptionsRvbdTrpySrcPort != 0) hash ^= TcpOptionsRvbdTrpySrcPort.GetHashCode();
      if (TcpOptionsRvbdTrpyDstPort != 0) hash ^= TcpOptionsRvbdTrpyDstPort.GetHashCode();
      if (TcpOptionsRvbdTrpyClientPort != 0) hash ^= TcpOptionsRvbdTrpyClientPort.GetHashCode();
      if (TcpOptionsTfoRequest != 0) hash ^= TcpOptionsTfoRequest.GetHashCode();
      if (TcpOptionsTfoCookie.Length != 0) hash ^= TcpOptionsTfoCookie.GetHashCode();
      if (TcpPduTime != 0L) hash ^= TcpPduTime.GetHashCode();
      if (TcpPduSize != 0) hash ^= TcpPduSize.GetHashCode();
      if (TcpPduLastFrame != 0L) hash ^= TcpPduLastFrame.GetHashCode();
      if (TcpTimeRelative != 0L) hash ^= TcpTimeRelative.GetHashCode();
      if (TcpTimeDelta != 0L) hash ^= TcpTimeDelta.GetHashCode();
      if (TcpProcSrcuid != 0) hash ^= TcpProcSrcuid.GetHashCode();
      if (TcpProcSrcpid != 0) hash ^= TcpProcSrcpid.GetHashCode();
      if (TcpProcSrcuname.Length != 0) hash ^= TcpProcSrcuname.GetHashCode();
      if (TcpProcSrccmd.Length != 0) hash ^= TcpProcSrccmd.GetHashCode();
      if (TcpProcDstuid != 0) hash ^= TcpProcDstuid.GetHashCode();
      if (TcpProcDstpid != 0) hash ^= TcpProcDstpid.GetHashCode();
      if (TcpProcDstuname.Length != 0) hash ^= TcpProcDstuname.GetHashCode();
      if (TcpProcDstcmd.Length != 0) hash ^= TcpProcDstcmd.GetHashCode();
      if (TcpSegmentData.Length != 0) hash ^= TcpSegmentData.GetHashCode();
      if (TcpPayload.Length != 0) hash ^= TcpPayload.GetHashCode();
      if (TcpOptionsScpsBindingData.Length != 0) hash ^= TcpOptionsScpsBindingData.GetHashCode();
      if (TcpOptionsRvbdProbeReserved != 0) hash ^= TcpOptionsRvbdProbeReserved.GetHashCode();
      if (TcpFinRetransmission != 0L) hash ^= TcpFinRetransmission.GetHashCode();
      if (TcpResetCause.Length != 0) hash ^= TcpResetCause.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TcpSrcport != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TcpSrcport);
      }
      if (TcpDstport != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TcpDstport);
      }
      if (TcpPort != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TcpPort);
      }
      if (TcpStream != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TcpStream);
      }
      if (TcpSeq != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TcpSeq);
      }
      if (TcpNxtseq != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TcpNxtseq);
      }
      if (TcpAck != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TcpAck);
      }
      if (TcpHdrLen != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TcpHdrLen);
      }
      if (TcpFlags != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TcpFlags);
      }
      if (TcpFlagsRes != false) {
        output.WriteRawTag(80);
        output.WriteBool(TcpFlagsRes);
      }
      if (TcpFlagsNs != false) {
        output.WriteRawTag(88);
        output.WriteBool(TcpFlagsNs);
      }
      if (TcpFlagsCwr != false) {
        output.WriteRawTag(96);
        output.WriteBool(TcpFlagsCwr);
      }
      if (TcpFlagsEcn != false) {
        output.WriteRawTag(104);
        output.WriteBool(TcpFlagsEcn);
      }
      if (TcpFlagsUrg != false) {
        output.WriteRawTag(112);
        output.WriteBool(TcpFlagsUrg);
      }
      if (TcpFlagsAck != false) {
        output.WriteRawTag(120);
        output.WriteBool(TcpFlagsAck);
      }
      if (TcpFlagsPush != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(TcpFlagsPush);
      }
      if (TcpFlagsReset != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(TcpFlagsReset);
      }
      if (TcpFlagsSyn != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(TcpFlagsSyn);
      }
      if (TcpFlagsFin != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(TcpFlagsFin);
      }
      if (TcpFlagsStr.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TcpFlagsStr);
      }
      if (TcpWindowSizeValue != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(TcpWindowSizeValue);
      }
      if (TcpWindowSize != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TcpWindowSize);
      }
      if (TcpWindowSizeScalefactor != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TcpWindowSizeScalefactor);
      }
      if (TcpChecksum != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(TcpChecksum);
      }
      if (TcpChecksumStatus != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(TcpChecksumStatus);
      }
      if (TcpChecksumCalculated != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(TcpChecksumCalculated);
      }
      if (TcpAnalysis != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(TcpAnalysis);
      }
      if (TcpAnalysisFlags != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(TcpAnalysisFlags);
      }
      if (TcpAnalysisDuplicateAck != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(TcpAnalysisDuplicateAck);
      }
      if (TcpAnalysisDuplicateAckNum != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(TcpAnalysisDuplicateAckNum);
      }
      if (TcpAnalysisDuplicateAckFrame != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(TcpAnalysisDuplicateAckFrame);
      }
      if (TcpContinuationTo != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(TcpContinuationTo);
      }
      if (TcpLen != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(TcpLen);
      }
      if (TcpAnalysisAcksFrame != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(TcpAnalysisAcksFrame);
      }
      if (TcpAnalysisBytesInFlight != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(TcpAnalysisBytesInFlight);
      }
      if (TcpAnalysisPushBytesSent != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(TcpAnalysisPushBytesSent);
      }
      if (TcpAnalysisAckRtt != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(TcpAnalysisAckRtt);
      }
      if (TcpAnalysisInitialRtt != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(TcpAnalysisInitialRtt);
      }
      if (TcpAnalysisRto != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(TcpAnalysisRto);
      }
      if (TcpAnalysisRtoFrame != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(TcpAnalysisRtoFrame);
      }
      if (TcpUrgentPointer != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(TcpUrgentPointer);
      }
      if (TcpSegmentOverlap != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(TcpSegmentOverlap);
      }
      if (TcpSegmentOverlapConflict != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(TcpSegmentOverlapConflict);
      }
      if (TcpSegmentMultipletails != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(TcpSegmentMultipletails);
      }
      if (TcpSegmentToolongfragment != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(TcpSegmentToolongfragment);
      }
      if (TcpSegmentError != 0L) {
        output.WriteRawTag(240, 2);
        output.WriteInt64(TcpSegmentError);
      }
      if (TcpSegmentCount != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(TcpSegmentCount);
      }
      if (TcpSegment != 0L) {
        output.WriteRawTag(128, 3);
        output.WriteInt64(TcpSegment);
      }
      if (TcpSegments != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(TcpSegments);
      }
      if (TcpReassembledIn != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(TcpReassembledIn);
      }
      if (TcpReassembledLength != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(TcpReassembledLength);
      }
      if (TcpReassembledData.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteBytes(TcpReassembledData);
      }
      if (TcpOptionKind != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(TcpOptionKind);
      }
      if (TcpOptionLen != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(TcpOptionLen);
      }
      if (TcpOptions.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteBytes(TcpOptions);
      }
      if (TcpOptionsMssVal != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(TcpOptionsMssVal);
      }
      if (TcpOptionsWscaleShift != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(TcpOptionsWscaleShift);
      }
      if (TcpOptionsWscaleMultiplier != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(TcpOptionsWscaleMultiplier);
      }
      if (TcpOptionsExperimentalData.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteBytes(TcpOptionsExperimentalData);
      }
      if (TcpOptionsExperimentalMagicNumber != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(TcpOptionsExperimentalMagicNumber);
      }
      if (TcpOptionsSackLe != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(TcpOptionsSackLe);
      }
      if (TcpOptionsSackRe != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(TcpOptionsSackRe);
      }
      if (TcpOptionsSackCount != 0) {
        output.WriteRawTag(248, 3);
        output.WriteUInt32(TcpOptionsSackCount);
      }
      if (TcpOptionsEchoValue != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(TcpOptionsEchoValue);
      }
      if (TcpOptionsTimestampTsval != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(TcpOptionsTimestampTsval);
      }
      if (TcpOptionsTimestampTsecr != 0) {
        output.WriteRawTag(144, 4);
        output.WriteUInt32(TcpOptionsTimestampTsecr);
      }
      if (TcpOptionsMptcpSubtype != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(TcpOptionsMptcpSubtype);
      }
      if (TcpOptionsMptcpVersion != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(TcpOptionsMptcpVersion);
      }
      if (TcpOptionsMptcpReserved != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(TcpOptionsMptcpReserved);
      }
      if (TcpOptionsMptcpFlags != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(TcpOptionsMptcpFlags);
      }
      if (TcpOptionsMptcpBackupFlag != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(TcpOptionsMptcpBackupFlag);
      }
      if (TcpOptionsMptcpChecksumreqFlags != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(TcpOptionsMptcpChecksumreqFlags);
      }
      if (TcpOptionsMptcpExtensibilityFlag != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(TcpOptionsMptcpExtensibilityFlag);
      }
      if (TcpOptionsMptcpSha1Flag != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(TcpOptionsMptcpSha1Flag);
      }
      if (TcpOptionsMptcpDatafinFlag != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(TcpOptionsMptcpDatafinFlag);
      }
      if (TcpOptionsMptcpDseqn8Flag != 0) {
        output.WriteRawTag(224, 4);
        output.WriteUInt32(TcpOptionsMptcpDseqn8Flag);
      }
      if (TcpOptionsMptcpDseqnpresentFlag != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(TcpOptionsMptcpDseqnpresentFlag);
      }
      if (TcpOptionsMptcpDataack8Flag != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(TcpOptionsMptcpDataack8Flag);
      }
      if (TcpOptionsMptcpDataackpresentFlag != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(TcpOptionsMptcpDataackpresentFlag);
      }
      if (TcpOptionsMptcpReservedFlag != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(TcpOptionsMptcpReservedFlag);
      }
      if (TcpOptionsMptcpAddrid != 0) {
        output.WriteRawTag(136, 5);
        output.WriteUInt32(TcpOptionsMptcpAddrid);
      }
      if (TcpOptionsMptcpSendkey != 0UL) {
        output.WriteRawTag(144, 5);
        output.WriteUInt64(TcpOptionsMptcpSendkey);
      }
      if (TcpOptionsMptcpRecvkey != 0UL) {
        output.WriteRawTag(152, 5);
        output.WriteUInt64(TcpOptionsMptcpRecvkey);
      }
      if (TcpOptionsMptcpRecvtok != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(TcpOptionsMptcpRecvtok);
      }
      if (TcpOptionsMptcpSendrand != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(TcpOptionsMptcpSendrand);
      }
      if (TcpOptionsMptcpSendtrunchmac != 0UL) {
        output.WriteRawTag(176, 5);
        output.WriteUInt64(TcpOptionsMptcpSendtrunchmac);
      }
      if (TcpOptionsMptcpSendhmac.Length != 0) {
        output.WriteRawTag(186, 5);
        output.WriteBytes(TcpOptionsMptcpSendhmac);
      }
      if (TcpOptionsMptcpAddaddrtrunchmac != 0UL) {
        output.WriteRawTag(192, 5);
        output.WriteUInt64(TcpOptionsMptcpAddaddrtrunchmac);
      }
      if (TcpOptionsMptcpRawdataack != 0UL) {
        output.WriteRawTag(200, 5);
        output.WriteUInt64(TcpOptionsMptcpRawdataack);
      }
      if (TcpOptionsMptcpRawdataseqno != 0UL) {
        output.WriteRawTag(208, 5);
        output.WriteUInt64(TcpOptionsMptcpRawdataseqno);
      }
      if (TcpOptionsMptcpSubflowseqno != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(TcpOptionsMptcpSubflowseqno);
      }
      if (TcpOptionsMptcpDatalvllen != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(TcpOptionsMptcpDatalvllen);
      }
      if (TcpOptionsMptcpChecksum != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(TcpOptionsMptcpChecksum);
      }
      if (TcpOptionsMptcpIpver != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(TcpOptionsMptcpIpver);
      }
      if (TcpOptionsMptcpIpv4.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteBytes(TcpOptionsMptcpIpv4);
      }
      if (TcpOptionsMptcpIpv6.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteBytes(TcpOptionsMptcpIpv6);
      }
      if (TcpOptionsMptcpPort != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(TcpOptionsMptcpPort);
      }
      if (TcpOptionsCcValue != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(TcpOptionsCcValue);
      }
      if (TcpOptionsMd5Digest.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteBytes(TcpOptionsMd5Digest);
      }
      if (TcpOptionsQsRate != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(TcpOptionsQsRate);
      }
      if (TcpOptionsQsTtlDiff != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(TcpOptionsQsTtlDiff);
      }
      if (TcpOptionsScpsVector != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(TcpOptionsScpsVector);
      }
      if (TcpOptionsScpsBindingId != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(TcpOptionsScpsBindingId);
      }
      if (TcpOptionsScpsBindingLen != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(TcpOptionsScpsBindingLen);
      }
      if (TcpOptionsSnackOffset != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(TcpOptionsSnackOffset);
      }
      if (TcpOptionsSnackSize != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(TcpOptionsSnackSize);
      }
      if (TcpOptionsSnackLe != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(TcpOptionsSnackLe);
      }
      if (TcpOptionsSnackRe != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(TcpOptionsSnackRe);
      }
      if (TcpOptionsScpsflagsBets != false) {
        output.WriteRawTag(232, 6);
        output.WriteBool(TcpOptionsScpsflagsBets);
      }
      if (TcpOptionsScpsflagsSnack1 != false) {
        output.WriteRawTag(240, 6);
        output.WriteBool(TcpOptionsScpsflagsSnack1);
      }
      if (TcpOptionsScpsflagsSnack2 != false) {
        output.WriteRawTag(248, 6);
        output.WriteBool(TcpOptionsScpsflagsSnack2);
      }
      if (TcpOptionsScpsflagsCompress != false) {
        output.WriteRawTag(128, 7);
        output.WriteBool(TcpOptionsScpsflagsCompress);
      }
      if (TcpOptionsScpsflagsNlts != false) {
        output.WriteRawTag(136, 7);
        output.WriteBool(TcpOptionsScpsflagsNlts);
      }
      if (TcpOptionsScpsflagsReserved != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(TcpOptionsScpsflagsReserved);
      }
      if (TcpOptionsScpsBinding != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(TcpOptionsScpsBinding);
      }
      if (TcpOptionsUserToGranularity != false) {
        output.WriteRawTag(160, 7);
        output.WriteBool(TcpOptionsUserToGranularity);
      }
      if (TcpOptionsUserToVal != 0) {
        output.WriteRawTag(168, 7);
        output.WriteUInt32(TcpOptionsUserToVal);
      }
      if (TcpOptionsRvbdProbeType1 != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeType1);
      }
      if (TcpOptionsRvbdProbeType2 != 0) {
        output.WriteRawTag(184, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeType2);
      }
      if (TcpOptionsRvbdProbeVersion != 0) {
        output.WriteRawTag(192, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeVersion);
      }
      if (TcpOptionsRvbdProbeVersionRaw != 0) {
        output.WriteRawTag(200, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeVersionRaw);
      }
      if (TcpOptionsRvbdProbeLen != 0) {
        output.WriteRawTag(208, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeLen);
      }
      if (TcpOptionsRvbdProbeProber.Length != 0) {
        output.WriteRawTag(218, 7);
        output.WriteBytes(TcpOptionsRvbdProbeProber);
      }
      if (TcpOptionsRvbdProbeProxyIp.Length != 0) {
        output.WriteRawTag(226, 7);
        output.WriteBytes(TcpOptionsRvbdProbeProxyIp);
      }
      if (TcpOptionsRvbdProbeProxyPort != 0) {
        output.WriteRawTag(232, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeProxyPort);
      }
      if (TcpOptionsRvbdProbeAppliVer != 0) {
        output.WriteRawTag(240, 7);
        output.WriteUInt32(TcpOptionsRvbdProbeAppliVer);
      }
      if (TcpOptionsRvbdProbeClientIp.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteBytes(TcpOptionsRvbdProbeClientIp);
      }
      if (TcpOptionsRvbdProbeStoreid != 0) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(TcpOptionsRvbdProbeStoreid);
      }
      if (TcpOptionsRvbdProbeFlags != 0) {
        output.WriteRawTag(136, 8);
        output.WriteUInt32(TcpOptionsRvbdProbeFlags);
      }
      if (TcpOptionsRvbdProbeFlagsNotcfe != false) {
        output.WriteRawTag(144, 8);
        output.WriteBool(TcpOptionsRvbdProbeFlagsNotcfe);
      }
      if (TcpOptionsRvbdProbeFlagsLast != false) {
        output.WriteRawTag(152, 8);
        output.WriteBool(TcpOptionsRvbdProbeFlagsLast);
      }
      if (TcpOptionsRvbdProbeFlagsProbe != false) {
        output.WriteRawTag(160, 8);
        output.WriteBool(TcpOptionsRvbdProbeFlagsProbe);
      }
      if (TcpOptionsRvbdProbeFlagsSsl != false) {
        output.WriteRawTag(168, 8);
        output.WriteBool(TcpOptionsRvbdProbeFlagsSsl);
      }
      if (TcpOptionsRvbdProbeFlagsServer != false) {
        output.WriteRawTag(176, 8);
        output.WriteBool(TcpOptionsRvbdProbeFlagsServer);
      }
      if (TcpOptionsRvbdTrpyFlags != 0) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(TcpOptionsRvbdTrpyFlags);
      }
      if (TcpOptionsRvbdTrpyFlagsFwRstProbe != false) {
        output.WriteRawTag(192, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsFwRstProbe);
      }
      if (TcpOptionsRvbdTrpyFlagsFwRstInner != false) {
        output.WriteRawTag(200, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsFwRstInner);
      }
      if (TcpOptionsRvbdTrpyFlagsFwRst != false) {
        output.WriteRawTag(208, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsFwRst);
      }
      if (TcpOptionsRvbdTrpyFlagsChksum != false) {
        output.WriteRawTag(216, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsChksum);
      }
      if (TcpOptionsRvbdTrpyFlagsOob != false) {
        output.WriteRawTag(224, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsOob);
      }
      if (TcpOptionsRvbdTrpyFlagsMode != false) {
        output.WriteRawTag(232, 8);
        output.WriteBool(TcpOptionsRvbdTrpyFlagsMode);
      }
      if (TcpOptionsRvbdTrpySrcIp.Length != 0) {
        output.WriteRawTag(242, 8);
        output.WriteBytes(TcpOptionsRvbdTrpySrcIp);
      }
      if (TcpOptionsRvbdTrpyDstIp.Length != 0) {
        output.WriteRawTag(250, 8);
        output.WriteBytes(TcpOptionsRvbdTrpyDstIp);
      }
      if (TcpOptionsRvbdTrpySrcPort != 0) {
        output.WriteRawTag(128, 9);
        output.WriteUInt32(TcpOptionsRvbdTrpySrcPort);
      }
      if (TcpOptionsRvbdTrpyDstPort != 0) {
        output.WriteRawTag(136, 9);
        output.WriteUInt32(TcpOptionsRvbdTrpyDstPort);
      }
      if (TcpOptionsRvbdTrpyClientPort != 0) {
        output.WriteRawTag(144, 9);
        output.WriteUInt32(TcpOptionsRvbdTrpyClientPort);
      }
      if (TcpOptionsTfoRequest != 0) {
        output.WriteRawTag(152, 9);
        output.WriteInt32(TcpOptionsTfoRequest);
      }
      if (TcpOptionsTfoCookie.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteBytes(TcpOptionsTfoCookie);
      }
      if (TcpPduTime != 0L) {
        output.WriteRawTag(168, 9);
        output.WriteInt64(TcpPduTime);
      }
      if (TcpPduSize != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(TcpPduSize);
      }
      if (TcpPduLastFrame != 0L) {
        output.WriteRawTag(184, 9);
        output.WriteInt64(TcpPduLastFrame);
      }
      if (TcpTimeRelative != 0L) {
        output.WriteRawTag(192, 9);
        output.WriteInt64(TcpTimeRelative);
      }
      if (TcpTimeDelta != 0L) {
        output.WriteRawTag(200, 9);
        output.WriteInt64(TcpTimeDelta);
      }
      if (TcpProcSrcuid != 0) {
        output.WriteRawTag(208, 9);
        output.WriteUInt32(TcpProcSrcuid);
      }
      if (TcpProcSrcpid != 0) {
        output.WriteRawTag(216, 9);
        output.WriteUInt32(TcpProcSrcpid);
      }
      if (TcpProcSrcuname.Length != 0) {
        output.WriteRawTag(226, 9);
        output.WriteString(TcpProcSrcuname);
      }
      if (TcpProcSrccmd.Length != 0) {
        output.WriteRawTag(234, 9);
        output.WriteString(TcpProcSrccmd);
      }
      if (TcpProcDstuid != 0) {
        output.WriteRawTag(240, 9);
        output.WriteUInt32(TcpProcDstuid);
      }
      if (TcpProcDstpid != 0) {
        output.WriteRawTag(248, 9);
        output.WriteUInt32(TcpProcDstpid);
      }
      if (TcpProcDstuname.Length != 0) {
        output.WriteRawTag(130, 10);
        output.WriteString(TcpProcDstuname);
      }
      if (TcpProcDstcmd.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(TcpProcDstcmd);
      }
      if (TcpSegmentData.Length != 0) {
        output.WriteRawTag(146, 10);
        output.WriteBytes(TcpSegmentData);
      }
      if (TcpPayload.Length != 0) {
        output.WriteRawTag(154, 10);
        output.WriteBytes(TcpPayload);
      }
      if (TcpOptionsScpsBindingData.Length != 0) {
        output.WriteRawTag(162, 10);
        output.WriteBytes(TcpOptionsScpsBindingData);
      }
      if (TcpOptionsRvbdProbeReserved != 0) {
        output.WriteRawTag(168, 10);
        output.WriteUInt32(TcpOptionsRvbdProbeReserved);
      }
      if (TcpFinRetransmission != 0L) {
        output.WriteRawTag(176, 10);
        output.WriteInt64(TcpFinRetransmission);
      }
      if (TcpResetCause.Length != 0) {
        output.WriteRawTag(186, 10);
        output.WriteString(TcpResetCause);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TcpSrcport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpSrcport);
      }
      if (TcpDstport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpDstport);
      }
      if (TcpPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpPort);
      }
      if (TcpStream != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpStream);
      }
      if (TcpSeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpSeq);
      }
      if (TcpNxtseq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpNxtseq);
      }
      if (TcpAck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpAck);
      }
      if (TcpHdrLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpHdrLen);
      }
      if (TcpFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpFlags);
      }
      if (TcpFlagsRes != false) {
        size += 1 + 1;
      }
      if (TcpFlagsNs != false) {
        size += 1 + 1;
      }
      if (TcpFlagsCwr != false) {
        size += 1 + 1;
      }
      if (TcpFlagsEcn != false) {
        size += 1 + 1;
      }
      if (TcpFlagsUrg != false) {
        size += 1 + 1;
      }
      if (TcpFlagsAck != false) {
        size += 1 + 1;
      }
      if (TcpFlagsPush != false) {
        size += 2 + 1;
      }
      if (TcpFlagsReset != false) {
        size += 2 + 1;
      }
      if (TcpFlagsSyn != false) {
        size += 2 + 1;
      }
      if (TcpFlagsFin != false) {
        size += 2 + 1;
      }
      if (TcpFlagsStr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpFlagsStr);
      }
      if (TcpWindowSizeValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpWindowSizeValue);
      }
      if (TcpWindowSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpWindowSize);
      }
      if (TcpWindowSizeScalefactor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpWindowSizeScalefactor);
      }
      if (TcpChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpChecksum);
      }
      if (TcpChecksumStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpChecksumStatus);
      }
      if (TcpChecksumCalculated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpChecksumCalculated);
      }
      if (TcpAnalysis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpAnalysis);
      }
      if (TcpAnalysisFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpAnalysisFlags);
      }
      if (TcpAnalysisDuplicateAck != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpAnalysisDuplicateAck);
      }
      if (TcpAnalysisDuplicateAckNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpAnalysisDuplicateAckNum);
      }
      if (TcpAnalysisDuplicateAckFrame != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisDuplicateAckFrame);
      }
      if (TcpContinuationTo != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpContinuationTo);
      }
      if (TcpLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpLen);
      }
      if (TcpAnalysisAcksFrame != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisAcksFrame);
      }
      if (TcpAnalysisBytesInFlight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpAnalysisBytesInFlight);
      }
      if (TcpAnalysisPushBytesSent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpAnalysisPushBytesSent);
      }
      if (TcpAnalysisAckRtt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisAckRtt);
      }
      if (TcpAnalysisInitialRtt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisInitialRtt);
      }
      if (TcpAnalysisRto != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisRto);
      }
      if (TcpAnalysisRtoFrame != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpAnalysisRtoFrame);
      }
      if (TcpUrgentPointer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpUrgentPointer);
      }
      if (TcpSegmentOverlap != false) {
        size += 2 + 1;
      }
      if (TcpSegmentOverlapConflict != false) {
        size += 2 + 1;
      }
      if (TcpSegmentMultipletails != false) {
        size += 2 + 1;
      }
      if (TcpSegmentToolongfragment != false) {
        size += 2 + 1;
      }
      if (TcpSegmentError != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpSegmentError);
      }
      if (TcpSegmentCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpSegmentCount);
      }
      if (TcpSegment != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpSegment);
      }
      if (TcpSegments != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpSegments);
      }
      if (TcpReassembledIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpReassembledIn);
      }
      if (TcpReassembledLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpReassembledLength);
      }
      if (TcpReassembledData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpReassembledData);
      }
      if (TcpOptionKind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionKind);
      }
      if (TcpOptionLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionLen);
      }
      if (TcpOptions.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptions);
      }
      if (TcpOptionsMssVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMssVal);
      }
      if (TcpOptionsWscaleShift != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsWscaleShift);
      }
      if (TcpOptionsWscaleMultiplier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsWscaleMultiplier);
      }
      if (TcpOptionsExperimentalData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsExperimentalData);
      }
      if (TcpOptionsExperimentalMagicNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsExperimentalMagicNumber);
      }
      if (TcpOptionsSackLe != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSackLe);
      }
      if (TcpOptionsSackRe != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSackRe);
      }
      if (TcpOptionsSackCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSackCount);
      }
      if (TcpOptionsEchoValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsEchoValue);
      }
      if (TcpOptionsTimestampTsval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsTimestampTsval);
      }
      if (TcpOptionsTimestampTsecr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsTimestampTsecr);
      }
      if (TcpOptionsMptcpSubtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpSubtype);
      }
      if (TcpOptionsMptcpVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpVersion);
      }
      if (TcpOptionsMptcpReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpReserved);
      }
      if (TcpOptionsMptcpFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpFlags);
      }
      if (TcpOptionsMptcpBackupFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpBackupFlag);
      }
      if (TcpOptionsMptcpChecksumreqFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpChecksumreqFlags);
      }
      if (TcpOptionsMptcpExtensibilityFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpExtensibilityFlag);
      }
      if (TcpOptionsMptcpSha1Flag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpSha1Flag);
      }
      if (TcpOptionsMptcpDatafinFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDatafinFlag);
      }
      if (TcpOptionsMptcpDseqn8Flag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDseqn8Flag);
      }
      if (TcpOptionsMptcpDseqnpresentFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDseqnpresentFlag);
      }
      if (TcpOptionsMptcpDataack8Flag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDataack8Flag);
      }
      if (TcpOptionsMptcpDataackpresentFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDataackpresentFlag);
      }
      if (TcpOptionsMptcpReservedFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpReservedFlag);
      }
      if (TcpOptionsMptcpAddrid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpAddrid);
      }
      if (TcpOptionsMptcpSendkey != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpSendkey);
      }
      if (TcpOptionsMptcpRecvkey != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpRecvkey);
      }
      if (TcpOptionsMptcpRecvtok != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpRecvtok);
      }
      if (TcpOptionsMptcpSendrand != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpSendrand);
      }
      if (TcpOptionsMptcpSendtrunchmac != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpSendtrunchmac);
      }
      if (TcpOptionsMptcpSendhmac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsMptcpSendhmac);
      }
      if (TcpOptionsMptcpAddaddrtrunchmac != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpAddaddrtrunchmac);
      }
      if (TcpOptionsMptcpRawdataack != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpRawdataack);
      }
      if (TcpOptionsMptcpRawdataseqno != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TcpOptionsMptcpRawdataseqno);
      }
      if (TcpOptionsMptcpSubflowseqno != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpSubflowseqno);
      }
      if (TcpOptionsMptcpDatalvllen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpDatalvllen);
      }
      if (TcpOptionsMptcpChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpChecksum);
      }
      if (TcpOptionsMptcpIpver != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpIpver);
      }
      if (TcpOptionsMptcpIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsMptcpIpv4);
      }
      if (TcpOptionsMptcpIpv6.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsMptcpIpv6);
      }
      if (TcpOptionsMptcpPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsMptcpPort);
      }
      if (TcpOptionsCcValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsCcValue);
      }
      if (TcpOptionsMd5Digest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsMd5Digest);
      }
      if (TcpOptionsQsRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsQsRate);
      }
      if (TcpOptionsQsTtlDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsQsTtlDiff);
      }
      if (TcpOptionsScpsVector != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsScpsVector);
      }
      if (TcpOptionsScpsBindingId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsScpsBindingId);
      }
      if (TcpOptionsScpsBindingLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsScpsBindingLen);
      }
      if (TcpOptionsSnackOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSnackOffset);
      }
      if (TcpOptionsSnackSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSnackSize);
      }
      if (TcpOptionsSnackLe != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSnackLe);
      }
      if (TcpOptionsSnackRe != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsSnackRe);
      }
      if (TcpOptionsScpsflagsBets != false) {
        size += 2 + 1;
      }
      if (TcpOptionsScpsflagsSnack1 != false) {
        size += 2 + 1;
      }
      if (TcpOptionsScpsflagsSnack2 != false) {
        size += 2 + 1;
      }
      if (TcpOptionsScpsflagsCompress != false) {
        size += 2 + 1;
      }
      if (TcpOptionsScpsflagsNlts != false) {
        size += 2 + 1;
      }
      if (TcpOptionsScpsflagsReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsScpsflagsReserved);
      }
      if (TcpOptionsScpsBinding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsScpsBinding);
      }
      if (TcpOptionsUserToGranularity != false) {
        size += 2 + 1;
      }
      if (TcpOptionsUserToVal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsUserToVal);
      }
      if (TcpOptionsRvbdProbeType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeType1);
      }
      if (TcpOptionsRvbdProbeType2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeType2);
      }
      if (TcpOptionsRvbdProbeVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeVersion);
      }
      if (TcpOptionsRvbdProbeVersionRaw != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeVersionRaw);
      }
      if (TcpOptionsRvbdProbeLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeLen);
      }
      if (TcpOptionsRvbdProbeProber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsRvbdProbeProber);
      }
      if (TcpOptionsRvbdProbeProxyIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsRvbdProbeProxyIp);
      }
      if (TcpOptionsRvbdProbeProxyPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeProxyPort);
      }
      if (TcpOptionsRvbdProbeAppliVer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeAppliVer);
      }
      if (TcpOptionsRvbdProbeClientIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsRvbdProbeClientIp);
      }
      if (TcpOptionsRvbdProbeStoreid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeStoreid);
      }
      if (TcpOptionsRvbdProbeFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeFlags);
      }
      if (TcpOptionsRvbdProbeFlagsNotcfe != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdProbeFlagsLast != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdProbeFlagsProbe != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdProbeFlagsSsl != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdProbeFlagsServer != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdTrpyFlags);
      }
      if (TcpOptionsRvbdTrpyFlagsFwRstProbe != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlagsFwRstInner != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlagsFwRst != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlagsChksum != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlagsOob != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpyFlagsMode != false) {
        size += 2 + 1;
      }
      if (TcpOptionsRvbdTrpySrcIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsRvbdTrpySrcIp);
      }
      if (TcpOptionsRvbdTrpyDstIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsRvbdTrpyDstIp);
      }
      if (TcpOptionsRvbdTrpySrcPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdTrpySrcPort);
      }
      if (TcpOptionsRvbdTrpyDstPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdTrpyDstPort);
      }
      if (TcpOptionsRvbdTrpyClientPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdTrpyClientPort);
      }
      if (TcpOptionsTfoRequest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TcpOptionsTfoRequest);
      }
      if (TcpOptionsTfoCookie.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsTfoCookie);
      }
      if (TcpPduTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpPduTime);
      }
      if (TcpPduSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpPduSize);
      }
      if (TcpPduLastFrame != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpPduLastFrame);
      }
      if (TcpTimeRelative != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpTimeRelative);
      }
      if (TcpTimeDelta != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpTimeDelta);
      }
      if (TcpProcSrcuid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpProcSrcuid);
      }
      if (TcpProcSrcpid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpProcSrcpid);
      }
      if (TcpProcSrcuname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpProcSrcuname);
      }
      if (TcpProcSrccmd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpProcSrccmd);
      }
      if (TcpProcDstuid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpProcDstuid);
      }
      if (TcpProcDstpid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpProcDstpid);
      }
      if (TcpProcDstuname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpProcDstuname);
      }
      if (TcpProcDstcmd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpProcDstcmd);
      }
      if (TcpSegmentData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpSegmentData);
      }
      if (TcpPayload.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpPayload);
      }
      if (TcpOptionsScpsBindingData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpOptionsScpsBindingData);
      }
      if (TcpOptionsRvbdProbeReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpOptionsRvbdProbeReserved);
      }
      if (TcpFinRetransmission != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TcpFinRetransmission);
      }
      if (TcpResetCause.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TcpResetCause);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tcp other) {
      if (other == null) {
        return;
      }
      if (other.TcpSrcport != 0) {
        TcpSrcport = other.TcpSrcport;
      }
      if (other.TcpDstport != 0) {
        TcpDstport = other.TcpDstport;
      }
      if (other.TcpPort != 0) {
        TcpPort = other.TcpPort;
      }
      if (other.TcpStream != 0) {
        TcpStream = other.TcpStream;
      }
      if (other.TcpSeq != 0) {
        TcpSeq = other.TcpSeq;
      }
      if (other.TcpNxtseq != 0) {
        TcpNxtseq = other.TcpNxtseq;
      }
      if (other.TcpAck != 0) {
        TcpAck = other.TcpAck;
      }
      if (other.TcpHdrLen != 0) {
        TcpHdrLen = other.TcpHdrLen;
      }
      if (other.TcpFlags != 0) {
        TcpFlags = other.TcpFlags;
      }
      if (other.TcpFlagsRes != false) {
        TcpFlagsRes = other.TcpFlagsRes;
      }
      if (other.TcpFlagsNs != false) {
        TcpFlagsNs = other.TcpFlagsNs;
      }
      if (other.TcpFlagsCwr != false) {
        TcpFlagsCwr = other.TcpFlagsCwr;
      }
      if (other.TcpFlagsEcn != false) {
        TcpFlagsEcn = other.TcpFlagsEcn;
      }
      if (other.TcpFlagsUrg != false) {
        TcpFlagsUrg = other.TcpFlagsUrg;
      }
      if (other.TcpFlagsAck != false) {
        TcpFlagsAck = other.TcpFlagsAck;
      }
      if (other.TcpFlagsPush != false) {
        TcpFlagsPush = other.TcpFlagsPush;
      }
      if (other.TcpFlagsReset != false) {
        TcpFlagsReset = other.TcpFlagsReset;
      }
      if (other.TcpFlagsSyn != false) {
        TcpFlagsSyn = other.TcpFlagsSyn;
      }
      if (other.TcpFlagsFin != false) {
        TcpFlagsFin = other.TcpFlagsFin;
      }
      if (other.TcpFlagsStr.Length != 0) {
        TcpFlagsStr = other.TcpFlagsStr;
      }
      if (other.TcpWindowSizeValue != 0) {
        TcpWindowSizeValue = other.TcpWindowSizeValue;
      }
      if (other.TcpWindowSize != 0) {
        TcpWindowSize = other.TcpWindowSize;
      }
      if (other.TcpWindowSizeScalefactor != 0) {
        TcpWindowSizeScalefactor = other.TcpWindowSizeScalefactor;
      }
      if (other.TcpChecksum != 0) {
        TcpChecksum = other.TcpChecksum;
      }
      if (other.TcpChecksumStatus != 0) {
        TcpChecksumStatus = other.TcpChecksumStatus;
      }
      if (other.TcpChecksumCalculated != 0) {
        TcpChecksumCalculated = other.TcpChecksumCalculated;
      }
      if (other.TcpAnalysis != 0) {
        TcpAnalysis = other.TcpAnalysis;
      }
      if (other.TcpAnalysisFlags != 0) {
        TcpAnalysisFlags = other.TcpAnalysisFlags;
      }
      if (other.TcpAnalysisDuplicateAck != 0) {
        TcpAnalysisDuplicateAck = other.TcpAnalysisDuplicateAck;
      }
      if (other.TcpAnalysisDuplicateAckNum != 0) {
        TcpAnalysisDuplicateAckNum = other.TcpAnalysisDuplicateAckNum;
      }
      if (other.TcpAnalysisDuplicateAckFrame != 0L) {
        TcpAnalysisDuplicateAckFrame = other.TcpAnalysisDuplicateAckFrame;
      }
      if (other.TcpContinuationTo != 0L) {
        TcpContinuationTo = other.TcpContinuationTo;
      }
      if (other.TcpLen != 0) {
        TcpLen = other.TcpLen;
      }
      if (other.TcpAnalysisAcksFrame != 0L) {
        TcpAnalysisAcksFrame = other.TcpAnalysisAcksFrame;
      }
      if (other.TcpAnalysisBytesInFlight != 0) {
        TcpAnalysisBytesInFlight = other.TcpAnalysisBytesInFlight;
      }
      if (other.TcpAnalysisPushBytesSent != 0) {
        TcpAnalysisPushBytesSent = other.TcpAnalysisPushBytesSent;
      }
      if (other.TcpAnalysisAckRtt != 0L) {
        TcpAnalysisAckRtt = other.TcpAnalysisAckRtt;
      }
      if (other.TcpAnalysisInitialRtt != 0L) {
        TcpAnalysisInitialRtt = other.TcpAnalysisInitialRtt;
      }
      if (other.TcpAnalysisRto != 0L) {
        TcpAnalysisRto = other.TcpAnalysisRto;
      }
      if (other.TcpAnalysisRtoFrame != 0L) {
        TcpAnalysisRtoFrame = other.TcpAnalysisRtoFrame;
      }
      if (other.TcpUrgentPointer != 0) {
        TcpUrgentPointer = other.TcpUrgentPointer;
      }
      if (other.TcpSegmentOverlap != false) {
        TcpSegmentOverlap = other.TcpSegmentOverlap;
      }
      if (other.TcpSegmentOverlapConflict != false) {
        TcpSegmentOverlapConflict = other.TcpSegmentOverlapConflict;
      }
      if (other.TcpSegmentMultipletails != false) {
        TcpSegmentMultipletails = other.TcpSegmentMultipletails;
      }
      if (other.TcpSegmentToolongfragment != false) {
        TcpSegmentToolongfragment = other.TcpSegmentToolongfragment;
      }
      if (other.TcpSegmentError != 0L) {
        TcpSegmentError = other.TcpSegmentError;
      }
      if (other.TcpSegmentCount != 0) {
        TcpSegmentCount = other.TcpSegmentCount;
      }
      if (other.TcpSegment != 0L) {
        TcpSegment = other.TcpSegment;
      }
      if (other.TcpSegments != 0) {
        TcpSegments = other.TcpSegments;
      }
      if (other.TcpReassembledIn != 0L) {
        TcpReassembledIn = other.TcpReassembledIn;
      }
      if (other.TcpReassembledLength != 0) {
        TcpReassembledLength = other.TcpReassembledLength;
      }
      if (other.TcpReassembledData.Length != 0) {
        TcpReassembledData = other.TcpReassembledData;
      }
      if (other.TcpOptionKind != 0) {
        TcpOptionKind = other.TcpOptionKind;
      }
      if (other.TcpOptionLen != 0) {
        TcpOptionLen = other.TcpOptionLen;
      }
      if (other.TcpOptions.Length != 0) {
        TcpOptions = other.TcpOptions;
      }
      if (other.TcpOptionsMssVal != 0) {
        TcpOptionsMssVal = other.TcpOptionsMssVal;
      }
      if (other.TcpOptionsWscaleShift != 0) {
        TcpOptionsWscaleShift = other.TcpOptionsWscaleShift;
      }
      if (other.TcpOptionsWscaleMultiplier != 0) {
        TcpOptionsWscaleMultiplier = other.TcpOptionsWscaleMultiplier;
      }
      if (other.TcpOptionsExperimentalData.Length != 0) {
        TcpOptionsExperimentalData = other.TcpOptionsExperimentalData;
      }
      if (other.TcpOptionsExperimentalMagicNumber != 0) {
        TcpOptionsExperimentalMagicNumber = other.TcpOptionsExperimentalMagicNumber;
      }
      if (other.TcpOptionsSackLe != 0) {
        TcpOptionsSackLe = other.TcpOptionsSackLe;
      }
      if (other.TcpOptionsSackRe != 0) {
        TcpOptionsSackRe = other.TcpOptionsSackRe;
      }
      if (other.TcpOptionsSackCount != 0) {
        TcpOptionsSackCount = other.TcpOptionsSackCount;
      }
      if (other.TcpOptionsEchoValue != 0) {
        TcpOptionsEchoValue = other.TcpOptionsEchoValue;
      }
      if (other.TcpOptionsTimestampTsval != 0) {
        TcpOptionsTimestampTsval = other.TcpOptionsTimestampTsval;
      }
      if (other.TcpOptionsTimestampTsecr != 0) {
        TcpOptionsTimestampTsecr = other.TcpOptionsTimestampTsecr;
      }
      if (other.TcpOptionsMptcpSubtype != 0) {
        TcpOptionsMptcpSubtype = other.TcpOptionsMptcpSubtype;
      }
      if (other.TcpOptionsMptcpVersion != 0) {
        TcpOptionsMptcpVersion = other.TcpOptionsMptcpVersion;
      }
      if (other.TcpOptionsMptcpReserved != 0) {
        TcpOptionsMptcpReserved = other.TcpOptionsMptcpReserved;
      }
      if (other.TcpOptionsMptcpFlags != 0) {
        TcpOptionsMptcpFlags = other.TcpOptionsMptcpFlags;
      }
      if (other.TcpOptionsMptcpBackupFlag != 0) {
        TcpOptionsMptcpBackupFlag = other.TcpOptionsMptcpBackupFlag;
      }
      if (other.TcpOptionsMptcpChecksumreqFlags != 0) {
        TcpOptionsMptcpChecksumreqFlags = other.TcpOptionsMptcpChecksumreqFlags;
      }
      if (other.TcpOptionsMptcpExtensibilityFlag != 0) {
        TcpOptionsMptcpExtensibilityFlag = other.TcpOptionsMptcpExtensibilityFlag;
      }
      if (other.TcpOptionsMptcpSha1Flag != 0) {
        TcpOptionsMptcpSha1Flag = other.TcpOptionsMptcpSha1Flag;
      }
      if (other.TcpOptionsMptcpDatafinFlag != 0) {
        TcpOptionsMptcpDatafinFlag = other.TcpOptionsMptcpDatafinFlag;
      }
      if (other.TcpOptionsMptcpDseqn8Flag != 0) {
        TcpOptionsMptcpDseqn8Flag = other.TcpOptionsMptcpDseqn8Flag;
      }
      if (other.TcpOptionsMptcpDseqnpresentFlag != 0) {
        TcpOptionsMptcpDseqnpresentFlag = other.TcpOptionsMptcpDseqnpresentFlag;
      }
      if (other.TcpOptionsMptcpDataack8Flag != 0) {
        TcpOptionsMptcpDataack8Flag = other.TcpOptionsMptcpDataack8Flag;
      }
      if (other.TcpOptionsMptcpDataackpresentFlag != 0) {
        TcpOptionsMptcpDataackpresentFlag = other.TcpOptionsMptcpDataackpresentFlag;
      }
      if (other.TcpOptionsMptcpReservedFlag != 0) {
        TcpOptionsMptcpReservedFlag = other.TcpOptionsMptcpReservedFlag;
      }
      if (other.TcpOptionsMptcpAddrid != 0) {
        TcpOptionsMptcpAddrid = other.TcpOptionsMptcpAddrid;
      }
      if (other.TcpOptionsMptcpSendkey != 0UL) {
        TcpOptionsMptcpSendkey = other.TcpOptionsMptcpSendkey;
      }
      if (other.TcpOptionsMptcpRecvkey != 0UL) {
        TcpOptionsMptcpRecvkey = other.TcpOptionsMptcpRecvkey;
      }
      if (other.TcpOptionsMptcpRecvtok != 0) {
        TcpOptionsMptcpRecvtok = other.TcpOptionsMptcpRecvtok;
      }
      if (other.TcpOptionsMptcpSendrand != 0) {
        TcpOptionsMptcpSendrand = other.TcpOptionsMptcpSendrand;
      }
      if (other.TcpOptionsMptcpSendtrunchmac != 0UL) {
        TcpOptionsMptcpSendtrunchmac = other.TcpOptionsMptcpSendtrunchmac;
      }
      if (other.TcpOptionsMptcpSendhmac.Length != 0) {
        TcpOptionsMptcpSendhmac = other.TcpOptionsMptcpSendhmac;
      }
      if (other.TcpOptionsMptcpAddaddrtrunchmac != 0UL) {
        TcpOptionsMptcpAddaddrtrunchmac = other.TcpOptionsMptcpAddaddrtrunchmac;
      }
      if (other.TcpOptionsMptcpRawdataack != 0UL) {
        TcpOptionsMptcpRawdataack = other.TcpOptionsMptcpRawdataack;
      }
      if (other.TcpOptionsMptcpRawdataseqno != 0UL) {
        TcpOptionsMptcpRawdataseqno = other.TcpOptionsMptcpRawdataseqno;
      }
      if (other.TcpOptionsMptcpSubflowseqno != 0) {
        TcpOptionsMptcpSubflowseqno = other.TcpOptionsMptcpSubflowseqno;
      }
      if (other.TcpOptionsMptcpDatalvllen != 0) {
        TcpOptionsMptcpDatalvllen = other.TcpOptionsMptcpDatalvllen;
      }
      if (other.TcpOptionsMptcpChecksum != 0) {
        TcpOptionsMptcpChecksum = other.TcpOptionsMptcpChecksum;
      }
      if (other.TcpOptionsMptcpIpver != 0) {
        TcpOptionsMptcpIpver = other.TcpOptionsMptcpIpver;
      }
      if (other.TcpOptionsMptcpIpv4.Length != 0) {
        TcpOptionsMptcpIpv4 = other.TcpOptionsMptcpIpv4;
      }
      if (other.TcpOptionsMptcpIpv6.Length != 0) {
        TcpOptionsMptcpIpv6 = other.TcpOptionsMptcpIpv6;
      }
      if (other.TcpOptionsMptcpPort != 0) {
        TcpOptionsMptcpPort = other.TcpOptionsMptcpPort;
      }
      if (other.TcpOptionsCcValue != 0) {
        TcpOptionsCcValue = other.TcpOptionsCcValue;
      }
      if (other.TcpOptionsMd5Digest.Length != 0) {
        TcpOptionsMd5Digest = other.TcpOptionsMd5Digest;
      }
      if (other.TcpOptionsQsRate != 0) {
        TcpOptionsQsRate = other.TcpOptionsQsRate;
      }
      if (other.TcpOptionsQsTtlDiff != 0) {
        TcpOptionsQsTtlDiff = other.TcpOptionsQsTtlDiff;
      }
      if (other.TcpOptionsScpsVector != 0) {
        TcpOptionsScpsVector = other.TcpOptionsScpsVector;
      }
      if (other.TcpOptionsScpsBindingId != 0) {
        TcpOptionsScpsBindingId = other.TcpOptionsScpsBindingId;
      }
      if (other.TcpOptionsScpsBindingLen != 0) {
        TcpOptionsScpsBindingLen = other.TcpOptionsScpsBindingLen;
      }
      if (other.TcpOptionsSnackOffset != 0) {
        TcpOptionsSnackOffset = other.TcpOptionsSnackOffset;
      }
      if (other.TcpOptionsSnackSize != 0) {
        TcpOptionsSnackSize = other.TcpOptionsSnackSize;
      }
      if (other.TcpOptionsSnackLe != 0) {
        TcpOptionsSnackLe = other.TcpOptionsSnackLe;
      }
      if (other.TcpOptionsSnackRe != 0) {
        TcpOptionsSnackRe = other.TcpOptionsSnackRe;
      }
      if (other.TcpOptionsScpsflagsBets != false) {
        TcpOptionsScpsflagsBets = other.TcpOptionsScpsflagsBets;
      }
      if (other.TcpOptionsScpsflagsSnack1 != false) {
        TcpOptionsScpsflagsSnack1 = other.TcpOptionsScpsflagsSnack1;
      }
      if (other.TcpOptionsScpsflagsSnack2 != false) {
        TcpOptionsScpsflagsSnack2 = other.TcpOptionsScpsflagsSnack2;
      }
      if (other.TcpOptionsScpsflagsCompress != false) {
        TcpOptionsScpsflagsCompress = other.TcpOptionsScpsflagsCompress;
      }
      if (other.TcpOptionsScpsflagsNlts != false) {
        TcpOptionsScpsflagsNlts = other.TcpOptionsScpsflagsNlts;
      }
      if (other.TcpOptionsScpsflagsReserved != 0) {
        TcpOptionsScpsflagsReserved = other.TcpOptionsScpsflagsReserved;
      }
      if (other.TcpOptionsScpsBinding != 0) {
        TcpOptionsScpsBinding = other.TcpOptionsScpsBinding;
      }
      if (other.TcpOptionsUserToGranularity != false) {
        TcpOptionsUserToGranularity = other.TcpOptionsUserToGranularity;
      }
      if (other.TcpOptionsUserToVal != 0) {
        TcpOptionsUserToVal = other.TcpOptionsUserToVal;
      }
      if (other.TcpOptionsRvbdProbeType1 != 0) {
        TcpOptionsRvbdProbeType1 = other.TcpOptionsRvbdProbeType1;
      }
      if (other.TcpOptionsRvbdProbeType2 != 0) {
        TcpOptionsRvbdProbeType2 = other.TcpOptionsRvbdProbeType2;
      }
      if (other.TcpOptionsRvbdProbeVersion != 0) {
        TcpOptionsRvbdProbeVersion = other.TcpOptionsRvbdProbeVersion;
      }
      if (other.TcpOptionsRvbdProbeVersionRaw != 0) {
        TcpOptionsRvbdProbeVersionRaw = other.TcpOptionsRvbdProbeVersionRaw;
      }
      if (other.TcpOptionsRvbdProbeLen != 0) {
        TcpOptionsRvbdProbeLen = other.TcpOptionsRvbdProbeLen;
      }
      if (other.TcpOptionsRvbdProbeProber.Length != 0) {
        TcpOptionsRvbdProbeProber = other.TcpOptionsRvbdProbeProber;
      }
      if (other.TcpOptionsRvbdProbeProxyIp.Length != 0) {
        TcpOptionsRvbdProbeProxyIp = other.TcpOptionsRvbdProbeProxyIp;
      }
      if (other.TcpOptionsRvbdProbeProxyPort != 0) {
        TcpOptionsRvbdProbeProxyPort = other.TcpOptionsRvbdProbeProxyPort;
      }
      if (other.TcpOptionsRvbdProbeAppliVer != 0) {
        TcpOptionsRvbdProbeAppliVer = other.TcpOptionsRvbdProbeAppliVer;
      }
      if (other.TcpOptionsRvbdProbeClientIp.Length != 0) {
        TcpOptionsRvbdProbeClientIp = other.TcpOptionsRvbdProbeClientIp;
      }
      if (other.TcpOptionsRvbdProbeStoreid != 0) {
        TcpOptionsRvbdProbeStoreid = other.TcpOptionsRvbdProbeStoreid;
      }
      if (other.TcpOptionsRvbdProbeFlags != 0) {
        TcpOptionsRvbdProbeFlags = other.TcpOptionsRvbdProbeFlags;
      }
      if (other.TcpOptionsRvbdProbeFlagsNotcfe != false) {
        TcpOptionsRvbdProbeFlagsNotcfe = other.TcpOptionsRvbdProbeFlagsNotcfe;
      }
      if (other.TcpOptionsRvbdProbeFlagsLast != false) {
        TcpOptionsRvbdProbeFlagsLast = other.TcpOptionsRvbdProbeFlagsLast;
      }
      if (other.TcpOptionsRvbdProbeFlagsProbe != false) {
        TcpOptionsRvbdProbeFlagsProbe = other.TcpOptionsRvbdProbeFlagsProbe;
      }
      if (other.TcpOptionsRvbdProbeFlagsSsl != false) {
        TcpOptionsRvbdProbeFlagsSsl = other.TcpOptionsRvbdProbeFlagsSsl;
      }
      if (other.TcpOptionsRvbdProbeFlagsServer != false) {
        TcpOptionsRvbdProbeFlagsServer = other.TcpOptionsRvbdProbeFlagsServer;
      }
      if (other.TcpOptionsRvbdTrpyFlags != 0) {
        TcpOptionsRvbdTrpyFlags = other.TcpOptionsRvbdTrpyFlags;
      }
      if (other.TcpOptionsRvbdTrpyFlagsFwRstProbe != false) {
        TcpOptionsRvbdTrpyFlagsFwRstProbe = other.TcpOptionsRvbdTrpyFlagsFwRstProbe;
      }
      if (other.TcpOptionsRvbdTrpyFlagsFwRstInner != false) {
        TcpOptionsRvbdTrpyFlagsFwRstInner = other.TcpOptionsRvbdTrpyFlagsFwRstInner;
      }
      if (other.TcpOptionsRvbdTrpyFlagsFwRst != false) {
        TcpOptionsRvbdTrpyFlagsFwRst = other.TcpOptionsRvbdTrpyFlagsFwRst;
      }
      if (other.TcpOptionsRvbdTrpyFlagsChksum != false) {
        TcpOptionsRvbdTrpyFlagsChksum = other.TcpOptionsRvbdTrpyFlagsChksum;
      }
      if (other.TcpOptionsRvbdTrpyFlagsOob != false) {
        TcpOptionsRvbdTrpyFlagsOob = other.TcpOptionsRvbdTrpyFlagsOob;
      }
      if (other.TcpOptionsRvbdTrpyFlagsMode != false) {
        TcpOptionsRvbdTrpyFlagsMode = other.TcpOptionsRvbdTrpyFlagsMode;
      }
      if (other.TcpOptionsRvbdTrpySrcIp.Length != 0) {
        TcpOptionsRvbdTrpySrcIp = other.TcpOptionsRvbdTrpySrcIp;
      }
      if (other.TcpOptionsRvbdTrpyDstIp.Length != 0) {
        TcpOptionsRvbdTrpyDstIp = other.TcpOptionsRvbdTrpyDstIp;
      }
      if (other.TcpOptionsRvbdTrpySrcPort != 0) {
        TcpOptionsRvbdTrpySrcPort = other.TcpOptionsRvbdTrpySrcPort;
      }
      if (other.TcpOptionsRvbdTrpyDstPort != 0) {
        TcpOptionsRvbdTrpyDstPort = other.TcpOptionsRvbdTrpyDstPort;
      }
      if (other.TcpOptionsRvbdTrpyClientPort != 0) {
        TcpOptionsRvbdTrpyClientPort = other.TcpOptionsRvbdTrpyClientPort;
      }
      if (other.TcpOptionsTfoRequest != 0) {
        TcpOptionsTfoRequest = other.TcpOptionsTfoRequest;
      }
      if (other.TcpOptionsTfoCookie.Length != 0) {
        TcpOptionsTfoCookie = other.TcpOptionsTfoCookie;
      }
      if (other.TcpPduTime != 0L) {
        TcpPduTime = other.TcpPduTime;
      }
      if (other.TcpPduSize != 0) {
        TcpPduSize = other.TcpPduSize;
      }
      if (other.TcpPduLastFrame != 0L) {
        TcpPduLastFrame = other.TcpPduLastFrame;
      }
      if (other.TcpTimeRelative != 0L) {
        TcpTimeRelative = other.TcpTimeRelative;
      }
      if (other.TcpTimeDelta != 0L) {
        TcpTimeDelta = other.TcpTimeDelta;
      }
      if (other.TcpProcSrcuid != 0) {
        TcpProcSrcuid = other.TcpProcSrcuid;
      }
      if (other.TcpProcSrcpid != 0) {
        TcpProcSrcpid = other.TcpProcSrcpid;
      }
      if (other.TcpProcSrcuname.Length != 0) {
        TcpProcSrcuname = other.TcpProcSrcuname;
      }
      if (other.TcpProcSrccmd.Length != 0) {
        TcpProcSrccmd = other.TcpProcSrccmd;
      }
      if (other.TcpProcDstuid != 0) {
        TcpProcDstuid = other.TcpProcDstuid;
      }
      if (other.TcpProcDstpid != 0) {
        TcpProcDstpid = other.TcpProcDstpid;
      }
      if (other.TcpProcDstuname.Length != 0) {
        TcpProcDstuname = other.TcpProcDstuname;
      }
      if (other.TcpProcDstcmd.Length != 0) {
        TcpProcDstcmd = other.TcpProcDstcmd;
      }
      if (other.TcpSegmentData.Length != 0) {
        TcpSegmentData = other.TcpSegmentData;
      }
      if (other.TcpPayload.Length != 0) {
        TcpPayload = other.TcpPayload;
      }
      if (other.TcpOptionsScpsBindingData.Length != 0) {
        TcpOptionsScpsBindingData = other.TcpOptionsScpsBindingData;
      }
      if (other.TcpOptionsRvbdProbeReserved != 0) {
        TcpOptionsRvbdProbeReserved = other.TcpOptionsRvbdProbeReserved;
      }
      if (other.TcpFinRetransmission != 0L) {
        TcpFinRetransmission = other.TcpFinRetransmission;
      }
      if (other.TcpResetCause.Length != 0) {
        TcpResetCause = other.TcpResetCause;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TcpSrcport = input.ReadUInt32();
            break;
          }
          case 16: {
            TcpDstport = input.ReadUInt32();
            break;
          }
          case 24: {
            TcpPort = input.ReadUInt32();
            break;
          }
          case 32: {
            TcpStream = input.ReadUInt32();
            break;
          }
          case 40: {
            TcpSeq = input.ReadUInt32();
            break;
          }
          case 48: {
            TcpNxtseq = input.ReadUInt32();
            break;
          }
          case 56: {
            TcpAck = input.ReadUInt32();
            break;
          }
          case 64: {
            TcpHdrLen = input.ReadUInt32();
            break;
          }
          case 72: {
            TcpFlags = input.ReadUInt32();
            break;
          }
          case 80: {
            TcpFlagsRes = input.ReadBool();
            break;
          }
          case 88: {
            TcpFlagsNs = input.ReadBool();
            break;
          }
          case 96: {
            TcpFlagsCwr = input.ReadBool();
            break;
          }
          case 104: {
            TcpFlagsEcn = input.ReadBool();
            break;
          }
          case 112: {
            TcpFlagsUrg = input.ReadBool();
            break;
          }
          case 120: {
            TcpFlagsAck = input.ReadBool();
            break;
          }
          case 128: {
            TcpFlagsPush = input.ReadBool();
            break;
          }
          case 136: {
            TcpFlagsReset = input.ReadBool();
            break;
          }
          case 144: {
            TcpFlagsSyn = input.ReadBool();
            break;
          }
          case 152: {
            TcpFlagsFin = input.ReadBool();
            break;
          }
          case 162: {
            TcpFlagsStr = input.ReadString();
            break;
          }
          case 168: {
            TcpWindowSizeValue = input.ReadUInt32();
            break;
          }
          case 176: {
            TcpWindowSize = input.ReadUInt32();
            break;
          }
          case 184: {
            TcpWindowSizeScalefactor = input.ReadInt32();
            break;
          }
          case 192: {
            TcpChecksum = input.ReadUInt32();
            break;
          }
          case 200: {
            TcpChecksumStatus = input.ReadUInt32();
            break;
          }
          case 208: {
            TcpChecksumCalculated = input.ReadUInt32();
            break;
          }
          case 216: {
            TcpAnalysis = input.ReadInt32();
            break;
          }
          case 224: {
            TcpAnalysisFlags = input.ReadInt32();
            break;
          }
          case 232: {
            TcpAnalysisDuplicateAck = input.ReadInt32();
            break;
          }
          case 240: {
            TcpAnalysisDuplicateAckNum = input.ReadUInt32();
            break;
          }
          case 248: {
            TcpAnalysisDuplicateAckFrame = input.ReadInt64();
            break;
          }
          case 256: {
            TcpContinuationTo = input.ReadInt64();
            break;
          }
          case 264: {
            TcpLen = input.ReadUInt32();
            break;
          }
          case 272: {
            TcpAnalysisAcksFrame = input.ReadInt64();
            break;
          }
          case 280: {
            TcpAnalysisBytesInFlight = input.ReadUInt32();
            break;
          }
          case 288: {
            TcpAnalysisPushBytesSent = input.ReadUInt32();
            break;
          }
          case 296: {
            TcpAnalysisAckRtt = input.ReadInt64();
            break;
          }
          case 304: {
            TcpAnalysisInitialRtt = input.ReadInt64();
            break;
          }
          case 312: {
            TcpAnalysisRto = input.ReadInt64();
            break;
          }
          case 320: {
            TcpAnalysisRtoFrame = input.ReadInt64();
            break;
          }
          case 328: {
            TcpUrgentPointer = input.ReadUInt32();
            break;
          }
          case 336: {
            TcpSegmentOverlap = input.ReadBool();
            break;
          }
          case 344: {
            TcpSegmentOverlapConflict = input.ReadBool();
            break;
          }
          case 352: {
            TcpSegmentMultipletails = input.ReadBool();
            break;
          }
          case 360: {
            TcpSegmentToolongfragment = input.ReadBool();
            break;
          }
          case 368: {
            TcpSegmentError = input.ReadInt64();
            break;
          }
          case 376: {
            TcpSegmentCount = input.ReadUInt32();
            break;
          }
          case 384: {
            TcpSegment = input.ReadInt64();
            break;
          }
          case 392: {
            TcpSegments = input.ReadInt32();
            break;
          }
          case 400: {
            TcpReassembledIn = input.ReadInt64();
            break;
          }
          case 408: {
            TcpReassembledLength = input.ReadUInt32();
            break;
          }
          case 418: {
            TcpReassembledData = input.ReadBytes();
            break;
          }
          case 424: {
            TcpOptionKind = input.ReadUInt32();
            break;
          }
          case 432: {
            TcpOptionLen = input.ReadUInt32();
            break;
          }
          case 442: {
            TcpOptions = input.ReadBytes();
            break;
          }
          case 448: {
            TcpOptionsMssVal = input.ReadUInt32();
            break;
          }
          case 456: {
            TcpOptionsWscaleShift = input.ReadUInt32();
            break;
          }
          case 464: {
            TcpOptionsWscaleMultiplier = input.ReadUInt32();
            break;
          }
          case 474: {
            TcpOptionsExperimentalData = input.ReadBytes();
            break;
          }
          case 480: {
            TcpOptionsExperimentalMagicNumber = input.ReadUInt32();
            break;
          }
          case 488: {
            TcpOptionsSackLe = input.ReadUInt32();
            break;
          }
          case 496: {
            TcpOptionsSackRe = input.ReadUInt32();
            break;
          }
          case 504: {
            TcpOptionsSackCount = input.ReadUInt32();
            break;
          }
          case 512: {
            TcpOptionsEchoValue = input.ReadUInt32();
            break;
          }
          case 520: {
            TcpOptionsTimestampTsval = input.ReadUInt32();
            break;
          }
          case 528: {
            TcpOptionsTimestampTsecr = input.ReadUInt32();
            break;
          }
          case 536: {
            TcpOptionsMptcpSubtype = input.ReadUInt32();
            break;
          }
          case 544: {
            TcpOptionsMptcpVersion = input.ReadUInt32();
            break;
          }
          case 552: {
            TcpOptionsMptcpReserved = input.ReadUInt32();
            break;
          }
          case 560: {
            TcpOptionsMptcpFlags = input.ReadUInt32();
            break;
          }
          case 568: {
            TcpOptionsMptcpBackupFlag = input.ReadUInt32();
            break;
          }
          case 576: {
            TcpOptionsMptcpChecksumreqFlags = input.ReadUInt32();
            break;
          }
          case 584: {
            TcpOptionsMptcpExtensibilityFlag = input.ReadUInt32();
            break;
          }
          case 592: {
            TcpOptionsMptcpSha1Flag = input.ReadUInt32();
            break;
          }
          case 600: {
            TcpOptionsMptcpDatafinFlag = input.ReadUInt32();
            break;
          }
          case 608: {
            TcpOptionsMptcpDseqn8Flag = input.ReadUInt32();
            break;
          }
          case 616: {
            TcpOptionsMptcpDseqnpresentFlag = input.ReadUInt32();
            break;
          }
          case 624: {
            TcpOptionsMptcpDataack8Flag = input.ReadUInt32();
            break;
          }
          case 632: {
            TcpOptionsMptcpDataackpresentFlag = input.ReadUInt32();
            break;
          }
          case 640: {
            TcpOptionsMptcpReservedFlag = input.ReadUInt32();
            break;
          }
          case 648: {
            TcpOptionsMptcpAddrid = input.ReadUInt32();
            break;
          }
          case 656: {
            TcpOptionsMptcpSendkey = input.ReadUInt64();
            break;
          }
          case 664: {
            TcpOptionsMptcpRecvkey = input.ReadUInt64();
            break;
          }
          case 672: {
            TcpOptionsMptcpRecvtok = input.ReadUInt32();
            break;
          }
          case 680: {
            TcpOptionsMptcpSendrand = input.ReadUInt32();
            break;
          }
          case 688: {
            TcpOptionsMptcpSendtrunchmac = input.ReadUInt64();
            break;
          }
          case 698: {
            TcpOptionsMptcpSendhmac = input.ReadBytes();
            break;
          }
          case 704: {
            TcpOptionsMptcpAddaddrtrunchmac = input.ReadUInt64();
            break;
          }
          case 712: {
            TcpOptionsMptcpRawdataack = input.ReadUInt64();
            break;
          }
          case 720: {
            TcpOptionsMptcpRawdataseqno = input.ReadUInt64();
            break;
          }
          case 728: {
            TcpOptionsMptcpSubflowseqno = input.ReadUInt32();
            break;
          }
          case 736: {
            TcpOptionsMptcpDatalvllen = input.ReadUInt32();
            break;
          }
          case 744: {
            TcpOptionsMptcpChecksum = input.ReadUInt32();
            break;
          }
          case 752: {
            TcpOptionsMptcpIpver = input.ReadUInt32();
            break;
          }
          case 762: {
            TcpOptionsMptcpIpv4 = input.ReadBytes();
            break;
          }
          case 770: {
            TcpOptionsMptcpIpv6 = input.ReadBytes();
            break;
          }
          case 776: {
            TcpOptionsMptcpPort = input.ReadUInt32();
            break;
          }
          case 784: {
            TcpOptionsCcValue = input.ReadUInt32();
            break;
          }
          case 794: {
            TcpOptionsMd5Digest = input.ReadBytes();
            break;
          }
          case 800: {
            TcpOptionsQsRate = input.ReadUInt32();
            break;
          }
          case 808: {
            TcpOptionsQsTtlDiff = input.ReadUInt32();
            break;
          }
          case 816: {
            TcpOptionsScpsVector = input.ReadUInt32();
            break;
          }
          case 824: {
            TcpOptionsScpsBindingId = input.ReadUInt32();
            break;
          }
          case 832: {
            TcpOptionsScpsBindingLen = input.ReadUInt32();
            break;
          }
          case 840: {
            TcpOptionsSnackOffset = input.ReadUInt32();
            break;
          }
          case 848: {
            TcpOptionsSnackSize = input.ReadUInt32();
            break;
          }
          case 856: {
            TcpOptionsSnackLe = input.ReadUInt32();
            break;
          }
          case 864: {
            TcpOptionsSnackRe = input.ReadUInt32();
            break;
          }
          case 872: {
            TcpOptionsScpsflagsBets = input.ReadBool();
            break;
          }
          case 880: {
            TcpOptionsScpsflagsSnack1 = input.ReadBool();
            break;
          }
          case 888: {
            TcpOptionsScpsflagsSnack2 = input.ReadBool();
            break;
          }
          case 896: {
            TcpOptionsScpsflagsCompress = input.ReadBool();
            break;
          }
          case 904: {
            TcpOptionsScpsflagsNlts = input.ReadBool();
            break;
          }
          case 912: {
            TcpOptionsScpsflagsReserved = input.ReadUInt32();
            break;
          }
          case 920: {
            TcpOptionsScpsBinding = input.ReadUInt32();
            break;
          }
          case 928: {
            TcpOptionsUserToGranularity = input.ReadBool();
            break;
          }
          case 936: {
            TcpOptionsUserToVal = input.ReadUInt32();
            break;
          }
          case 944: {
            TcpOptionsRvbdProbeType1 = input.ReadUInt32();
            break;
          }
          case 952: {
            TcpOptionsRvbdProbeType2 = input.ReadUInt32();
            break;
          }
          case 960: {
            TcpOptionsRvbdProbeVersion = input.ReadUInt32();
            break;
          }
          case 968: {
            TcpOptionsRvbdProbeVersionRaw = input.ReadUInt32();
            break;
          }
          case 976: {
            TcpOptionsRvbdProbeLen = input.ReadUInt32();
            break;
          }
          case 986: {
            TcpOptionsRvbdProbeProber = input.ReadBytes();
            break;
          }
          case 994: {
            TcpOptionsRvbdProbeProxyIp = input.ReadBytes();
            break;
          }
          case 1000: {
            TcpOptionsRvbdProbeProxyPort = input.ReadUInt32();
            break;
          }
          case 1008: {
            TcpOptionsRvbdProbeAppliVer = input.ReadUInt32();
            break;
          }
          case 1018: {
            TcpOptionsRvbdProbeClientIp = input.ReadBytes();
            break;
          }
          case 1024: {
            TcpOptionsRvbdProbeStoreid = input.ReadUInt32();
            break;
          }
          case 1032: {
            TcpOptionsRvbdProbeFlags = input.ReadUInt32();
            break;
          }
          case 1040: {
            TcpOptionsRvbdProbeFlagsNotcfe = input.ReadBool();
            break;
          }
          case 1048: {
            TcpOptionsRvbdProbeFlagsLast = input.ReadBool();
            break;
          }
          case 1056: {
            TcpOptionsRvbdProbeFlagsProbe = input.ReadBool();
            break;
          }
          case 1064: {
            TcpOptionsRvbdProbeFlagsSsl = input.ReadBool();
            break;
          }
          case 1072: {
            TcpOptionsRvbdProbeFlagsServer = input.ReadBool();
            break;
          }
          case 1080: {
            TcpOptionsRvbdTrpyFlags = input.ReadUInt32();
            break;
          }
          case 1088: {
            TcpOptionsRvbdTrpyFlagsFwRstProbe = input.ReadBool();
            break;
          }
          case 1096: {
            TcpOptionsRvbdTrpyFlagsFwRstInner = input.ReadBool();
            break;
          }
          case 1104: {
            TcpOptionsRvbdTrpyFlagsFwRst = input.ReadBool();
            break;
          }
          case 1112: {
            TcpOptionsRvbdTrpyFlagsChksum = input.ReadBool();
            break;
          }
          case 1120: {
            TcpOptionsRvbdTrpyFlagsOob = input.ReadBool();
            break;
          }
          case 1128: {
            TcpOptionsRvbdTrpyFlagsMode = input.ReadBool();
            break;
          }
          case 1138: {
            TcpOptionsRvbdTrpySrcIp = input.ReadBytes();
            break;
          }
          case 1146: {
            TcpOptionsRvbdTrpyDstIp = input.ReadBytes();
            break;
          }
          case 1152: {
            TcpOptionsRvbdTrpySrcPort = input.ReadUInt32();
            break;
          }
          case 1160: {
            TcpOptionsRvbdTrpyDstPort = input.ReadUInt32();
            break;
          }
          case 1168: {
            TcpOptionsRvbdTrpyClientPort = input.ReadUInt32();
            break;
          }
          case 1176: {
            TcpOptionsTfoRequest = input.ReadInt32();
            break;
          }
          case 1186: {
            TcpOptionsTfoCookie = input.ReadBytes();
            break;
          }
          case 1192: {
            TcpPduTime = input.ReadInt64();
            break;
          }
          case 1200: {
            TcpPduSize = input.ReadUInt32();
            break;
          }
          case 1208: {
            TcpPduLastFrame = input.ReadInt64();
            break;
          }
          case 1216: {
            TcpTimeRelative = input.ReadInt64();
            break;
          }
          case 1224: {
            TcpTimeDelta = input.ReadInt64();
            break;
          }
          case 1232: {
            TcpProcSrcuid = input.ReadUInt32();
            break;
          }
          case 1240: {
            TcpProcSrcpid = input.ReadUInt32();
            break;
          }
          case 1250: {
            TcpProcSrcuname = input.ReadString();
            break;
          }
          case 1258: {
            TcpProcSrccmd = input.ReadString();
            break;
          }
          case 1264: {
            TcpProcDstuid = input.ReadUInt32();
            break;
          }
          case 1272: {
            TcpProcDstpid = input.ReadUInt32();
            break;
          }
          case 1282: {
            TcpProcDstuname = input.ReadString();
            break;
          }
          case 1290: {
            TcpProcDstcmd = input.ReadString();
            break;
          }
          case 1298: {
            TcpSegmentData = input.ReadBytes();
            break;
          }
          case 1306: {
            TcpPayload = input.ReadBytes();
            break;
          }
          case 1314: {
            TcpOptionsScpsBindingData = input.ReadBytes();
            break;
          }
          case 1320: {
            TcpOptionsRvbdProbeReserved = input.ReadUInt32();
            break;
          }
          case 1328: {
            TcpFinRetransmission = input.ReadInt64();
            break;
          }
          case 1338: {
            TcpResetCause = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
