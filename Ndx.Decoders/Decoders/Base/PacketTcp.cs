// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-tcp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-tcp.proto</summary>
  public static partial class PacketTcpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-tcp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketTcpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwYWNrZXQtdGNwLnByb3RvEhFOZHguRGVjb2RlcnMuQmFzZSLxAwoDVGNw",
            "EhIKClRjcFNyY3BvcnQYASABKA0SEgoKVGNwRHN0cG9ydBgCIAEoDRIRCglU",
            "Y3BTdHJlYW0YAyABKA0SDgoGVGNwU2VxGAQgASgNEhEKCVRjcE54dHNlcRgF",
            "IAEoDRIOCgZUY3BBY2sYBiABKA0SEQoJVGNwSGRyTGVuGAcgASgNEhAKCFRj",
            "cEZsYWdzGAggASgNEhMKC1RjcEZsYWdzUmVzGAkgASgIEhIKClRjcEZsYWdz",
            "TnMYCiABKAgSEwoLVGNwRmxhZ3NDd3IYCyABKAgSEwoLVGNwRmxhZ3NFY24Y",
            "DCABKAgSEwoLVGNwRmxhZ3NVcmcYDSABKAgSEwoLVGNwRmxhZ3NBY2sYDiAB",
            "KAgSFAoMVGNwRmxhZ3NQdXNoGA8gASgIEhUKDVRjcEZsYWdzUmVzZXQYECAB",
            "KAgSEwoLVGNwRmxhZ3NTeW4YESABKAgSEwoLVGNwRmxhZ3NGaW4YEiABKAgS",
            "FQoNVGNwV2luZG93U2l6ZRgTIAEoDRITCgtUY3BDaGVja3N1bRgUIAEoDRIZ",
            "ChFUY3BDaGVja3N1bVN0YXR1cxgVIAEoDRIOCgZUY3BMZW4YFiABKA0SGAoQ",
            "VGNwVXJnZW50UG9pbnRlchgXIAEoDRISCgpUY3BQYXlsb2FkGBggASgMYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Tcp), global::Ndx.Decoders.Base.Tcp.Parser, new[]{ "TcpSrcport", "TcpDstport", "TcpStream", "TcpSeq", "TcpNxtseq", "TcpAck", "TcpHdrLen", "TcpFlags", "TcpFlagsRes", "TcpFlagsNs", "TcpFlagsCwr", "TcpFlagsEcn", "TcpFlagsUrg", "TcpFlagsAck", "TcpFlagsPush", "TcpFlagsReset", "TcpFlagsSyn", "TcpFlagsFin", "TcpWindowSize", "TcpChecksum", "TcpChecksumStatus", "TcpLen", "TcpUrgentPointer", "TcpPayload" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Tcp : pb::IMessage<Tcp> {
    private static readonly pb::MessageParser<Tcp> _parser = new pb::MessageParser<Tcp>(() => new Tcp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tcp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketTcpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp(Tcp other) : this() {
      tcpSrcport_ = other.tcpSrcport_;
      tcpDstport_ = other.tcpDstport_;
      tcpStream_ = other.tcpStream_;
      tcpSeq_ = other.tcpSeq_;
      tcpNxtseq_ = other.tcpNxtseq_;
      tcpAck_ = other.tcpAck_;
      tcpHdrLen_ = other.tcpHdrLen_;
      tcpFlags_ = other.tcpFlags_;
      tcpFlagsRes_ = other.tcpFlagsRes_;
      tcpFlagsNs_ = other.tcpFlagsNs_;
      tcpFlagsCwr_ = other.tcpFlagsCwr_;
      tcpFlagsEcn_ = other.tcpFlagsEcn_;
      tcpFlagsUrg_ = other.tcpFlagsUrg_;
      tcpFlagsAck_ = other.tcpFlagsAck_;
      tcpFlagsPush_ = other.tcpFlagsPush_;
      tcpFlagsReset_ = other.tcpFlagsReset_;
      tcpFlagsSyn_ = other.tcpFlagsSyn_;
      tcpFlagsFin_ = other.tcpFlagsFin_;
      tcpWindowSize_ = other.tcpWindowSize_;
      tcpChecksum_ = other.tcpChecksum_;
      tcpChecksumStatus_ = other.tcpChecksumStatus_;
      tcpLen_ = other.tcpLen_;
      tcpUrgentPointer_ = other.tcpUrgentPointer_;
      tcpPayload_ = other.tcpPayload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tcp Clone() {
      return new Tcp(this);
    }

    /// <summary>Field number for the "TcpSrcport" field.</summary>
    public const int TcpSrcportFieldNumber = 1;
    private uint tcpSrcport_;
    /// <summary>
    /// Source Port ('tcp_tcp_srcport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpSrcport {
      get { return tcpSrcport_; }
      set {
        tcpSrcport_ = value;
      }
    }

    /// <summary>Field number for the "TcpDstport" field.</summary>
    public const int TcpDstportFieldNumber = 2;
    private uint tcpDstport_;
    /// <summary>
    /// Destination Port ('tcp_tcp_dstport')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpDstport {
      get { return tcpDstport_; }
      set {
        tcpDstport_ = value;
      }
    }

    /// <summary>Field number for the "TcpStream" field.</summary>
    public const int TcpStreamFieldNumber = 3;
    private uint tcpStream_;
    /// <summary>
    /// Stream index ('tcp_tcp_stream')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpStream {
      get { return tcpStream_; }
      set {
        tcpStream_ = value;
      }
    }

    /// <summary>Field number for the "TcpSeq" field.</summary>
    public const int TcpSeqFieldNumber = 4;
    private uint tcpSeq_;
    /// <summary>
    /// Sequence number ('tcp_tcp_seq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpSeq {
      get { return tcpSeq_; }
      set {
        tcpSeq_ = value;
      }
    }

    /// <summary>Field number for the "TcpNxtseq" field.</summary>
    public const int TcpNxtseqFieldNumber = 5;
    private uint tcpNxtseq_;
    /// <summary>
    /// Next sequence number ('tcp_tcp_nxtseq')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpNxtseq {
      get { return tcpNxtseq_; }
      set {
        tcpNxtseq_ = value;
      }
    }

    /// <summary>Field number for the "TcpAck" field.</summary>
    public const int TcpAckFieldNumber = 6;
    private uint tcpAck_;
    /// <summary>
    /// Acknowledgment number ('tcp_tcp_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpAck {
      get { return tcpAck_; }
      set {
        tcpAck_ = value;
      }
    }

    /// <summary>Field number for the "TcpHdrLen" field.</summary>
    public const int TcpHdrLenFieldNumber = 7;
    private uint tcpHdrLen_;
    /// <summary>
    /// Header Length ('tcp_tcp_hdr_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpHdrLen {
      get { return tcpHdrLen_; }
      set {
        tcpHdrLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlags" field.</summary>
    public const int TcpFlagsFieldNumber = 8;
    private uint tcpFlags_;
    /// <summary>
    /// Flags ('tcp_tcp_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpFlags {
      get { return tcpFlags_; }
      set {
        tcpFlags_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsRes" field.</summary>
    public const int TcpFlagsResFieldNumber = 9;
    private bool tcpFlagsRes_;
    /// <summary>
    /// Reserved ('tcp_flags_tcp_flags_res')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsRes {
      get { return tcpFlagsRes_; }
      set {
        tcpFlagsRes_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsNs" field.</summary>
    public const int TcpFlagsNsFieldNumber = 10;
    private bool tcpFlagsNs_;
    /// <summary>
    /// Nonce ('tcp_flags_tcp_flags_ns')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsNs {
      get { return tcpFlagsNs_; }
      set {
        tcpFlagsNs_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsCwr" field.</summary>
    public const int TcpFlagsCwrFieldNumber = 11;
    private bool tcpFlagsCwr_;
    /// <summary>
    /// Congestion Window Reduced (CWR) ('tcp_flags_tcp_flags_cwr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsCwr {
      get { return tcpFlagsCwr_; }
      set {
        tcpFlagsCwr_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsEcn" field.</summary>
    public const int TcpFlagsEcnFieldNumber = 12;
    private bool tcpFlagsEcn_;
    /// <summary>
    /// ECN-Echo ('tcp_flags_tcp_flags_ecn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsEcn {
      get { return tcpFlagsEcn_; }
      set {
        tcpFlagsEcn_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsUrg" field.</summary>
    public const int TcpFlagsUrgFieldNumber = 13;
    private bool tcpFlagsUrg_;
    /// <summary>
    /// Urgent ('tcp_flags_tcp_flags_urg')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsUrg {
      get { return tcpFlagsUrg_; }
      set {
        tcpFlagsUrg_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsAck" field.</summary>
    public const int TcpFlagsAckFieldNumber = 14;
    private bool tcpFlagsAck_;
    /// <summary>
    /// Acknowledgment ('tcp_flags_tcp_flags_ack')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsAck {
      get { return tcpFlagsAck_; }
      set {
        tcpFlagsAck_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsPush" field.</summary>
    public const int TcpFlagsPushFieldNumber = 15;
    private bool tcpFlagsPush_;
    /// <summary>
    /// Push ('tcp_flags_tcp_flags_push')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsPush {
      get { return tcpFlagsPush_; }
      set {
        tcpFlagsPush_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsReset" field.</summary>
    public const int TcpFlagsResetFieldNumber = 16;
    private bool tcpFlagsReset_;
    /// <summary>
    /// Reset ('tcp_flags_tcp_flags_reset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsReset {
      get { return tcpFlagsReset_; }
      set {
        tcpFlagsReset_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsSyn" field.</summary>
    public const int TcpFlagsSynFieldNumber = 17;
    private bool tcpFlagsSyn_;
    /// <summary>
    /// Syn ('tcp_flags_tcp_flags_syn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsSyn {
      get { return tcpFlagsSyn_; }
      set {
        tcpFlagsSyn_ = value;
      }
    }

    /// <summary>Field number for the "TcpFlagsFin" field.</summary>
    public const int TcpFlagsFinFieldNumber = 18;
    private bool tcpFlagsFin_;
    /// <summary>
    /// Fin ('tcp_flags_tcp_flags_fin')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpFlagsFin {
      get { return tcpFlagsFin_; }
      set {
        tcpFlagsFin_ = value;
      }
    }

    /// <summary>Field number for the "TcpWindowSize" field.</summary>
    public const int TcpWindowSizeFieldNumber = 19;
    private uint tcpWindowSize_;
    /// <summary>
    /// Calculated window size ('tcp_tcp_window_size')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpWindowSize {
      get { return tcpWindowSize_; }
      set {
        tcpWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "TcpChecksum" field.</summary>
    public const int TcpChecksumFieldNumber = 20;
    private uint tcpChecksum_;
    /// <summary>
    /// Checksum ('tcp_tcp_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpChecksum {
      get { return tcpChecksum_; }
      set {
        tcpChecksum_ = value;
      }
    }

    /// <summary>Field number for the "TcpChecksumStatus" field.</summary>
    public const int TcpChecksumStatusFieldNumber = 21;
    private uint tcpChecksumStatus_;
    /// <summary>
    /// Checksum Status ('tcp_checksum_tcp_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpChecksumStatus {
      get { return tcpChecksumStatus_; }
      set {
        tcpChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "TcpLen" field.</summary>
    public const int TcpLenFieldNumber = 22;
    private uint tcpLen_;
    /// <summary>
    /// TCP Segment Len ('tcp_tcp_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpLen {
      get { return tcpLen_; }
      set {
        tcpLen_ = value;
      }
    }

    /// <summary>Field number for the "TcpUrgentPointer" field.</summary>
    public const int TcpUrgentPointerFieldNumber = 23;
    private uint tcpUrgentPointer_;
    /// <summary>
    /// Urgent pointer ('tcp_tcp_urgent_pointer')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TcpUrgentPointer {
      get { return tcpUrgentPointer_; }
      set {
        tcpUrgentPointer_ = value;
      }
    }

    /// <summary>Field number for the "TcpPayload" field.</summary>
    public const int TcpPayloadFieldNumber = 24;
    private pb::ByteString tcpPayload_ = pb::ByteString.Empty;
    /// <summary>
    /// TCP payload ('tcp_tcp_payload')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TcpPayload {
      get { return tcpPayload_; }
      set {
        tcpPayload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tcp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tcp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TcpSrcport != other.TcpSrcport) return false;
      if (TcpDstport != other.TcpDstport) return false;
      if (TcpStream != other.TcpStream) return false;
      if (TcpSeq != other.TcpSeq) return false;
      if (TcpNxtseq != other.TcpNxtseq) return false;
      if (TcpAck != other.TcpAck) return false;
      if (TcpHdrLen != other.TcpHdrLen) return false;
      if (TcpFlags != other.TcpFlags) return false;
      if (TcpFlagsRes != other.TcpFlagsRes) return false;
      if (TcpFlagsNs != other.TcpFlagsNs) return false;
      if (TcpFlagsCwr != other.TcpFlagsCwr) return false;
      if (TcpFlagsEcn != other.TcpFlagsEcn) return false;
      if (TcpFlagsUrg != other.TcpFlagsUrg) return false;
      if (TcpFlagsAck != other.TcpFlagsAck) return false;
      if (TcpFlagsPush != other.TcpFlagsPush) return false;
      if (TcpFlagsReset != other.TcpFlagsReset) return false;
      if (TcpFlagsSyn != other.TcpFlagsSyn) return false;
      if (TcpFlagsFin != other.TcpFlagsFin) return false;
      if (TcpWindowSize != other.TcpWindowSize) return false;
      if (TcpChecksum != other.TcpChecksum) return false;
      if (TcpChecksumStatus != other.TcpChecksumStatus) return false;
      if (TcpLen != other.TcpLen) return false;
      if (TcpUrgentPointer != other.TcpUrgentPointer) return false;
      if (TcpPayload != other.TcpPayload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TcpSrcport != 0) hash ^= TcpSrcport.GetHashCode();
      if (TcpDstport != 0) hash ^= TcpDstport.GetHashCode();
      if (TcpStream != 0) hash ^= TcpStream.GetHashCode();
      if (TcpSeq != 0) hash ^= TcpSeq.GetHashCode();
      if (TcpNxtseq != 0) hash ^= TcpNxtseq.GetHashCode();
      if (TcpAck != 0) hash ^= TcpAck.GetHashCode();
      if (TcpHdrLen != 0) hash ^= TcpHdrLen.GetHashCode();
      if (TcpFlags != 0) hash ^= TcpFlags.GetHashCode();
      if (TcpFlagsRes != false) hash ^= TcpFlagsRes.GetHashCode();
      if (TcpFlagsNs != false) hash ^= TcpFlagsNs.GetHashCode();
      if (TcpFlagsCwr != false) hash ^= TcpFlagsCwr.GetHashCode();
      if (TcpFlagsEcn != false) hash ^= TcpFlagsEcn.GetHashCode();
      if (TcpFlagsUrg != false) hash ^= TcpFlagsUrg.GetHashCode();
      if (TcpFlagsAck != false) hash ^= TcpFlagsAck.GetHashCode();
      if (TcpFlagsPush != false) hash ^= TcpFlagsPush.GetHashCode();
      if (TcpFlagsReset != false) hash ^= TcpFlagsReset.GetHashCode();
      if (TcpFlagsSyn != false) hash ^= TcpFlagsSyn.GetHashCode();
      if (TcpFlagsFin != false) hash ^= TcpFlagsFin.GetHashCode();
      if (TcpWindowSize != 0) hash ^= TcpWindowSize.GetHashCode();
      if (TcpChecksum != 0) hash ^= TcpChecksum.GetHashCode();
      if (TcpChecksumStatus != 0) hash ^= TcpChecksumStatus.GetHashCode();
      if (TcpLen != 0) hash ^= TcpLen.GetHashCode();
      if (TcpUrgentPointer != 0) hash ^= TcpUrgentPointer.GetHashCode();
      if (TcpPayload.Length != 0) hash ^= TcpPayload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TcpSrcport != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TcpSrcport);
      }
      if (TcpDstport != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TcpDstport);
      }
      if (TcpStream != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TcpStream);
      }
      if (TcpSeq != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TcpSeq);
      }
      if (TcpNxtseq != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TcpNxtseq);
      }
      if (TcpAck != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TcpAck);
      }
      if (TcpHdrLen != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TcpHdrLen);
      }
      if (TcpFlags != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TcpFlags);
      }
      if (TcpFlagsRes != false) {
        output.WriteRawTag(72);
        output.WriteBool(TcpFlagsRes);
      }
      if (TcpFlagsNs != false) {
        output.WriteRawTag(80);
        output.WriteBool(TcpFlagsNs);
      }
      if (TcpFlagsCwr != false) {
        output.WriteRawTag(88);
        output.WriteBool(TcpFlagsCwr);
      }
      if (TcpFlagsEcn != false) {
        output.WriteRawTag(96);
        output.WriteBool(TcpFlagsEcn);
      }
      if (TcpFlagsUrg != false) {
        output.WriteRawTag(104);
        output.WriteBool(TcpFlagsUrg);
      }
      if (TcpFlagsAck != false) {
        output.WriteRawTag(112);
        output.WriteBool(TcpFlagsAck);
      }
      if (TcpFlagsPush != false) {
        output.WriteRawTag(120);
        output.WriteBool(TcpFlagsPush);
      }
      if (TcpFlagsReset != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(TcpFlagsReset);
      }
      if (TcpFlagsSyn != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(TcpFlagsSyn);
      }
      if (TcpFlagsFin != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(TcpFlagsFin);
      }
      if (TcpWindowSize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TcpWindowSize);
      }
      if (TcpChecksum != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(TcpChecksum);
      }
      if (TcpChecksumStatus != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(TcpChecksumStatus);
      }
      if (TcpLen != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TcpLen);
      }
      if (TcpUrgentPointer != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TcpUrgentPointer);
      }
      if (TcpPayload.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteBytes(TcpPayload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TcpSrcport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpSrcport);
      }
      if (TcpDstport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpDstport);
      }
      if (TcpStream != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpStream);
      }
      if (TcpSeq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpSeq);
      }
      if (TcpNxtseq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpNxtseq);
      }
      if (TcpAck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpAck);
      }
      if (TcpHdrLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpHdrLen);
      }
      if (TcpFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TcpFlags);
      }
      if (TcpFlagsRes != false) {
        size += 1 + 1;
      }
      if (TcpFlagsNs != false) {
        size += 1 + 1;
      }
      if (TcpFlagsCwr != false) {
        size += 1 + 1;
      }
      if (TcpFlagsEcn != false) {
        size += 1 + 1;
      }
      if (TcpFlagsUrg != false) {
        size += 1 + 1;
      }
      if (TcpFlagsAck != false) {
        size += 1 + 1;
      }
      if (TcpFlagsPush != false) {
        size += 1 + 1;
      }
      if (TcpFlagsReset != false) {
        size += 2 + 1;
      }
      if (TcpFlagsSyn != false) {
        size += 2 + 1;
      }
      if (TcpFlagsFin != false) {
        size += 2 + 1;
      }
      if (TcpWindowSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpWindowSize);
      }
      if (TcpChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpChecksum);
      }
      if (TcpChecksumStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpChecksumStatus);
      }
      if (TcpLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpLen);
      }
      if (TcpUrgentPointer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TcpUrgentPointer);
      }
      if (TcpPayload.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TcpPayload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tcp other) {
      if (other == null) {
        return;
      }
      if (other.TcpSrcport != 0) {
        TcpSrcport = other.TcpSrcport;
      }
      if (other.TcpDstport != 0) {
        TcpDstport = other.TcpDstport;
      }
      if (other.TcpStream != 0) {
        TcpStream = other.TcpStream;
      }
      if (other.TcpSeq != 0) {
        TcpSeq = other.TcpSeq;
      }
      if (other.TcpNxtseq != 0) {
        TcpNxtseq = other.TcpNxtseq;
      }
      if (other.TcpAck != 0) {
        TcpAck = other.TcpAck;
      }
      if (other.TcpHdrLen != 0) {
        TcpHdrLen = other.TcpHdrLen;
      }
      if (other.TcpFlags != 0) {
        TcpFlags = other.TcpFlags;
      }
      if (other.TcpFlagsRes != false) {
        TcpFlagsRes = other.TcpFlagsRes;
      }
      if (other.TcpFlagsNs != false) {
        TcpFlagsNs = other.TcpFlagsNs;
      }
      if (other.TcpFlagsCwr != false) {
        TcpFlagsCwr = other.TcpFlagsCwr;
      }
      if (other.TcpFlagsEcn != false) {
        TcpFlagsEcn = other.TcpFlagsEcn;
      }
      if (other.TcpFlagsUrg != false) {
        TcpFlagsUrg = other.TcpFlagsUrg;
      }
      if (other.TcpFlagsAck != false) {
        TcpFlagsAck = other.TcpFlagsAck;
      }
      if (other.TcpFlagsPush != false) {
        TcpFlagsPush = other.TcpFlagsPush;
      }
      if (other.TcpFlagsReset != false) {
        TcpFlagsReset = other.TcpFlagsReset;
      }
      if (other.TcpFlagsSyn != false) {
        TcpFlagsSyn = other.TcpFlagsSyn;
      }
      if (other.TcpFlagsFin != false) {
        TcpFlagsFin = other.TcpFlagsFin;
      }
      if (other.TcpWindowSize != 0) {
        TcpWindowSize = other.TcpWindowSize;
      }
      if (other.TcpChecksum != 0) {
        TcpChecksum = other.TcpChecksum;
      }
      if (other.TcpChecksumStatus != 0) {
        TcpChecksumStatus = other.TcpChecksumStatus;
      }
      if (other.TcpLen != 0) {
        TcpLen = other.TcpLen;
      }
      if (other.TcpUrgentPointer != 0) {
        TcpUrgentPointer = other.TcpUrgentPointer;
      }
      if (other.TcpPayload.Length != 0) {
        TcpPayload = other.TcpPayload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TcpSrcport = input.ReadUInt32();
            break;
          }
          case 16: {
            TcpDstport = input.ReadUInt32();
            break;
          }
          case 24: {
            TcpStream = input.ReadUInt32();
            break;
          }
          case 32: {
            TcpSeq = input.ReadUInt32();
            break;
          }
          case 40: {
            TcpNxtseq = input.ReadUInt32();
            break;
          }
          case 48: {
            TcpAck = input.ReadUInt32();
            break;
          }
          case 56: {
            TcpHdrLen = input.ReadUInt32();
            break;
          }
          case 64: {
            TcpFlags = input.ReadUInt32();
            break;
          }
          case 72: {
            TcpFlagsRes = input.ReadBool();
            break;
          }
          case 80: {
            TcpFlagsNs = input.ReadBool();
            break;
          }
          case 88: {
            TcpFlagsCwr = input.ReadBool();
            break;
          }
          case 96: {
            TcpFlagsEcn = input.ReadBool();
            break;
          }
          case 104: {
            TcpFlagsUrg = input.ReadBool();
            break;
          }
          case 112: {
            TcpFlagsAck = input.ReadBool();
            break;
          }
          case 120: {
            TcpFlagsPush = input.ReadBool();
            break;
          }
          case 128: {
            TcpFlagsReset = input.ReadBool();
            break;
          }
          case 136: {
            TcpFlagsSyn = input.ReadBool();
            break;
          }
          case 144: {
            TcpFlagsFin = input.ReadBool();
            break;
          }
          case 152: {
            TcpWindowSize = input.ReadUInt32();
            break;
          }
          case 160: {
            TcpChecksum = input.ReadUInt32();
            break;
          }
          case 168: {
            TcpChecksumStatus = input.ReadUInt32();
            break;
          }
          case 176: {
            TcpLen = input.ReadUInt32();
            break;
          }
          case 184: {
            TcpUrgentPointer = input.ReadUInt32();
            break;
          }
          case 194: {
            TcpPayload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
