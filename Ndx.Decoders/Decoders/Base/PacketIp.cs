// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-ip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Basic {

  /// <summary>Holder for reflection information generated from packet-ip.proto</summary>
  public static partial class PacketIpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-ip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYWNrZXQtaXAucHJvdG8SEk5keC5EZWNvZGVycy5CYXNpYyLjFAoCSXAS",
            "EQoJSXBWZXJzaW9uGAEgASgNEhAKCElwSGRyTGVuGAIgASgNEhEKCUlwRHNm",
            "aWVsZBgDIAEoDRIVCg1JcERzZmllbGREc2NwGAQgASgNEhQKDElwRHNmaWVs",
            "ZEVjbhgFIAEoDRINCgVJcFRvcxgGIAEoDRIXCg9JcFRvc1ByZWNlZGVuY2UY",
            "ByABKA0SEgoKSXBUb3NEZWxheRgIIAEoCBIXCg9JcFRvc1Rocm91Z2hwdXQY",
            "CSABKAgSGAoQSXBUb3NSZWxpYWJpbGl0eRgKIAEoCBIRCglJcFRvc0Nvc3QY",
            "CyABKAgSDQoFSXBMZW4YDCABKA0SDAoESXBJZBgNIAEoDRINCgVJcERzdBgO",
            "IAEoDBIRCglJcERzdEhvc3QYDyABKAkSDQoFSXBTcmMYECABKAwSEQoJSXBT",
            "cmNIb3N0GBEgASgJEg4KBklwQWRkchgSIAEoDBIOCgZJcEhvc3QYEyABKAkS",
            "FgoOSXBHZW9pcENvdW50cnkYFCABKAkSEwoLSXBHZW9pcENpdHkYFSABKAkS",
            "EgoKSXBHZW9pcE9yZxgWIAEoCRISCgpJcEdlb2lwSXNwGBcgASgJEhQKDElw",
            "R2VvaXBBc251bRgYIAEoCRISCgpJcEdlb2lwTGF0GBkgASgBEhIKCklwR2Vv",
            "aXBMb24YGiABKAESGQoRSXBHZW9pcFNyY0NvdW50cnkYGyABKAkSFgoOSXBH",
            "ZW9pcFNyY0NpdHkYHCABKAkSFQoNSXBHZW9pcFNyY09yZxgdIAEoCRIVCg1J",
            "cEdlb2lwU3JjSXNwGB4gASgJEhcKD0lwR2VvaXBTcmNBc251bRgfIAEoCRIV",
            "Cg1JcEdlb2lwU3JjTGF0GCAgASgBEhUKDUlwR2VvaXBTcmNMb24YISABKAES",
            "GQoRSXBHZW9pcERzdENvdW50cnkYIiABKAkSFgoOSXBHZW9pcERzdENpdHkY",
            "IyABKAkSFQoNSXBHZW9pcERzdE9yZxgkIAEoCRIVCg1JcEdlb2lwRHN0SXNw",
            "GCUgASgJEhcKD0lwR2VvaXBEc3RBc251bRgmIAEoCRIVCg1JcEdlb2lwRHN0",
            "TGF0GCcgASgBEhUKDUlwR2VvaXBEc3RMb24YKCABKAESDwoHSXBGbGFncxgp",
            "IAEoDRIRCglJcEZsYWdzU2YYKiABKAgSEQoJSXBGbGFnc1JiGCsgASgIEhEK",
            "CUlwRmxhZ3NEZhgsIAEoCBIRCglJcEZsYWdzTWYYLSABKAgSFAoMSXBGcmFn",
            "T2Zmc2V0GC4gASgNEg0KBUlwVHRsGC8gASgNEg8KB0lwUHJvdG8YMCABKA0S",
            "EgoKSXBDaGVja3N1bRgxIAEoDRIcChRJcENoZWNrc3VtQ2FsY3VsYXRlZBgy",
            "IAEoDRIYChBJcENoZWNrc3VtU3RhdHVzGDMgASgNEhEKCUlwT3B0VHlwZRg0",
            "IAEoDRIVCg1JcE9wdFR5cGVDb3B5GDUgASgIEhYKDklwT3B0VHlwZUNsYXNz",
            "GDYgASgNEhcKD0lwT3B0VHlwZU51bWJlchg3IAEoDRIQCghJcE9wdExlbhg4",
            "IAEoDRIQCghJcE9wdFB0chg5IAEoDRIQCghJcE9wdFNpZBg6IAEoDRIQCghJ",
            "cE9wdE10dRg7IAEoDRIVCg1JcE9wdElkTnVtYmVyGDwgASgNEhAKCElwT3B0",
            "T2hjGD0gASgNEhAKCElwT3B0UmhjGD4gASgNEhcKD0lwT3B0T3JpZ2luYXRv",
            "chg/IAEoDBIPCgdJcE9wdFJhGEAgASgNEhEKCUlwT3B0QWRkchhBIAEoDBIU",
            "CgxJcE9wdFBhZGRpbmcYQiABKAwSEwoLSXBPcHRRc0Z1bmMYQyABKA0SEwoL",
            "SXBPcHRRc1JhdGUYRCABKA0SEgoKSXBPcHRRc1R0bBhFIAEoDRIWCg5JcE9w",
            "dFFzVHRsRGlmZhhGIAEoDRIVCg1JcE9wdFFzVW51c2VkGEcgASgNEhQKDElw",
            "T3B0UXNOb25jZRhIIAEoDRIXCg9JcE9wdFFzUmVzZXJ2ZWQYSSABKA0SGQoR",
            "SXBPcHRTZWNSZmM3OTFTZWMYSiABKA0SGgoSSXBPcHRTZWNSZmM3OTFDb21w",
            "GEsgASgNEhgKEElwT3B0U2VjUmZjNzkxSHIYTCABKAkSGQoRSXBPcHRTZWNS",
            "ZmM3OTFUY2MYTSABKAkSEgoKSXBPcHRTZWNDbBhOIAEoDRIdChVJcE9wdFNl",
            "Y1Byb3RBdXRoRmxhZ3MYTyABKA0SHgoWSXBPcHRTZWNQcm90QXV0aEdlbnNl",
            "chhQIAEoCBIfChdJcE9wdFNlY1Byb3RBdXRoU2lvcEVzaRhRIAEoCBIbChNJ",
            "cE9wdFNlY1Byb3RBdXRoU2NpGFIgASgIEhsKE0lwT3B0U2VjUHJvdEF1dGhO",
            "c2EYUyABKAgSGwoTSXBPcHRTZWNQcm90QXV0aERvZRhUIAEoCBIiChpJcE9w",
            "dFNlY1Byb3RBdXRoVW5hc3NpZ25lZBhVIAEoDRIbChNJcE9wdFNlY1Byb3RB",
            "dXRoRnRpGFYgASgIEicKH0lwT3B0RXh0U2VjQWRkU2VjSW5mb0Zvcm1hdENv",
            "ZGUYVyABKA0SHQoVSXBPcHRFeHRTZWNBZGRTZWNJbmZvGFggASgMEg8KB0lw",
            "UmVjUnQYWSABKAwSEwoLSXBSZWNSdEhvc3QYWiABKAkSDwoHSXBDdXJSdBhb",
            "IAEoDBITCgtJcEN1clJ0SG9zdBhcIAEoCRIPCgdJcFNyY1J0GF0gASgMEhMK",
            "C0lwU3JjUnRIb3N0GF4gASgJEhEKCUlwRW1wdHlSdBhfIAEoDBIVCg1JcEVt",
            "cHR5UnRIb3N0GGAgASgJEhYKDklwQ2lwc29UYWdUeXBlGGEgASgNEhkKEUlw",
            "RnJhZ21lbnRPdmVybGFwGGIgASgIEiEKGUlwRnJhZ21lbnRPdmVybGFwQ29u",
            "ZmxpY3QYYyABKAgSHwoXSXBGcmFnbWVudE11bHRpcGxldGFpbHMYZCABKAgS",
            "IQoZSXBGcmFnbWVudFRvb2xvbmdmcmFnbWVudBhlIAEoCBIXCg9JcEZyYWdt",
            "ZW50RXJyb3IYZiABKAMSFwoPSXBGcmFnbWVudENvdW50GGcgASgNEhIKCklw",
            "RnJhZ21lbnQYaCABKAMSEwoLSXBGcmFnbWVudHMYaSABKAwSFwoPSXBSZWFz",
            "c2VtYmxlZEluGGogASgDEhsKE0lwUmVhc3NlbWJsZWRMZW5ndGgYayABKA0S",
            "GQoRSXBSZWFzc2VtYmxlZERhdGEYbCABKAwSEgoKSXBDaXBzb0RvaRhtIAEo",
            "DRIfChdJcENpcHNvU2Vuc2l0aXZpdHlMZXZlbBhuIAEoDRIZChFJcENpcHNv",
            "Q2F0ZWdvcmllcxhvIAEoCRIWCg5JcENpcHNvVGFnRGF0YRhwIAEoDBIVCg1J",
            "cE9wdE92ZXJmbG93GHEgASgNEhEKCUlwT3B0RmxhZxhyIAEoDRIWCg5JcE9w",
            "dFRpbWVTdGFtcBhzIAEoDRIaChJJcE9wdFRpbWVTdGFtcEFkZHIYdCABKAxi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Basic.Ip), global::Ndx.Decoders.Basic.Ip.Parser, new[]{ "IpVersion", "IpHdrLen", "IpDsfield", "IpDsfieldDscp", "IpDsfieldEcn", "IpTos", "IpTosPrecedence", "IpTosDelay", "IpTosThroughput", "IpTosReliability", "IpTosCost", "IpLen", "IpId", "IpDst", "IpDstHost", "IpSrc", "IpSrcHost", "IpAddr", "IpHost", "IpGeoipCountry", "IpGeoipCity", "IpGeoipOrg", "IpGeoipIsp", "IpGeoipAsnum", "IpGeoipLat", "IpGeoipLon", "IpGeoipSrcCountry", "IpGeoipSrcCity", "IpGeoipSrcOrg", "IpGeoipSrcIsp", "IpGeoipSrcAsnum", "IpGeoipSrcLat", "IpGeoipSrcLon", "IpGeoipDstCountry", "IpGeoipDstCity", "IpGeoipDstOrg", "IpGeoipDstIsp", "IpGeoipDstAsnum", "IpGeoipDstLat", "IpGeoipDstLon", "IpFlags", "IpFlagsSf", "IpFlagsRb", "IpFlagsDf", "IpFlagsMf", "IpFragOffset", "IpTtl", "IpProto", "IpChecksum", "IpChecksumCalculated", "IpChecksumStatus", "IpOptType", "IpOptTypeCopy", "IpOptTypeClass", "IpOptTypeNumber", "IpOptLen", "IpOptPtr", "IpOptSid", "IpOptMtu", "IpOptIdNumber", "IpOptOhc", "IpOptRhc", "IpOptOriginator", "IpOptRa", "IpOptAddr", "IpOptPadding", "IpOptQsFunc", "IpOptQsRate", "IpOptQsTtl", "IpOptQsTtlDiff", "IpOptQsUnused", "IpOptQsNonce", "IpOptQsReserved", "IpOptSecRfc791Sec", "IpOptSecRfc791Comp", "IpOptSecRfc791Hr", "IpOptSecRfc791Tcc", "IpOptSecCl", "IpOptSecProtAuthFlags", "IpOptSecProtAuthGenser", "IpOptSecProtAuthSiopEsi", "IpOptSecProtAuthSci", "IpOptSecProtAuthNsa", "IpOptSecProtAuthDoe", "IpOptSecProtAuthUnassigned", "IpOptSecProtAuthFti", "IpOptExtSecAddSecInfoFormatCode", "IpOptExtSecAddSecInfo", "IpRecRt", "IpRecRtHost", "IpCurRt", "IpCurRtHost", "IpSrcRt", "IpSrcRtHost", "IpEmptyRt", "IpEmptyRtHost", "IpCipsoTagType", "IpFragmentOverlap", "IpFragmentOverlapConflict", "IpFragmentMultipletails", "IpFragmentToolongfragment", "IpFragmentError", "IpFragmentCount", "IpFragment", "IpFragments", "IpReassembledIn", "IpReassembledLength", "IpReassembledData", "IpCipsoDoi", "IpCipsoSensitivityLevel", "IpCipsoCategories", "IpCipsoTagData", "IpOptOverflow", "IpOptFlag", "IpOptTimeStamp", "IpOptTimeStampAddr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ip : pb::IMessage<Ip> {
    private static readonly pb::MessageParser<Ip> _parser = new pb::MessageParser<Ip>(() => new Ip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Basic.PacketIpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip(Ip other) : this() {
      ipVersion_ = other.ipVersion_;
      ipHdrLen_ = other.ipHdrLen_;
      ipDsfield_ = other.ipDsfield_;
      ipDsfieldDscp_ = other.ipDsfieldDscp_;
      ipDsfieldEcn_ = other.ipDsfieldEcn_;
      ipTos_ = other.ipTos_;
      ipTosPrecedence_ = other.ipTosPrecedence_;
      ipTosDelay_ = other.ipTosDelay_;
      ipTosThroughput_ = other.ipTosThroughput_;
      ipTosReliability_ = other.ipTosReliability_;
      ipTosCost_ = other.ipTosCost_;
      ipLen_ = other.ipLen_;
      ipId_ = other.ipId_;
      ipDst_ = other.ipDst_;
      ipDstHost_ = other.ipDstHost_;
      ipSrc_ = other.ipSrc_;
      ipSrcHost_ = other.ipSrcHost_;
      ipAddr_ = other.ipAddr_;
      ipHost_ = other.ipHost_;
      ipGeoipCountry_ = other.ipGeoipCountry_;
      ipGeoipCity_ = other.ipGeoipCity_;
      ipGeoipOrg_ = other.ipGeoipOrg_;
      ipGeoipIsp_ = other.ipGeoipIsp_;
      ipGeoipAsnum_ = other.ipGeoipAsnum_;
      ipGeoipLat_ = other.ipGeoipLat_;
      ipGeoipLon_ = other.ipGeoipLon_;
      ipGeoipSrcCountry_ = other.ipGeoipSrcCountry_;
      ipGeoipSrcCity_ = other.ipGeoipSrcCity_;
      ipGeoipSrcOrg_ = other.ipGeoipSrcOrg_;
      ipGeoipSrcIsp_ = other.ipGeoipSrcIsp_;
      ipGeoipSrcAsnum_ = other.ipGeoipSrcAsnum_;
      ipGeoipSrcLat_ = other.ipGeoipSrcLat_;
      ipGeoipSrcLon_ = other.ipGeoipSrcLon_;
      ipGeoipDstCountry_ = other.ipGeoipDstCountry_;
      ipGeoipDstCity_ = other.ipGeoipDstCity_;
      ipGeoipDstOrg_ = other.ipGeoipDstOrg_;
      ipGeoipDstIsp_ = other.ipGeoipDstIsp_;
      ipGeoipDstAsnum_ = other.ipGeoipDstAsnum_;
      ipGeoipDstLat_ = other.ipGeoipDstLat_;
      ipGeoipDstLon_ = other.ipGeoipDstLon_;
      ipFlags_ = other.ipFlags_;
      ipFlagsSf_ = other.ipFlagsSf_;
      ipFlagsRb_ = other.ipFlagsRb_;
      ipFlagsDf_ = other.ipFlagsDf_;
      ipFlagsMf_ = other.ipFlagsMf_;
      ipFragOffset_ = other.ipFragOffset_;
      ipTtl_ = other.ipTtl_;
      ipProto_ = other.ipProto_;
      ipChecksum_ = other.ipChecksum_;
      ipChecksumCalculated_ = other.ipChecksumCalculated_;
      ipChecksumStatus_ = other.ipChecksumStatus_;
      ipOptType_ = other.ipOptType_;
      ipOptTypeCopy_ = other.ipOptTypeCopy_;
      ipOptTypeClass_ = other.ipOptTypeClass_;
      ipOptTypeNumber_ = other.ipOptTypeNumber_;
      ipOptLen_ = other.ipOptLen_;
      ipOptPtr_ = other.ipOptPtr_;
      ipOptSid_ = other.ipOptSid_;
      ipOptMtu_ = other.ipOptMtu_;
      ipOptIdNumber_ = other.ipOptIdNumber_;
      ipOptOhc_ = other.ipOptOhc_;
      ipOptRhc_ = other.ipOptRhc_;
      ipOptOriginator_ = other.ipOptOriginator_;
      ipOptRa_ = other.ipOptRa_;
      ipOptAddr_ = other.ipOptAddr_;
      ipOptPadding_ = other.ipOptPadding_;
      ipOptQsFunc_ = other.ipOptQsFunc_;
      ipOptQsRate_ = other.ipOptQsRate_;
      ipOptQsTtl_ = other.ipOptQsTtl_;
      ipOptQsTtlDiff_ = other.ipOptQsTtlDiff_;
      ipOptQsUnused_ = other.ipOptQsUnused_;
      ipOptQsNonce_ = other.ipOptQsNonce_;
      ipOptQsReserved_ = other.ipOptQsReserved_;
      ipOptSecRfc791Sec_ = other.ipOptSecRfc791Sec_;
      ipOptSecRfc791Comp_ = other.ipOptSecRfc791Comp_;
      ipOptSecRfc791Hr_ = other.ipOptSecRfc791Hr_;
      ipOptSecRfc791Tcc_ = other.ipOptSecRfc791Tcc_;
      ipOptSecCl_ = other.ipOptSecCl_;
      ipOptSecProtAuthFlags_ = other.ipOptSecProtAuthFlags_;
      ipOptSecProtAuthGenser_ = other.ipOptSecProtAuthGenser_;
      ipOptSecProtAuthSiopEsi_ = other.ipOptSecProtAuthSiopEsi_;
      ipOptSecProtAuthSci_ = other.ipOptSecProtAuthSci_;
      ipOptSecProtAuthNsa_ = other.ipOptSecProtAuthNsa_;
      ipOptSecProtAuthDoe_ = other.ipOptSecProtAuthDoe_;
      ipOptSecProtAuthUnassigned_ = other.ipOptSecProtAuthUnassigned_;
      ipOptSecProtAuthFti_ = other.ipOptSecProtAuthFti_;
      ipOptExtSecAddSecInfoFormatCode_ = other.ipOptExtSecAddSecInfoFormatCode_;
      ipOptExtSecAddSecInfo_ = other.ipOptExtSecAddSecInfo_;
      ipRecRt_ = other.ipRecRt_;
      ipRecRtHost_ = other.ipRecRtHost_;
      ipCurRt_ = other.ipCurRt_;
      ipCurRtHost_ = other.ipCurRtHost_;
      ipSrcRt_ = other.ipSrcRt_;
      ipSrcRtHost_ = other.ipSrcRtHost_;
      ipEmptyRt_ = other.ipEmptyRt_;
      ipEmptyRtHost_ = other.ipEmptyRtHost_;
      ipCipsoTagType_ = other.ipCipsoTagType_;
      ipFragmentOverlap_ = other.ipFragmentOverlap_;
      ipFragmentOverlapConflict_ = other.ipFragmentOverlapConflict_;
      ipFragmentMultipletails_ = other.ipFragmentMultipletails_;
      ipFragmentToolongfragment_ = other.ipFragmentToolongfragment_;
      ipFragmentError_ = other.ipFragmentError_;
      ipFragmentCount_ = other.ipFragmentCount_;
      ipFragment_ = other.ipFragment_;
      ipFragments_ = other.ipFragments_;
      ipReassembledIn_ = other.ipReassembledIn_;
      ipReassembledLength_ = other.ipReassembledLength_;
      ipReassembledData_ = other.ipReassembledData_;
      ipCipsoDoi_ = other.ipCipsoDoi_;
      ipCipsoSensitivityLevel_ = other.ipCipsoSensitivityLevel_;
      ipCipsoCategories_ = other.ipCipsoCategories_;
      ipCipsoTagData_ = other.ipCipsoTagData_;
      ipOptOverflow_ = other.ipOptOverflow_;
      ipOptFlag_ = other.ipOptFlag_;
      ipOptTimeStamp_ = other.ipOptTimeStamp_;
      ipOptTimeStampAddr_ = other.ipOptTimeStampAddr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip Clone() {
      return new Ip(this);
    }

    /// <summary>Field number for the "IpVersion" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private uint ipVersion_;
    /// <summary>
    /// Version ('ip_ip_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    /// <summary>Field number for the "IpHdrLen" field.</summary>
    public const int IpHdrLenFieldNumber = 2;
    private uint ipHdrLen_;
    /// <summary>
    /// Header Length ('ip_ip_hdr_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpHdrLen {
      get { return ipHdrLen_; }
      set {
        ipHdrLen_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfield" field.</summary>
    public const int IpDsfieldFieldNumber = 3;
    private uint ipDsfield_;
    /// <summary>
    /// Differentiated Services Field ('ip_ip_dsfield')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfield {
      get { return ipDsfield_; }
      set {
        ipDsfield_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfieldDscp" field.</summary>
    public const int IpDsfieldDscpFieldNumber = 4;
    private uint ipDsfieldDscp_;
    /// <summary>
    /// Differentiated Services Codepoint ('ip_dsfield_ip_dsfield_dscp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfieldDscp {
      get { return ipDsfieldDscp_; }
      set {
        ipDsfieldDscp_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfieldEcn" field.</summary>
    public const int IpDsfieldEcnFieldNumber = 5;
    private uint ipDsfieldEcn_;
    /// <summary>
    /// Explicit Congestion Notification ('ip_dsfield_ip_dsfield_ecn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfieldEcn {
      get { return ipDsfieldEcn_; }
      set {
        ipDsfieldEcn_ = value;
      }
    }

    /// <summary>Field number for the "IpTos" field.</summary>
    public const int IpTosFieldNumber = 6;
    private uint ipTos_;
    /// <summary>
    /// Type of Service ('ip_ip_tos')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTos {
      get { return ipTos_; }
      set {
        ipTos_ = value;
      }
    }

    /// <summary>Field number for the "IpTosPrecedence" field.</summary>
    public const int IpTosPrecedenceFieldNumber = 7;
    private uint ipTosPrecedence_;
    /// <summary>
    /// Precedence ('ip_tos_ip_tos_precedence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTosPrecedence {
      get { return ipTosPrecedence_; }
      set {
        ipTosPrecedence_ = value;
      }
    }

    /// <summary>Field number for the "IpTosDelay" field.</summary>
    public const int IpTosDelayFieldNumber = 8;
    private bool ipTosDelay_;
    /// <summary>
    /// Delay ('ip_tos_ip_tos_delay')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosDelay {
      get { return ipTosDelay_; }
      set {
        ipTosDelay_ = value;
      }
    }

    /// <summary>Field number for the "IpTosThroughput" field.</summary>
    public const int IpTosThroughputFieldNumber = 9;
    private bool ipTosThroughput_;
    /// <summary>
    /// Throughput ('ip_tos_ip_tos_throughput')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosThroughput {
      get { return ipTosThroughput_; }
      set {
        ipTosThroughput_ = value;
      }
    }

    /// <summary>Field number for the "IpTosReliability" field.</summary>
    public const int IpTosReliabilityFieldNumber = 10;
    private bool ipTosReliability_;
    /// <summary>
    /// Reliability ('ip_tos_ip_tos_reliability')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosReliability {
      get { return ipTosReliability_; }
      set {
        ipTosReliability_ = value;
      }
    }

    /// <summary>Field number for the "IpTosCost" field.</summary>
    public const int IpTosCostFieldNumber = 11;
    private bool ipTosCost_;
    /// <summary>
    /// Cost ('ip_tos_ip_tos_cost')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosCost {
      get { return ipTosCost_; }
      set {
        ipTosCost_ = value;
      }
    }

    /// <summary>Field number for the "IpLen" field.</summary>
    public const int IpLenFieldNumber = 12;
    private uint ipLen_;
    /// <summary>
    /// Total Length ('ip_ip_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpLen {
      get { return ipLen_; }
      set {
        ipLen_ = value;
      }
    }

    /// <summary>Field number for the "IpId" field.</summary>
    public const int IpIdFieldNumber = 13;
    private uint ipId_;
    /// <summary>
    /// Identification ('ip_ip_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpId {
      get { return ipId_; }
      set {
        ipId_ = value;
      }
    }

    /// <summary>Field number for the "IpDst" field.</summary>
    public const int IpDstFieldNumber = 14;
    private pb::ByteString ipDst_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination ('ip_ip_dst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpDst {
      get { return ipDst_; }
      set {
        ipDst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpDstHost" field.</summary>
    public const int IpDstHostFieldNumber = 15;
    private string ipDstHost_ = "";
    /// <summary>
    /// Destination Host ('ip_ip_dst_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpDstHost {
      get { return ipDstHost_; }
      set {
        ipDstHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrc" field.</summary>
    public const int IpSrcFieldNumber = 16;
    private pb::ByteString ipSrc_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('ip_ip_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpSrc {
      get { return ipSrc_; }
      set {
        ipSrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrcHost" field.</summary>
    public const int IpSrcHostFieldNumber = 17;
    private string ipSrcHost_ = "";
    /// <summary>
    /// Source Host ('ip_ip_src_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpSrcHost {
      get { return ipSrcHost_; }
      set {
        ipSrcHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpAddr" field.</summary>
    public const int IpAddrFieldNumber = 18;
    private pb::ByteString ipAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source or Destination Address ('ip_ip_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddr {
      get { return ipAddr_; }
      set {
        ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpHost" field.</summary>
    public const int IpHostFieldNumber = 19;
    private string ipHost_ = "";
    /// <summary>
    /// Source or Destination Host ('ip_ip_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpHost {
      get { return ipHost_; }
      set {
        ipHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipCountry" field.</summary>
    public const int IpGeoipCountryFieldNumber = 20;
    private string ipGeoipCountry_ = "";
    /// <summary>
    /// Source or Destination GeoIP Country ('ip_ip_geoip_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipCountry {
      get { return ipGeoipCountry_; }
      set {
        ipGeoipCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipCity" field.</summary>
    public const int IpGeoipCityFieldNumber = 21;
    private string ipGeoipCity_ = "";
    /// <summary>
    /// Source or Destination GeoIP City ('ip_ip_geoip_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipCity {
      get { return ipGeoipCity_; }
      set {
        ipGeoipCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipOrg" field.</summary>
    public const int IpGeoipOrgFieldNumber = 22;
    private string ipGeoipOrg_ = "";
    /// <summary>
    /// Source or Destination GeoIP Organization ('ip_ip_geoip_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipOrg {
      get { return ipGeoipOrg_; }
      set {
        ipGeoipOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipIsp" field.</summary>
    public const int IpGeoipIspFieldNumber = 23;
    private string ipGeoipIsp_ = "";
    /// <summary>
    /// Source or Destination GeoIP ISP ('ip_ip_geoip_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipIsp {
      get { return ipGeoipIsp_; }
      set {
        ipGeoipIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipAsnum" field.</summary>
    public const int IpGeoipAsnumFieldNumber = 24;
    private string ipGeoipAsnum_ = "";
    /// <summary>
    /// Source or Destination GeoIP AS Number ('ip_ip_geoip_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipAsnum {
      get { return ipGeoipAsnum_; }
      set {
        ipGeoipAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipLat" field.</summary>
    public const int IpGeoipLatFieldNumber = 25;
    private double ipGeoipLat_;
    /// <summary>
    /// Source or Destination GeoIP Latitude ('ip_ip_geoip_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipLat {
      get { return ipGeoipLat_; }
      set {
        ipGeoipLat_ = value;
      }
    }

    /// <summary>Field number for the "IpGeoipLon" field.</summary>
    public const int IpGeoipLonFieldNumber = 26;
    private double ipGeoipLon_;
    /// <summary>
    /// Source or Destination GeoIP Longitude ('ip_ip_geoip_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipLon {
      get { return ipGeoipLon_; }
      set {
        ipGeoipLon_ = value;
      }
    }

    /// <summary>Field number for the "IpGeoipSrcCountry" field.</summary>
    public const int IpGeoipSrcCountryFieldNumber = 27;
    private string ipGeoipSrcCountry_ = "";
    /// <summary>
    /// Source GeoIP Country ('ip_ip_geoip_src_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipSrcCountry {
      get { return ipGeoipSrcCountry_; }
      set {
        ipGeoipSrcCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipSrcCity" field.</summary>
    public const int IpGeoipSrcCityFieldNumber = 28;
    private string ipGeoipSrcCity_ = "";
    /// <summary>
    /// Source GeoIP City ('ip_ip_geoip_src_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipSrcCity {
      get { return ipGeoipSrcCity_; }
      set {
        ipGeoipSrcCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipSrcOrg" field.</summary>
    public const int IpGeoipSrcOrgFieldNumber = 29;
    private string ipGeoipSrcOrg_ = "";
    /// <summary>
    /// Source GeoIP Organization ('ip_ip_geoip_src_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipSrcOrg {
      get { return ipGeoipSrcOrg_; }
      set {
        ipGeoipSrcOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipSrcIsp" field.</summary>
    public const int IpGeoipSrcIspFieldNumber = 30;
    private string ipGeoipSrcIsp_ = "";
    /// <summary>
    /// Source GeoIP ISP ('ip_ip_geoip_src_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipSrcIsp {
      get { return ipGeoipSrcIsp_; }
      set {
        ipGeoipSrcIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipSrcAsnum" field.</summary>
    public const int IpGeoipSrcAsnumFieldNumber = 31;
    private string ipGeoipSrcAsnum_ = "";
    /// <summary>
    /// Source GeoIP AS Number ('ip_ip_geoip_src_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipSrcAsnum {
      get { return ipGeoipSrcAsnum_; }
      set {
        ipGeoipSrcAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipSrcLat" field.</summary>
    public const int IpGeoipSrcLatFieldNumber = 32;
    private double ipGeoipSrcLat_;
    /// <summary>
    /// Source GeoIP Latitude ('ip_ip_geoip_src_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipSrcLat {
      get { return ipGeoipSrcLat_; }
      set {
        ipGeoipSrcLat_ = value;
      }
    }

    /// <summary>Field number for the "IpGeoipSrcLon" field.</summary>
    public const int IpGeoipSrcLonFieldNumber = 33;
    private double ipGeoipSrcLon_;
    /// <summary>
    /// Source GeoIP Longitude ('ip_ip_geoip_src_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipSrcLon {
      get { return ipGeoipSrcLon_; }
      set {
        ipGeoipSrcLon_ = value;
      }
    }

    /// <summary>Field number for the "IpGeoipDstCountry" field.</summary>
    public const int IpGeoipDstCountryFieldNumber = 34;
    private string ipGeoipDstCountry_ = "";
    /// <summary>
    /// Destination GeoIP Country ('ip_ip_geoip_dst_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipDstCountry {
      get { return ipGeoipDstCountry_; }
      set {
        ipGeoipDstCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipDstCity" field.</summary>
    public const int IpGeoipDstCityFieldNumber = 35;
    private string ipGeoipDstCity_ = "";
    /// <summary>
    /// Destination GeoIP City ('ip_ip_geoip_dst_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipDstCity {
      get { return ipGeoipDstCity_; }
      set {
        ipGeoipDstCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipDstOrg" field.</summary>
    public const int IpGeoipDstOrgFieldNumber = 36;
    private string ipGeoipDstOrg_ = "";
    /// <summary>
    /// Destination GeoIP Organization ('ip_ip_geoip_dst_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipDstOrg {
      get { return ipGeoipDstOrg_; }
      set {
        ipGeoipDstOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipDstIsp" field.</summary>
    public const int IpGeoipDstIspFieldNumber = 37;
    private string ipGeoipDstIsp_ = "";
    /// <summary>
    /// Destination GeoIP ISP ('ip_ip_geoip_dst_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipDstIsp {
      get { return ipGeoipDstIsp_; }
      set {
        ipGeoipDstIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipDstAsnum" field.</summary>
    public const int IpGeoipDstAsnumFieldNumber = 38;
    private string ipGeoipDstAsnum_ = "";
    /// <summary>
    /// Destination GeoIP AS Number ('ip_ip_geoip_dst_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpGeoipDstAsnum {
      get { return ipGeoipDstAsnum_; }
      set {
        ipGeoipDstAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpGeoipDstLat" field.</summary>
    public const int IpGeoipDstLatFieldNumber = 39;
    private double ipGeoipDstLat_;
    /// <summary>
    /// Destination GeoIP Latitude ('ip_ip_geoip_dst_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipDstLat {
      get { return ipGeoipDstLat_; }
      set {
        ipGeoipDstLat_ = value;
      }
    }

    /// <summary>Field number for the "IpGeoipDstLon" field.</summary>
    public const int IpGeoipDstLonFieldNumber = 40;
    private double ipGeoipDstLon_;
    /// <summary>
    /// Destination GeoIP Longitude ('ip_ip_geoip_dst_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double IpGeoipDstLon {
      get { return ipGeoipDstLon_; }
      set {
        ipGeoipDstLon_ = value;
      }
    }

    /// <summary>Field number for the "IpFlags" field.</summary>
    public const int IpFlagsFieldNumber = 41;
    private uint ipFlags_;
    /// <summary>
    /// Flags ('ip_ip_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpFlags {
      get { return ipFlags_; }
      set {
        ipFlags_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsSf" field.</summary>
    public const int IpFlagsSfFieldNumber = 42;
    private bool ipFlagsSf_;
    /// <summary>
    /// Security flag ('ip_flags_ip_flags_sf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsSf {
      get { return ipFlagsSf_; }
      set {
        ipFlagsSf_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsRb" field.</summary>
    public const int IpFlagsRbFieldNumber = 43;
    private bool ipFlagsRb_;
    /// <summary>
    /// Reserved bit ('ip_flags_ip_flags_rb')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsRb {
      get { return ipFlagsRb_; }
      set {
        ipFlagsRb_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsDf" field.</summary>
    public const int IpFlagsDfFieldNumber = 44;
    private bool ipFlagsDf_;
    /// <summary>
    /// Don't fragment ('ip_flags_ip_flags_df')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsDf {
      get { return ipFlagsDf_; }
      set {
        ipFlagsDf_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsMf" field.</summary>
    public const int IpFlagsMfFieldNumber = 45;
    private bool ipFlagsMf_;
    /// <summary>
    /// More fragments ('ip_flags_ip_flags_mf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsMf {
      get { return ipFlagsMf_; }
      set {
        ipFlagsMf_ = value;
      }
    }

    /// <summary>Field number for the "IpFragOffset" field.</summary>
    public const int IpFragOffsetFieldNumber = 46;
    private uint ipFragOffset_;
    /// <summary>
    /// Fragment offset ('ip_ip_frag_offset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpFragOffset {
      get { return ipFragOffset_; }
      set {
        ipFragOffset_ = value;
      }
    }

    /// <summary>Field number for the "IpTtl" field.</summary>
    public const int IpTtlFieldNumber = 47;
    private uint ipTtl_;
    /// <summary>
    /// Time to live ('ip_ip_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTtl {
      get { return ipTtl_; }
      set {
        ipTtl_ = value;
      }
    }

    /// <summary>Field number for the "IpProto" field.</summary>
    public const int IpProtoFieldNumber = 48;
    private uint ipProto_;
    /// <summary>
    /// Protocol ('ip_ip_proto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpProto {
      get { return ipProto_; }
      set {
        ipProto_ = value;
      }
    }

    /// <summary>Field number for the "IpChecksum" field.</summary>
    public const int IpChecksumFieldNumber = 49;
    private uint ipChecksum_;
    /// <summary>
    /// Header checksum ('ip_ip_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpChecksum {
      get { return ipChecksum_; }
      set {
        ipChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IpChecksumCalculated" field.</summary>
    public const int IpChecksumCalculatedFieldNumber = 50;
    private uint ipChecksumCalculated_;
    /// <summary>
    /// Calculated Checksum ('ip_ip_checksum_calculated')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpChecksumCalculated {
      get { return ipChecksumCalculated_; }
      set {
        ipChecksumCalculated_ = value;
      }
    }

    /// <summary>Field number for the "IpChecksumStatus" field.</summary>
    public const int IpChecksumStatusFieldNumber = 51;
    private uint ipChecksumStatus_;
    /// <summary>
    /// Header checksum status ('ip_checksum_ip_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpChecksumStatus {
      get { return ipChecksumStatus_; }
      set {
        ipChecksumStatus_ = value;
      }
    }

    /// <summary>Field number for the "IpOptType" field.</summary>
    public const int IpOptTypeFieldNumber = 52;
    private uint ipOptType_;
    /// <summary>
    /// Type ('ip_ip_opt_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptType {
      get { return ipOptType_; }
      set {
        ipOptType_ = value;
      }
    }

    /// <summary>Field number for the "IpOptTypeCopy" field.</summary>
    public const int IpOptTypeCopyFieldNumber = 53;
    private bool ipOptTypeCopy_;
    /// <summary>
    /// Copy on fragmentation ('ip_opt_type_ip_opt_type_copy')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptTypeCopy {
      get { return ipOptTypeCopy_; }
      set {
        ipOptTypeCopy_ = value;
      }
    }

    /// <summary>Field number for the "IpOptTypeClass" field.</summary>
    public const int IpOptTypeClassFieldNumber = 54;
    private uint ipOptTypeClass_;
    /// <summary>
    /// Class ('ip_opt_type_ip_opt_type_class')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptTypeClass {
      get { return ipOptTypeClass_; }
      set {
        ipOptTypeClass_ = value;
      }
    }

    /// <summary>Field number for the "IpOptTypeNumber" field.</summary>
    public const int IpOptTypeNumberFieldNumber = 55;
    private uint ipOptTypeNumber_;
    /// <summary>
    /// Number ('ip_opt_type_ip_opt_type_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptTypeNumber {
      get { return ipOptTypeNumber_; }
      set {
        ipOptTypeNumber_ = value;
      }
    }

    /// <summary>Field number for the "IpOptLen" field.</summary>
    public const int IpOptLenFieldNumber = 56;
    private uint ipOptLen_;
    /// <summary>
    /// Length ('ip_ip_opt_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptLen {
      get { return ipOptLen_; }
      set {
        ipOptLen_ = value;
      }
    }

    /// <summary>Field number for the "IpOptPtr" field.</summary>
    public const int IpOptPtrFieldNumber = 57;
    private uint ipOptPtr_;
    /// <summary>
    /// Pointer ('ip_ip_opt_ptr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptPtr {
      get { return ipOptPtr_; }
      set {
        ipOptPtr_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSid" field.</summary>
    public const int IpOptSidFieldNumber = 58;
    private uint ipOptSid_;
    /// <summary>
    /// Stream Identifier ('ip_ip_opt_sid')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSid {
      get { return ipOptSid_; }
      set {
        ipOptSid_ = value;
      }
    }

    /// <summary>Field number for the "IpOptMtu" field.</summary>
    public const int IpOptMtuFieldNumber = 59;
    private uint ipOptMtu_;
    /// <summary>
    /// MTU ('ip_ip_opt_mtu')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptMtu {
      get { return ipOptMtu_; }
      set {
        ipOptMtu_ = value;
      }
    }

    /// <summary>Field number for the "IpOptIdNumber" field.</summary>
    public const int IpOptIdNumberFieldNumber = 60;
    private uint ipOptIdNumber_;
    /// <summary>
    /// ID Number ('ip_ip_opt_id_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptIdNumber {
      get { return ipOptIdNumber_; }
      set {
        ipOptIdNumber_ = value;
      }
    }

    /// <summary>Field number for the "IpOptOhc" field.</summary>
    public const int IpOptOhcFieldNumber = 61;
    private uint ipOptOhc_;
    /// <summary>
    /// Outbound Hop Count ('ip_ip_opt_ohc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptOhc {
      get { return ipOptOhc_; }
      set {
        ipOptOhc_ = value;
      }
    }

    /// <summary>Field number for the "IpOptRhc" field.</summary>
    public const int IpOptRhcFieldNumber = 62;
    private uint ipOptRhc_;
    /// <summary>
    /// Return Hop Count ('ip_ip_opt_rhc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptRhc {
      get { return ipOptRhc_; }
      set {
        ipOptRhc_ = value;
      }
    }

    /// <summary>Field number for the "IpOptOriginator" field.</summary>
    public const int IpOptOriginatorFieldNumber = 63;
    private pb::ByteString ipOptOriginator_ = pb::ByteString.Empty;
    /// <summary>
    /// Originator IP Address ('ip_ip_opt_originator')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpOptOriginator {
      get { return ipOptOriginator_; }
      set {
        ipOptOriginator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptRa" field.</summary>
    public const int IpOptRaFieldNumber = 64;
    private uint ipOptRa_;
    /// <summary>
    /// Router Alert ('ip_ip_opt_ra')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptRa {
      get { return ipOptRa_; }
      set {
        ipOptRa_ = value;
      }
    }

    /// <summary>Field number for the "IpOptAddr" field.</summary>
    public const int IpOptAddrFieldNumber = 65;
    private pb::ByteString ipOptAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// IP Address ('ip_ip_opt_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpOptAddr {
      get { return ipOptAddr_; }
      set {
        ipOptAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptPadding" field.</summary>
    public const int IpOptPaddingFieldNumber = 66;
    private pb::ByteString ipOptPadding_ = pb::ByteString.Empty;
    /// <summary>
    /// Padding ('ip_ip_opt_padding')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpOptPadding {
      get { return ipOptPadding_; }
      set {
        ipOptPadding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptQsFunc" field.</summary>
    public const int IpOptQsFuncFieldNumber = 67;
    private uint ipOptQsFunc_;
    /// <summary>
    /// Function ('ip_ip_opt_qs_func')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsFunc {
      get { return ipOptQsFunc_; }
      set {
        ipOptQsFunc_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsRate" field.</summary>
    public const int IpOptQsRateFieldNumber = 68;
    private uint ipOptQsRate_;
    /// <summary>
    /// Rate ('ip_ip_opt_qs_rate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsRate {
      get { return ipOptQsRate_; }
      set {
        ipOptQsRate_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsTtl" field.</summary>
    public const int IpOptQsTtlFieldNumber = 69;
    private uint ipOptQsTtl_;
    /// <summary>
    /// QS TTL ('ip_ip_opt_qs_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsTtl {
      get { return ipOptQsTtl_; }
      set {
        ipOptQsTtl_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsTtlDiff" field.</summary>
    public const int IpOptQsTtlDiffFieldNumber = 70;
    private uint ipOptQsTtlDiff_;
    /// <summary>
    /// TTL Diff ('ip_ip_opt_qs_ttl_diff')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsTtlDiff {
      get { return ipOptQsTtlDiff_; }
      set {
        ipOptQsTtlDiff_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsUnused" field.</summary>
    public const int IpOptQsUnusedFieldNumber = 71;
    private uint ipOptQsUnused_;
    /// <summary>
    /// Not Used ('ip_ip_opt_qs_unused')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsUnused {
      get { return ipOptQsUnused_; }
      set {
        ipOptQsUnused_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsNonce" field.</summary>
    public const int IpOptQsNonceFieldNumber = 72;
    private uint ipOptQsNonce_;
    /// <summary>
    /// QS Nonce ('ip_ip_opt_qs_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsNonce {
      get { return ipOptQsNonce_; }
      set {
        ipOptQsNonce_ = value;
      }
    }

    /// <summary>Field number for the "IpOptQsReserved" field.</summary>
    public const int IpOptQsReservedFieldNumber = 73;
    private uint ipOptQsReserved_;
    /// <summary>
    /// Reserved ('ip_ip_opt_qs_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptQsReserved {
      get { return ipOptQsReserved_; }
      set {
        ipOptQsReserved_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecRfc791Sec" field.</summary>
    public const int IpOptSecRfc791SecFieldNumber = 74;
    private uint ipOptSecRfc791Sec_;
    /// <summary>
    /// Security ('ip_ip_opt_sec_rfc791_sec')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSecRfc791Sec {
      get { return ipOptSecRfc791Sec_; }
      set {
        ipOptSecRfc791Sec_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecRfc791Comp" field.</summary>
    public const int IpOptSecRfc791CompFieldNumber = 75;
    private uint ipOptSecRfc791Comp_;
    /// <summary>
    /// Compartments ('ip_ip_opt_sec_rfc791_comp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSecRfc791Comp {
      get { return ipOptSecRfc791Comp_; }
      set {
        ipOptSecRfc791Comp_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecRfc791Hr" field.</summary>
    public const int IpOptSecRfc791HrFieldNumber = 76;
    private string ipOptSecRfc791Hr_ = "";
    /// <summary>
    /// Handling Restrictions ('ip_ip_opt_sec_rfc791_hr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpOptSecRfc791Hr {
      get { return ipOptSecRfc791Hr_; }
      set {
        ipOptSecRfc791Hr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptSecRfc791Tcc" field.</summary>
    public const int IpOptSecRfc791TccFieldNumber = 77;
    private string ipOptSecRfc791Tcc_ = "";
    /// <summary>
    /// Transmission Control Code ('ip_ip_opt_sec_rfc791_tcc')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpOptSecRfc791Tcc {
      get { return ipOptSecRfc791Tcc_; }
      set {
        ipOptSecRfc791Tcc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptSecCl" field.</summary>
    public const int IpOptSecClFieldNumber = 78;
    private uint ipOptSecCl_;
    /// <summary>
    /// Classification Level ('ip_ip_opt_sec_cl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSecCl {
      get { return ipOptSecCl_; }
      set {
        ipOptSecCl_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthFlags" field.</summary>
    public const int IpOptSecProtAuthFlagsFieldNumber = 79;
    private uint ipOptSecProtAuthFlags_;
    /// <summary>
    /// Protection Authority Flags ('ip_ip_opt_sec_prot_auth_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSecProtAuthFlags {
      get { return ipOptSecProtAuthFlags_; }
      set {
        ipOptSecProtAuthFlags_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthGenser" field.</summary>
    public const int IpOptSecProtAuthGenserFieldNumber = 80;
    private bool ipOptSecProtAuthGenser_;
    /// <summary>
    /// GENSER ('ip_ip_opt_sec_prot_auth_genser')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthGenser {
      get { return ipOptSecProtAuthGenser_; }
      set {
        ipOptSecProtAuthGenser_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthSiopEsi" field.</summary>
    public const int IpOptSecProtAuthSiopEsiFieldNumber = 81;
    private bool ipOptSecProtAuthSiopEsi_;
    /// <summary>
    /// SIOP-ESI ('ip_ip_opt_sec_prot_auth_siop_esi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthSiopEsi {
      get { return ipOptSecProtAuthSiopEsi_; }
      set {
        ipOptSecProtAuthSiopEsi_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthSci" field.</summary>
    public const int IpOptSecProtAuthSciFieldNumber = 82;
    private bool ipOptSecProtAuthSci_;
    /// <summary>
    /// SCI ('ip_ip_opt_sec_prot_auth_sci')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthSci {
      get { return ipOptSecProtAuthSci_; }
      set {
        ipOptSecProtAuthSci_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthNsa" field.</summary>
    public const int IpOptSecProtAuthNsaFieldNumber = 83;
    private bool ipOptSecProtAuthNsa_;
    /// <summary>
    /// NSA ('ip_ip_opt_sec_prot_auth_nsa')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthNsa {
      get { return ipOptSecProtAuthNsa_; }
      set {
        ipOptSecProtAuthNsa_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthDoe" field.</summary>
    public const int IpOptSecProtAuthDoeFieldNumber = 84;
    private bool ipOptSecProtAuthDoe_;
    /// <summary>
    /// DOE ('ip_ip_opt_sec_prot_auth_doe')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthDoe {
      get { return ipOptSecProtAuthDoe_; }
      set {
        ipOptSecProtAuthDoe_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthUnassigned" field.</summary>
    public const int IpOptSecProtAuthUnassignedFieldNumber = 85;
    private uint ipOptSecProtAuthUnassigned_;
    /// <summary>
    /// Unassigned ('ip_ip_opt_sec_prot_auth_unassigned')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptSecProtAuthUnassigned {
      get { return ipOptSecProtAuthUnassigned_; }
      set {
        ipOptSecProtAuthUnassigned_ = value;
      }
    }

    /// <summary>Field number for the "IpOptSecProtAuthFti" field.</summary>
    public const int IpOptSecProtAuthFtiFieldNumber = 86;
    private bool ipOptSecProtAuthFti_;
    /// <summary>
    /// Field Termination Indicator ('ip_ip_opt_sec_prot_auth_fti')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpOptSecProtAuthFti {
      get { return ipOptSecProtAuthFti_; }
      set {
        ipOptSecProtAuthFti_ = value;
      }
    }

    /// <summary>Field number for the "IpOptExtSecAddSecInfoFormatCode" field.</summary>
    public const int IpOptExtSecAddSecInfoFormatCodeFieldNumber = 87;
    private uint ipOptExtSecAddSecInfoFormatCode_;
    /// <summary>
    /// Additional Security Info Format Code ('ip_ip_opt_ext_sec_add_sec_info_format_code')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptExtSecAddSecInfoFormatCode {
      get { return ipOptExtSecAddSecInfoFormatCode_; }
      set {
        ipOptExtSecAddSecInfoFormatCode_ = value;
      }
    }

    /// <summary>Field number for the "IpOptExtSecAddSecInfo" field.</summary>
    public const int IpOptExtSecAddSecInfoFieldNumber = 88;
    private pb::ByteString ipOptExtSecAddSecInfo_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional Security Info ('ip_ip_opt_ext_sec_add_sec_info')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpOptExtSecAddSecInfo {
      get { return ipOptExtSecAddSecInfo_; }
      set {
        ipOptExtSecAddSecInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpRecRt" field.</summary>
    public const int IpRecRtFieldNumber = 89;
    private pb::ByteString ipRecRt_ = pb::ByteString.Empty;
    /// <summary>
    /// Recorded Route ('ip_ip_rec_rt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpRecRt {
      get { return ipRecRt_; }
      set {
        ipRecRt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpRecRtHost" field.</summary>
    public const int IpRecRtHostFieldNumber = 90;
    private string ipRecRtHost_ = "";
    /// <summary>
    /// Recorded Route Host ('ip_ip_rec_rt_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpRecRtHost {
      get { return ipRecRtHost_; }
      set {
        ipRecRtHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpCurRt" field.</summary>
    public const int IpCurRtFieldNumber = 91;
    private pb::ByteString ipCurRt_ = pb::ByteString.Empty;
    /// <summary>
    /// Current Route ('ip_ip_cur_rt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpCurRt {
      get { return ipCurRt_; }
      set {
        ipCurRt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpCurRtHost" field.</summary>
    public const int IpCurRtHostFieldNumber = 92;
    private string ipCurRtHost_ = "";
    /// <summary>
    /// Current Route Host ('ip_ip_cur_rt_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpCurRtHost {
      get { return ipCurRtHost_; }
      set {
        ipCurRtHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrcRt" field.</summary>
    public const int IpSrcRtFieldNumber = 93;
    private pb::ByteString ipSrcRt_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Route ('ip_ip_src_rt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpSrcRt {
      get { return ipSrcRt_; }
      set {
        ipSrcRt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrcRtHost" field.</summary>
    public const int IpSrcRtHostFieldNumber = 94;
    private string ipSrcRtHost_ = "";
    /// <summary>
    /// Source Route Host ('ip_ip_src_rt_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpSrcRtHost {
      get { return ipSrcRtHost_; }
      set {
        ipSrcRtHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpEmptyRt" field.</summary>
    public const int IpEmptyRtFieldNumber = 95;
    private pb::ByteString ipEmptyRt_ = pb::ByteString.Empty;
    /// <summary>
    /// Empty Route ('ip_ip_empty_rt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpEmptyRt {
      get { return ipEmptyRt_; }
      set {
        ipEmptyRt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpEmptyRtHost" field.</summary>
    public const int IpEmptyRtHostFieldNumber = 96;
    private string ipEmptyRtHost_ = "";
    /// <summary>
    /// Empty Route Host ('ip_ip_empty_rt_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpEmptyRtHost {
      get { return ipEmptyRtHost_; }
      set {
        ipEmptyRtHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpCipsoTagType" field.</summary>
    public const int IpCipsoTagTypeFieldNumber = 97;
    private uint ipCipsoTagType_;
    /// <summary>
    /// Tag Type ('ip_ip_cipso_tag_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpCipsoTagType {
      get { return ipCipsoTagType_; }
      set {
        ipCipsoTagType_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentOverlap" field.</summary>
    public const int IpFragmentOverlapFieldNumber = 98;
    private bool ipFragmentOverlap_;
    /// <summary>
    /// Fragment overlap ('ip_fragment_ip_fragment_overlap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFragmentOverlap {
      get { return ipFragmentOverlap_; }
      set {
        ipFragmentOverlap_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentOverlapConflict" field.</summary>
    public const int IpFragmentOverlapConflictFieldNumber = 99;
    private bool ipFragmentOverlapConflict_;
    /// <summary>
    /// Conflicting data in fragment overlap ('ip_fragment_overlap_ip_fragment_overlap_conflict')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFragmentOverlapConflict {
      get { return ipFragmentOverlapConflict_; }
      set {
        ipFragmentOverlapConflict_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentMultipletails" field.</summary>
    public const int IpFragmentMultipletailsFieldNumber = 100;
    private bool ipFragmentMultipletails_;
    /// <summary>
    /// Multiple tail fragments found ('ip_fragment_ip_fragment_multipletails')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFragmentMultipletails {
      get { return ipFragmentMultipletails_; }
      set {
        ipFragmentMultipletails_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentToolongfragment" field.</summary>
    public const int IpFragmentToolongfragmentFieldNumber = 101;
    private bool ipFragmentToolongfragment_;
    /// <summary>
    /// Fragment too long ('ip_fragment_ip_fragment_toolongfragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFragmentToolongfragment {
      get { return ipFragmentToolongfragment_; }
      set {
        ipFragmentToolongfragment_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentError" field.</summary>
    public const int IpFragmentErrorFieldNumber = 102;
    private long ipFragmentError_;
    /// <summary>
    /// Defragmentation error ('ip_fragment_ip_fragment_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IpFragmentError {
      get { return ipFragmentError_; }
      set {
        ipFragmentError_ = value;
      }
    }

    /// <summary>Field number for the "IpFragmentCount" field.</summary>
    public const int IpFragmentCountFieldNumber = 103;
    private uint ipFragmentCount_;
    /// <summary>
    /// Fragment count ('ip_fragment_ip_fragment_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpFragmentCount {
      get { return ipFragmentCount_; }
      set {
        ipFragmentCount_ = value;
      }
    }

    /// <summary>Field number for the "IpFragment" field.</summary>
    public const int IpFragmentFieldNumber = 104;
    private long ipFragment_;
    /// <summary>
    /// IPv4 Fragment ('ip_ip_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IpFragment {
      get { return ipFragment_; }
      set {
        ipFragment_ = value;
      }
    }

    /// <summary>Field number for the "IpFragments" field.</summary>
    public const int IpFragmentsFieldNumber = 105;
    private pb::ByteString ipFragments_ = pb::ByteString.Empty;
    /// <summary>
    /// IPv4 Fragments ('ip_ip_fragments')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpFragments {
      get { return ipFragments_; }
      set {
        ipFragments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpReassembledIn" field.</summary>
    public const int IpReassembledInFieldNumber = 106;
    private long ipReassembledIn_;
    /// <summary>
    /// Reassembled IPv4 in frame ('ip_ip_reassembled_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IpReassembledIn {
      get { return ipReassembledIn_; }
      set {
        ipReassembledIn_ = value;
      }
    }

    /// <summary>Field number for the "IpReassembledLength" field.</summary>
    public const int IpReassembledLengthFieldNumber = 107;
    private uint ipReassembledLength_;
    /// <summary>
    /// Reassembled IPv4 length ('ip_ip_reassembled_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpReassembledLength {
      get { return ipReassembledLength_; }
      set {
        ipReassembledLength_ = value;
      }
    }

    /// <summary>Field number for the "IpReassembledData" field.</summary>
    public const int IpReassembledDataFieldNumber = 108;
    private pb::ByteString ipReassembledData_ = pb::ByteString.Empty;
    /// <summary>
    /// Reassembled IPv4 data ('ip_ip_reassembled_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpReassembledData {
      get { return ipReassembledData_; }
      set {
        ipReassembledData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpCipsoDoi" field.</summary>
    public const int IpCipsoDoiFieldNumber = 109;
    private uint ipCipsoDoi_;
    /// <summary>
    /// DOI ('ip_ip_cipso_doi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpCipsoDoi {
      get { return ipCipsoDoi_; }
      set {
        ipCipsoDoi_ = value;
      }
    }

    /// <summary>Field number for the "IpCipsoSensitivityLevel" field.</summary>
    public const int IpCipsoSensitivityLevelFieldNumber = 110;
    private uint ipCipsoSensitivityLevel_;
    /// <summary>
    /// Sensitivity Level ('ip_ip_cipso_sensitivity_level')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpCipsoSensitivityLevel {
      get { return ipCipsoSensitivityLevel_; }
      set {
        ipCipsoSensitivityLevel_ = value;
      }
    }

    /// <summary>Field number for the "IpCipsoCategories" field.</summary>
    public const int IpCipsoCategoriesFieldNumber = 111;
    private string ipCipsoCategories_ = "";
    /// <summary>
    /// Categories ('ip_ip_cipso_categories')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpCipsoCategories {
      get { return ipCipsoCategories_; }
      set {
        ipCipsoCategories_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpCipsoTagData" field.</summary>
    public const int IpCipsoTagDataFieldNumber = 112;
    private pb::ByteString ipCipsoTagData_ = pb::ByteString.Empty;
    /// <summary>
    /// Tag data ('ip_ip_cipso_tag_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpCipsoTagData {
      get { return ipCipsoTagData_; }
      set {
        ipCipsoTagData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpOptOverflow" field.</summary>
    public const int IpOptOverflowFieldNumber = 113;
    private uint ipOptOverflow_;
    /// <summary>
    /// Overflow ('ip_ip_opt_overflow')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptOverflow {
      get { return ipOptOverflow_; }
      set {
        ipOptOverflow_ = value;
      }
    }

    /// <summary>Field number for the "IpOptFlag" field.</summary>
    public const int IpOptFlagFieldNumber = 114;
    private uint ipOptFlag_;
    /// <summary>
    /// Flag ('ip_ip_opt_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptFlag {
      get { return ipOptFlag_; }
      set {
        ipOptFlag_ = value;
      }
    }

    /// <summary>Field number for the "IpOptTimeStamp" field.</summary>
    public const int IpOptTimeStampFieldNumber = 115;
    private uint ipOptTimeStamp_;
    /// <summary>
    /// Time stamp ('ip_ip_opt_time_stamp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpOptTimeStamp {
      get { return ipOptTimeStamp_; }
      set {
        ipOptTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "IpOptTimeStampAddr" field.</summary>
    public const int IpOptTimeStampAddrFieldNumber = 116;
    private pb::ByteString ipOptTimeStampAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Address ('ip_ip_opt_time_stamp_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpOptTimeStampAddr {
      get { return ipOptTimeStampAddr_; }
      set {
        ipOptTimeStampAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      if (IpHdrLen != other.IpHdrLen) return false;
      if (IpDsfield != other.IpDsfield) return false;
      if (IpDsfieldDscp != other.IpDsfieldDscp) return false;
      if (IpDsfieldEcn != other.IpDsfieldEcn) return false;
      if (IpTos != other.IpTos) return false;
      if (IpTosPrecedence != other.IpTosPrecedence) return false;
      if (IpTosDelay != other.IpTosDelay) return false;
      if (IpTosThroughput != other.IpTosThroughput) return false;
      if (IpTosReliability != other.IpTosReliability) return false;
      if (IpTosCost != other.IpTosCost) return false;
      if (IpLen != other.IpLen) return false;
      if (IpId != other.IpId) return false;
      if (IpDst != other.IpDst) return false;
      if (IpDstHost != other.IpDstHost) return false;
      if (IpSrc != other.IpSrc) return false;
      if (IpSrcHost != other.IpSrcHost) return false;
      if (IpAddr != other.IpAddr) return false;
      if (IpHost != other.IpHost) return false;
      if (IpGeoipCountry != other.IpGeoipCountry) return false;
      if (IpGeoipCity != other.IpGeoipCity) return false;
      if (IpGeoipOrg != other.IpGeoipOrg) return false;
      if (IpGeoipIsp != other.IpGeoipIsp) return false;
      if (IpGeoipAsnum != other.IpGeoipAsnum) return false;
      if (IpGeoipLat != other.IpGeoipLat) return false;
      if (IpGeoipLon != other.IpGeoipLon) return false;
      if (IpGeoipSrcCountry != other.IpGeoipSrcCountry) return false;
      if (IpGeoipSrcCity != other.IpGeoipSrcCity) return false;
      if (IpGeoipSrcOrg != other.IpGeoipSrcOrg) return false;
      if (IpGeoipSrcIsp != other.IpGeoipSrcIsp) return false;
      if (IpGeoipSrcAsnum != other.IpGeoipSrcAsnum) return false;
      if (IpGeoipSrcLat != other.IpGeoipSrcLat) return false;
      if (IpGeoipSrcLon != other.IpGeoipSrcLon) return false;
      if (IpGeoipDstCountry != other.IpGeoipDstCountry) return false;
      if (IpGeoipDstCity != other.IpGeoipDstCity) return false;
      if (IpGeoipDstOrg != other.IpGeoipDstOrg) return false;
      if (IpGeoipDstIsp != other.IpGeoipDstIsp) return false;
      if (IpGeoipDstAsnum != other.IpGeoipDstAsnum) return false;
      if (IpGeoipDstLat != other.IpGeoipDstLat) return false;
      if (IpGeoipDstLon != other.IpGeoipDstLon) return false;
      if (IpFlags != other.IpFlags) return false;
      if (IpFlagsSf != other.IpFlagsSf) return false;
      if (IpFlagsRb != other.IpFlagsRb) return false;
      if (IpFlagsDf != other.IpFlagsDf) return false;
      if (IpFlagsMf != other.IpFlagsMf) return false;
      if (IpFragOffset != other.IpFragOffset) return false;
      if (IpTtl != other.IpTtl) return false;
      if (IpProto != other.IpProto) return false;
      if (IpChecksum != other.IpChecksum) return false;
      if (IpChecksumCalculated != other.IpChecksumCalculated) return false;
      if (IpChecksumStatus != other.IpChecksumStatus) return false;
      if (IpOptType != other.IpOptType) return false;
      if (IpOptTypeCopy != other.IpOptTypeCopy) return false;
      if (IpOptTypeClass != other.IpOptTypeClass) return false;
      if (IpOptTypeNumber != other.IpOptTypeNumber) return false;
      if (IpOptLen != other.IpOptLen) return false;
      if (IpOptPtr != other.IpOptPtr) return false;
      if (IpOptSid != other.IpOptSid) return false;
      if (IpOptMtu != other.IpOptMtu) return false;
      if (IpOptIdNumber != other.IpOptIdNumber) return false;
      if (IpOptOhc != other.IpOptOhc) return false;
      if (IpOptRhc != other.IpOptRhc) return false;
      if (IpOptOriginator != other.IpOptOriginator) return false;
      if (IpOptRa != other.IpOptRa) return false;
      if (IpOptAddr != other.IpOptAddr) return false;
      if (IpOptPadding != other.IpOptPadding) return false;
      if (IpOptQsFunc != other.IpOptQsFunc) return false;
      if (IpOptQsRate != other.IpOptQsRate) return false;
      if (IpOptQsTtl != other.IpOptQsTtl) return false;
      if (IpOptQsTtlDiff != other.IpOptQsTtlDiff) return false;
      if (IpOptQsUnused != other.IpOptQsUnused) return false;
      if (IpOptQsNonce != other.IpOptQsNonce) return false;
      if (IpOptQsReserved != other.IpOptQsReserved) return false;
      if (IpOptSecRfc791Sec != other.IpOptSecRfc791Sec) return false;
      if (IpOptSecRfc791Comp != other.IpOptSecRfc791Comp) return false;
      if (IpOptSecRfc791Hr != other.IpOptSecRfc791Hr) return false;
      if (IpOptSecRfc791Tcc != other.IpOptSecRfc791Tcc) return false;
      if (IpOptSecCl != other.IpOptSecCl) return false;
      if (IpOptSecProtAuthFlags != other.IpOptSecProtAuthFlags) return false;
      if (IpOptSecProtAuthGenser != other.IpOptSecProtAuthGenser) return false;
      if (IpOptSecProtAuthSiopEsi != other.IpOptSecProtAuthSiopEsi) return false;
      if (IpOptSecProtAuthSci != other.IpOptSecProtAuthSci) return false;
      if (IpOptSecProtAuthNsa != other.IpOptSecProtAuthNsa) return false;
      if (IpOptSecProtAuthDoe != other.IpOptSecProtAuthDoe) return false;
      if (IpOptSecProtAuthUnassigned != other.IpOptSecProtAuthUnassigned) return false;
      if (IpOptSecProtAuthFti != other.IpOptSecProtAuthFti) return false;
      if (IpOptExtSecAddSecInfoFormatCode != other.IpOptExtSecAddSecInfoFormatCode) return false;
      if (IpOptExtSecAddSecInfo != other.IpOptExtSecAddSecInfo) return false;
      if (IpRecRt != other.IpRecRt) return false;
      if (IpRecRtHost != other.IpRecRtHost) return false;
      if (IpCurRt != other.IpCurRt) return false;
      if (IpCurRtHost != other.IpCurRtHost) return false;
      if (IpSrcRt != other.IpSrcRt) return false;
      if (IpSrcRtHost != other.IpSrcRtHost) return false;
      if (IpEmptyRt != other.IpEmptyRt) return false;
      if (IpEmptyRtHost != other.IpEmptyRtHost) return false;
      if (IpCipsoTagType != other.IpCipsoTagType) return false;
      if (IpFragmentOverlap != other.IpFragmentOverlap) return false;
      if (IpFragmentOverlapConflict != other.IpFragmentOverlapConflict) return false;
      if (IpFragmentMultipletails != other.IpFragmentMultipletails) return false;
      if (IpFragmentToolongfragment != other.IpFragmentToolongfragment) return false;
      if (IpFragmentError != other.IpFragmentError) return false;
      if (IpFragmentCount != other.IpFragmentCount) return false;
      if (IpFragment != other.IpFragment) return false;
      if (IpFragments != other.IpFragments) return false;
      if (IpReassembledIn != other.IpReassembledIn) return false;
      if (IpReassembledLength != other.IpReassembledLength) return false;
      if (IpReassembledData != other.IpReassembledData) return false;
      if (IpCipsoDoi != other.IpCipsoDoi) return false;
      if (IpCipsoSensitivityLevel != other.IpCipsoSensitivityLevel) return false;
      if (IpCipsoCategories != other.IpCipsoCategories) return false;
      if (IpCipsoTagData != other.IpCipsoTagData) return false;
      if (IpOptOverflow != other.IpOptOverflow) return false;
      if (IpOptFlag != other.IpOptFlag) return false;
      if (IpOptTimeStamp != other.IpOptTimeStamp) return false;
      if (IpOptTimeStampAddr != other.IpOptTimeStampAddr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != 0) hash ^= IpVersion.GetHashCode();
      if (IpHdrLen != 0) hash ^= IpHdrLen.GetHashCode();
      if (IpDsfield != 0) hash ^= IpDsfield.GetHashCode();
      if (IpDsfieldDscp != 0) hash ^= IpDsfieldDscp.GetHashCode();
      if (IpDsfieldEcn != 0) hash ^= IpDsfieldEcn.GetHashCode();
      if (IpTos != 0) hash ^= IpTos.GetHashCode();
      if (IpTosPrecedence != 0) hash ^= IpTosPrecedence.GetHashCode();
      if (IpTosDelay != false) hash ^= IpTosDelay.GetHashCode();
      if (IpTosThroughput != false) hash ^= IpTosThroughput.GetHashCode();
      if (IpTosReliability != false) hash ^= IpTosReliability.GetHashCode();
      if (IpTosCost != false) hash ^= IpTosCost.GetHashCode();
      if (IpLen != 0) hash ^= IpLen.GetHashCode();
      if (IpId != 0) hash ^= IpId.GetHashCode();
      if (IpDst.Length != 0) hash ^= IpDst.GetHashCode();
      if (IpDstHost.Length != 0) hash ^= IpDstHost.GetHashCode();
      if (IpSrc.Length != 0) hash ^= IpSrc.GetHashCode();
      if (IpSrcHost.Length != 0) hash ^= IpSrcHost.GetHashCode();
      if (IpAddr.Length != 0) hash ^= IpAddr.GetHashCode();
      if (IpHost.Length != 0) hash ^= IpHost.GetHashCode();
      if (IpGeoipCountry.Length != 0) hash ^= IpGeoipCountry.GetHashCode();
      if (IpGeoipCity.Length != 0) hash ^= IpGeoipCity.GetHashCode();
      if (IpGeoipOrg.Length != 0) hash ^= IpGeoipOrg.GetHashCode();
      if (IpGeoipIsp.Length != 0) hash ^= IpGeoipIsp.GetHashCode();
      if (IpGeoipAsnum.Length != 0) hash ^= IpGeoipAsnum.GetHashCode();
      if (IpGeoipLat != 0D) hash ^= IpGeoipLat.GetHashCode();
      if (IpGeoipLon != 0D) hash ^= IpGeoipLon.GetHashCode();
      if (IpGeoipSrcCountry.Length != 0) hash ^= IpGeoipSrcCountry.GetHashCode();
      if (IpGeoipSrcCity.Length != 0) hash ^= IpGeoipSrcCity.GetHashCode();
      if (IpGeoipSrcOrg.Length != 0) hash ^= IpGeoipSrcOrg.GetHashCode();
      if (IpGeoipSrcIsp.Length != 0) hash ^= IpGeoipSrcIsp.GetHashCode();
      if (IpGeoipSrcAsnum.Length != 0) hash ^= IpGeoipSrcAsnum.GetHashCode();
      if (IpGeoipSrcLat != 0D) hash ^= IpGeoipSrcLat.GetHashCode();
      if (IpGeoipSrcLon != 0D) hash ^= IpGeoipSrcLon.GetHashCode();
      if (IpGeoipDstCountry.Length != 0) hash ^= IpGeoipDstCountry.GetHashCode();
      if (IpGeoipDstCity.Length != 0) hash ^= IpGeoipDstCity.GetHashCode();
      if (IpGeoipDstOrg.Length != 0) hash ^= IpGeoipDstOrg.GetHashCode();
      if (IpGeoipDstIsp.Length != 0) hash ^= IpGeoipDstIsp.GetHashCode();
      if (IpGeoipDstAsnum.Length != 0) hash ^= IpGeoipDstAsnum.GetHashCode();
      if (IpGeoipDstLat != 0D) hash ^= IpGeoipDstLat.GetHashCode();
      if (IpGeoipDstLon != 0D) hash ^= IpGeoipDstLon.GetHashCode();
      if (IpFlags != 0) hash ^= IpFlags.GetHashCode();
      if (IpFlagsSf != false) hash ^= IpFlagsSf.GetHashCode();
      if (IpFlagsRb != false) hash ^= IpFlagsRb.GetHashCode();
      if (IpFlagsDf != false) hash ^= IpFlagsDf.GetHashCode();
      if (IpFlagsMf != false) hash ^= IpFlagsMf.GetHashCode();
      if (IpFragOffset != 0) hash ^= IpFragOffset.GetHashCode();
      if (IpTtl != 0) hash ^= IpTtl.GetHashCode();
      if (IpProto != 0) hash ^= IpProto.GetHashCode();
      if (IpChecksum != 0) hash ^= IpChecksum.GetHashCode();
      if (IpChecksumCalculated != 0) hash ^= IpChecksumCalculated.GetHashCode();
      if (IpChecksumStatus != 0) hash ^= IpChecksumStatus.GetHashCode();
      if (IpOptType != 0) hash ^= IpOptType.GetHashCode();
      if (IpOptTypeCopy != false) hash ^= IpOptTypeCopy.GetHashCode();
      if (IpOptTypeClass != 0) hash ^= IpOptTypeClass.GetHashCode();
      if (IpOptTypeNumber != 0) hash ^= IpOptTypeNumber.GetHashCode();
      if (IpOptLen != 0) hash ^= IpOptLen.GetHashCode();
      if (IpOptPtr != 0) hash ^= IpOptPtr.GetHashCode();
      if (IpOptSid != 0) hash ^= IpOptSid.GetHashCode();
      if (IpOptMtu != 0) hash ^= IpOptMtu.GetHashCode();
      if (IpOptIdNumber != 0) hash ^= IpOptIdNumber.GetHashCode();
      if (IpOptOhc != 0) hash ^= IpOptOhc.GetHashCode();
      if (IpOptRhc != 0) hash ^= IpOptRhc.GetHashCode();
      if (IpOptOriginator.Length != 0) hash ^= IpOptOriginator.GetHashCode();
      if (IpOptRa != 0) hash ^= IpOptRa.GetHashCode();
      if (IpOptAddr.Length != 0) hash ^= IpOptAddr.GetHashCode();
      if (IpOptPadding.Length != 0) hash ^= IpOptPadding.GetHashCode();
      if (IpOptQsFunc != 0) hash ^= IpOptQsFunc.GetHashCode();
      if (IpOptQsRate != 0) hash ^= IpOptQsRate.GetHashCode();
      if (IpOptQsTtl != 0) hash ^= IpOptQsTtl.GetHashCode();
      if (IpOptQsTtlDiff != 0) hash ^= IpOptQsTtlDiff.GetHashCode();
      if (IpOptQsUnused != 0) hash ^= IpOptQsUnused.GetHashCode();
      if (IpOptQsNonce != 0) hash ^= IpOptQsNonce.GetHashCode();
      if (IpOptQsReserved != 0) hash ^= IpOptQsReserved.GetHashCode();
      if (IpOptSecRfc791Sec != 0) hash ^= IpOptSecRfc791Sec.GetHashCode();
      if (IpOptSecRfc791Comp != 0) hash ^= IpOptSecRfc791Comp.GetHashCode();
      if (IpOptSecRfc791Hr.Length != 0) hash ^= IpOptSecRfc791Hr.GetHashCode();
      if (IpOptSecRfc791Tcc.Length != 0) hash ^= IpOptSecRfc791Tcc.GetHashCode();
      if (IpOptSecCl != 0) hash ^= IpOptSecCl.GetHashCode();
      if (IpOptSecProtAuthFlags != 0) hash ^= IpOptSecProtAuthFlags.GetHashCode();
      if (IpOptSecProtAuthGenser != false) hash ^= IpOptSecProtAuthGenser.GetHashCode();
      if (IpOptSecProtAuthSiopEsi != false) hash ^= IpOptSecProtAuthSiopEsi.GetHashCode();
      if (IpOptSecProtAuthSci != false) hash ^= IpOptSecProtAuthSci.GetHashCode();
      if (IpOptSecProtAuthNsa != false) hash ^= IpOptSecProtAuthNsa.GetHashCode();
      if (IpOptSecProtAuthDoe != false) hash ^= IpOptSecProtAuthDoe.GetHashCode();
      if (IpOptSecProtAuthUnassigned != 0) hash ^= IpOptSecProtAuthUnassigned.GetHashCode();
      if (IpOptSecProtAuthFti != false) hash ^= IpOptSecProtAuthFti.GetHashCode();
      if (IpOptExtSecAddSecInfoFormatCode != 0) hash ^= IpOptExtSecAddSecInfoFormatCode.GetHashCode();
      if (IpOptExtSecAddSecInfo.Length != 0) hash ^= IpOptExtSecAddSecInfo.GetHashCode();
      if (IpRecRt.Length != 0) hash ^= IpRecRt.GetHashCode();
      if (IpRecRtHost.Length != 0) hash ^= IpRecRtHost.GetHashCode();
      if (IpCurRt.Length != 0) hash ^= IpCurRt.GetHashCode();
      if (IpCurRtHost.Length != 0) hash ^= IpCurRtHost.GetHashCode();
      if (IpSrcRt.Length != 0) hash ^= IpSrcRt.GetHashCode();
      if (IpSrcRtHost.Length != 0) hash ^= IpSrcRtHost.GetHashCode();
      if (IpEmptyRt.Length != 0) hash ^= IpEmptyRt.GetHashCode();
      if (IpEmptyRtHost.Length != 0) hash ^= IpEmptyRtHost.GetHashCode();
      if (IpCipsoTagType != 0) hash ^= IpCipsoTagType.GetHashCode();
      if (IpFragmentOverlap != false) hash ^= IpFragmentOverlap.GetHashCode();
      if (IpFragmentOverlapConflict != false) hash ^= IpFragmentOverlapConflict.GetHashCode();
      if (IpFragmentMultipletails != false) hash ^= IpFragmentMultipletails.GetHashCode();
      if (IpFragmentToolongfragment != false) hash ^= IpFragmentToolongfragment.GetHashCode();
      if (IpFragmentError != 0L) hash ^= IpFragmentError.GetHashCode();
      if (IpFragmentCount != 0) hash ^= IpFragmentCount.GetHashCode();
      if (IpFragment != 0L) hash ^= IpFragment.GetHashCode();
      if (IpFragments.Length != 0) hash ^= IpFragments.GetHashCode();
      if (IpReassembledIn != 0L) hash ^= IpReassembledIn.GetHashCode();
      if (IpReassembledLength != 0) hash ^= IpReassembledLength.GetHashCode();
      if (IpReassembledData.Length != 0) hash ^= IpReassembledData.GetHashCode();
      if (IpCipsoDoi != 0) hash ^= IpCipsoDoi.GetHashCode();
      if (IpCipsoSensitivityLevel != 0) hash ^= IpCipsoSensitivityLevel.GetHashCode();
      if (IpCipsoCategories.Length != 0) hash ^= IpCipsoCategories.GetHashCode();
      if (IpCipsoTagData.Length != 0) hash ^= IpCipsoTagData.GetHashCode();
      if (IpOptOverflow != 0) hash ^= IpOptOverflow.GetHashCode();
      if (IpOptFlag != 0) hash ^= IpOptFlag.GetHashCode();
      if (IpOptTimeStamp != 0) hash ^= IpOptTimeStamp.GetHashCode();
      if (IpOptTimeStampAddr.Length != 0) hash ^= IpOptTimeStampAddr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IpVersion);
      }
      if (IpHdrLen != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IpHdrLen);
      }
      if (IpDsfield != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IpDsfield);
      }
      if (IpDsfieldDscp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IpDsfieldDscp);
      }
      if (IpDsfieldEcn != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IpDsfieldEcn);
      }
      if (IpTos != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IpTos);
      }
      if (IpTosPrecedence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IpTosPrecedence);
      }
      if (IpTosDelay != false) {
        output.WriteRawTag(64);
        output.WriteBool(IpTosDelay);
      }
      if (IpTosThroughput != false) {
        output.WriteRawTag(72);
        output.WriteBool(IpTosThroughput);
      }
      if (IpTosReliability != false) {
        output.WriteRawTag(80);
        output.WriteBool(IpTosReliability);
      }
      if (IpTosCost != false) {
        output.WriteRawTag(88);
        output.WriteBool(IpTosCost);
      }
      if (IpLen != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IpLen);
      }
      if (IpId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IpId);
      }
      if (IpDst.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(IpDst);
      }
      if (IpDstHost.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(IpDstHost);
      }
      if (IpSrc.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(IpSrc);
      }
      if (IpSrcHost.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(IpSrcHost);
      }
      if (IpAddr.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(IpAddr);
      }
      if (IpHost.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(IpHost);
      }
      if (IpGeoipCountry.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(IpGeoipCountry);
      }
      if (IpGeoipCity.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(IpGeoipCity);
      }
      if (IpGeoipOrg.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(IpGeoipOrg);
      }
      if (IpGeoipIsp.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(IpGeoipIsp);
      }
      if (IpGeoipAsnum.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IpGeoipAsnum);
      }
      if (IpGeoipLat != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(IpGeoipLat);
      }
      if (IpGeoipLon != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(IpGeoipLon);
      }
      if (IpGeoipSrcCountry.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(IpGeoipSrcCountry);
      }
      if (IpGeoipSrcCity.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IpGeoipSrcCity);
      }
      if (IpGeoipSrcOrg.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IpGeoipSrcOrg);
      }
      if (IpGeoipSrcIsp.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(IpGeoipSrcIsp);
      }
      if (IpGeoipSrcAsnum.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(IpGeoipSrcAsnum);
      }
      if (IpGeoipSrcLat != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(IpGeoipSrcLat);
      }
      if (IpGeoipSrcLon != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(IpGeoipSrcLon);
      }
      if (IpGeoipDstCountry.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(IpGeoipDstCountry);
      }
      if (IpGeoipDstCity.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(IpGeoipDstCity);
      }
      if (IpGeoipDstOrg.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(IpGeoipDstOrg);
      }
      if (IpGeoipDstIsp.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(IpGeoipDstIsp);
      }
      if (IpGeoipDstAsnum.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(IpGeoipDstAsnum);
      }
      if (IpGeoipDstLat != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(IpGeoipDstLat);
      }
      if (IpGeoipDstLon != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(IpGeoipDstLon);
      }
      if (IpFlags != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(IpFlags);
      }
      if (IpFlagsSf != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(IpFlagsSf);
      }
      if (IpFlagsRb != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IpFlagsRb);
      }
      if (IpFlagsDf != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IpFlagsDf);
      }
      if (IpFlagsMf != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IpFlagsMf);
      }
      if (IpFragOffset != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(IpFragOffset);
      }
      if (IpTtl != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(IpTtl);
      }
      if (IpProto != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(IpProto);
      }
      if (IpChecksum != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(IpChecksum);
      }
      if (IpChecksumCalculated != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(IpChecksumCalculated);
      }
      if (IpChecksumStatus != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(IpChecksumStatus);
      }
      if (IpOptType != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(IpOptType);
      }
      if (IpOptTypeCopy != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IpOptTypeCopy);
      }
      if (IpOptTypeClass != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(IpOptTypeClass);
      }
      if (IpOptTypeNumber != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(IpOptTypeNumber);
      }
      if (IpOptLen != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(IpOptLen);
      }
      if (IpOptPtr != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(IpOptPtr);
      }
      if (IpOptSid != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(IpOptSid);
      }
      if (IpOptMtu != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(IpOptMtu);
      }
      if (IpOptIdNumber != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(IpOptIdNumber);
      }
      if (IpOptOhc != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(IpOptOhc);
      }
      if (IpOptRhc != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(IpOptRhc);
      }
      if (IpOptOriginator.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteBytes(IpOptOriginator);
      }
      if (IpOptRa != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(IpOptRa);
      }
      if (IpOptAddr.Length != 0) {
        output.WriteRawTag(138, 4);
        output.WriteBytes(IpOptAddr);
      }
      if (IpOptPadding.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteBytes(IpOptPadding);
      }
      if (IpOptQsFunc != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(IpOptQsFunc);
      }
      if (IpOptQsRate != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(IpOptQsRate);
      }
      if (IpOptQsTtl != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(IpOptQsTtl);
      }
      if (IpOptQsTtlDiff != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(IpOptQsTtlDiff);
      }
      if (IpOptQsUnused != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(IpOptQsUnused);
      }
      if (IpOptQsNonce != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(IpOptQsNonce);
      }
      if (IpOptQsReserved != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(IpOptQsReserved);
      }
      if (IpOptSecRfc791Sec != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(IpOptSecRfc791Sec);
      }
      if (IpOptSecRfc791Comp != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(IpOptSecRfc791Comp);
      }
      if (IpOptSecRfc791Hr.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(IpOptSecRfc791Hr);
      }
      if (IpOptSecRfc791Tcc.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(IpOptSecRfc791Tcc);
      }
      if (IpOptSecCl != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(IpOptSecCl);
      }
      if (IpOptSecProtAuthFlags != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(IpOptSecProtAuthFlags);
      }
      if (IpOptSecProtAuthGenser != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(IpOptSecProtAuthGenser);
      }
      if (IpOptSecProtAuthSiopEsi != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(IpOptSecProtAuthSiopEsi);
      }
      if (IpOptSecProtAuthSci != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(IpOptSecProtAuthSci);
      }
      if (IpOptSecProtAuthNsa != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(IpOptSecProtAuthNsa);
      }
      if (IpOptSecProtAuthDoe != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(IpOptSecProtAuthDoe);
      }
      if (IpOptSecProtAuthUnassigned != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(IpOptSecProtAuthUnassigned);
      }
      if (IpOptSecProtAuthFti != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(IpOptSecProtAuthFti);
      }
      if (IpOptExtSecAddSecInfoFormatCode != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(IpOptExtSecAddSecInfoFormatCode);
      }
      if (IpOptExtSecAddSecInfo.Length != 0) {
        output.WriteRawTag(194, 5);
        output.WriteBytes(IpOptExtSecAddSecInfo);
      }
      if (IpRecRt.Length != 0) {
        output.WriteRawTag(202, 5);
        output.WriteBytes(IpRecRt);
      }
      if (IpRecRtHost.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(IpRecRtHost);
      }
      if (IpCurRt.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteBytes(IpCurRt);
      }
      if (IpCurRtHost.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(IpCurRtHost);
      }
      if (IpSrcRt.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteBytes(IpSrcRt);
      }
      if (IpSrcRtHost.Length != 0) {
        output.WriteRawTag(242, 5);
        output.WriteString(IpSrcRtHost);
      }
      if (IpEmptyRt.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteBytes(IpEmptyRt);
      }
      if (IpEmptyRtHost.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteString(IpEmptyRtHost);
      }
      if (IpCipsoTagType != 0) {
        output.WriteRawTag(136, 6);
        output.WriteUInt32(IpCipsoTagType);
      }
      if (IpFragmentOverlap != false) {
        output.WriteRawTag(144, 6);
        output.WriteBool(IpFragmentOverlap);
      }
      if (IpFragmentOverlapConflict != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(IpFragmentOverlapConflict);
      }
      if (IpFragmentMultipletails != false) {
        output.WriteRawTag(160, 6);
        output.WriteBool(IpFragmentMultipletails);
      }
      if (IpFragmentToolongfragment != false) {
        output.WriteRawTag(168, 6);
        output.WriteBool(IpFragmentToolongfragment);
      }
      if (IpFragmentError != 0L) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(IpFragmentError);
      }
      if (IpFragmentCount != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(IpFragmentCount);
      }
      if (IpFragment != 0L) {
        output.WriteRawTag(192, 6);
        output.WriteInt64(IpFragment);
      }
      if (IpFragments.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteBytes(IpFragments);
      }
      if (IpReassembledIn != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(IpReassembledIn);
      }
      if (IpReassembledLength != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(IpReassembledLength);
      }
      if (IpReassembledData.Length != 0) {
        output.WriteRawTag(226, 6);
        output.WriteBytes(IpReassembledData);
      }
      if (IpCipsoDoi != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(IpCipsoDoi);
      }
      if (IpCipsoSensitivityLevel != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(IpCipsoSensitivityLevel);
      }
      if (IpCipsoCategories.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(IpCipsoCategories);
      }
      if (IpCipsoTagData.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteBytes(IpCipsoTagData);
      }
      if (IpOptOverflow != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(IpOptOverflow);
      }
      if (IpOptFlag != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(IpOptFlag);
      }
      if (IpOptTimeStamp != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(IpOptTimeStamp);
      }
      if (IpOptTimeStampAddr.Length != 0) {
        output.WriteRawTag(162, 7);
        output.WriteBytes(IpOptTimeStampAddr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpVersion);
      }
      if (IpHdrLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpHdrLen);
      }
      if (IpDsfield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfield);
      }
      if (IpDsfieldDscp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfieldDscp);
      }
      if (IpDsfieldEcn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfieldEcn);
      }
      if (IpTos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpTos);
      }
      if (IpTosPrecedence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpTosPrecedence);
      }
      if (IpTosDelay != false) {
        size += 1 + 1;
      }
      if (IpTosThroughput != false) {
        size += 1 + 1;
      }
      if (IpTosReliability != false) {
        size += 1 + 1;
      }
      if (IpTosCost != false) {
        size += 1 + 1;
      }
      if (IpLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpLen);
      }
      if (IpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpId);
      }
      if (IpDst.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpDst);
      }
      if (IpDstHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpDstHost);
      }
      if (IpSrc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpSrc);
      }
      if (IpSrcHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpSrcHost);
      }
      if (IpAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpAddr);
      }
      if (IpHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpHost);
      }
      if (IpGeoipCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipCountry);
      }
      if (IpGeoipCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipCity);
      }
      if (IpGeoipOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipOrg);
      }
      if (IpGeoipIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipIsp);
      }
      if (IpGeoipAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipAsnum);
      }
      if (IpGeoipLat != 0D) {
        size += 2 + 8;
      }
      if (IpGeoipLon != 0D) {
        size += 2 + 8;
      }
      if (IpGeoipSrcCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipSrcCountry);
      }
      if (IpGeoipSrcCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipSrcCity);
      }
      if (IpGeoipSrcOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipSrcOrg);
      }
      if (IpGeoipSrcIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipSrcIsp);
      }
      if (IpGeoipSrcAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipSrcAsnum);
      }
      if (IpGeoipSrcLat != 0D) {
        size += 2 + 8;
      }
      if (IpGeoipSrcLon != 0D) {
        size += 2 + 8;
      }
      if (IpGeoipDstCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipDstCountry);
      }
      if (IpGeoipDstCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipDstCity);
      }
      if (IpGeoipDstOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipDstOrg);
      }
      if (IpGeoipDstIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipDstIsp);
      }
      if (IpGeoipDstAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpGeoipDstAsnum);
      }
      if (IpGeoipDstLat != 0D) {
        size += 2 + 8;
      }
      if (IpGeoipDstLon != 0D) {
        size += 2 + 8;
      }
      if (IpFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpFlags);
      }
      if (IpFlagsSf != false) {
        size += 2 + 1;
      }
      if (IpFlagsRb != false) {
        size += 2 + 1;
      }
      if (IpFlagsDf != false) {
        size += 2 + 1;
      }
      if (IpFlagsMf != false) {
        size += 2 + 1;
      }
      if (IpFragOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpFragOffset);
      }
      if (IpTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpTtl);
      }
      if (IpProto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpProto);
      }
      if (IpChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpChecksum);
      }
      if (IpChecksumCalculated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpChecksumCalculated);
      }
      if (IpChecksumStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpChecksumStatus);
      }
      if (IpOptType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptType);
      }
      if (IpOptTypeCopy != false) {
        size += 2 + 1;
      }
      if (IpOptTypeClass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptTypeClass);
      }
      if (IpOptTypeNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptTypeNumber);
      }
      if (IpOptLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptLen);
      }
      if (IpOptPtr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptPtr);
      }
      if (IpOptSid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSid);
      }
      if (IpOptMtu != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptMtu);
      }
      if (IpOptIdNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptIdNumber);
      }
      if (IpOptOhc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptOhc);
      }
      if (IpOptRhc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptRhc);
      }
      if (IpOptOriginator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpOptOriginator);
      }
      if (IpOptRa != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptRa);
      }
      if (IpOptAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpOptAddr);
      }
      if (IpOptPadding.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpOptPadding);
      }
      if (IpOptQsFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsFunc);
      }
      if (IpOptQsRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsRate);
      }
      if (IpOptQsTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsTtl);
      }
      if (IpOptQsTtlDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsTtlDiff);
      }
      if (IpOptQsUnused != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsUnused);
      }
      if (IpOptQsNonce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsNonce);
      }
      if (IpOptQsReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptQsReserved);
      }
      if (IpOptSecRfc791Sec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSecRfc791Sec);
      }
      if (IpOptSecRfc791Comp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSecRfc791Comp);
      }
      if (IpOptSecRfc791Hr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpOptSecRfc791Hr);
      }
      if (IpOptSecRfc791Tcc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpOptSecRfc791Tcc);
      }
      if (IpOptSecCl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSecCl);
      }
      if (IpOptSecProtAuthFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSecProtAuthFlags);
      }
      if (IpOptSecProtAuthGenser != false) {
        size += 2 + 1;
      }
      if (IpOptSecProtAuthSiopEsi != false) {
        size += 2 + 1;
      }
      if (IpOptSecProtAuthSci != false) {
        size += 2 + 1;
      }
      if (IpOptSecProtAuthNsa != false) {
        size += 2 + 1;
      }
      if (IpOptSecProtAuthDoe != false) {
        size += 2 + 1;
      }
      if (IpOptSecProtAuthUnassigned != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptSecProtAuthUnassigned);
      }
      if (IpOptSecProtAuthFti != false) {
        size += 2 + 1;
      }
      if (IpOptExtSecAddSecInfoFormatCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptExtSecAddSecInfoFormatCode);
      }
      if (IpOptExtSecAddSecInfo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpOptExtSecAddSecInfo);
      }
      if (IpRecRt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpRecRt);
      }
      if (IpRecRtHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpRecRtHost);
      }
      if (IpCurRt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpCurRt);
      }
      if (IpCurRtHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpCurRtHost);
      }
      if (IpSrcRt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpSrcRt);
      }
      if (IpSrcRtHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpSrcRtHost);
      }
      if (IpEmptyRt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpEmptyRt);
      }
      if (IpEmptyRtHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpEmptyRtHost);
      }
      if (IpCipsoTagType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpCipsoTagType);
      }
      if (IpFragmentOverlap != false) {
        size += 2 + 1;
      }
      if (IpFragmentOverlapConflict != false) {
        size += 2 + 1;
      }
      if (IpFragmentMultipletails != false) {
        size += 2 + 1;
      }
      if (IpFragmentToolongfragment != false) {
        size += 2 + 1;
      }
      if (IpFragmentError != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IpFragmentError);
      }
      if (IpFragmentCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpFragmentCount);
      }
      if (IpFragment != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IpFragment);
      }
      if (IpFragments.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpFragments);
      }
      if (IpReassembledIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IpReassembledIn);
      }
      if (IpReassembledLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpReassembledLength);
      }
      if (IpReassembledData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpReassembledData);
      }
      if (IpCipsoDoi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpCipsoDoi);
      }
      if (IpCipsoSensitivityLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpCipsoSensitivityLevel);
      }
      if (IpCipsoCategories.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpCipsoCategories);
      }
      if (IpCipsoTagData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpCipsoTagData);
      }
      if (IpOptOverflow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptOverflow);
      }
      if (IpOptFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptFlag);
      }
      if (IpOptTimeStamp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpOptTimeStamp);
      }
      if (IpOptTimeStampAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpOptTimeStampAddr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ip other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != 0) {
        IpVersion = other.IpVersion;
      }
      if (other.IpHdrLen != 0) {
        IpHdrLen = other.IpHdrLen;
      }
      if (other.IpDsfield != 0) {
        IpDsfield = other.IpDsfield;
      }
      if (other.IpDsfieldDscp != 0) {
        IpDsfieldDscp = other.IpDsfieldDscp;
      }
      if (other.IpDsfieldEcn != 0) {
        IpDsfieldEcn = other.IpDsfieldEcn;
      }
      if (other.IpTos != 0) {
        IpTos = other.IpTos;
      }
      if (other.IpTosPrecedence != 0) {
        IpTosPrecedence = other.IpTosPrecedence;
      }
      if (other.IpTosDelay != false) {
        IpTosDelay = other.IpTosDelay;
      }
      if (other.IpTosThroughput != false) {
        IpTosThroughput = other.IpTosThroughput;
      }
      if (other.IpTosReliability != false) {
        IpTosReliability = other.IpTosReliability;
      }
      if (other.IpTosCost != false) {
        IpTosCost = other.IpTosCost;
      }
      if (other.IpLen != 0) {
        IpLen = other.IpLen;
      }
      if (other.IpId != 0) {
        IpId = other.IpId;
      }
      if (other.IpDst.Length != 0) {
        IpDst = other.IpDst;
      }
      if (other.IpDstHost.Length != 0) {
        IpDstHost = other.IpDstHost;
      }
      if (other.IpSrc.Length != 0) {
        IpSrc = other.IpSrc;
      }
      if (other.IpSrcHost.Length != 0) {
        IpSrcHost = other.IpSrcHost;
      }
      if (other.IpAddr.Length != 0) {
        IpAddr = other.IpAddr;
      }
      if (other.IpHost.Length != 0) {
        IpHost = other.IpHost;
      }
      if (other.IpGeoipCountry.Length != 0) {
        IpGeoipCountry = other.IpGeoipCountry;
      }
      if (other.IpGeoipCity.Length != 0) {
        IpGeoipCity = other.IpGeoipCity;
      }
      if (other.IpGeoipOrg.Length != 0) {
        IpGeoipOrg = other.IpGeoipOrg;
      }
      if (other.IpGeoipIsp.Length != 0) {
        IpGeoipIsp = other.IpGeoipIsp;
      }
      if (other.IpGeoipAsnum.Length != 0) {
        IpGeoipAsnum = other.IpGeoipAsnum;
      }
      if (other.IpGeoipLat != 0D) {
        IpGeoipLat = other.IpGeoipLat;
      }
      if (other.IpGeoipLon != 0D) {
        IpGeoipLon = other.IpGeoipLon;
      }
      if (other.IpGeoipSrcCountry.Length != 0) {
        IpGeoipSrcCountry = other.IpGeoipSrcCountry;
      }
      if (other.IpGeoipSrcCity.Length != 0) {
        IpGeoipSrcCity = other.IpGeoipSrcCity;
      }
      if (other.IpGeoipSrcOrg.Length != 0) {
        IpGeoipSrcOrg = other.IpGeoipSrcOrg;
      }
      if (other.IpGeoipSrcIsp.Length != 0) {
        IpGeoipSrcIsp = other.IpGeoipSrcIsp;
      }
      if (other.IpGeoipSrcAsnum.Length != 0) {
        IpGeoipSrcAsnum = other.IpGeoipSrcAsnum;
      }
      if (other.IpGeoipSrcLat != 0D) {
        IpGeoipSrcLat = other.IpGeoipSrcLat;
      }
      if (other.IpGeoipSrcLon != 0D) {
        IpGeoipSrcLon = other.IpGeoipSrcLon;
      }
      if (other.IpGeoipDstCountry.Length != 0) {
        IpGeoipDstCountry = other.IpGeoipDstCountry;
      }
      if (other.IpGeoipDstCity.Length != 0) {
        IpGeoipDstCity = other.IpGeoipDstCity;
      }
      if (other.IpGeoipDstOrg.Length != 0) {
        IpGeoipDstOrg = other.IpGeoipDstOrg;
      }
      if (other.IpGeoipDstIsp.Length != 0) {
        IpGeoipDstIsp = other.IpGeoipDstIsp;
      }
      if (other.IpGeoipDstAsnum.Length != 0) {
        IpGeoipDstAsnum = other.IpGeoipDstAsnum;
      }
      if (other.IpGeoipDstLat != 0D) {
        IpGeoipDstLat = other.IpGeoipDstLat;
      }
      if (other.IpGeoipDstLon != 0D) {
        IpGeoipDstLon = other.IpGeoipDstLon;
      }
      if (other.IpFlags != 0) {
        IpFlags = other.IpFlags;
      }
      if (other.IpFlagsSf != false) {
        IpFlagsSf = other.IpFlagsSf;
      }
      if (other.IpFlagsRb != false) {
        IpFlagsRb = other.IpFlagsRb;
      }
      if (other.IpFlagsDf != false) {
        IpFlagsDf = other.IpFlagsDf;
      }
      if (other.IpFlagsMf != false) {
        IpFlagsMf = other.IpFlagsMf;
      }
      if (other.IpFragOffset != 0) {
        IpFragOffset = other.IpFragOffset;
      }
      if (other.IpTtl != 0) {
        IpTtl = other.IpTtl;
      }
      if (other.IpProto != 0) {
        IpProto = other.IpProto;
      }
      if (other.IpChecksum != 0) {
        IpChecksum = other.IpChecksum;
      }
      if (other.IpChecksumCalculated != 0) {
        IpChecksumCalculated = other.IpChecksumCalculated;
      }
      if (other.IpChecksumStatus != 0) {
        IpChecksumStatus = other.IpChecksumStatus;
      }
      if (other.IpOptType != 0) {
        IpOptType = other.IpOptType;
      }
      if (other.IpOptTypeCopy != false) {
        IpOptTypeCopy = other.IpOptTypeCopy;
      }
      if (other.IpOptTypeClass != 0) {
        IpOptTypeClass = other.IpOptTypeClass;
      }
      if (other.IpOptTypeNumber != 0) {
        IpOptTypeNumber = other.IpOptTypeNumber;
      }
      if (other.IpOptLen != 0) {
        IpOptLen = other.IpOptLen;
      }
      if (other.IpOptPtr != 0) {
        IpOptPtr = other.IpOptPtr;
      }
      if (other.IpOptSid != 0) {
        IpOptSid = other.IpOptSid;
      }
      if (other.IpOptMtu != 0) {
        IpOptMtu = other.IpOptMtu;
      }
      if (other.IpOptIdNumber != 0) {
        IpOptIdNumber = other.IpOptIdNumber;
      }
      if (other.IpOptOhc != 0) {
        IpOptOhc = other.IpOptOhc;
      }
      if (other.IpOptRhc != 0) {
        IpOptRhc = other.IpOptRhc;
      }
      if (other.IpOptOriginator.Length != 0) {
        IpOptOriginator = other.IpOptOriginator;
      }
      if (other.IpOptRa != 0) {
        IpOptRa = other.IpOptRa;
      }
      if (other.IpOptAddr.Length != 0) {
        IpOptAddr = other.IpOptAddr;
      }
      if (other.IpOptPadding.Length != 0) {
        IpOptPadding = other.IpOptPadding;
      }
      if (other.IpOptQsFunc != 0) {
        IpOptQsFunc = other.IpOptQsFunc;
      }
      if (other.IpOptQsRate != 0) {
        IpOptQsRate = other.IpOptQsRate;
      }
      if (other.IpOptQsTtl != 0) {
        IpOptQsTtl = other.IpOptQsTtl;
      }
      if (other.IpOptQsTtlDiff != 0) {
        IpOptQsTtlDiff = other.IpOptQsTtlDiff;
      }
      if (other.IpOptQsUnused != 0) {
        IpOptQsUnused = other.IpOptQsUnused;
      }
      if (other.IpOptQsNonce != 0) {
        IpOptQsNonce = other.IpOptQsNonce;
      }
      if (other.IpOptQsReserved != 0) {
        IpOptQsReserved = other.IpOptQsReserved;
      }
      if (other.IpOptSecRfc791Sec != 0) {
        IpOptSecRfc791Sec = other.IpOptSecRfc791Sec;
      }
      if (other.IpOptSecRfc791Comp != 0) {
        IpOptSecRfc791Comp = other.IpOptSecRfc791Comp;
      }
      if (other.IpOptSecRfc791Hr.Length != 0) {
        IpOptSecRfc791Hr = other.IpOptSecRfc791Hr;
      }
      if (other.IpOptSecRfc791Tcc.Length != 0) {
        IpOptSecRfc791Tcc = other.IpOptSecRfc791Tcc;
      }
      if (other.IpOptSecCl != 0) {
        IpOptSecCl = other.IpOptSecCl;
      }
      if (other.IpOptSecProtAuthFlags != 0) {
        IpOptSecProtAuthFlags = other.IpOptSecProtAuthFlags;
      }
      if (other.IpOptSecProtAuthGenser != false) {
        IpOptSecProtAuthGenser = other.IpOptSecProtAuthGenser;
      }
      if (other.IpOptSecProtAuthSiopEsi != false) {
        IpOptSecProtAuthSiopEsi = other.IpOptSecProtAuthSiopEsi;
      }
      if (other.IpOptSecProtAuthSci != false) {
        IpOptSecProtAuthSci = other.IpOptSecProtAuthSci;
      }
      if (other.IpOptSecProtAuthNsa != false) {
        IpOptSecProtAuthNsa = other.IpOptSecProtAuthNsa;
      }
      if (other.IpOptSecProtAuthDoe != false) {
        IpOptSecProtAuthDoe = other.IpOptSecProtAuthDoe;
      }
      if (other.IpOptSecProtAuthUnassigned != 0) {
        IpOptSecProtAuthUnassigned = other.IpOptSecProtAuthUnassigned;
      }
      if (other.IpOptSecProtAuthFti != false) {
        IpOptSecProtAuthFti = other.IpOptSecProtAuthFti;
      }
      if (other.IpOptExtSecAddSecInfoFormatCode != 0) {
        IpOptExtSecAddSecInfoFormatCode = other.IpOptExtSecAddSecInfoFormatCode;
      }
      if (other.IpOptExtSecAddSecInfo.Length != 0) {
        IpOptExtSecAddSecInfo = other.IpOptExtSecAddSecInfo;
      }
      if (other.IpRecRt.Length != 0) {
        IpRecRt = other.IpRecRt;
      }
      if (other.IpRecRtHost.Length != 0) {
        IpRecRtHost = other.IpRecRtHost;
      }
      if (other.IpCurRt.Length != 0) {
        IpCurRt = other.IpCurRt;
      }
      if (other.IpCurRtHost.Length != 0) {
        IpCurRtHost = other.IpCurRtHost;
      }
      if (other.IpSrcRt.Length != 0) {
        IpSrcRt = other.IpSrcRt;
      }
      if (other.IpSrcRtHost.Length != 0) {
        IpSrcRtHost = other.IpSrcRtHost;
      }
      if (other.IpEmptyRt.Length != 0) {
        IpEmptyRt = other.IpEmptyRt;
      }
      if (other.IpEmptyRtHost.Length != 0) {
        IpEmptyRtHost = other.IpEmptyRtHost;
      }
      if (other.IpCipsoTagType != 0) {
        IpCipsoTagType = other.IpCipsoTagType;
      }
      if (other.IpFragmentOverlap != false) {
        IpFragmentOverlap = other.IpFragmentOverlap;
      }
      if (other.IpFragmentOverlapConflict != false) {
        IpFragmentOverlapConflict = other.IpFragmentOverlapConflict;
      }
      if (other.IpFragmentMultipletails != false) {
        IpFragmentMultipletails = other.IpFragmentMultipletails;
      }
      if (other.IpFragmentToolongfragment != false) {
        IpFragmentToolongfragment = other.IpFragmentToolongfragment;
      }
      if (other.IpFragmentError != 0L) {
        IpFragmentError = other.IpFragmentError;
      }
      if (other.IpFragmentCount != 0) {
        IpFragmentCount = other.IpFragmentCount;
      }
      if (other.IpFragment != 0L) {
        IpFragment = other.IpFragment;
      }
      if (other.IpFragments.Length != 0) {
        IpFragments = other.IpFragments;
      }
      if (other.IpReassembledIn != 0L) {
        IpReassembledIn = other.IpReassembledIn;
      }
      if (other.IpReassembledLength != 0) {
        IpReassembledLength = other.IpReassembledLength;
      }
      if (other.IpReassembledData.Length != 0) {
        IpReassembledData = other.IpReassembledData;
      }
      if (other.IpCipsoDoi != 0) {
        IpCipsoDoi = other.IpCipsoDoi;
      }
      if (other.IpCipsoSensitivityLevel != 0) {
        IpCipsoSensitivityLevel = other.IpCipsoSensitivityLevel;
      }
      if (other.IpCipsoCategories.Length != 0) {
        IpCipsoCategories = other.IpCipsoCategories;
      }
      if (other.IpCipsoTagData.Length != 0) {
        IpCipsoTagData = other.IpCipsoTagData;
      }
      if (other.IpOptOverflow != 0) {
        IpOptOverflow = other.IpOptOverflow;
      }
      if (other.IpOptFlag != 0) {
        IpOptFlag = other.IpOptFlag;
      }
      if (other.IpOptTimeStamp != 0) {
        IpOptTimeStamp = other.IpOptTimeStamp;
      }
      if (other.IpOptTimeStampAddr.Length != 0) {
        IpOptTimeStampAddr = other.IpOptTimeStampAddr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IpVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            IpHdrLen = input.ReadUInt32();
            break;
          }
          case 24: {
            IpDsfield = input.ReadUInt32();
            break;
          }
          case 32: {
            IpDsfieldDscp = input.ReadUInt32();
            break;
          }
          case 40: {
            IpDsfieldEcn = input.ReadUInt32();
            break;
          }
          case 48: {
            IpTos = input.ReadUInt32();
            break;
          }
          case 56: {
            IpTosPrecedence = input.ReadUInt32();
            break;
          }
          case 64: {
            IpTosDelay = input.ReadBool();
            break;
          }
          case 72: {
            IpTosThroughput = input.ReadBool();
            break;
          }
          case 80: {
            IpTosReliability = input.ReadBool();
            break;
          }
          case 88: {
            IpTosCost = input.ReadBool();
            break;
          }
          case 96: {
            IpLen = input.ReadUInt32();
            break;
          }
          case 104: {
            IpId = input.ReadUInt32();
            break;
          }
          case 114: {
            IpDst = input.ReadBytes();
            break;
          }
          case 122: {
            IpDstHost = input.ReadString();
            break;
          }
          case 130: {
            IpSrc = input.ReadBytes();
            break;
          }
          case 138: {
            IpSrcHost = input.ReadString();
            break;
          }
          case 146: {
            IpAddr = input.ReadBytes();
            break;
          }
          case 154: {
            IpHost = input.ReadString();
            break;
          }
          case 162: {
            IpGeoipCountry = input.ReadString();
            break;
          }
          case 170: {
            IpGeoipCity = input.ReadString();
            break;
          }
          case 178: {
            IpGeoipOrg = input.ReadString();
            break;
          }
          case 186: {
            IpGeoipIsp = input.ReadString();
            break;
          }
          case 194: {
            IpGeoipAsnum = input.ReadString();
            break;
          }
          case 201: {
            IpGeoipLat = input.ReadDouble();
            break;
          }
          case 209: {
            IpGeoipLon = input.ReadDouble();
            break;
          }
          case 218: {
            IpGeoipSrcCountry = input.ReadString();
            break;
          }
          case 226: {
            IpGeoipSrcCity = input.ReadString();
            break;
          }
          case 234: {
            IpGeoipSrcOrg = input.ReadString();
            break;
          }
          case 242: {
            IpGeoipSrcIsp = input.ReadString();
            break;
          }
          case 250: {
            IpGeoipSrcAsnum = input.ReadString();
            break;
          }
          case 257: {
            IpGeoipSrcLat = input.ReadDouble();
            break;
          }
          case 265: {
            IpGeoipSrcLon = input.ReadDouble();
            break;
          }
          case 274: {
            IpGeoipDstCountry = input.ReadString();
            break;
          }
          case 282: {
            IpGeoipDstCity = input.ReadString();
            break;
          }
          case 290: {
            IpGeoipDstOrg = input.ReadString();
            break;
          }
          case 298: {
            IpGeoipDstIsp = input.ReadString();
            break;
          }
          case 306: {
            IpGeoipDstAsnum = input.ReadString();
            break;
          }
          case 313: {
            IpGeoipDstLat = input.ReadDouble();
            break;
          }
          case 321: {
            IpGeoipDstLon = input.ReadDouble();
            break;
          }
          case 328: {
            IpFlags = input.ReadUInt32();
            break;
          }
          case 336: {
            IpFlagsSf = input.ReadBool();
            break;
          }
          case 344: {
            IpFlagsRb = input.ReadBool();
            break;
          }
          case 352: {
            IpFlagsDf = input.ReadBool();
            break;
          }
          case 360: {
            IpFlagsMf = input.ReadBool();
            break;
          }
          case 368: {
            IpFragOffset = input.ReadUInt32();
            break;
          }
          case 376: {
            IpTtl = input.ReadUInt32();
            break;
          }
          case 384: {
            IpProto = input.ReadUInt32();
            break;
          }
          case 392: {
            IpChecksum = input.ReadUInt32();
            break;
          }
          case 400: {
            IpChecksumCalculated = input.ReadUInt32();
            break;
          }
          case 408: {
            IpChecksumStatus = input.ReadUInt32();
            break;
          }
          case 416: {
            IpOptType = input.ReadUInt32();
            break;
          }
          case 424: {
            IpOptTypeCopy = input.ReadBool();
            break;
          }
          case 432: {
            IpOptTypeClass = input.ReadUInt32();
            break;
          }
          case 440: {
            IpOptTypeNumber = input.ReadUInt32();
            break;
          }
          case 448: {
            IpOptLen = input.ReadUInt32();
            break;
          }
          case 456: {
            IpOptPtr = input.ReadUInt32();
            break;
          }
          case 464: {
            IpOptSid = input.ReadUInt32();
            break;
          }
          case 472: {
            IpOptMtu = input.ReadUInt32();
            break;
          }
          case 480: {
            IpOptIdNumber = input.ReadUInt32();
            break;
          }
          case 488: {
            IpOptOhc = input.ReadUInt32();
            break;
          }
          case 496: {
            IpOptRhc = input.ReadUInt32();
            break;
          }
          case 506: {
            IpOptOriginator = input.ReadBytes();
            break;
          }
          case 512: {
            IpOptRa = input.ReadUInt32();
            break;
          }
          case 522: {
            IpOptAddr = input.ReadBytes();
            break;
          }
          case 530: {
            IpOptPadding = input.ReadBytes();
            break;
          }
          case 536: {
            IpOptQsFunc = input.ReadUInt32();
            break;
          }
          case 544: {
            IpOptQsRate = input.ReadUInt32();
            break;
          }
          case 552: {
            IpOptQsTtl = input.ReadUInt32();
            break;
          }
          case 560: {
            IpOptQsTtlDiff = input.ReadUInt32();
            break;
          }
          case 568: {
            IpOptQsUnused = input.ReadUInt32();
            break;
          }
          case 576: {
            IpOptQsNonce = input.ReadUInt32();
            break;
          }
          case 584: {
            IpOptQsReserved = input.ReadUInt32();
            break;
          }
          case 592: {
            IpOptSecRfc791Sec = input.ReadUInt32();
            break;
          }
          case 600: {
            IpOptSecRfc791Comp = input.ReadUInt32();
            break;
          }
          case 610: {
            IpOptSecRfc791Hr = input.ReadString();
            break;
          }
          case 618: {
            IpOptSecRfc791Tcc = input.ReadString();
            break;
          }
          case 624: {
            IpOptSecCl = input.ReadUInt32();
            break;
          }
          case 632: {
            IpOptSecProtAuthFlags = input.ReadUInt32();
            break;
          }
          case 640: {
            IpOptSecProtAuthGenser = input.ReadBool();
            break;
          }
          case 648: {
            IpOptSecProtAuthSiopEsi = input.ReadBool();
            break;
          }
          case 656: {
            IpOptSecProtAuthSci = input.ReadBool();
            break;
          }
          case 664: {
            IpOptSecProtAuthNsa = input.ReadBool();
            break;
          }
          case 672: {
            IpOptSecProtAuthDoe = input.ReadBool();
            break;
          }
          case 680: {
            IpOptSecProtAuthUnassigned = input.ReadUInt32();
            break;
          }
          case 688: {
            IpOptSecProtAuthFti = input.ReadBool();
            break;
          }
          case 696: {
            IpOptExtSecAddSecInfoFormatCode = input.ReadUInt32();
            break;
          }
          case 706: {
            IpOptExtSecAddSecInfo = input.ReadBytes();
            break;
          }
          case 714: {
            IpRecRt = input.ReadBytes();
            break;
          }
          case 722: {
            IpRecRtHost = input.ReadString();
            break;
          }
          case 730: {
            IpCurRt = input.ReadBytes();
            break;
          }
          case 738: {
            IpCurRtHost = input.ReadString();
            break;
          }
          case 746: {
            IpSrcRt = input.ReadBytes();
            break;
          }
          case 754: {
            IpSrcRtHost = input.ReadString();
            break;
          }
          case 762: {
            IpEmptyRt = input.ReadBytes();
            break;
          }
          case 770: {
            IpEmptyRtHost = input.ReadString();
            break;
          }
          case 776: {
            IpCipsoTagType = input.ReadUInt32();
            break;
          }
          case 784: {
            IpFragmentOverlap = input.ReadBool();
            break;
          }
          case 792: {
            IpFragmentOverlapConflict = input.ReadBool();
            break;
          }
          case 800: {
            IpFragmentMultipletails = input.ReadBool();
            break;
          }
          case 808: {
            IpFragmentToolongfragment = input.ReadBool();
            break;
          }
          case 816: {
            IpFragmentError = input.ReadInt64();
            break;
          }
          case 824: {
            IpFragmentCount = input.ReadUInt32();
            break;
          }
          case 832: {
            IpFragment = input.ReadInt64();
            break;
          }
          case 842: {
            IpFragments = input.ReadBytes();
            break;
          }
          case 848: {
            IpReassembledIn = input.ReadInt64();
            break;
          }
          case 856: {
            IpReassembledLength = input.ReadUInt32();
            break;
          }
          case 866: {
            IpReassembledData = input.ReadBytes();
            break;
          }
          case 872: {
            IpCipsoDoi = input.ReadUInt32();
            break;
          }
          case 880: {
            IpCipsoSensitivityLevel = input.ReadUInt32();
            break;
          }
          case 890: {
            IpCipsoCategories = input.ReadString();
            break;
          }
          case 898: {
            IpCipsoTagData = input.ReadBytes();
            break;
          }
          case 904: {
            IpOptOverflow = input.ReadUInt32();
            break;
          }
          case 912: {
            IpOptFlag = input.ReadUInt32();
            break;
          }
          case 920: {
            IpOptTimeStamp = input.ReadUInt32();
            break;
          }
          case 930: {
            IpOptTimeStampAddr = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
