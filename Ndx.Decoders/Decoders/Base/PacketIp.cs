// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-ip.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-ip.proto</summary>
  public static partial class PacketIpReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-ip.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9wYWNrZXQtaXAucHJvdG8SEU5keC5EZWNvZGVycy5CYXNlIp0ECgJJcBIR",
            "CglJcFZlcnNpb24YASABKA0SEAoISXBIZHJMZW4YAiABKA0SEQoJSXBEc2Zp",
            "ZWxkGAMgASgNEhUKDUlwRHNmaWVsZERzY3AYBCABKA0SFAoMSXBEc2ZpZWxk",
            "RWNuGAUgASgNEg0KBUlwVG9zGAYgASgNEhcKD0lwVG9zUHJlY2VkZW5jZRgH",
            "IAEoDRISCgpJcFRvc0RlbGF5GAggASgIEhcKD0lwVG9zVGhyb3VnaHB1dBgJ",
            "IAEoCBIYChBJcFRvc1JlbGlhYmlsaXR5GAogASgIEhEKCUlwVG9zQ29zdBgL",
            "IAEoCBINCgVJcExlbhgMIAEoDRIMCgRJcElkGA0gASgNEg0KBUlwRHN0GA4g",
            "ASgMEhEKCUlwRHN0SG9zdBgPIAEoCRINCgVJcFNyYxgQIAEoDBIRCglJcFNy",
            "Y0hvc3QYESABKAkSDgoGSXBBZGRyGBIgASgMEg8KB0lwRmxhZ3MYEyABKA0S",
            "EQoJSXBGbGFnc1NmGBQgASgIEhEKCUlwRmxhZ3NSYhgVIAEoCBIRCglJcEZs",
            "YWdzRGYYFiABKAgSEQoJSXBGbGFnc01mGBcgASgIEhQKDElwRnJhZ09mZnNl",
            "dBgYIAEoDRINCgVJcFR0bBgZIAEoDRIPCgdJcFByb3RvGBogASgNEhIKCklw",
            "Q2hlY2tzdW0YGyABKA0SGAoQSXBDaGVja3N1bVN0YXR1cxgcIAEoDWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Ip), global::Ndx.Decoders.Base.Ip.Parser, new[]{ "IpVersion", "IpHdrLen", "IpDsfield", "IpDsfieldDscp", "IpDsfieldEcn", "IpTos", "IpTosPrecedence", "IpTosDelay", "IpTosThroughput", "IpTosReliability", "IpTosCost", "IpLen", "IpId", "IpDst", "IpDstHost", "IpSrc", "IpSrcHost", "IpAddr", "IpFlags", "IpFlagsSf", "IpFlagsRb", "IpFlagsDf", "IpFlagsMf", "IpFragOffset", "IpTtl", "IpProto", "IpChecksum", "IpChecksumStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ip : pb::IMessage<Ip> {
    private static readonly pb::MessageParser<Ip> _parser = new pb::MessageParser<Ip>(() => new Ip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketIpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip(Ip other) : this() {
      ipVersion_ = other.ipVersion_;
      ipHdrLen_ = other.ipHdrLen_;
      ipDsfield_ = other.ipDsfield_;
      ipDsfieldDscp_ = other.ipDsfieldDscp_;
      ipDsfieldEcn_ = other.ipDsfieldEcn_;
      ipTos_ = other.ipTos_;
      ipTosPrecedence_ = other.ipTosPrecedence_;
      ipTosDelay_ = other.ipTosDelay_;
      ipTosThroughput_ = other.ipTosThroughput_;
      ipTosReliability_ = other.ipTosReliability_;
      ipTosCost_ = other.ipTosCost_;
      ipLen_ = other.ipLen_;
      ipId_ = other.ipId_;
      ipDst_ = other.ipDst_;
      ipDstHost_ = other.ipDstHost_;
      ipSrc_ = other.ipSrc_;
      ipSrcHost_ = other.ipSrcHost_;
      ipAddr_ = other.ipAddr_;
      ipFlags_ = other.ipFlags_;
      ipFlagsSf_ = other.ipFlagsSf_;
      ipFlagsRb_ = other.ipFlagsRb_;
      ipFlagsDf_ = other.ipFlagsDf_;
      ipFlagsMf_ = other.ipFlagsMf_;
      ipFragOffset_ = other.ipFragOffset_;
      ipTtl_ = other.ipTtl_;
      ipProto_ = other.ipProto_;
      ipChecksum_ = other.ipChecksum_;
      ipChecksumStatus_ = other.ipChecksumStatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ip Clone() {
      return new Ip(this);
    }

    /// <summary>Field number for the "IpVersion" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private uint ipVersion_;
    /// <summary>
    /// Version ('ip_ip_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    /// <summary>Field number for the "IpHdrLen" field.</summary>
    public const int IpHdrLenFieldNumber = 2;
    private uint ipHdrLen_;
    /// <summary>
    /// Header Length ('ip_ip_hdr_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpHdrLen {
      get { return ipHdrLen_; }
      set {
        ipHdrLen_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfield" field.</summary>
    public const int IpDsfieldFieldNumber = 3;
    private uint ipDsfield_;
    /// <summary>
    /// Differentiated Services Field ('ip_ip_dsfield')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfield {
      get { return ipDsfield_; }
      set {
        ipDsfield_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfieldDscp" field.</summary>
    public const int IpDsfieldDscpFieldNumber = 4;
    private uint ipDsfieldDscp_;
    /// <summary>
    /// Differentiated Services Codepoint ('ip_dsfield_ip_dsfield_dscp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfieldDscp {
      get { return ipDsfieldDscp_; }
      set {
        ipDsfieldDscp_ = value;
      }
    }

    /// <summary>Field number for the "IpDsfieldEcn" field.</summary>
    public const int IpDsfieldEcnFieldNumber = 5;
    private uint ipDsfieldEcn_;
    /// <summary>
    /// Explicit Congestion Notification ('ip_dsfield_ip_dsfield_ecn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpDsfieldEcn {
      get { return ipDsfieldEcn_; }
      set {
        ipDsfieldEcn_ = value;
      }
    }

    /// <summary>Field number for the "IpTos" field.</summary>
    public const int IpTosFieldNumber = 6;
    private uint ipTos_;
    /// <summary>
    /// Type of Service ('ip_ip_tos')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTos {
      get { return ipTos_; }
      set {
        ipTos_ = value;
      }
    }

    /// <summary>Field number for the "IpTosPrecedence" field.</summary>
    public const int IpTosPrecedenceFieldNumber = 7;
    private uint ipTosPrecedence_;
    /// <summary>
    /// Precedence ('ip_tos_ip_tos_precedence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTosPrecedence {
      get { return ipTosPrecedence_; }
      set {
        ipTosPrecedence_ = value;
      }
    }

    /// <summary>Field number for the "IpTosDelay" field.</summary>
    public const int IpTosDelayFieldNumber = 8;
    private bool ipTosDelay_;
    /// <summary>
    /// Delay ('ip_tos_ip_tos_delay')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosDelay {
      get { return ipTosDelay_; }
      set {
        ipTosDelay_ = value;
      }
    }

    /// <summary>Field number for the "IpTosThroughput" field.</summary>
    public const int IpTosThroughputFieldNumber = 9;
    private bool ipTosThroughput_;
    /// <summary>
    /// Throughput ('ip_tos_ip_tos_throughput')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosThroughput {
      get { return ipTosThroughput_; }
      set {
        ipTosThroughput_ = value;
      }
    }

    /// <summary>Field number for the "IpTosReliability" field.</summary>
    public const int IpTosReliabilityFieldNumber = 10;
    private bool ipTosReliability_;
    /// <summary>
    /// Reliability ('ip_tos_ip_tos_reliability')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosReliability {
      get { return ipTosReliability_; }
      set {
        ipTosReliability_ = value;
      }
    }

    /// <summary>Field number for the "IpTosCost" field.</summary>
    public const int IpTosCostFieldNumber = 11;
    private bool ipTosCost_;
    /// <summary>
    /// Cost ('ip_tos_ip_tos_cost')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpTosCost {
      get { return ipTosCost_; }
      set {
        ipTosCost_ = value;
      }
    }

    /// <summary>Field number for the "IpLen" field.</summary>
    public const int IpLenFieldNumber = 12;
    private uint ipLen_;
    /// <summary>
    /// Total Length ('ip_ip_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpLen {
      get { return ipLen_; }
      set {
        ipLen_ = value;
      }
    }

    /// <summary>Field number for the "IpId" field.</summary>
    public const int IpIdFieldNumber = 13;
    private uint ipId_;
    /// <summary>
    /// Identification ('ip_ip_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpId {
      get { return ipId_; }
      set {
        ipId_ = value;
      }
    }

    /// <summary>Field number for the "IpDst" field.</summary>
    public const int IpDstFieldNumber = 14;
    private pb::ByteString ipDst_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination ('ip_ip_dst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpDst {
      get { return ipDst_; }
      set {
        ipDst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpDstHost" field.</summary>
    public const int IpDstHostFieldNumber = 15;
    private string ipDstHost_ = "";
    /// <summary>
    /// Destination Host ('ip_ip_dst_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpDstHost {
      get { return ipDstHost_; }
      set {
        ipDstHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrc" field.</summary>
    public const int IpSrcFieldNumber = 16;
    private pb::ByteString ipSrc_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('ip_ip_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpSrc {
      get { return ipSrc_; }
      set {
        ipSrc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpSrcHost" field.</summary>
    public const int IpSrcHostFieldNumber = 17;
    private string ipSrcHost_ = "";
    /// <summary>
    /// Source Host ('ip_ip_src_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpSrcHost {
      get { return ipSrcHost_; }
      set {
        ipSrcHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpAddr" field.</summary>
    public const int IpAddrFieldNumber = 18;
    private pb::ByteString ipAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source or Destination Address ('ip_ip_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IpAddr {
      get { return ipAddr_; }
      set {
        ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IpFlags" field.</summary>
    public const int IpFlagsFieldNumber = 19;
    private uint ipFlags_;
    /// <summary>
    /// Flags ('ip_ip_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpFlags {
      get { return ipFlags_; }
      set {
        ipFlags_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsSf" field.</summary>
    public const int IpFlagsSfFieldNumber = 20;
    private bool ipFlagsSf_;
    /// <summary>
    /// Security flag ('ip_flags_ip_flags_sf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsSf {
      get { return ipFlagsSf_; }
      set {
        ipFlagsSf_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsRb" field.</summary>
    public const int IpFlagsRbFieldNumber = 21;
    private bool ipFlagsRb_;
    /// <summary>
    /// Reserved bit ('ip_flags_ip_flags_rb')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsRb {
      get { return ipFlagsRb_; }
      set {
        ipFlagsRb_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsDf" field.</summary>
    public const int IpFlagsDfFieldNumber = 22;
    private bool ipFlagsDf_;
    /// <summary>
    /// Don't fragment ('ip_flags_ip_flags_df')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsDf {
      get { return ipFlagsDf_; }
      set {
        ipFlagsDf_ = value;
      }
    }

    /// <summary>Field number for the "IpFlagsMf" field.</summary>
    public const int IpFlagsMfFieldNumber = 23;
    private bool ipFlagsMf_;
    /// <summary>
    /// More fragments ('ip_flags_ip_flags_mf')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IpFlagsMf {
      get { return ipFlagsMf_; }
      set {
        ipFlagsMf_ = value;
      }
    }

    /// <summary>Field number for the "IpFragOffset" field.</summary>
    public const int IpFragOffsetFieldNumber = 24;
    private uint ipFragOffset_;
    /// <summary>
    /// Fragment offset ('ip_ip_frag_offset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpFragOffset {
      get { return ipFragOffset_; }
      set {
        ipFragOffset_ = value;
      }
    }

    /// <summary>Field number for the "IpTtl" field.</summary>
    public const int IpTtlFieldNumber = 25;
    private uint ipTtl_;
    /// <summary>
    /// Time to live ('ip_ip_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpTtl {
      get { return ipTtl_; }
      set {
        ipTtl_ = value;
      }
    }

    /// <summary>Field number for the "IpProto" field.</summary>
    public const int IpProtoFieldNumber = 26;
    private uint ipProto_;
    /// <summary>
    /// Protocol ('ip_ip_proto')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpProto {
      get { return ipProto_; }
      set {
        ipProto_ = value;
      }
    }

    /// <summary>Field number for the "IpChecksum" field.</summary>
    public const int IpChecksumFieldNumber = 27;
    private uint ipChecksum_;
    /// <summary>
    /// Header checksum ('ip_ip_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpChecksum {
      get { return ipChecksum_; }
      set {
        ipChecksum_ = value;
      }
    }

    /// <summary>Field number for the "IpChecksumStatus" field.</summary>
    public const int IpChecksumStatusFieldNumber = 28;
    private uint ipChecksumStatus_;
    /// <summary>
    /// Header checksum status ('ip_checksum_ip_checksum_status')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IpChecksumStatus {
      get { return ipChecksumStatus_; }
      set {
        ipChecksumStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      if (IpHdrLen != other.IpHdrLen) return false;
      if (IpDsfield != other.IpDsfield) return false;
      if (IpDsfieldDscp != other.IpDsfieldDscp) return false;
      if (IpDsfieldEcn != other.IpDsfieldEcn) return false;
      if (IpTos != other.IpTos) return false;
      if (IpTosPrecedence != other.IpTosPrecedence) return false;
      if (IpTosDelay != other.IpTosDelay) return false;
      if (IpTosThroughput != other.IpTosThroughput) return false;
      if (IpTosReliability != other.IpTosReliability) return false;
      if (IpTosCost != other.IpTosCost) return false;
      if (IpLen != other.IpLen) return false;
      if (IpId != other.IpId) return false;
      if (IpDst != other.IpDst) return false;
      if (IpDstHost != other.IpDstHost) return false;
      if (IpSrc != other.IpSrc) return false;
      if (IpSrcHost != other.IpSrcHost) return false;
      if (IpAddr != other.IpAddr) return false;
      if (IpFlags != other.IpFlags) return false;
      if (IpFlagsSf != other.IpFlagsSf) return false;
      if (IpFlagsRb != other.IpFlagsRb) return false;
      if (IpFlagsDf != other.IpFlagsDf) return false;
      if (IpFlagsMf != other.IpFlagsMf) return false;
      if (IpFragOffset != other.IpFragOffset) return false;
      if (IpTtl != other.IpTtl) return false;
      if (IpProto != other.IpProto) return false;
      if (IpChecksum != other.IpChecksum) return false;
      if (IpChecksumStatus != other.IpChecksumStatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != 0) hash ^= IpVersion.GetHashCode();
      if (IpHdrLen != 0) hash ^= IpHdrLen.GetHashCode();
      if (IpDsfield != 0) hash ^= IpDsfield.GetHashCode();
      if (IpDsfieldDscp != 0) hash ^= IpDsfieldDscp.GetHashCode();
      if (IpDsfieldEcn != 0) hash ^= IpDsfieldEcn.GetHashCode();
      if (IpTos != 0) hash ^= IpTos.GetHashCode();
      if (IpTosPrecedence != 0) hash ^= IpTosPrecedence.GetHashCode();
      if (IpTosDelay != false) hash ^= IpTosDelay.GetHashCode();
      if (IpTosThroughput != false) hash ^= IpTosThroughput.GetHashCode();
      if (IpTosReliability != false) hash ^= IpTosReliability.GetHashCode();
      if (IpTosCost != false) hash ^= IpTosCost.GetHashCode();
      if (IpLen != 0) hash ^= IpLen.GetHashCode();
      if (IpId != 0) hash ^= IpId.GetHashCode();
      if (IpDst.Length != 0) hash ^= IpDst.GetHashCode();
      if (IpDstHost.Length != 0) hash ^= IpDstHost.GetHashCode();
      if (IpSrc.Length != 0) hash ^= IpSrc.GetHashCode();
      if (IpSrcHost.Length != 0) hash ^= IpSrcHost.GetHashCode();
      if (IpAddr.Length != 0) hash ^= IpAddr.GetHashCode();
      if (IpFlags != 0) hash ^= IpFlags.GetHashCode();
      if (IpFlagsSf != false) hash ^= IpFlagsSf.GetHashCode();
      if (IpFlagsRb != false) hash ^= IpFlagsRb.GetHashCode();
      if (IpFlagsDf != false) hash ^= IpFlagsDf.GetHashCode();
      if (IpFlagsMf != false) hash ^= IpFlagsMf.GetHashCode();
      if (IpFragOffset != 0) hash ^= IpFragOffset.GetHashCode();
      if (IpTtl != 0) hash ^= IpTtl.GetHashCode();
      if (IpProto != 0) hash ^= IpProto.GetHashCode();
      if (IpChecksum != 0) hash ^= IpChecksum.GetHashCode();
      if (IpChecksumStatus != 0) hash ^= IpChecksumStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IpVersion);
      }
      if (IpHdrLen != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IpHdrLen);
      }
      if (IpDsfield != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IpDsfield);
      }
      if (IpDsfieldDscp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IpDsfieldDscp);
      }
      if (IpDsfieldEcn != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IpDsfieldEcn);
      }
      if (IpTos != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IpTos);
      }
      if (IpTosPrecedence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(IpTosPrecedence);
      }
      if (IpTosDelay != false) {
        output.WriteRawTag(64);
        output.WriteBool(IpTosDelay);
      }
      if (IpTosThroughput != false) {
        output.WriteRawTag(72);
        output.WriteBool(IpTosThroughput);
      }
      if (IpTosReliability != false) {
        output.WriteRawTag(80);
        output.WriteBool(IpTosReliability);
      }
      if (IpTosCost != false) {
        output.WriteRawTag(88);
        output.WriteBool(IpTosCost);
      }
      if (IpLen != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(IpLen);
      }
      if (IpId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(IpId);
      }
      if (IpDst.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(IpDst);
      }
      if (IpDstHost.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(IpDstHost);
      }
      if (IpSrc.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(IpSrc);
      }
      if (IpSrcHost.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(IpSrcHost);
      }
      if (IpAddr.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(IpAddr);
      }
      if (IpFlags != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(IpFlags);
      }
      if (IpFlagsSf != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IpFlagsSf);
      }
      if (IpFlagsRb != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IpFlagsRb);
      }
      if (IpFlagsDf != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IpFlagsDf);
      }
      if (IpFlagsMf != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IpFlagsMf);
      }
      if (IpFragOffset != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(IpFragOffset);
      }
      if (IpTtl != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(IpTtl);
      }
      if (IpProto != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(IpProto);
      }
      if (IpChecksum != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(IpChecksum);
      }
      if (IpChecksumStatus != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(IpChecksumStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpVersion);
      }
      if (IpHdrLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpHdrLen);
      }
      if (IpDsfield != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfield);
      }
      if (IpDsfieldDscp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfieldDscp);
      }
      if (IpDsfieldEcn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpDsfieldEcn);
      }
      if (IpTos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpTos);
      }
      if (IpTosPrecedence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpTosPrecedence);
      }
      if (IpTosDelay != false) {
        size += 1 + 1;
      }
      if (IpTosThroughput != false) {
        size += 1 + 1;
      }
      if (IpTosReliability != false) {
        size += 1 + 1;
      }
      if (IpTosCost != false) {
        size += 1 + 1;
      }
      if (IpLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpLen);
      }
      if (IpId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IpId);
      }
      if (IpDst.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IpDst);
      }
      if (IpDstHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpDstHost);
      }
      if (IpSrc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpSrc);
      }
      if (IpSrcHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IpSrcHost);
      }
      if (IpAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(IpAddr);
      }
      if (IpFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpFlags);
      }
      if (IpFlagsSf != false) {
        size += 2 + 1;
      }
      if (IpFlagsRb != false) {
        size += 2 + 1;
      }
      if (IpFlagsDf != false) {
        size += 2 + 1;
      }
      if (IpFlagsMf != false) {
        size += 2 + 1;
      }
      if (IpFragOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpFragOffset);
      }
      if (IpTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpTtl);
      }
      if (IpProto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpProto);
      }
      if (IpChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpChecksum);
      }
      if (IpChecksumStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IpChecksumStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ip other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != 0) {
        IpVersion = other.IpVersion;
      }
      if (other.IpHdrLen != 0) {
        IpHdrLen = other.IpHdrLen;
      }
      if (other.IpDsfield != 0) {
        IpDsfield = other.IpDsfield;
      }
      if (other.IpDsfieldDscp != 0) {
        IpDsfieldDscp = other.IpDsfieldDscp;
      }
      if (other.IpDsfieldEcn != 0) {
        IpDsfieldEcn = other.IpDsfieldEcn;
      }
      if (other.IpTos != 0) {
        IpTos = other.IpTos;
      }
      if (other.IpTosPrecedence != 0) {
        IpTosPrecedence = other.IpTosPrecedence;
      }
      if (other.IpTosDelay != false) {
        IpTosDelay = other.IpTosDelay;
      }
      if (other.IpTosThroughput != false) {
        IpTosThroughput = other.IpTosThroughput;
      }
      if (other.IpTosReliability != false) {
        IpTosReliability = other.IpTosReliability;
      }
      if (other.IpTosCost != false) {
        IpTosCost = other.IpTosCost;
      }
      if (other.IpLen != 0) {
        IpLen = other.IpLen;
      }
      if (other.IpId != 0) {
        IpId = other.IpId;
      }
      if (other.IpDst.Length != 0) {
        IpDst = other.IpDst;
      }
      if (other.IpDstHost.Length != 0) {
        IpDstHost = other.IpDstHost;
      }
      if (other.IpSrc.Length != 0) {
        IpSrc = other.IpSrc;
      }
      if (other.IpSrcHost.Length != 0) {
        IpSrcHost = other.IpSrcHost;
      }
      if (other.IpAddr.Length != 0) {
        IpAddr = other.IpAddr;
      }
      if (other.IpFlags != 0) {
        IpFlags = other.IpFlags;
      }
      if (other.IpFlagsSf != false) {
        IpFlagsSf = other.IpFlagsSf;
      }
      if (other.IpFlagsRb != false) {
        IpFlagsRb = other.IpFlagsRb;
      }
      if (other.IpFlagsDf != false) {
        IpFlagsDf = other.IpFlagsDf;
      }
      if (other.IpFlagsMf != false) {
        IpFlagsMf = other.IpFlagsMf;
      }
      if (other.IpFragOffset != 0) {
        IpFragOffset = other.IpFragOffset;
      }
      if (other.IpTtl != 0) {
        IpTtl = other.IpTtl;
      }
      if (other.IpProto != 0) {
        IpProto = other.IpProto;
      }
      if (other.IpChecksum != 0) {
        IpChecksum = other.IpChecksum;
      }
      if (other.IpChecksumStatus != 0) {
        IpChecksumStatus = other.IpChecksumStatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IpVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            IpHdrLen = input.ReadUInt32();
            break;
          }
          case 24: {
            IpDsfield = input.ReadUInt32();
            break;
          }
          case 32: {
            IpDsfieldDscp = input.ReadUInt32();
            break;
          }
          case 40: {
            IpDsfieldEcn = input.ReadUInt32();
            break;
          }
          case 48: {
            IpTos = input.ReadUInt32();
            break;
          }
          case 56: {
            IpTosPrecedence = input.ReadUInt32();
            break;
          }
          case 64: {
            IpTosDelay = input.ReadBool();
            break;
          }
          case 72: {
            IpTosThroughput = input.ReadBool();
            break;
          }
          case 80: {
            IpTosReliability = input.ReadBool();
            break;
          }
          case 88: {
            IpTosCost = input.ReadBool();
            break;
          }
          case 96: {
            IpLen = input.ReadUInt32();
            break;
          }
          case 104: {
            IpId = input.ReadUInt32();
            break;
          }
          case 114: {
            IpDst = input.ReadBytes();
            break;
          }
          case 122: {
            IpDstHost = input.ReadString();
            break;
          }
          case 130: {
            IpSrc = input.ReadBytes();
            break;
          }
          case 138: {
            IpSrcHost = input.ReadString();
            break;
          }
          case 146: {
            IpAddr = input.ReadBytes();
            break;
          }
          case 152: {
            IpFlags = input.ReadUInt32();
            break;
          }
          case 160: {
            IpFlagsSf = input.ReadBool();
            break;
          }
          case 168: {
            IpFlagsRb = input.ReadBool();
            break;
          }
          case 176: {
            IpFlagsDf = input.ReadBool();
            break;
          }
          case 184: {
            IpFlagsMf = input.ReadBool();
            break;
          }
          case 192: {
            IpFragOffset = input.ReadUInt32();
            break;
          }
          case 200: {
            IpTtl = input.ReadUInt32();
            break;
          }
          case 208: {
            IpProto = input.ReadUInt32();
            break;
          }
          case 216: {
            IpChecksum = input.ReadUInt32();
            break;
          }
          case 224: {
            IpChecksumStatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
