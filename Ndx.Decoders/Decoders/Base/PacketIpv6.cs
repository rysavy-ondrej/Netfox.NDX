// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-ipv6.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-ipv6.proto</summary>
  public static partial class PacketIpv6Reflection {

    #region Descriptor
    /// <summary>File descriptor for packet-ipv6.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketIpv6Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwYWNrZXQtaXB2Ni5wcm90bxIRTmR4LkRlY29kZXJzLkJhc2UivCMKBElw",
            "djYSEwoLSXB2NlZlcnNpb24YASABKA0SEgoKSXB2NlRjbGFzcxgCIAEoDRIW",
            "Cg5JcHY2VGNsYXNzRHNjcBgDIAEoDRIVCg1JcHY2VGNsYXNzRWNuGAQgASgN",
            "EhAKCElwdjZGbG93GAUgASgNEhAKCElwdjZQbGVuGAYgASgNEg8KB0lwdjZO",
            "eHQYByABKA0SEAoISXB2NkhsaW0YCCABKA0SDwoHSXB2NlNyYxgJIAEoDBIT",
            "CgtJcHY2U3JjSG9zdBgKIAEoCRIUCgxJcHY2U3JjU2FNYWMYCyABKAwSGQoR",
            "SXB2NlNyY0lzYXRhcElwdjQYDCABKAwSGQoRSXB2NlNyYzZUbzRHd0lwdjQY",
            "DSABKAwSGAoQSXB2NlNyYzZUbzRTbGFJZBgOIAEoDRIVCg1JcHY2U3JjVHNJ",
            "cHY0GA8gASgMEhUKDUlwdjZTcmNUY1BvcnQYECABKA0SFQoNSXB2NlNyY1Rj",
            "SXB2NBgRIAEoDBIYChBJcHY2U3JjRW1iZWRJcHY0GBIgASgMEg8KB0lwdjZE",
            "c3QYEyABKAwSEwoLSXB2NkRzdEhvc3QYFCABKAkSFAoMSXB2NkRzdFNhTWFj",
            "GBUgASgMEhkKEUlwdjZEc3RJc2F0YXBJcHY0GBYgASgMEhkKEUlwdjZEc3Q2",
            "VG80R3dJcHY0GBcgASgMEhgKEElwdjZEc3Q2VG80U2xhSWQYGCABKA0SFQoN",
            "SXB2NkRzdFRzSXB2NBgZIAEoDBIVCg1JcHY2RHN0VGNQb3J0GBogASgNEhUK",
            "DUlwdjZEc3RUY0lwdjQYGyABKAwSGAoQSXB2NkRzdEVtYmVkSXB2NBgcIAEo",
            "DBIQCghJcHY2QWRkchgdIAEoDBIQCghJcHY2SG9zdBgeIAEoCRIRCglJcHY2",
            "U2FNYWMYHyABKAwSFgoOSXB2NklzYXRhcElwdjQYICABKAwSFgoOSXB2NjZU",
            "bzRHd0lwdjQYISABKAwSFQoNSXB2NjZUbzRTbGFJZBgiIAEoDRISCgpJcHY2",
            "VHNJcHY0GCMgASgMEhIKCklwdjZUY1BvcnQYJCABKA0SEgoKSXB2NlRjSXB2",
            "NBglIAEoDBIVCg1JcHY2RW1iZWRJcHY0GCYgASgMEhgKEElwdjZHZW9pcENv",
            "dW50cnkYJyABKAkSFQoNSXB2Nkdlb2lwQ2l0eRgoIAEoCRIUCgxJcHY2R2Vv",
            "aXBPcmcYKSABKAkSFAoMSXB2Nkdlb2lwSXNwGCogASgJEhYKDklwdjZHZW9p",
            "cEFzbnVtGCsgASgJEhQKDElwdjZHZW9pcExhdBgsIAEoARIUCgxJcHY2R2Vv",
            "aXBMb24YLSABKAESGwoTSXB2Nkdlb2lwU3JjQ291bnRyeRguIAEoCRIYChBJ",
            "cHY2R2VvaXBTcmNDaXR5GC8gASgJEhcKD0lwdjZHZW9pcFNyY09yZxgwIAEo",
            "CRIXCg9JcHY2R2VvaXBTcmNJc3AYMSABKAkSGQoRSXB2Nkdlb2lwU3JjQXNu",
            "dW0YMiABKAkSFwoPSXB2Nkdlb2lwU3JjTGF0GDMgASgBEhcKD0lwdjZHZW9p",
            "cFNyY0xvbhg0IAEoARIbChNJcHY2R2VvaXBEc3RDb3VudHJ5GDUgASgJEhgK",
            "EElwdjZHZW9pcERzdENpdHkYNiABKAkSFwoPSXB2Nkdlb2lwRHN0T3JnGDcg",
            "ASgJEhcKD0lwdjZHZW9pcERzdElzcBg4IAEoCRIZChFJcHY2R2VvaXBEc3RB",
            "c251bRg5IAEoCRIXCg9JcHY2R2VvaXBEc3RMYXQYOiABKAESFwoPSXB2Nkdl",
            "b2lwRHN0TG9uGDsgASgBEg8KB0lwdjZPcHQYPCABKAUSEwoLSXB2Nk9wdFR5",
            "cGUYPSABKA0SGQoRSXB2Nk9wdFR5cGVBY3Rpb24YPiABKA0SGQoRSXB2Nk9w",
            "dFR5cGVDaGFuZ2UYPyABKAgSFwoPSXB2Nk9wdFR5cGVSZXN0GEAgASgNEhUK",
            "DUlwdjZPcHRMZW5ndGgYQSABKA0SEwoLSXB2Nk9wdFBhZDEYQiABKAUSEwoL",
            "SXB2Nk9wdFBhZG4YQyABKAwSGgoSSXB2Nk9wdFJvdXRlckFsZXJ0GEQgASgN",
            "EhIKCklwdjZPcHRUZWwYRSABKA0SFAoMSXB2Nk9wdEp1bWJvGEYgASgNEhkK",
            "EUlwdjZPcHRDYWxpcHNvRG9pGEcgASgNEiAKGElwdjZPcHRDYWxpcHNvQ21w",
            "dExlbmd0aBhIIAEoDRIfChdJcHY2T3B0Q2FsaXBzb1NlbnNMZXZlbBhJIAEo",
            "DRIeChZJcHY2T3B0Q2FsaXBzb0NoZWNrc3VtGEogASgNEiAKGElwdjZPcHRD",
            "YWxpcHNvQ21wdEJpdG1hcBhLIAEoDBIcChRJcHY2T3B0U21mRHBkSGFzaEJp",
            "dBhMIAEoCBIcChRJcHY2T3B0U21mRHBkVGlkVHlwZRhNIAEoDRIbChNJcHY2",
            "T3B0U21mRHBkVGlkTGVuGE4gASgNEh0KFUlwdjZPcHRTbWZEcGRUYWdnZXJJ",
            "ZBhPIAEoDBIaChJJcHY2T3B0U21mRHBkSWRlbnQYUCABKAwSGAoQSXB2Nk9w",
            "dFNtZkRwZEhhdhhRIAEoDBIbChNJcHY2T3B0UGRtU2NhbGVEdGxyGFIgASgN",
            "EhsKE0lwdjZPcHRQZG1TY2FsZUR0bHMYUyABKA0SHAoUSXB2Nk9wdFBkbVBz",
            "blRoaXNQa3QYVCABKA0SHQoVSXB2Nk9wdFBkbVBzbkxhc3RSZWN2GFUgASgN",
            "Eh8KF0lwdjZPcHRQZG1EZWx0YUxhc3RSZWN2GFYgASgNEh8KF0lwdjZPcHRQ",
            "ZG1EZWx0YUxhc3RTZW50GFcgASgNEhUKDUlwdjZPcHRRc0Z1bmMYWCABKA0S",
            "FQoNSXB2Nk9wdFFzUmF0ZRhZIAEoDRIUCgxJcHY2T3B0UXNUdGwYWiABKA0S",
            "GAoQSXB2Nk9wdFFzVHRsRGlmZhhbIAEoDRIXCg9JcHY2T3B0UXNVbnVzZWQY",
            "XCABKA0SFgoOSXB2Nk9wdFFzTm9uY2UYXSABKA0SGQoRSXB2Nk9wdFFzUmVz",
            "ZXJ2ZWQYXiABKA0SHwoXSXB2Nk9wdE1pcHY2SG9tZUFkZHJlc3MYXyABKAwS",
            "FgoOSXB2Nk9wdFJwbEZsYWcYYCABKA0SFwoPSXB2Nk9wdFJwbEZsYWdPGGEg",
            "ASgIEhcKD0lwdjZPcHRScGxGbGFnUhhiIAEoCBIXCg9JcHY2T3B0UnBsRmxh",
            "Z0YYYyABKAgSGQoRSXB2Nk9wdFJwbEZsYWdSc3YYZCABKA0SHAoUSXB2Nk9w",
            "dFJwbEluc3RhbmNlSWQYZSABKA0SHAoUSXB2Nk9wdFJwbFNlbmRlclJhbmsY",
            "ZiABKA0SGAoQSXB2Nk9wdElsbnBOb25jZRhnIAEoDBIYChBJcHY2T3B0TGlv",
            "TGVuZ3RoGGggASgNEhgKEElwdjZPcHRMaW9MaW5lSWQYaSABKAkSFgoOSXB2",
            "Nk9wdE1wbEZsYWcYaiABKA0SFwoPSXB2Nk9wdE1wbEZsYWdTGGsgASgNEhcK",
            "D0lwdjZPcHRNcGxGbGFnTRhsIAEoCBIXCg9JcHY2T3B0TXBsRmxhZ1YYbSAB",
            "KAgSGQoRSXB2Nk9wdE1wbEZsYWdSc3YYbiABKA0SGgoSSXB2Nk9wdE1wbFNl",
            "cXVlbmNlGG8gASgNEhgKEElwdjZPcHRNcGxTZWVkSWQYcCABKAwSFwoPSXB2",
            "Nk9wdERmZkZsYWdzGHEgASgNEhkKEUlwdjZPcHREZmZGbGFnVmVyGHIgASgN",
            "EhkKEUlwdjZPcHREZmZGbGFnRHVwGHMgASgIEhkKEUlwdjZPcHREZmZGbGFn",
            "UmV0GHQgASgIEhkKEUlwdjZPcHREZmZGbGFnUnN2GHUgASgNEiAKGElwdjZP",
            "cHREZmZTZXF1ZW5jZU51bWJlchh2IAEoDRIbChNJcHY2T3B0RXhwZXJpbWVu",
            "dGFsGHcgASgMEhoKEklwdjZPcHRVbmtub3duRGF0YRh4IAEoDBIWCg5JcHY2",
            "T3B0VW5rbm93bhh5IAEoDBIUCgxJcHY2RnJhZ21lbnQYeiABKAMSGwoTSXB2",
            "NkZyYWdtZW50T3ZlcmxhcBh7IAEoCBIjChtJcHY2RnJhZ21lbnRPdmVybGFw",
            "Q29uZmxpY3QYfCABKAgSIQoZSXB2NkZyYWdtZW50TXVsdGlwbGV0YWlscxh9",
            "IAEoCBIjChtJcHY2RnJhZ21lbnRUb29sb25nZnJhZ21lbnQYfiABKAgSGQoR",
            "SXB2NkZyYWdtZW50RXJyb3IYfyABKAMSGgoRSXB2NkZyYWdtZW50Q291bnQY",
            "gAEgASgNEhYKDUlwdjZGcmFnbWVudHMYgQEgASgFEhoKEUlwdjZSZWFzc2Vt",
            "YmxlZEluGIIBIAEoAxIeChVJcHY2UmVhc3NlbWJsZWRMZW5ndGgYgwEgASgN",
            "EhwKE0lwdjZSZWFzc2VtYmxlZERhdGEYhAEgASgMEhcKDklwdjZIb3BvcHRz",
            "Tnh0GIUBIAEoDRIXCg5JcHY2SG9wb3B0c0xlbhiGASABKA0SGgoRSXB2Nkhv",
            "cG9wdHNMZW5PY3QYhwEgASgNEhcKDklwdjZEc3RvcHRzTnh0GIgBIAEoDRIX",
            "Cg5JcHY2RHN0b3B0c0xlbhiJASABKA0SGgoRSXB2NkRzdG9wdHNMZW5PY3QY",
            "igEgASgNEhcKDklwdjZSb3V0aW5nTnh0GIsBIAEoDRIXCg5JcHY2Um91dGlu",
            "Z0xlbhiMASABKA0SGgoRSXB2NlJvdXRpbmdMZW5PY3QYjQEgASgNEhgKD0lw",
            "djZSb3V0aW5nVHlwZRiOASABKA0SGwoSSXB2NlJvdXRpbmdTZWdsZWZ0GI8B",
            "IAEoDRIfChZJcHY2Um91dGluZ1Vua25vd25EYXRhGJABIAEoDBIfChZJcHY2",
            "Um91dGluZ1NyY1Jlc2VydmVkGJEBIAEoDBIbChJJcHY2Um91dGluZ1NyY0Fk",
            "ZHIYkgEgASgMEiEKGElwdjZSb3V0aW5nTWlwdjZSZXNlcnZlZBiTASABKAwS",
            "JAobSXB2NlJvdXRpbmdNaXB2NkhvbWVBZGRyZXNzGJQBIAEoDBIcChNJcHY2",
            "Um91dGluZ1JwbENtcHJpGJUBIAEoDRIcChNJcHY2Um91dGluZ1JwbENtcHJl",
            "GJYBIAEoDRIaChFJcHY2Um91dGluZ1JwbFBhZBiXASABKA0SHwoWSXB2NlJv",
            "dXRpbmdScGxSZXNlcnZlZBiYASABKA0SIAoXSXB2NlJvdXRpbmdScGxBZGRy",
            "Q291bnQYmQEgASgFEh4KFUlwdjZSb3V0aW5nUnBsQWRkcmVzcxiaASABKAwS",
            "IgoZSXB2NlJvdXRpbmdScGxGdWxsQWRkcmVzcxibASABKAwSIwoaSXB2NlJv",
            "dXRpbmdTcmhGaXJzdFNlZ21lbnQYnAEgASgNEhwKE0lwdjZSb3V0aW5nU3Jo",
            "RmxhZ3MYnQEgASgNEiIKGUlwdjZSb3V0aW5nU3JoRmxhZ1VudXNlZDEYngEg",
            "ASgNEhwKE0lwdjZSb3V0aW5nU3JoRmxhZ1AYnwEgASgIEhwKE0lwdjZSb3V0",
            "aW5nU3JoRmxhZ08YoAEgASgIEhwKE0lwdjZSb3V0aW5nU3JoRmxhZ0EYoQEg",
            "ASgIEhwKE0lwdjZSb3V0aW5nU3JoRmxhZ0gYogEgASgIEiIKGUlwdjZSb3V0",
            "aW5nU3JoRmxhZ1VudXNlZDIYowEgASgNEh8KFklwdjZSb3V0aW5nU3JoUmVz",
            "ZXJ2ZWQYpAEgASgMEhsKEklwdjZSb3V0aW5nU3JoQWRkchilASABKAwSFwoO",
            "SXB2NkZyYWdoZHJOeHQYpgEgASgNEiEKGElwdjZGcmFnaGRyUmVzZXJ2ZWRP",
            "Y3RldBinASABKA0SGgoRSXB2NkZyYWdoZHJPZmZzZXQYqAEgASgNEiAKF0lw",
            "djZGcmFnaGRyUmVzZXJ2ZWRCaXRzGKkBIAEoDRIYCg9JcHY2RnJhZ2hkck1v",
            "cmUYqgEgASgIEhkKEElwdjZGcmFnaGRySWRlbnQYqwEgASgNYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Ipv6), global::Ndx.Decoders.Base.Ipv6.Parser, new[]{ "Ipv6Version", "Ipv6Tclass", "Ipv6TclassDscp", "Ipv6TclassEcn", "Ipv6Flow", "Ipv6Plen", "Ipv6Nxt", "Ipv6Hlim", "Ipv6Src", "Ipv6SrcHost", "Ipv6SrcSaMac", "Ipv6SrcIsatapIpv4", "Ipv6Src6To4GwIpv4", "Ipv6Src6To4SlaId", "Ipv6SrcTsIpv4", "Ipv6SrcTcPort", "Ipv6SrcTcIpv4", "Ipv6SrcEmbedIpv4", "Ipv6Dst", "Ipv6DstHost", "Ipv6DstSaMac", "Ipv6DstIsatapIpv4", "Ipv6Dst6To4GwIpv4", "Ipv6Dst6To4SlaId", "Ipv6DstTsIpv4", "Ipv6DstTcPort", "Ipv6DstTcIpv4", "Ipv6DstEmbedIpv4", "Ipv6Addr", "Ipv6Host", "Ipv6SaMac", "Ipv6IsatapIpv4", "Ipv66To4GwIpv4", "Ipv66To4SlaId", "Ipv6TsIpv4", "Ipv6TcPort", "Ipv6TcIpv4", "Ipv6EmbedIpv4", "Ipv6GeoipCountry", "Ipv6GeoipCity", "Ipv6GeoipOrg", "Ipv6GeoipIsp", "Ipv6GeoipAsnum", "Ipv6GeoipLat", "Ipv6GeoipLon", "Ipv6GeoipSrcCountry", "Ipv6GeoipSrcCity", "Ipv6GeoipSrcOrg", "Ipv6GeoipSrcIsp", "Ipv6GeoipSrcAsnum", "Ipv6GeoipSrcLat", "Ipv6GeoipSrcLon", "Ipv6GeoipDstCountry", "Ipv6GeoipDstCity", "Ipv6GeoipDstOrg", "Ipv6GeoipDstIsp", "Ipv6GeoipDstAsnum", "Ipv6GeoipDstLat", "Ipv6GeoipDstLon", "Ipv6Opt", "Ipv6OptType", "Ipv6OptTypeAction", "Ipv6OptTypeChange", "Ipv6OptTypeRest", "Ipv6OptLength", "Ipv6OptPad1", "Ipv6OptPadn", "Ipv6OptRouterAlert", "Ipv6OptTel", "Ipv6OptJumbo", "Ipv6OptCalipsoDoi", "Ipv6OptCalipsoCmptLength", "Ipv6OptCalipsoSensLevel", "Ipv6OptCalipsoChecksum", "Ipv6OptCalipsoCmptBitmap", "Ipv6OptSmfDpdHashBit", "Ipv6OptSmfDpdTidType", "Ipv6OptSmfDpdTidLen", "Ipv6OptSmfDpdTaggerId", "Ipv6OptSmfDpdIdent", "Ipv6OptSmfDpdHav", "Ipv6OptPdmScaleDtlr", "Ipv6OptPdmScaleDtls", "Ipv6OptPdmPsnThisPkt", "Ipv6OptPdmPsnLastRecv", "Ipv6OptPdmDeltaLastRecv", "Ipv6OptPdmDeltaLastSent", "Ipv6OptQsFunc", "Ipv6OptQsRate", "Ipv6OptQsTtl", "Ipv6OptQsTtlDiff", "Ipv6OptQsUnused", "Ipv6OptQsNonce", "Ipv6OptQsReserved", "Ipv6OptMipv6HomeAddress", "Ipv6OptRplFlag", "Ipv6OptRplFlagO", "Ipv6OptRplFlagR", "Ipv6OptRplFlagF", "Ipv6OptRplFlagRsv", "Ipv6OptRplInstanceId", "Ipv6OptRplSenderRank", "Ipv6OptIlnpNonce", "Ipv6OptLioLength", "Ipv6OptLioLineId", "Ipv6OptMplFlag", "Ipv6OptMplFlagS", "Ipv6OptMplFlagM", "Ipv6OptMplFlagV", "Ipv6OptMplFlagRsv", "Ipv6OptMplSequence", "Ipv6OptMplSeedId", "Ipv6OptDffFlags", "Ipv6OptDffFlagVer", "Ipv6OptDffFlagDup", "Ipv6OptDffFlagRet", "Ipv6OptDffFlagRsv", "Ipv6OptDffSequenceNumber", "Ipv6OptExperimental", "Ipv6OptUnknownData", "Ipv6OptUnknown", "Ipv6Fragment", "Ipv6FragmentOverlap", "Ipv6FragmentOverlapConflict", "Ipv6FragmentMultipletails", "Ipv6FragmentToolongfragment", "Ipv6FragmentError", "Ipv6FragmentCount", "Ipv6Fragments", "Ipv6ReassembledIn", "Ipv6ReassembledLength", "Ipv6ReassembledData", "Ipv6HopoptsNxt", "Ipv6HopoptsLen", "Ipv6HopoptsLenOct", "Ipv6DstoptsNxt", "Ipv6DstoptsLen", "Ipv6DstoptsLenOct", "Ipv6RoutingNxt", "Ipv6RoutingLen", "Ipv6RoutingLenOct", "Ipv6RoutingType", "Ipv6RoutingSegleft", "Ipv6RoutingUnknownData", "Ipv6RoutingSrcReserved", "Ipv6RoutingSrcAddr", "Ipv6RoutingMipv6Reserved", "Ipv6RoutingMipv6HomeAddress", "Ipv6RoutingRplCmpri", "Ipv6RoutingRplCmpre", "Ipv6RoutingRplPad", "Ipv6RoutingRplReserved", "Ipv6RoutingRplAddrCount", "Ipv6RoutingRplAddress", "Ipv6RoutingRplFullAddress", "Ipv6RoutingSrhFirstSegment", "Ipv6RoutingSrhFlags", "Ipv6RoutingSrhFlagUnused1", "Ipv6RoutingSrhFlagP", "Ipv6RoutingSrhFlagO", "Ipv6RoutingSrhFlagA", "Ipv6RoutingSrhFlagH", "Ipv6RoutingSrhFlagUnused2", "Ipv6RoutingSrhReserved", "Ipv6RoutingSrhAddr", "Ipv6FraghdrNxt", "Ipv6FraghdrReservedOctet", "Ipv6FraghdrOffset", "Ipv6FraghdrReservedBits", "Ipv6FraghdrMore", "Ipv6FraghdrIdent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Ipv6 : pb::IMessage<Ipv6> {
    private static readonly pb::MessageParser<Ipv6> _parser = new pb::MessageParser<Ipv6>(() => new Ipv6());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ipv6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketIpv6Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6(Ipv6 other) : this() {
      ipv6Version_ = other.ipv6Version_;
      ipv6Tclass_ = other.ipv6Tclass_;
      ipv6TclassDscp_ = other.ipv6TclassDscp_;
      ipv6TclassEcn_ = other.ipv6TclassEcn_;
      ipv6Flow_ = other.ipv6Flow_;
      ipv6Plen_ = other.ipv6Plen_;
      ipv6Nxt_ = other.ipv6Nxt_;
      ipv6Hlim_ = other.ipv6Hlim_;
      ipv6Src_ = other.ipv6Src_;
      ipv6SrcHost_ = other.ipv6SrcHost_;
      ipv6SrcSaMac_ = other.ipv6SrcSaMac_;
      ipv6SrcIsatapIpv4_ = other.ipv6SrcIsatapIpv4_;
      ipv6Src6To4GwIpv4_ = other.ipv6Src6To4GwIpv4_;
      ipv6Src6To4SlaId_ = other.ipv6Src6To4SlaId_;
      ipv6SrcTsIpv4_ = other.ipv6SrcTsIpv4_;
      ipv6SrcTcPort_ = other.ipv6SrcTcPort_;
      ipv6SrcTcIpv4_ = other.ipv6SrcTcIpv4_;
      ipv6SrcEmbedIpv4_ = other.ipv6SrcEmbedIpv4_;
      ipv6Dst_ = other.ipv6Dst_;
      ipv6DstHost_ = other.ipv6DstHost_;
      ipv6DstSaMac_ = other.ipv6DstSaMac_;
      ipv6DstIsatapIpv4_ = other.ipv6DstIsatapIpv4_;
      ipv6Dst6To4GwIpv4_ = other.ipv6Dst6To4GwIpv4_;
      ipv6Dst6To4SlaId_ = other.ipv6Dst6To4SlaId_;
      ipv6DstTsIpv4_ = other.ipv6DstTsIpv4_;
      ipv6DstTcPort_ = other.ipv6DstTcPort_;
      ipv6DstTcIpv4_ = other.ipv6DstTcIpv4_;
      ipv6DstEmbedIpv4_ = other.ipv6DstEmbedIpv4_;
      ipv6Addr_ = other.ipv6Addr_;
      ipv6Host_ = other.ipv6Host_;
      ipv6SaMac_ = other.ipv6SaMac_;
      ipv6IsatapIpv4_ = other.ipv6IsatapIpv4_;
      ipv66To4GwIpv4_ = other.ipv66To4GwIpv4_;
      ipv66To4SlaId_ = other.ipv66To4SlaId_;
      ipv6TsIpv4_ = other.ipv6TsIpv4_;
      ipv6TcPort_ = other.ipv6TcPort_;
      ipv6TcIpv4_ = other.ipv6TcIpv4_;
      ipv6EmbedIpv4_ = other.ipv6EmbedIpv4_;
      ipv6GeoipCountry_ = other.ipv6GeoipCountry_;
      ipv6GeoipCity_ = other.ipv6GeoipCity_;
      ipv6GeoipOrg_ = other.ipv6GeoipOrg_;
      ipv6GeoipIsp_ = other.ipv6GeoipIsp_;
      ipv6GeoipAsnum_ = other.ipv6GeoipAsnum_;
      ipv6GeoipLat_ = other.ipv6GeoipLat_;
      ipv6GeoipLon_ = other.ipv6GeoipLon_;
      ipv6GeoipSrcCountry_ = other.ipv6GeoipSrcCountry_;
      ipv6GeoipSrcCity_ = other.ipv6GeoipSrcCity_;
      ipv6GeoipSrcOrg_ = other.ipv6GeoipSrcOrg_;
      ipv6GeoipSrcIsp_ = other.ipv6GeoipSrcIsp_;
      ipv6GeoipSrcAsnum_ = other.ipv6GeoipSrcAsnum_;
      ipv6GeoipSrcLat_ = other.ipv6GeoipSrcLat_;
      ipv6GeoipSrcLon_ = other.ipv6GeoipSrcLon_;
      ipv6GeoipDstCountry_ = other.ipv6GeoipDstCountry_;
      ipv6GeoipDstCity_ = other.ipv6GeoipDstCity_;
      ipv6GeoipDstOrg_ = other.ipv6GeoipDstOrg_;
      ipv6GeoipDstIsp_ = other.ipv6GeoipDstIsp_;
      ipv6GeoipDstAsnum_ = other.ipv6GeoipDstAsnum_;
      ipv6GeoipDstLat_ = other.ipv6GeoipDstLat_;
      ipv6GeoipDstLon_ = other.ipv6GeoipDstLon_;
      ipv6Opt_ = other.ipv6Opt_;
      ipv6OptType_ = other.ipv6OptType_;
      ipv6OptTypeAction_ = other.ipv6OptTypeAction_;
      ipv6OptTypeChange_ = other.ipv6OptTypeChange_;
      ipv6OptTypeRest_ = other.ipv6OptTypeRest_;
      ipv6OptLength_ = other.ipv6OptLength_;
      ipv6OptPad1_ = other.ipv6OptPad1_;
      ipv6OptPadn_ = other.ipv6OptPadn_;
      ipv6OptRouterAlert_ = other.ipv6OptRouterAlert_;
      ipv6OptTel_ = other.ipv6OptTel_;
      ipv6OptJumbo_ = other.ipv6OptJumbo_;
      ipv6OptCalipsoDoi_ = other.ipv6OptCalipsoDoi_;
      ipv6OptCalipsoCmptLength_ = other.ipv6OptCalipsoCmptLength_;
      ipv6OptCalipsoSensLevel_ = other.ipv6OptCalipsoSensLevel_;
      ipv6OptCalipsoChecksum_ = other.ipv6OptCalipsoChecksum_;
      ipv6OptCalipsoCmptBitmap_ = other.ipv6OptCalipsoCmptBitmap_;
      ipv6OptSmfDpdHashBit_ = other.ipv6OptSmfDpdHashBit_;
      ipv6OptSmfDpdTidType_ = other.ipv6OptSmfDpdTidType_;
      ipv6OptSmfDpdTidLen_ = other.ipv6OptSmfDpdTidLen_;
      ipv6OptSmfDpdTaggerId_ = other.ipv6OptSmfDpdTaggerId_;
      ipv6OptSmfDpdIdent_ = other.ipv6OptSmfDpdIdent_;
      ipv6OptSmfDpdHav_ = other.ipv6OptSmfDpdHav_;
      ipv6OptPdmScaleDtlr_ = other.ipv6OptPdmScaleDtlr_;
      ipv6OptPdmScaleDtls_ = other.ipv6OptPdmScaleDtls_;
      ipv6OptPdmPsnThisPkt_ = other.ipv6OptPdmPsnThisPkt_;
      ipv6OptPdmPsnLastRecv_ = other.ipv6OptPdmPsnLastRecv_;
      ipv6OptPdmDeltaLastRecv_ = other.ipv6OptPdmDeltaLastRecv_;
      ipv6OptPdmDeltaLastSent_ = other.ipv6OptPdmDeltaLastSent_;
      ipv6OptQsFunc_ = other.ipv6OptQsFunc_;
      ipv6OptQsRate_ = other.ipv6OptQsRate_;
      ipv6OptQsTtl_ = other.ipv6OptQsTtl_;
      ipv6OptQsTtlDiff_ = other.ipv6OptQsTtlDiff_;
      ipv6OptQsUnused_ = other.ipv6OptQsUnused_;
      ipv6OptQsNonce_ = other.ipv6OptQsNonce_;
      ipv6OptQsReserved_ = other.ipv6OptQsReserved_;
      ipv6OptMipv6HomeAddress_ = other.ipv6OptMipv6HomeAddress_;
      ipv6OptRplFlag_ = other.ipv6OptRplFlag_;
      ipv6OptRplFlagO_ = other.ipv6OptRplFlagO_;
      ipv6OptRplFlagR_ = other.ipv6OptRplFlagR_;
      ipv6OptRplFlagF_ = other.ipv6OptRplFlagF_;
      ipv6OptRplFlagRsv_ = other.ipv6OptRplFlagRsv_;
      ipv6OptRplInstanceId_ = other.ipv6OptRplInstanceId_;
      ipv6OptRplSenderRank_ = other.ipv6OptRplSenderRank_;
      ipv6OptIlnpNonce_ = other.ipv6OptIlnpNonce_;
      ipv6OptLioLength_ = other.ipv6OptLioLength_;
      ipv6OptLioLineId_ = other.ipv6OptLioLineId_;
      ipv6OptMplFlag_ = other.ipv6OptMplFlag_;
      ipv6OptMplFlagS_ = other.ipv6OptMplFlagS_;
      ipv6OptMplFlagM_ = other.ipv6OptMplFlagM_;
      ipv6OptMplFlagV_ = other.ipv6OptMplFlagV_;
      ipv6OptMplFlagRsv_ = other.ipv6OptMplFlagRsv_;
      ipv6OptMplSequence_ = other.ipv6OptMplSequence_;
      ipv6OptMplSeedId_ = other.ipv6OptMplSeedId_;
      ipv6OptDffFlags_ = other.ipv6OptDffFlags_;
      ipv6OptDffFlagVer_ = other.ipv6OptDffFlagVer_;
      ipv6OptDffFlagDup_ = other.ipv6OptDffFlagDup_;
      ipv6OptDffFlagRet_ = other.ipv6OptDffFlagRet_;
      ipv6OptDffFlagRsv_ = other.ipv6OptDffFlagRsv_;
      ipv6OptDffSequenceNumber_ = other.ipv6OptDffSequenceNumber_;
      ipv6OptExperimental_ = other.ipv6OptExperimental_;
      ipv6OptUnknownData_ = other.ipv6OptUnknownData_;
      ipv6OptUnknown_ = other.ipv6OptUnknown_;
      ipv6Fragment_ = other.ipv6Fragment_;
      ipv6FragmentOverlap_ = other.ipv6FragmentOverlap_;
      ipv6FragmentOverlapConflict_ = other.ipv6FragmentOverlapConflict_;
      ipv6FragmentMultipletails_ = other.ipv6FragmentMultipletails_;
      ipv6FragmentToolongfragment_ = other.ipv6FragmentToolongfragment_;
      ipv6FragmentError_ = other.ipv6FragmentError_;
      ipv6FragmentCount_ = other.ipv6FragmentCount_;
      ipv6Fragments_ = other.ipv6Fragments_;
      ipv6ReassembledIn_ = other.ipv6ReassembledIn_;
      ipv6ReassembledLength_ = other.ipv6ReassembledLength_;
      ipv6ReassembledData_ = other.ipv6ReassembledData_;
      ipv6HopoptsNxt_ = other.ipv6HopoptsNxt_;
      ipv6HopoptsLen_ = other.ipv6HopoptsLen_;
      ipv6HopoptsLenOct_ = other.ipv6HopoptsLenOct_;
      ipv6DstoptsNxt_ = other.ipv6DstoptsNxt_;
      ipv6DstoptsLen_ = other.ipv6DstoptsLen_;
      ipv6DstoptsLenOct_ = other.ipv6DstoptsLenOct_;
      ipv6RoutingNxt_ = other.ipv6RoutingNxt_;
      ipv6RoutingLen_ = other.ipv6RoutingLen_;
      ipv6RoutingLenOct_ = other.ipv6RoutingLenOct_;
      ipv6RoutingType_ = other.ipv6RoutingType_;
      ipv6RoutingSegleft_ = other.ipv6RoutingSegleft_;
      ipv6RoutingUnknownData_ = other.ipv6RoutingUnknownData_;
      ipv6RoutingSrcReserved_ = other.ipv6RoutingSrcReserved_;
      ipv6RoutingSrcAddr_ = other.ipv6RoutingSrcAddr_;
      ipv6RoutingMipv6Reserved_ = other.ipv6RoutingMipv6Reserved_;
      ipv6RoutingMipv6HomeAddress_ = other.ipv6RoutingMipv6HomeAddress_;
      ipv6RoutingRplCmpri_ = other.ipv6RoutingRplCmpri_;
      ipv6RoutingRplCmpre_ = other.ipv6RoutingRplCmpre_;
      ipv6RoutingRplPad_ = other.ipv6RoutingRplPad_;
      ipv6RoutingRplReserved_ = other.ipv6RoutingRplReserved_;
      ipv6RoutingRplAddrCount_ = other.ipv6RoutingRplAddrCount_;
      ipv6RoutingRplAddress_ = other.ipv6RoutingRplAddress_;
      ipv6RoutingRplFullAddress_ = other.ipv6RoutingRplFullAddress_;
      ipv6RoutingSrhFirstSegment_ = other.ipv6RoutingSrhFirstSegment_;
      ipv6RoutingSrhFlags_ = other.ipv6RoutingSrhFlags_;
      ipv6RoutingSrhFlagUnused1_ = other.ipv6RoutingSrhFlagUnused1_;
      ipv6RoutingSrhFlagP_ = other.ipv6RoutingSrhFlagP_;
      ipv6RoutingSrhFlagO_ = other.ipv6RoutingSrhFlagO_;
      ipv6RoutingSrhFlagA_ = other.ipv6RoutingSrhFlagA_;
      ipv6RoutingSrhFlagH_ = other.ipv6RoutingSrhFlagH_;
      ipv6RoutingSrhFlagUnused2_ = other.ipv6RoutingSrhFlagUnused2_;
      ipv6RoutingSrhReserved_ = other.ipv6RoutingSrhReserved_;
      ipv6RoutingSrhAddr_ = other.ipv6RoutingSrhAddr_;
      ipv6FraghdrNxt_ = other.ipv6FraghdrNxt_;
      ipv6FraghdrReservedOctet_ = other.ipv6FraghdrReservedOctet_;
      ipv6FraghdrOffset_ = other.ipv6FraghdrOffset_;
      ipv6FraghdrReservedBits_ = other.ipv6FraghdrReservedBits_;
      ipv6FraghdrMore_ = other.ipv6FraghdrMore_;
      ipv6FraghdrIdent_ = other.ipv6FraghdrIdent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ipv6 Clone() {
      return new Ipv6(this);
    }

    /// <summary>Field number for the "Ipv6Version" field.</summary>
    public const int Ipv6VersionFieldNumber = 1;
    private uint ipv6Version_;
    /// <summary>
    /// Version ('ipv6_ipv6_version')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Version {
      get { return ipv6Version_; }
      set {
        ipv6Version_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Tclass" field.</summary>
    public const int Ipv6TclassFieldNumber = 2;
    private uint ipv6Tclass_;
    /// <summary>
    /// Traffic Class ('ipv6_ipv6_tclass')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Tclass {
      get { return ipv6Tclass_; }
      set {
        ipv6Tclass_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6TclassDscp" field.</summary>
    public const int Ipv6TclassDscpFieldNumber = 3;
    private uint ipv6TclassDscp_;
    /// <summary>
    /// Differentiated Services Codepoint ('ipv6_tclass_ipv6_tclass_dscp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6TclassDscp {
      get { return ipv6TclassDscp_; }
      set {
        ipv6TclassDscp_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6TclassEcn" field.</summary>
    public const int Ipv6TclassEcnFieldNumber = 4;
    private uint ipv6TclassEcn_;
    /// <summary>
    /// Explicit Congestion Notification ('ipv6_tclass_ipv6_tclass_ecn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6TclassEcn {
      get { return ipv6TclassEcn_; }
      set {
        ipv6TclassEcn_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Flow" field.</summary>
    public const int Ipv6FlowFieldNumber = 5;
    private uint ipv6Flow_;
    /// <summary>
    /// Flow Label ('ipv6_ipv6_flow')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Flow {
      get { return ipv6Flow_; }
      set {
        ipv6Flow_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Plen" field.</summary>
    public const int Ipv6PlenFieldNumber = 6;
    private uint ipv6Plen_;
    /// <summary>
    /// Payload Length ('ipv6_ipv6_plen')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Plen {
      get { return ipv6Plen_; }
      set {
        ipv6Plen_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Nxt" field.</summary>
    public const int Ipv6NxtFieldNumber = 7;
    private uint ipv6Nxt_;
    /// <summary>
    /// Next Header ('ipv6_ipv6_nxt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Nxt {
      get { return ipv6Nxt_; }
      set {
        ipv6Nxt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Hlim" field.</summary>
    public const int Ipv6HlimFieldNumber = 8;
    private uint ipv6Hlim_;
    /// <summary>
    /// Hop Limit ('ipv6_ipv6_hlim')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Hlim {
      get { return ipv6Hlim_; }
      set {
        ipv6Hlim_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Src" field.</summary>
    public const int Ipv6SrcFieldNumber = 9;
    private pb::ByteString ipv6Src_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ('ipv6_ipv6_src')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6Src {
      get { return ipv6Src_; }
      set {
        ipv6Src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SrcHost" field.</summary>
    public const int Ipv6SrcHostFieldNumber = 10;
    private string ipv6SrcHost_ = "";
    /// <summary>
    /// Source Host ('ipv6_ipv6_src_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6SrcHost {
      get { return ipv6SrcHost_; }
      set {
        ipv6SrcHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SrcSaMac" field.</summary>
    public const int Ipv6SrcSaMacFieldNumber = 11;
    private pb::ByteString ipv6SrcSaMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Source SA MAC ('ipv6_ipv6_src_sa_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SrcSaMac {
      get { return ipv6SrcSaMac_; }
      set {
        ipv6SrcSaMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SrcIsatapIpv4" field.</summary>
    public const int Ipv6SrcIsatapIpv4FieldNumber = 12;
    private pb::ByteString ipv6SrcIsatapIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source ISATAP IPv4 ('ipv6_ipv6_src_isatap_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SrcIsatapIpv4 {
      get { return ipv6SrcIsatapIpv4_; }
      set {
        ipv6SrcIsatapIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Src6To4GwIpv4" field.</summary>
    public const int Ipv6Src6To4GwIpv4FieldNumber = 13;
    private pb::ByteString ipv6Src6To4GwIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source 6to4 Gateway IPv4 ('ipv6_ipv6_src_6to4_gw_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6Src6To4GwIpv4 {
      get { return ipv6Src6To4GwIpv4_; }
      set {
        ipv6Src6To4GwIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Src6To4SlaId" field.</summary>
    public const int Ipv6Src6To4SlaIdFieldNumber = 14;
    private uint ipv6Src6To4SlaId_;
    /// <summary>
    /// Source 6to4 SLA ID ('ipv6_ipv6_src_6to4_sla_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Src6To4SlaId {
      get { return ipv6Src6To4SlaId_; }
      set {
        ipv6Src6To4SlaId_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6SrcTsIpv4" field.</summary>
    public const int Ipv6SrcTsIpv4FieldNumber = 15;
    private pb::ByteString ipv6SrcTsIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Teredo Server IPv4 ('ipv6_ipv6_src_ts_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SrcTsIpv4 {
      get { return ipv6SrcTsIpv4_; }
      set {
        ipv6SrcTsIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SrcTcPort" field.</summary>
    public const int Ipv6SrcTcPortFieldNumber = 16;
    private uint ipv6SrcTcPort_;
    /// <summary>
    /// Source Teredo Port ('ipv6_ipv6_src_tc_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6SrcTcPort {
      get { return ipv6SrcTcPort_; }
      set {
        ipv6SrcTcPort_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6SrcTcIpv4" field.</summary>
    public const int Ipv6SrcTcIpv4FieldNumber = 17;
    private pb::ByteString ipv6SrcTcIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Teredo Client IPv4 ('ipv6_ipv6_src_tc_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SrcTcIpv4 {
      get { return ipv6SrcTcIpv4_; }
      set {
        ipv6SrcTcIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SrcEmbedIpv4" field.</summary>
    public const int Ipv6SrcEmbedIpv4FieldNumber = 18;
    private pb::ByteString ipv6SrcEmbedIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Source Embedded IPv4 ('ipv6_ipv6_src_embed_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SrcEmbedIpv4 {
      get { return ipv6SrcEmbedIpv4_; }
      set {
        ipv6SrcEmbedIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Dst" field.</summary>
    public const int Ipv6DstFieldNumber = 19;
    private pb::ByteString ipv6Dst_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination ('ipv6_ipv6_dst')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6Dst {
      get { return ipv6Dst_; }
      set {
        ipv6Dst_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6DstHost" field.</summary>
    public const int Ipv6DstHostFieldNumber = 20;
    private string ipv6DstHost_ = "";
    /// <summary>
    /// Destination Host ('ipv6_ipv6_dst_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6DstHost {
      get { return ipv6DstHost_; }
      set {
        ipv6DstHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6DstSaMac" field.</summary>
    public const int Ipv6DstSaMacFieldNumber = 21;
    private pb::ByteString ipv6DstSaMac_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination SA MAC ('ipv6_ipv6_dst_sa_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6DstSaMac {
      get { return ipv6DstSaMac_; }
      set {
        ipv6DstSaMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6DstIsatapIpv4" field.</summary>
    public const int Ipv6DstIsatapIpv4FieldNumber = 22;
    private pb::ByteString ipv6DstIsatapIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination ISATAP IPv4 ('ipv6_ipv6_dst_isatap_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6DstIsatapIpv4 {
      get { return ipv6DstIsatapIpv4_; }
      set {
        ipv6DstIsatapIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Dst6To4GwIpv4" field.</summary>
    public const int Ipv6Dst6To4GwIpv4FieldNumber = 23;
    private pb::ByteString ipv6Dst6To4GwIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination 6to4 Gateway IPv4 ('ipv6_ipv6_dst_6to4_gw_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6Dst6To4GwIpv4 {
      get { return ipv6Dst6To4GwIpv4_; }
      set {
        ipv6Dst6To4GwIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Dst6To4SlaId" field.</summary>
    public const int Ipv6Dst6To4SlaIdFieldNumber = 24;
    private uint ipv6Dst6To4SlaId_;
    /// <summary>
    /// Destination 6to4 SLA ID ('ipv6_ipv6_dst_6to4_sla_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6Dst6To4SlaId {
      get { return ipv6Dst6To4SlaId_; }
      set {
        ipv6Dst6To4SlaId_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6DstTsIpv4" field.</summary>
    public const int Ipv6DstTsIpv4FieldNumber = 25;
    private pb::ByteString ipv6DstTsIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Teredo Server IPv4 ('ipv6_ipv6_dst_ts_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6DstTsIpv4 {
      get { return ipv6DstTsIpv4_; }
      set {
        ipv6DstTsIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6DstTcPort" field.</summary>
    public const int Ipv6DstTcPortFieldNumber = 26;
    private uint ipv6DstTcPort_;
    /// <summary>
    /// Destination Teredo Port ('ipv6_ipv6_dst_tc_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6DstTcPort {
      get { return ipv6DstTcPort_; }
      set {
        ipv6DstTcPort_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6DstTcIpv4" field.</summary>
    public const int Ipv6DstTcIpv4FieldNumber = 27;
    private pb::ByteString ipv6DstTcIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Teredo Client IPv4 ('ipv6_ipv6_dst_tc_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6DstTcIpv4 {
      get { return ipv6DstTcIpv4_; }
      set {
        ipv6DstTcIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6DstEmbedIpv4" field.</summary>
    public const int Ipv6DstEmbedIpv4FieldNumber = 28;
    private pb::ByteString ipv6DstEmbedIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Destination Embedded IPv4 ('ipv6_ipv6_dst_embed_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6DstEmbedIpv4 {
      get { return ipv6DstEmbedIpv4_; }
      set {
        ipv6DstEmbedIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Addr" field.</summary>
    public const int Ipv6AddrFieldNumber = 29;
    private pb::ByteString ipv6Addr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source or Destination Address ('ipv6_ipv6_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6Addr {
      get { return ipv6Addr_; }
      set {
        ipv6Addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Host" field.</summary>
    public const int Ipv6HostFieldNumber = 30;
    private string ipv6Host_ = "";
    /// <summary>
    /// Source or Destination Host ('ipv6_ipv6_host')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6Host {
      get { return ipv6Host_; }
      set {
        ipv6Host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6SaMac" field.</summary>
    public const int Ipv6SaMacFieldNumber = 31;
    private pb::ByteString ipv6SaMac_ = pb::ByteString.Empty;
    /// <summary>
    /// SA MAC ('ipv6_ipv6_sa_mac')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6SaMac {
      get { return ipv6SaMac_; }
      set {
        ipv6SaMac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6IsatapIpv4" field.</summary>
    public const int Ipv6IsatapIpv4FieldNumber = 32;
    private pb::ByteString ipv6IsatapIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// ISATAP IPv4 ('ipv6_ipv6_isatap_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6IsatapIpv4 {
      get { return ipv6IsatapIpv4_; }
      set {
        ipv6IsatapIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv66To4GwIpv4" field.</summary>
    public const int Ipv66To4GwIpv4FieldNumber = 33;
    private pb::ByteString ipv66To4GwIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// 6to4 Gateway IPv4 ('ipv6_ipv6_6to4_gw_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv66To4GwIpv4 {
      get { return ipv66To4GwIpv4_; }
      set {
        ipv66To4GwIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv66To4SlaId" field.</summary>
    public const int Ipv66To4SlaIdFieldNumber = 34;
    private uint ipv66To4SlaId_;
    /// <summary>
    /// 6to4 SLA ID ('ipv6_ipv6_6to4_sla_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv66To4SlaId {
      get { return ipv66To4SlaId_; }
      set {
        ipv66To4SlaId_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6TsIpv4" field.</summary>
    public const int Ipv6TsIpv4FieldNumber = 35;
    private pb::ByteString ipv6TsIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Teredo Server IPv4 ('ipv6_ipv6_ts_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6TsIpv4 {
      get { return ipv6TsIpv4_; }
      set {
        ipv6TsIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6TcPort" field.</summary>
    public const int Ipv6TcPortFieldNumber = 36;
    private uint ipv6TcPort_;
    /// <summary>
    /// Teredo Port ('ipv6_ipv6_tc_port')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6TcPort {
      get { return ipv6TcPort_; }
      set {
        ipv6TcPort_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6TcIpv4" field.</summary>
    public const int Ipv6TcIpv4FieldNumber = 37;
    private pb::ByteString ipv6TcIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Teredo Client IPv4 ('ipv6_ipv6_tc_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6TcIpv4 {
      get { return ipv6TcIpv4_; }
      set {
        ipv6TcIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6EmbedIpv4" field.</summary>
    public const int Ipv6EmbedIpv4FieldNumber = 38;
    private pb::ByteString ipv6EmbedIpv4_ = pb::ByteString.Empty;
    /// <summary>
    /// Embedded IPv4 ('ipv6_ipv6_embed_ipv4')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6EmbedIpv4 {
      get { return ipv6EmbedIpv4_; }
      set {
        ipv6EmbedIpv4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipCountry" field.</summary>
    public const int Ipv6GeoipCountryFieldNumber = 39;
    private string ipv6GeoipCountry_ = "";
    /// <summary>
    /// Source or Destination GeoIP Country ('ipv6_ipv6_geoip_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipCountry {
      get { return ipv6GeoipCountry_; }
      set {
        ipv6GeoipCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipCity" field.</summary>
    public const int Ipv6GeoipCityFieldNumber = 40;
    private string ipv6GeoipCity_ = "";
    /// <summary>
    /// Source or Destination GeoIP City ('ipv6_ipv6_geoip_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipCity {
      get { return ipv6GeoipCity_; }
      set {
        ipv6GeoipCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipOrg" field.</summary>
    public const int Ipv6GeoipOrgFieldNumber = 41;
    private string ipv6GeoipOrg_ = "";
    /// <summary>
    /// Source or Destination GeoIP Organization ('ipv6_ipv6_geoip_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipOrg {
      get { return ipv6GeoipOrg_; }
      set {
        ipv6GeoipOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipIsp" field.</summary>
    public const int Ipv6GeoipIspFieldNumber = 42;
    private string ipv6GeoipIsp_ = "";
    /// <summary>
    /// Source or Destination GeoIP ISP ('ipv6_ipv6_geoip_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipIsp {
      get { return ipv6GeoipIsp_; }
      set {
        ipv6GeoipIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipAsnum" field.</summary>
    public const int Ipv6GeoipAsnumFieldNumber = 43;
    private string ipv6GeoipAsnum_ = "";
    /// <summary>
    /// Source or Destination GeoIP AS Number ('ipv6_ipv6_geoip_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipAsnum {
      get { return ipv6GeoipAsnum_; }
      set {
        ipv6GeoipAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipLat" field.</summary>
    public const int Ipv6GeoipLatFieldNumber = 44;
    private double ipv6GeoipLat_;
    /// <summary>
    /// Source or Destination GeoIP Latitude ('ipv6_ipv6_geoip_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipLat {
      get { return ipv6GeoipLat_; }
      set {
        ipv6GeoipLat_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6GeoipLon" field.</summary>
    public const int Ipv6GeoipLonFieldNumber = 45;
    private double ipv6GeoipLon_;
    /// <summary>
    /// Source or Destination GeoIP Longitude ('ipv6_ipv6_geoip_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipLon {
      get { return ipv6GeoipLon_; }
      set {
        ipv6GeoipLon_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcCountry" field.</summary>
    public const int Ipv6GeoipSrcCountryFieldNumber = 46;
    private string ipv6GeoipSrcCountry_ = "";
    /// <summary>
    /// Source GeoIP Country ('ipv6_ipv6_geoip_src_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipSrcCountry {
      get { return ipv6GeoipSrcCountry_; }
      set {
        ipv6GeoipSrcCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcCity" field.</summary>
    public const int Ipv6GeoipSrcCityFieldNumber = 47;
    private string ipv6GeoipSrcCity_ = "";
    /// <summary>
    /// Source GeoIP City ('ipv6_ipv6_geoip_src_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipSrcCity {
      get { return ipv6GeoipSrcCity_; }
      set {
        ipv6GeoipSrcCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcOrg" field.</summary>
    public const int Ipv6GeoipSrcOrgFieldNumber = 48;
    private string ipv6GeoipSrcOrg_ = "";
    /// <summary>
    /// Source GeoIP Organization ('ipv6_ipv6_geoip_src_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipSrcOrg {
      get { return ipv6GeoipSrcOrg_; }
      set {
        ipv6GeoipSrcOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcIsp" field.</summary>
    public const int Ipv6GeoipSrcIspFieldNumber = 49;
    private string ipv6GeoipSrcIsp_ = "";
    /// <summary>
    /// Source GeoIP ISP ('ipv6_ipv6_geoip_src_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipSrcIsp {
      get { return ipv6GeoipSrcIsp_; }
      set {
        ipv6GeoipSrcIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcAsnum" field.</summary>
    public const int Ipv6GeoipSrcAsnumFieldNumber = 50;
    private string ipv6GeoipSrcAsnum_ = "";
    /// <summary>
    /// Source GeoIP AS Number ('ipv6_ipv6_geoip_src_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipSrcAsnum {
      get { return ipv6GeoipSrcAsnum_; }
      set {
        ipv6GeoipSrcAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcLat" field.</summary>
    public const int Ipv6GeoipSrcLatFieldNumber = 51;
    private double ipv6GeoipSrcLat_;
    /// <summary>
    /// Source GeoIP Latitude ('ipv6_ipv6_geoip_src_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipSrcLat {
      get { return ipv6GeoipSrcLat_; }
      set {
        ipv6GeoipSrcLat_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6GeoipSrcLon" field.</summary>
    public const int Ipv6GeoipSrcLonFieldNumber = 52;
    private double ipv6GeoipSrcLon_;
    /// <summary>
    /// Source GeoIP Longitude ('ipv6_ipv6_geoip_src_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipSrcLon {
      get { return ipv6GeoipSrcLon_; }
      set {
        ipv6GeoipSrcLon_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstCountry" field.</summary>
    public const int Ipv6GeoipDstCountryFieldNumber = 53;
    private string ipv6GeoipDstCountry_ = "";
    /// <summary>
    /// Destination GeoIP Country ('ipv6_ipv6_geoip_dst_country')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipDstCountry {
      get { return ipv6GeoipDstCountry_; }
      set {
        ipv6GeoipDstCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstCity" field.</summary>
    public const int Ipv6GeoipDstCityFieldNumber = 54;
    private string ipv6GeoipDstCity_ = "";
    /// <summary>
    /// Destination GeoIP City ('ipv6_ipv6_geoip_dst_city')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipDstCity {
      get { return ipv6GeoipDstCity_; }
      set {
        ipv6GeoipDstCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstOrg" field.</summary>
    public const int Ipv6GeoipDstOrgFieldNumber = 55;
    private string ipv6GeoipDstOrg_ = "";
    /// <summary>
    /// Destination GeoIP Organization ('ipv6_ipv6_geoip_dst_org')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipDstOrg {
      get { return ipv6GeoipDstOrg_; }
      set {
        ipv6GeoipDstOrg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstIsp" field.</summary>
    public const int Ipv6GeoipDstIspFieldNumber = 56;
    private string ipv6GeoipDstIsp_ = "";
    /// <summary>
    /// Destination GeoIP ISP ('ipv6_ipv6_geoip_dst_isp')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipDstIsp {
      get { return ipv6GeoipDstIsp_; }
      set {
        ipv6GeoipDstIsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstAsnum" field.</summary>
    public const int Ipv6GeoipDstAsnumFieldNumber = 57;
    private string ipv6GeoipDstAsnum_ = "";
    /// <summary>
    /// Destination GeoIP AS Number ('ipv6_ipv6_geoip_dst_asnum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6GeoipDstAsnum {
      get { return ipv6GeoipDstAsnum_; }
      set {
        ipv6GeoipDstAsnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstLat" field.</summary>
    public const int Ipv6GeoipDstLatFieldNumber = 58;
    private double ipv6GeoipDstLat_;
    /// <summary>
    /// Destination GeoIP Latitude ('ipv6_ipv6_geoip_dst_lat')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipDstLat {
      get { return ipv6GeoipDstLat_; }
      set {
        ipv6GeoipDstLat_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6GeoipDstLon" field.</summary>
    public const int Ipv6GeoipDstLonFieldNumber = 59;
    private double ipv6GeoipDstLon_;
    /// <summary>
    /// Destination GeoIP Longitude ('ipv6_ipv6_geoip_dst_lon')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ipv6GeoipDstLon {
      get { return ipv6GeoipDstLon_; }
      set {
        ipv6GeoipDstLon_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Opt" field.</summary>
    public const int Ipv6OptFieldNumber = 60;
    private int ipv6Opt_;
    /// <summary>
    /// IPv6 Option ('ipv6_ipv6_opt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ipv6Opt {
      get { return ipv6Opt_; }
      set {
        ipv6Opt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptType" field.</summary>
    public const int Ipv6OptTypeFieldNumber = 61;
    private uint ipv6OptType_;
    /// <summary>
    /// Type ('ipv6_opt_ipv6_opt_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptType {
      get { return ipv6OptType_; }
      set {
        ipv6OptType_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptTypeAction" field.</summary>
    public const int Ipv6OptTypeActionFieldNumber = 62;
    private uint ipv6OptTypeAction_;
    /// <summary>
    /// Action ('ipv6_opt_type_ipv6_opt_type_action')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptTypeAction {
      get { return ipv6OptTypeAction_; }
      set {
        ipv6OptTypeAction_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptTypeChange" field.</summary>
    public const int Ipv6OptTypeChangeFieldNumber = 63;
    private bool ipv6OptTypeChange_;
    /// <summary>
    /// May Change ('ipv6_opt_type_ipv6_opt_type_change')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptTypeChange {
      get { return ipv6OptTypeChange_; }
      set {
        ipv6OptTypeChange_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptTypeRest" field.</summary>
    public const int Ipv6OptTypeRestFieldNumber = 64;
    private uint ipv6OptTypeRest_;
    /// <summary>
    /// Low-Order Bits ('ipv6_opt_type_ipv6_opt_type_rest')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptTypeRest {
      get { return ipv6OptTypeRest_; }
      set {
        ipv6OptTypeRest_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptLength" field.</summary>
    public const int Ipv6OptLengthFieldNumber = 65;
    private uint ipv6OptLength_;
    /// <summary>
    /// Length ('ipv6_opt_ipv6_opt_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptLength {
      get { return ipv6OptLength_; }
      set {
        ipv6OptLength_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPad1" field.</summary>
    public const int Ipv6OptPad1FieldNumber = 66;
    private int ipv6OptPad1_;
    /// <summary>
    /// Pad1 ('ipv6_opt_ipv6_opt_pad1')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ipv6OptPad1 {
      get { return ipv6OptPad1_; }
      set {
        ipv6OptPad1_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPadn" field.</summary>
    public const int Ipv6OptPadnFieldNumber = 67;
    private pb::ByteString ipv6OptPadn_ = pb::ByteString.Empty;
    /// <summary>
    /// PadN ('ipv6_opt_ipv6_opt_padn')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptPadn {
      get { return ipv6OptPadn_; }
      set {
        ipv6OptPadn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptRouterAlert" field.</summary>
    public const int Ipv6OptRouterAlertFieldNumber = 68;
    private uint ipv6OptRouterAlert_;
    /// <summary>
    /// Router Alert ('ipv6_opt_ipv6_opt_router_alert')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptRouterAlert {
      get { return ipv6OptRouterAlert_; }
      set {
        ipv6OptRouterAlert_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptTel" field.</summary>
    public const int Ipv6OptTelFieldNumber = 69;
    private uint ipv6OptTel_;
    /// <summary>
    /// Tunnel Encapsulation Limit ('ipv6_opt_ipv6_opt_tel')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptTel {
      get { return ipv6OptTel_; }
      set {
        ipv6OptTel_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptJumbo" field.</summary>
    public const int Ipv6OptJumboFieldNumber = 70;
    private uint ipv6OptJumbo_;
    /// <summary>
    /// Payload Length ('ipv6_opt_ipv6_opt_jumbo')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptJumbo {
      get { return ipv6OptJumbo_; }
      set {
        ipv6OptJumbo_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptCalipsoDoi" field.</summary>
    public const int Ipv6OptCalipsoDoiFieldNumber = 71;
    private uint ipv6OptCalipsoDoi_;
    /// <summary>
    /// CALIPSO Domain of Interpretation ('ipv6_ipv6_opt_calipso_doi')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptCalipsoDoi {
      get { return ipv6OptCalipsoDoi_; }
      set {
        ipv6OptCalipsoDoi_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptCalipsoCmptLength" field.</summary>
    public const int Ipv6OptCalipsoCmptLengthFieldNumber = 72;
    private uint ipv6OptCalipsoCmptLength_;
    /// <summary>
    /// Compartment Length ('ipv6_ipv6_opt_calipso_cmpt_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptCalipsoCmptLength {
      get { return ipv6OptCalipsoCmptLength_; }
      set {
        ipv6OptCalipsoCmptLength_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptCalipsoSensLevel" field.</summary>
    public const int Ipv6OptCalipsoSensLevelFieldNumber = 73;
    private uint ipv6OptCalipsoSensLevel_;
    /// <summary>
    /// Sensitivity Level ('ipv6_ipv6_opt_calipso_sens_level')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptCalipsoSensLevel {
      get { return ipv6OptCalipsoSensLevel_; }
      set {
        ipv6OptCalipsoSensLevel_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptCalipsoChecksum" field.</summary>
    public const int Ipv6OptCalipsoChecksumFieldNumber = 74;
    private uint ipv6OptCalipsoChecksum_;
    /// <summary>
    /// Checksum ('ipv6_ipv6_opt_calipso_checksum')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptCalipsoChecksum {
      get { return ipv6OptCalipsoChecksum_; }
      set {
        ipv6OptCalipsoChecksum_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptCalipsoCmptBitmap" field.</summary>
    public const int Ipv6OptCalipsoCmptBitmapFieldNumber = 75;
    private pb::ByteString ipv6OptCalipsoCmptBitmap_ = pb::ByteString.Empty;
    /// <summary>
    /// Compartment Bitmap ('ipv6_ipv6_opt_calipso_cmpt_bitmap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptCalipsoCmptBitmap {
      get { return ipv6OptCalipsoCmptBitmap_; }
      set {
        ipv6OptCalipsoCmptBitmap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdHashBit" field.</summary>
    public const int Ipv6OptSmfDpdHashBitFieldNumber = 76;
    private bool ipv6OptSmfDpdHashBit_;
    /// <summary>
    /// H-bit ('ipv6_ipv6_opt_smf_dpd_hash_bit')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptSmfDpdHashBit {
      get { return ipv6OptSmfDpdHashBit_; }
      set {
        ipv6OptSmfDpdHashBit_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdTidType" field.</summary>
    public const int Ipv6OptSmfDpdTidTypeFieldNumber = 77;
    private uint ipv6OptSmfDpdTidType_;
    /// <summary>
    /// TaggerID Type ('ipv6_ipv6_opt_smf_dpd_tid_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptSmfDpdTidType {
      get { return ipv6OptSmfDpdTidType_; }
      set {
        ipv6OptSmfDpdTidType_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdTidLen" field.</summary>
    public const int Ipv6OptSmfDpdTidLenFieldNumber = 78;
    private uint ipv6OptSmfDpdTidLen_;
    /// <summary>
    /// TaggerID Length ('ipv6_ipv6_opt_smf_dpd_tid_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptSmfDpdTidLen {
      get { return ipv6OptSmfDpdTidLen_; }
      set {
        ipv6OptSmfDpdTidLen_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdTaggerId" field.</summary>
    public const int Ipv6OptSmfDpdTaggerIdFieldNumber = 79;
    private pb::ByteString ipv6OptSmfDpdTaggerId_ = pb::ByteString.Empty;
    /// <summary>
    /// TaggerID ('ipv6_ipv6_opt_smf_dpd_tagger_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptSmfDpdTaggerId {
      get { return ipv6OptSmfDpdTaggerId_; }
      set {
        ipv6OptSmfDpdTaggerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdIdent" field.</summary>
    public const int Ipv6OptSmfDpdIdentFieldNumber = 80;
    private pb::ByteString ipv6OptSmfDpdIdent_ = pb::ByteString.Empty;
    /// <summary>
    /// Identifier ('ipv6_ipv6_opt_smf_dpd_ident')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptSmfDpdIdent {
      get { return ipv6OptSmfDpdIdent_; }
      set {
        ipv6OptSmfDpdIdent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptSmfDpdHav" field.</summary>
    public const int Ipv6OptSmfDpdHavFieldNumber = 81;
    private pb::ByteString ipv6OptSmfDpdHav_ = pb::ByteString.Empty;
    /// <summary>
    /// Hash Assist Value ('ipv6_ipv6_opt_smf_dpd_hav')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptSmfDpdHav {
      get { return ipv6OptSmfDpdHav_; }
      set {
        ipv6OptSmfDpdHav_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmScaleDtlr" field.</summary>
    public const int Ipv6OptPdmScaleDtlrFieldNumber = 82;
    private uint ipv6OptPdmScaleDtlr_;
    /// <summary>
    /// Scale DTLR ('ipv6_ipv6_opt_pdm_scale_dtlr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmScaleDtlr {
      get { return ipv6OptPdmScaleDtlr_; }
      set {
        ipv6OptPdmScaleDtlr_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmScaleDtls" field.</summary>
    public const int Ipv6OptPdmScaleDtlsFieldNumber = 83;
    private uint ipv6OptPdmScaleDtls_;
    /// <summary>
    /// Scale DTLS ('ipv6_ipv6_opt_pdm_scale_dtls')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmScaleDtls {
      get { return ipv6OptPdmScaleDtls_; }
      set {
        ipv6OptPdmScaleDtls_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmPsnThisPkt" field.</summary>
    public const int Ipv6OptPdmPsnThisPktFieldNumber = 84;
    private uint ipv6OptPdmPsnThisPkt_;
    /// <summary>
    /// PSN This Packet ('ipv6_ipv6_opt_pdm_psn_this_pkt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmPsnThisPkt {
      get { return ipv6OptPdmPsnThisPkt_; }
      set {
        ipv6OptPdmPsnThisPkt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmPsnLastRecv" field.</summary>
    public const int Ipv6OptPdmPsnLastRecvFieldNumber = 85;
    private uint ipv6OptPdmPsnLastRecv_;
    /// <summary>
    /// PSN Last Received ('ipv6_ipv6_opt_pdm_psn_last_recv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmPsnLastRecv {
      get { return ipv6OptPdmPsnLastRecv_; }
      set {
        ipv6OptPdmPsnLastRecv_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmDeltaLastRecv" field.</summary>
    public const int Ipv6OptPdmDeltaLastRecvFieldNumber = 86;
    private uint ipv6OptPdmDeltaLastRecv_;
    /// <summary>
    /// Delta Time Last Received ('ipv6_ipv6_opt_pdm_delta_last_recv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmDeltaLastRecv {
      get { return ipv6OptPdmDeltaLastRecv_; }
      set {
        ipv6OptPdmDeltaLastRecv_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptPdmDeltaLastSent" field.</summary>
    public const int Ipv6OptPdmDeltaLastSentFieldNumber = 87;
    private uint ipv6OptPdmDeltaLastSent_;
    /// <summary>
    /// Delta Time Last Sent ('ipv6_ipv6_opt_pdm_delta_last_sent')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptPdmDeltaLastSent {
      get { return ipv6OptPdmDeltaLastSent_; }
      set {
        ipv6OptPdmDeltaLastSent_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsFunc" field.</summary>
    public const int Ipv6OptQsFuncFieldNumber = 88;
    private uint ipv6OptQsFunc_;
    /// <summary>
    /// Function ('ipv6_opt_ipv6_opt_qs_func')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsFunc {
      get { return ipv6OptQsFunc_; }
      set {
        ipv6OptQsFunc_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsRate" field.</summary>
    public const int Ipv6OptQsRateFieldNumber = 89;
    private uint ipv6OptQsRate_;
    /// <summary>
    /// Rate ('ipv6_opt_ipv6_opt_qs_rate')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsRate {
      get { return ipv6OptQsRate_; }
      set {
        ipv6OptQsRate_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsTtl" field.</summary>
    public const int Ipv6OptQsTtlFieldNumber = 90;
    private uint ipv6OptQsTtl_;
    /// <summary>
    /// QS TTL ('ipv6_opt_ipv6_opt_qs_ttl')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsTtl {
      get { return ipv6OptQsTtl_; }
      set {
        ipv6OptQsTtl_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsTtlDiff" field.</summary>
    public const int Ipv6OptQsTtlDiffFieldNumber = 91;
    private uint ipv6OptQsTtlDiff_;
    /// <summary>
    /// TTL Diff ('ipv6_opt_ipv6_opt_qs_ttl_diff')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsTtlDiff {
      get { return ipv6OptQsTtlDiff_; }
      set {
        ipv6OptQsTtlDiff_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsUnused" field.</summary>
    public const int Ipv6OptQsUnusedFieldNumber = 92;
    private uint ipv6OptQsUnused_;
    /// <summary>
    /// Not Used ('ipv6_opt_ipv6_opt_qs_unused')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsUnused {
      get { return ipv6OptQsUnused_; }
      set {
        ipv6OptQsUnused_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsNonce" field.</summary>
    public const int Ipv6OptQsNonceFieldNumber = 93;
    private uint ipv6OptQsNonce_;
    /// <summary>
    /// QS Nonce ('ipv6_opt_ipv6_opt_qs_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsNonce {
      get { return ipv6OptQsNonce_; }
      set {
        ipv6OptQsNonce_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptQsReserved" field.</summary>
    public const int Ipv6OptQsReservedFieldNumber = 94;
    private uint ipv6OptQsReserved_;
    /// <summary>
    /// Reserved ('ipv6_opt_ipv6_opt_qs_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptQsReserved {
      get { return ipv6OptQsReserved_; }
      set {
        ipv6OptQsReserved_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMipv6HomeAddress" field.</summary>
    public const int Ipv6OptMipv6HomeAddressFieldNumber = 95;
    private pb::ByteString ipv6OptMipv6HomeAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// MIPv6 Home Address ('ipv6_ipv6_opt_mipv6_home_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptMipv6HomeAddress {
      get { return ipv6OptMipv6HomeAddress_; }
      set {
        ipv6OptMipv6HomeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptRplFlag" field.</summary>
    public const int Ipv6OptRplFlagFieldNumber = 96;
    private uint ipv6OptRplFlag_;
    /// <summary>
    /// Flag ('ipv6_ipv6_opt_rpl_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptRplFlag {
      get { return ipv6OptRplFlag_; }
      set {
        ipv6OptRplFlag_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplFlagO" field.</summary>
    public const int Ipv6OptRplFlagOFieldNumber = 97;
    private bool ipv6OptRplFlagO_;
    /// <summary>
    /// Down ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptRplFlagO {
      get { return ipv6OptRplFlagO_; }
      set {
        ipv6OptRplFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplFlagR" field.</summary>
    public const int Ipv6OptRplFlagRFieldNumber = 98;
    private bool ipv6OptRplFlagR_;
    /// <summary>
    /// Rank Error ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_r')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptRplFlagR {
      get { return ipv6OptRplFlagR_; }
      set {
        ipv6OptRplFlagR_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplFlagF" field.</summary>
    public const int Ipv6OptRplFlagFFieldNumber = 99;
    private bool ipv6OptRplFlagF_;
    /// <summary>
    /// Forwarding Error ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_f')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptRplFlagF {
      get { return ipv6OptRplFlagF_; }
      set {
        ipv6OptRplFlagF_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplFlagRsv" field.</summary>
    public const int Ipv6OptRplFlagRsvFieldNumber = 100;
    private uint ipv6OptRplFlagRsv_;
    /// <summary>
    /// Reserved ('ipv6_opt_rpl_flag_ipv6_opt_rpl_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptRplFlagRsv {
      get { return ipv6OptRplFlagRsv_; }
      set {
        ipv6OptRplFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplInstanceId" field.</summary>
    public const int Ipv6OptRplInstanceIdFieldNumber = 101;
    private uint ipv6OptRplInstanceId_;
    /// <summary>
    /// RPLInstanceID ('ipv6_ipv6_opt_rpl_instance_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptRplInstanceId {
      get { return ipv6OptRplInstanceId_; }
      set {
        ipv6OptRplInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptRplSenderRank" field.</summary>
    public const int Ipv6OptRplSenderRankFieldNumber = 102;
    private uint ipv6OptRplSenderRank_;
    /// <summary>
    /// Sender Rank ('ipv6_ipv6_opt_rpl_sender_rank')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptRplSenderRank {
      get { return ipv6OptRplSenderRank_; }
      set {
        ipv6OptRplSenderRank_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptIlnpNonce" field.</summary>
    public const int Ipv6OptIlnpNonceFieldNumber = 103;
    private pb::ByteString ipv6OptIlnpNonce_ = pb::ByteString.Empty;
    /// <summary>
    /// ILNP Nonce ('ipv6_opt_ipv6_opt_ilnp_nonce')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptIlnpNonce {
      get { return ipv6OptIlnpNonce_; }
      set {
        ipv6OptIlnpNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptLioLength" field.</summary>
    public const int Ipv6OptLioLengthFieldNumber = 104;
    private uint ipv6OptLioLength_;
    /// <summary>
    /// LineIDLen ('ipv6_ipv6_opt_lio_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptLioLength {
      get { return ipv6OptLioLength_; }
      set {
        ipv6OptLioLength_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptLioLineId" field.</summary>
    public const int Ipv6OptLioLineIdFieldNumber = 105;
    private string ipv6OptLioLineId_ = "";
    /// <summary>
    /// Line ID ('ipv6_ipv6_opt_lio_line_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ipv6OptLioLineId {
      get { return ipv6OptLioLineId_; }
      set {
        ipv6OptLioLineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptMplFlag" field.</summary>
    public const int Ipv6OptMplFlagFieldNumber = 106;
    private uint ipv6OptMplFlag_;
    /// <summary>
    /// Flag ('ipv6_ipv6_opt_mpl_flag')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptMplFlag {
      get { return ipv6OptMplFlag_; }
      set {
        ipv6OptMplFlag_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplFlagS" field.</summary>
    public const int Ipv6OptMplFlagSFieldNumber = 107;
    private uint ipv6OptMplFlagS_;
    /// <summary>
    /// Seed ID Length ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_s')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptMplFlagS {
      get { return ipv6OptMplFlagS_; }
      set {
        ipv6OptMplFlagS_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplFlagM" field.</summary>
    public const int Ipv6OptMplFlagMFieldNumber = 108;
    private bool ipv6OptMplFlagM_;
    /// <summary>
    /// Largest Sequence ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_m')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptMplFlagM {
      get { return ipv6OptMplFlagM_; }
      set {
        ipv6OptMplFlagM_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplFlagV" field.</summary>
    public const int Ipv6OptMplFlagVFieldNumber = 109;
    private bool ipv6OptMplFlagV_;
    /// <summary>
    /// Version ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_v')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptMplFlagV {
      get { return ipv6OptMplFlagV_; }
      set {
        ipv6OptMplFlagV_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplFlagRsv" field.</summary>
    public const int Ipv6OptMplFlagRsvFieldNumber = 110;
    private uint ipv6OptMplFlagRsv_;
    /// <summary>
    /// Reserved ('ipv6_opt_mpl_flag_ipv6_opt_mpl_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptMplFlagRsv {
      get { return ipv6OptMplFlagRsv_; }
      set {
        ipv6OptMplFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplSequence" field.</summary>
    public const int Ipv6OptMplSequenceFieldNumber = 111;
    private uint ipv6OptMplSequence_;
    /// <summary>
    /// Sequence ('ipv6_ipv6_opt_mpl_sequence')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptMplSequence {
      get { return ipv6OptMplSequence_; }
      set {
        ipv6OptMplSequence_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptMplSeedId" field.</summary>
    public const int Ipv6OptMplSeedIdFieldNumber = 112;
    private pb::ByteString ipv6OptMplSeedId_ = pb::ByteString.Empty;
    /// <summary>
    /// Seed ID ('ipv6_ipv6_opt_mpl_seed_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptMplSeedId {
      get { return ipv6OptMplSeedId_; }
      set {
        ipv6OptMplSeedId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptDffFlags" field.</summary>
    public const int Ipv6OptDffFlagsFieldNumber = 113;
    private uint ipv6OptDffFlags_;
    /// <summary>
    /// Flags ('ipv6_ipv6_opt_dff_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptDffFlags {
      get { return ipv6OptDffFlags_; }
      set {
        ipv6OptDffFlags_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptDffFlagVer" field.</summary>
    public const int Ipv6OptDffFlagVerFieldNumber = 114;
    private uint ipv6OptDffFlagVer_;
    /// <summary>
    /// Version (VER) ('ipv6_ipv6_opt_dff_flag_ver')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptDffFlagVer {
      get { return ipv6OptDffFlagVer_; }
      set {
        ipv6OptDffFlagVer_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptDffFlagDup" field.</summary>
    public const int Ipv6OptDffFlagDupFieldNumber = 115;
    private bool ipv6OptDffFlagDup_;
    /// <summary>
    /// Duplicate (DUP) ('ipv6_ipv6_opt_dff_flag_dup')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptDffFlagDup {
      get { return ipv6OptDffFlagDup_; }
      set {
        ipv6OptDffFlagDup_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptDffFlagRet" field.</summary>
    public const int Ipv6OptDffFlagRetFieldNumber = 116;
    private bool ipv6OptDffFlagRet_;
    /// <summary>
    /// Return (RET) ('ipv6_ipv6_opt_dff_flag_ret')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6OptDffFlagRet {
      get { return ipv6OptDffFlagRet_; }
      set {
        ipv6OptDffFlagRet_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptDffFlagRsv" field.</summary>
    public const int Ipv6OptDffFlagRsvFieldNumber = 117;
    private uint ipv6OptDffFlagRsv_;
    /// <summary>
    /// Reserved ('ipv6_ipv6_opt_dff_flag_rsv')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptDffFlagRsv {
      get { return ipv6OptDffFlagRsv_; }
      set {
        ipv6OptDffFlagRsv_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptDffSequenceNumber" field.</summary>
    public const int Ipv6OptDffSequenceNumberFieldNumber = 118;
    private uint ipv6OptDffSequenceNumber_;
    /// <summary>
    /// Sequence Number ('ipv6_ipv6_opt_dff_sequence_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6OptDffSequenceNumber {
      get { return ipv6OptDffSequenceNumber_; }
      set {
        ipv6OptDffSequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6OptExperimental" field.</summary>
    public const int Ipv6OptExperimentalFieldNumber = 119;
    private pb::ByteString ipv6OptExperimental_ = pb::ByteString.Empty;
    /// <summary>
    /// Experimental Option ('ipv6_opt_ipv6_opt_experimental')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptExperimental {
      get { return ipv6OptExperimental_; }
      set {
        ipv6OptExperimental_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptUnknownData" field.</summary>
    public const int Ipv6OptUnknownDataFieldNumber = 120;
    private pb::ByteString ipv6OptUnknownData_ = pb::ByteString.Empty;
    /// <summary>
    /// Unknown Data ('ipv6_ipv6_opt_unknown_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptUnknownData {
      get { return ipv6OptUnknownData_; }
      set {
        ipv6OptUnknownData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6OptUnknown" field.</summary>
    public const int Ipv6OptUnknownFieldNumber = 121;
    private pb::ByteString ipv6OptUnknown_ = pb::ByteString.Empty;
    /// <summary>
    /// Unknown Option Payload ('ipv6_opt_ipv6_opt_unknown')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6OptUnknown {
      get { return ipv6OptUnknown_; }
      set {
        ipv6OptUnknown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6Fragment" field.</summary>
    public const int Ipv6FragmentFieldNumber = 122;
    private long ipv6Fragment_;
    /// <summary>
    /// IPv6 Fragment ('ipv6_ipv6_fragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ipv6Fragment {
      get { return ipv6Fragment_; }
      set {
        ipv6Fragment_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentOverlap" field.</summary>
    public const int Ipv6FragmentOverlapFieldNumber = 123;
    private bool ipv6FragmentOverlap_;
    /// <summary>
    /// Fragment overlap ('ipv6_fragment_ipv6_fragment_overlap')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6FragmentOverlap {
      get { return ipv6FragmentOverlap_; }
      set {
        ipv6FragmentOverlap_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentOverlapConflict" field.</summary>
    public const int Ipv6FragmentOverlapConflictFieldNumber = 124;
    private bool ipv6FragmentOverlapConflict_;
    /// <summary>
    /// Conflicting data in fragment overlap ('ipv6_fragment_overlap_ipv6_fragment_overlap_conflict')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6FragmentOverlapConflict {
      get { return ipv6FragmentOverlapConflict_; }
      set {
        ipv6FragmentOverlapConflict_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentMultipletails" field.</summary>
    public const int Ipv6FragmentMultipletailsFieldNumber = 125;
    private bool ipv6FragmentMultipletails_;
    /// <summary>
    /// Multiple tail fragments found ('ipv6_fragment_ipv6_fragment_multipletails')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6FragmentMultipletails {
      get { return ipv6FragmentMultipletails_; }
      set {
        ipv6FragmentMultipletails_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentToolongfragment" field.</summary>
    public const int Ipv6FragmentToolongfragmentFieldNumber = 126;
    private bool ipv6FragmentToolongfragment_;
    /// <summary>
    /// Fragment too long ('ipv6_fragment_ipv6_fragment_toolongfragment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6FragmentToolongfragment {
      get { return ipv6FragmentToolongfragment_; }
      set {
        ipv6FragmentToolongfragment_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentError" field.</summary>
    public const int Ipv6FragmentErrorFieldNumber = 127;
    private long ipv6FragmentError_;
    /// <summary>
    /// Defragmentation error ('ipv6_fragment_ipv6_fragment_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ipv6FragmentError {
      get { return ipv6FragmentError_; }
      set {
        ipv6FragmentError_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FragmentCount" field.</summary>
    public const int Ipv6FragmentCountFieldNumber = 128;
    private uint ipv6FragmentCount_;
    /// <summary>
    /// Fragment count ('ipv6_fragment_ipv6_fragment_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FragmentCount {
      get { return ipv6FragmentCount_; }
      set {
        ipv6FragmentCount_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6Fragments" field.</summary>
    public const int Ipv6FragmentsFieldNumber = 129;
    private int ipv6Fragments_;
    /// <summary>
    /// IPv6 Fragments ('ipv6_ipv6_fragments')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ipv6Fragments {
      get { return ipv6Fragments_; }
      set {
        ipv6Fragments_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6ReassembledIn" field.</summary>
    public const int Ipv6ReassembledInFieldNumber = 130;
    private long ipv6ReassembledIn_;
    /// <summary>
    /// Reassembled IPv6 in frame ('ipv6_ipv6_reassembled_in')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ipv6ReassembledIn {
      get { return ipv6ReassembledIn_; }
      set {
        ipv6ReassembledIn_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6ReassembledLength" field.</summary>
    public const int Ipv6ReassembledLengthFieldNumber = 131;
    private uint ipv6ReassembledLength_;
    /// <summary>
    /// Reassembled IPv6 length ('ipv6_ipv6_reassembled_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6ReassembledLength {
      get { return ipv6ReassembledLength_; }
      set {
        ipv6ReassembledLength_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6ReassembledData" field.</summary>
    public const int Ipv6ReassembledDataFieldNumber = 132;
    private pb::ByteString ipv6ReassembledData_ = pb::ByteString.Empty;
    /// <summary>
    /// Reassembled IPv6 data ('ipv6_ipv6_reassembled_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6ReassembledData {
      get { return ipv6ReassembledData_; }
      set {
        ipv6ReassembledData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6HopoptsNxt" field.</summary>
    public const int Ipv6HopoptsNxtFieldNumber = 133;
    private uint ipv6HopoptsNxt_;
    /// <summary>
    /// Next Header ('ipv6_ipv6_hopopts_nxt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6HopoptsNxt {
      get { return ipv6HopoptsNxt_; }
      set {
        ipv6HopoptsNxt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6HopoptsLen" field.</summary>
    public const int Ipv6HopoptsLenFieldNumber = 134;
    private uint ipv6HopoptsLen_;
    /// <summary>
    /// Length ('ipv6_ipv6_hopopts_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6HopoptsLen {
      get { return ipv6HopoptsLen_; }
      set {
        ipv6HopoptsLen_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6HopoptsLenOct" field.</summary>
    public const int Ipv6HopoptsLenOctFieldNumber = 135;
    private uint ipv6HopoptsLenOct_;
    /// <summary>
    /// Length ('ipv6_ipv6_hopopts_len_oct')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6HopoptsLenOct {
      get { return ipv6HopoptsLenOct_; }
      set {
        ipv6HopoptsLenOct_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6DstoptsNxt" field.</summary>
    public const int Ipv6DstoptsNxtFieldNumber = 136;
    private uint ipv6DstoptsNxt_;
    /// <summary>
    /// Next Header ('ipv6_ipv6_dstopts_nxt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6DstoptsNxt {
      get { return ipv6DstoptsNxt_; }
      set {
        ipv6DstoptsNxt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6DstoptsLen" field.</summary>
    public const int Ipv6DstoptsLenFieldNumber = 137;
    private uint ipv6DstoptsLen_;
    /// <summary>
    /// Length ('ipv6_ipv6_dstopts_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6DstoptsLen {
      get { return ipv6DstoptsLen_; }
      set {
        ipv6DstoptsLen_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6DstoptsLenOct" field.</summary>
    public const int Ipv6DstoptsLenOctFieldNumber = 138;
    private uint ipv6DstoptsLenOct_;
    /// <summary>
    /// Length ('ipv6_ipv6_dstopts_len_oct')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6DstoptsLenOct {
      get { return ipv6DstoptsLenOct_; }
      set {
        ipv6DstoptsLenOct_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingNxt" field.</summary>
    public const int Ipv6RoutingNxtFieldNumber = 139;
    private uint ipv6RoutingNxt_;
    /// <summary>
    /// Next Header ('ipv6_ipv6_routing_nxt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingNxt {
      get { return ipv6RoutingNxt_; }
      set {
        ipv6RoutingNxt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingLen" field.</summary>
    public const int Ipv6RoutingLenFieldNumber = 140;
    private uint ipv6RoutingLen_;
    /// <summary>
    /// Length ('ipv6_ipv6_routing_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingLen {
      get { return ipv6RoutingLen_; }
      set {
        ipv6RoutingLen_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingLenOct" field.</summary>
    public const int Ipv6RoutingLenOctFieldNumber = 141;
    private uint ipv6RoutingLenOct_;
    /// <summary>
    /// Length ('ipv6_ipv6_routing_len_oct')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingLenOct {
      get { return ipv6RoutingLenOct_; }
      set {
        ipv6RoutingLenOct_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingType" field.</summary>
    public const int Ipv6RoutingTypeFieldNumber = 142;
    private uint ipv6RoutingType_;
    /// <summary>
    /// Type ('ipv6_ipv6_routing_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingType {
      get { return ipv6RoutingType_; }
      set {
        ipv6RoutingType_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSegleft" field.</summary>
    public const int Ipv6RoutingSegleftFieldNumber = 143;
    private uint ipv6RoutingSegleft_;
    /// <summary>
    /// Segments Left ('ipv6_ipv6_routing_segleft')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingSegleft {
      get { return ipv6RoutingSegleft_; }
      set {
        ipv6RoutingSegleft_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingUnknownData" field.</summary>
    public const int Ipv6RoutingUnknownDataFieldNumber = 144;
    private pb::ByteString ipv6RoutingUnknownData_ = pb::ByteString.Empty;
    /// <summary>
    /// Type-Specific Data ('ipv6_ipv6_routing_unknown_data')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingUnknownData {
      get { return ipv6RoutingUnknownData_; }
      set {
        ipv6RoutingUnknownData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrcReserved" field.</summary>
    public const int Ipv6RoutingSrcReservedFieldNumber = 145;
    private pb::ByteString ipv6RoutingSrcReserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('ipv6_ipv6_routing_src_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingSrcReserved {
      get { return ipv6RoutingSrcReserved_; }
      set {
        ipv6RoutingSrcReserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrcAddr" field.</summary>
    public const int Ipv6RoutingSrcAddrFieldNumber = 146;
    private pb::ByteString ipv6RoutingSrcAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Address ('ipv6_ipv6_routing_src_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingSrcAddr {
      get { return ipv6RoutingSrcAddr_; }
      set {
        ipv6RoutingSrcAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingMipv6Reserved" field.</summary>
    public const int Ipv6RoutingMipv6ReservedFieldNumber = 147;
    private pb::ByteString ipv6RoutingMipv6Reserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('ipv6_ipv6_routing_mipv6_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingMipv6Reserved {
      get { return ipv6RoutingMipv6Reserved_; }
      set {
        ipv6RoutingMipv6Reserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingMipv6HomeAddress" field.</summary>
    public const int Ipv6RoutingMipv6HomeAddressFieldNumber = 148;
    private pb::ByteString ipv6RoutingMipv6HomeAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Home Address ('ipv6_ipv6_routing_mipv6_home_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingMipv6HomeAddress {
      get { return ipv6RoutingMipv6HomeAddress_; }
      set {
        ipv6RoutingMipv6HomeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplCmpri" field.</summary>
    public const int Ipv6RoutingRplCmpriFieldNumber = 149;
    private uint ipv6RoutingRplCmpri_;
    /// <summary>
    /// Compressed Internal Octets (CmprI) ('ipv6_ipv6_routing_rpl_cmprI')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingRplCmpri {
      get { return ipv6RoutingRplCmpri_; }
      set {
        ipv6RoutingRplCmpri_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplCmpre" field.</summary>
    public const int Ipv6RoutingRplCmpreFieldNumber = 150;
    private uint ipv6RoutingRplCmpre_;
    /// <summary>
    /// Compressed Final Octets (CmprE) ('ipv6_ipv6_routing_rpl_cmprE')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingRplCmpre {
      get { return ipv6RoutingRplCmpre_; }
      set {
        ipv6RoutingRplCmpre_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplPad" field.</summary>
    public const int Ipv6RoutingRplPadFieldNumber = 151;
    private uint ipv6RoutingRplPad_;
    /// <summary>
    /// Padding Bytes ('ipv6_ipv6_routing_rpl_pad')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingRplPad {
      get { return ipv6RoutingRplPad_; }
      set {
        ipv6RoutingRplPad_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplReserved" field.</summary>
    public const int Ipv6RoutingRplReservedFieldNumber = 152;
    private uint ipv6RoutingRplReserved_;
    /// <summary>
    /// Reserved ('ipv6_ipv6_routing_rpl_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingRplReserved {
      get { return ipv6RoutingRplReserved_; }
      set {
        ipv6RoutingRplReserved_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplAddrCount" field.</summary>
    public const int Ipv6RoutingRplAddrCountFieldNumber = 153;
    private int ipv6RoutingRplAddrCount_;
    /// <summary>
    /// Total Address Count ('ipv6_ipv6_routing_rpl_addr_count')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ipv6RoutingRplAddrCount {
      get { return ipv6RoutingRplAddrCount_; }
      set {
        ipv6RoutingRplAddrCount_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplAddress" field.</summary>
    public const int Ipv6RoutingRplAddressFieldNumber = 154;
    private pb::ByteString ipv6RoutingRplAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Address ('ipv6_ipv6_routing_rpl_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingRplAddress {
      get { return ipv6RoutingRplAddress_; }
      set {
        ipv6RoutingRplAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingRplFullAddress" field.</summary>
    public const int Ipv6RoutingRplFullAddressFieldNumber = 155;
    private pb::ByteString ipv6RoutingRplFullAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Full Address ('ipv6_ipv6_routing_rpl_full_address')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingRplFullAddress {
      get { return ipv6RoutingRplFullAddress_; }
      set {
        ipv6RoutingRplFullAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFirstSegment" field.</summary>
    public const int Ipv6RoutingSrhFirstSegmentFieldNumber = 156;
    private uint ipv6RoutingSrhFirstSegment_;
    /// <summary>
    /// First segment ('ipv6_ipv6_routing_srh_first_segment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingSrhFirstSegment {
      get { return ipv6RoutingSrhFirstSegment_; }
      set {
        ipv6RoutingSrhFirstSegment_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlags" field.</summary>
    public const int Ipv6RoutingSrhFlagsFieldNumber = 157;
    private uint ipv6RoutingSrhFlags_;
    /// <summary>
    /// Flags ('ipv6_ipv6_routing_srh_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingSrhFlags {
      get { return ipv6RoutingSrhFlags_; }
      set {
        ipv6RoutingSrhFlags_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagUnused1" field.</summary>
    public const int Ipv6RoutingSrhFlagUnused1FieldNumber = 158;
    private uint ipv6RoutingSrhFlagUnused1_;
    /// <summary>
    /// Unused ('ipv6_ipv6_routing_srh_flag_unused1')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingSrhFlagUnused1 {
      get { return ipv6RoutingSrhFlagUnused1_; }
      set {
        ipv6RoutingSrhFlagUnused1_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagP" field.</summary>
    public const int Ipv6RoutingSrhFlagPFieldNumber = 159;
    private bool ipv6RoutingSrhFlagP_;
    /// <summary>
    /// Protected ('ipv6_ipv6_routing_srh_flag_p')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6RoutingSrhFlagP {
      get { return ipv6RoutingSrhFlagP_; }
      set {
        ipv6RoutingSrhFlagP_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagO" field.</summary>
    public const int Ipv6RoutingSrhFlagOFieldNumber = 160;
    private bool ipv6RoutingSrhFlagO_;
    /// <summary>
    /// OAM ('ipv6_ipv6_routing_srh_flag_o')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6RoutingSrhFlagO {
      get { return ipv6RoutingSrhFlagO_; }
      set {
        ipv6RoutingSrhFlagO_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagA" field.</summary>
    public const int Ipv6RoutingSrhFlagAFieldNumber = 161;
    private bool ipv6RoutingSrhFlagA_;
    /// <summary>
    /// Alert ('ipv6_ipv6_routing_srh_flag_a')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6RoutingSrhFlagA {
      get { return ipv6RoutingSrhFlagA_; }
      set {
        ipv6RoutingSrhFlagA_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagH" field.</summary>
    public const int Ipv6RoutingSrhFlagHFieldNumber = 162;
    private bool ipv6RoutingSrhFlagH_;
    /// <summary>
    /// HMAC ('ipv6_ipv6_routing_srh_flag_h')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6RoutingSrhFlagH {
      get { return ipv6RoutingSrhFlagH_; }
      set {
        ipv6RoutingSrhFlagH_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhFlagUnused2" field.</summary>
    public const int Ipv6RoutingSrhFlagUnused2FieldNumber = 163;
    private uint ipv6RoutingSrhFlagUnused2_;
    /// <summary>
    /// Unused ('ipv6_ipv6_routing_srh_flag_unused2')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6RoutingSrhFlagUnused2 {
      get { return ipv6RoutingSrhFlagUnused2_; }
      set {
        ipv6RoutingSrhFlagUnused2_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhReserved" field.</summary>
    public const int Ipv6RoutingSrhReservedFieldNumber = 164;
    private pb::ByteString ipv6RoutingSrhReserved_ = pb::ByteString.Empty;
    /// <summary>
    /// Reserved ('ipv6_ipv6_routing_srh_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingSrhReserved {
      get { return ipv6RoutingSrhReserved_; }
      set {
        ipv6RoutingSrhReserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6RoutingSrhAddr" field.</summary>
    public const int Ipv6RoutingSrhAddrFieldNumber = 165;
    private pb::ByteString ipv6RoutingSrhAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Address ('ipv6_ipv6_routing_srh_addr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ipv6RoutingSrhAddr {
      get { return ipv6RoutingSrhAddr_; }
      set {
        ipv6RoutingSrhAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrNxt" field.</summary>
    public const int Ipv6FraghdrNxtFieldNumber = 166;
    private uint ipv6FraghdrNxt_;
    /// <summary>
    /// Next header ('ipv6_ipv6_fraghdr_nxt')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FraghdrNxt {
      get { return ipv6FraghdrNxt_; }
      set {
        ipv6FraghdrNxt_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrReservedOctet" field.</summary>
    public const int Ipv6FraghdrReservedOctetFieldNumber = 167;
    private uint ipv6FraghdrReservedOctet_;
    /// <summary>
    /// Reserved octet ('ipv6_ipv6_fraghdr_reserved_octet')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FraghdrReservedOctet {
      get { return ipv6FraghdrReservedOctet_; }
      set {
        ipv6FraghdrReservedOctet_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrOffset" field.</summary>
    public const int Ipv6FraghdrOffsetFieldNumber = 168;
    private uint ipv6FraghdrOffset_;
    /// <summary>
    /// Offset ('ipv6_ipv6_fraghdr_offset')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FraghdrOffset {
      get { return ipv6FraghdrOffset_; }
      set {
        ipv6FraghdrOffset_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrReservedBits" field.</summary>
    public const int Ipv6FraghdrReservedBitsFieldNumber = 169;
    private uint ipv6FraghdrReservedBits_;
    /// <summary>
    /// Reserved bits ('ipv6_ipv6_fraghdr_reserved_bits')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FraghdrReservedBits {
      get { return ipv6FraghdrReservedBits_; }
      set {
        ipv6FraghdrReservedBits_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrMore" field.</summary>
    public const int Ipv6FraghdrMoreFieldNumber = 170;
    private bool ipv6FraghdrMore_;
    /// <summary>
    /// More Fragments ('ipv6_ipv6_fraghdr_more')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ipv6FraghdrMore {
      get { return ipv6FraghdrMore_; }
      set {
        ipv6FraghdrMore_ = value;
      }
    }

    /// <summary>Field number for the "Ipv6FraghdrIdent" field.</summary>
    public const int Ipv6FraghdrIdentFieldNumber = 171;
    private uint ipv6FraghdrIdent_;
    /// <summary>
    /// Identification ('ipv6_ipv6_fraghdr_ident')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv6FraghdrIdent {
      get { return ipv6FraghdrIdent_; }
      set {
        ipv6FraghdrIdent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ipv6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ipv6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ipv6Version != other.Ipv6Version) return false;
      if (Ipv6Tclass != other.Ipv6Tclass) return false;
      if (Ipv6TclassDscp != other.Ipv6TclassDscp) return false;
      if (Ipv6TclassEcn != other.Ipv6TclassEcn) return false;
      if (Ipv6Flow != other.Ipv6Flow) return false;
      if (Ipv6Plen != other.Ipv6Plen) return false;
      if (Ipv6Nxt != other.Ipv6Nxt) return false;
      if (Ipv6Hlim != other.Ipv6Hlim) return false;
      if (Ipv6Src != other.Ipv6Src) return false;
      if (Ipv6SrcHost != other.Ipv6SrcHost) return false;
      if (Ipv6SrcSaMac != other.Ipv6SrcSaMac) return false;
      if (Ipv6SrcIsatapIpv4 != other.Ipv6SrcIsatapIpv4) return false;
      if (Ipv6Src6To4GwIpv4 != other.Ipv6Src6To4GwIpv4) return false;
      if (Ipv6Src6To4SlaId != other.Ipv6Src6To4SlaId) return false;
      if (Ipv6SrcTsIpv4 != other.Ipv6SrcTsIpv4) return false;
      if (Ipv6SrcTcPort != other.Ipv6SrcTcPort) return false;
      if (Ipv6SrcTcIpv4 != other.Ipv6SrcTcIpv4) return false;
      if (Ipv6SrcEmbedIpv4 != other.Ipv6SrcEmbedIpv4) return false;
      if (Ipv6Dst != other.Ipv6Dst) return false;
      if (Ipv6DstHost != other.Ipv6DstHost) return false;
      if (Ipv6DstSaMac != other.Ipv6DstSaMac) return false;
      if (Ipv6DstIsatapIpv4 != other.Ipv6DstIsatapIpv4) return false;
      if (Ipv6Dst6To4GwIpv4 != other.Ipv6Dst6To4GwIpv4) return false;
      if (Ipv6Dst6To4SlaId != other.Ipv6Dst6To4SlaId) return false;
      if (Ipv6DstTsIpv4 != other.Ipv6DstTsIpv4) return false;
      if (Ipv6DstTcPort != other.Ipv6DstTcPort) return false;
      if (Ipv6DstTcIpv4 != other.Ipv6DstTcIpv4) return false;
      if (Ipv6DstEmbedIpv4 != other.Ipv6DstEmbedIpv4) return false;
      if (Ipv6Addr != other.Ipv6Addr) return false;
      if (Ipv6Host != other.Ipv6Host) return false;
      if (Ipv6SaMac != other.Ipv6SaMac) return false;
      if (Ipv6IsatapIpv4 != other.Ipv6IsatapIpv4) return false;
      if (Ipv66To4GwIpv4 != other.Ipv66To4GwIpv4) return false;
      if (Ipv66To4SlaId != other.Ipv66To4SlaId) return false;
      if (Ipv6TsIpv4 != other.Ipv6TsIpv4) return false;
      if (Ipv6TcPort != other.Ipv6TcPort) return false;
      if (Ipv6TcIpv4 != other.Ipv6TcIpv4) return false;
      if (Ipv6EmbedIpv4 != other.Ipv6EmbedIpv4) return false;
      if (Ipv6GeoipCountry != other.Ipv6GeoipCountry) return false;
      if (Ipv6GeoipCity != other.Ipv6GeoipCity) return false;
      if (Ipv6GeoipOrg != other.Ipv6GeoipOrg) return false;
      if (Ipv6GeoipIsp != other.Ipv6GeoipIsp) return false;
      if (Ipv6GeoipAsnum != other.Ipv6GeoipAsnum) return false;
      if (Ipv6GeoipLat != other.Ipv6GeoipLat) return false;
      if (Ipv6GeoipLon != other.Ipv6GeoipLon) return false;
      if (Ipv6GeoipSrcCountry != other.Ipv6GeoipSrcCountry) return false;
      if (Ipv6GeoipSrcCity != other.Ipv6GeoipSrcCity) return false;
      if (Ipv6GeoipSrcOrg != other.Ipv6GeoipSrcOrg) return false;
      if (Ipv6GeoipSrcIsp != other.Ipv6GeoipSrcIsp) return false;
      if (Ipv6GeoipSrcAsnum != other.Ipv6GeoipSrcAsnum) return false;
      if (Ipv6GeoipSrcLat != other.Ipv6GeoipSrcLat) return false;
      if (Ipv6GeoipSrcLon != other.Ipv6GeoipSrcLon) return false;
      if (Ipv6GeoipDstCountry != other.Ipv6GeoipDstCountry) return false;
      if (Ipv6GeoipDstCity != other.Ipv6GeoipDstCity) return false;
      if (Ipv6GeoipDstOrg != other.Ipv6GeoipDstOrg) return false;
      if (Ipv6GeoipDstIsp != other.Ipv6GeoipDstIsp) return false;
      if (Ipv6GeoipDstAsnum != other.Ipv6GeoipDstAsnum) return false;
      if (Ipv6GeoipDstLat != other.Ipv6GeoipDstLat) return false;
      if (Ipv6GeoipDstLon != other.Ipv6GeoipDstLon) return false;
      if (Ipv6Opt != other.Ipv6Opt) return false;
      if (Ipv6OptType != other.Ipv6OptType) return false;
      if (Ipv6OptTypeAction != other.Ipv6OptTypeAction) return false;
      if (Ipv6OptTypeChange != other.Ipv6OptTypeChange) return false;
      if (Ipv6OptTypeRest != other.Ipv6OptTypeRest) return false;
      if (Ipv6OptLength != other.Ipv6OptLength) return false;
      if (Ipv6OptPad1 != other.Ipv6OptPad1) return false;
      if (Ipv6OptPadn != other.Ipv6OptPadn) return false;
      if (Ipv6OptRouterAlert != other.Ipv6OptRouterAlert) return false;
      if (Ipv6OptTel != other.Ipv6OptTel) return false;
      if (Ipv6OptJumbo != other.Ipv6OptJumbo) return false;
      if (Ipv6OptCalipsoDoi != other.Ipv6OptCalipsoDoi) return false;
      if (Ipv6OptCalipsoCmptLength != other.Ipv6OptCalipsoCmptLength) return false;
      if (Ipv6OptCalipsoSensLevel != other.Ipv6OptCalipsoSensLevel) return false;
      if (Ipv6OptCalipsoChecksum != other.Ipv6OptCalipsoChecksum) return false;
      if (Ipv6OptCalipsoCmptBitmap != other.Ipv6OptCalipsoCmptBitmap) return false;
      if (Ipv6OptSmfDpdHashBit != other.Ipv6OptSmfDpdHashBit) return false;
      if (Ipv6OptSmfDpdTidType != other.Ipv6OptSmfDpdTidType) return false;
      if (Ipv6OptSmfDpdTidLen != other.Ipv6OptSmfDpdTidLen) return false;
      if (Ipv6OptSmfDpdTaggerId != other.Ipv6OptSmfDpdTaggerId) return false;
      if (Ipv6OptSmfDpdIdent != other.Ipv6OptSmfDpdIdent) return false;
      if (Ipv6OptSmfDpdHav != other.Ipv6OptSmfDpdHav) return false;
      if (Ipv6OptPdmScaleDtlr != other.Ipv6OptPdmScaleDtlr) return false;
      if (Ipv6OptPdmScaleDtls != other.Ipv6OptPdmScaleDtls) return false;
      if (Ipv6OptPdmPsnThisPkt != other.Ipv6OptPdmPsnThisPkt) return false;
      if (Ipv6OptPdmPsnLastRecv != other.Ipv6OptPdmPsnLastRecv) return false;
      if (Ipv6OptPdmDeltaLastRecv != other.Ipv6OptPdmDeltaLastRecv) return false;
      if (Ipv6OptPdmDeltaLastSent != other.Ipv6OptPdmDeltaLastSent) return false;
      if (Ipv6OptQsFunc != other.Ipv6OptQsFunc) return false;
      if (Ipv6OptQsRate != other.Ipv6OptQsRate) return false;
      if (Ipv6OptQsTtl != other.Ipv6OptQsTtl) return false;
      if (Ipv6OptQsTtlDiff != other.Ipv6OptQsTtlDiff) return false;
      if (Ipv6OptQsUnused != other.Ipv6OptQsUnused) return false;
      if (Ipv6OptQsNonce != other.Ipv6OptQsNonce) return false;
      if (Ipv6OptQsReserved != other.Ipv6OptQsReserved) return false;
      if (Ipv6OptMipv6HomeAddress != other.Ipv6OptMipv6HomeAddress) return false;
      if (Ipv6OptRplFlag != other.Ipv6OptRplFlag) return false;
      if (Ipv6OptRplFlagO != other.Ipv6OptRplFlagO) return false;
      if (Ipv6OptRplFlagR != other.Ipv6OptRplFlagR) return false;
      if (Ipv6OptRplFlagF != other.Ipv6OptRplFlagF) return false;
      if (Ipv6OptRplFlagRsv != other.Ipv6OptRplFlagRsv) return false;
      if (Ipv6OptRplInstanceId != other.Ipv6OptRplInstanceId) return false;
      if (Ipv6OptRplSenderRank != other.Ipv6OptRplSenderRank) return false;
      if (Ipv6OptIlnpNonce != other.Ipv6OptIlnpNonce) return false;
      if (Ipv6OptLioLength != other.Ipv6OptLioLength) return false;
      if (Ipv6OptLioLineId != other.Ipv6OptLioLineId) return false;
      if (Ipv6OptMplFlag != other.Ipv6OptMplFlag) return false;
      if (Ipv6OptMplFlagS != other.Ipv6OptMplFlagS) return false;
      if (Ipv6OptMplFlagM != other.Ipv6OptMplFlagM) return false;
      if (Ipv6OptMplFlagV != other.Ipv6OptMplFlagV) return false;
      if (Ipv6OptMplFlagRsv != other.Ipv6OptMplFlagRsv) return false;
      if (Ipv6OptMplSequence != other.Ipv6OptMplSequence) return false;
      if (Ipv6OptMplSeedId != other.Ipv6OptMplSeedId) return false;
      if (Ipv6OptDffFlags != other.Ipv6OptDffFlags) return false;
      if (Ipv6OptDffFlagVer != other.Ipv6OptDffFlagVer) return false;
      if (Ipv6OptDffFlagDup != other.Ipv6OptDffFlagDup) return false;
      if (Ipv6OptDffFlagRet != other.Ipv6OptDffFlagRet) return false;
      if (Ipv6OptDffFlagRsv != other.Ipv6OptDffFlagRsv) return false;
      if (Ipv6OptDffSequenceNumber != other.Ipv6OptDffSequenceNumber) return false;
      if (Ipv6OptExperimental != other.Ipv6OptExperimental) return false;
      if (Ipv6OptUnknownData != other.Ipv6OptUnknownData) return false;
      if (Ipv6OptUnknown != other.Ipv6OptUnknown) return false;
      if (Ipv6Fragment != other.Ipv6Fragment) return false;
      if (Ipv6FragmentOverlap != other.Ipv6FragmentOverlap) return false;
      if (Ipv6FragmentOverlapConflict != other.Ipv6FragmentOverlapConflict) return false;
      if (Ipv6FragmentMultipletails != other.Ipv6FragmentMultipletails) return false;
      if (Ipv6FragmentToolongfragment != other.Ipv6FragmentToolongfragment) return false;
      if (Ipv6FragmentError != other.Ipv6FragmentError) return false;
      if (Ipv6FragmentCount != other.Ipv6FragmentCount) return false;
      if (Ipv6Fragments != other.Ipv6Fragments) return false;
      if (Ipv6ReassembledIn != other.Ipv6ReassembledIn) return false;
      if (Ipv6ReassembledLength != other.Ipv6ReassembledLength) return false;
      if (Ipv6ReassembledData != other.Ipv6ReassembledData) return false;
      if (Ipv6HopoptsNxt != other.Ipv6HopoptsNxt) return false;
      if (Ipv6HopoptsLen != other.Ipv6HopoptsLen) return false;
      if (Ipv6HopoptsLenOct != other.Ipv6HopoptsLenOct) return false;
      if (Ipv6DstoptsNxt != other.Ipv6DstoptsNxt) return false;
      if (Ipv6DstoptsLen != other.Ipv6DstoptsLen) return false;
      if (Ipv6DstoptsLenOct != other.Ipv6DstoptsLenOct) return false;
      if (Ipv6RoutingNxt != other.Ipv6RoutingNxt) return false;
      if (Ipv6RoutingLen != other.Ipv6RoutingLen) return false;
      if (Ipv6RoutingLenOct != other.Ipv6RoutingLenOct) return false;
      if (Ipv6RoutingType != other.Ipv6RoutingType) return false;
      if (Ipv6RoutingSegleft != other.Ipv6RoutingSegleft) return false;
      if (Ipv6RoutingUnknownData != other.Ipv6RoutingUnknownData) return false;
      if (Ipv6RoutingSrcReserved != other.Ipv6RoutingSrcReserved) return false;
      if (Ipv6RoutingSrcAddr != other.Ipv6RoutingSrcAddr) return false;
      if (Ipv6RoutingMipv6Reserved != other.Ipv6RoutingMipv6Reserved) return false;
      if (Ipv6RoutingMipv6HomeAddress != other.Ipv6RoutingMipv6HomeAddress) return false;
      if (Ipv6RoutingRplCmpri != other.Ipv6RoutingRplCmpri) return false;
      if (Ipv6RoutingRplCmpre != other.Ipv6RoutingRplCmpre) return false;
      if (Ipv6RoutingRplPad != other.Ipv6RoutingRplPad) return false;
      if (Ipv6RoutingRplReserved != other.Ipv6RoutingRplReserved) return false;
      if (Ipv6RoutingRplAddrCount != other.Ipv6RoutingRplAddrCount) return false;
      if (Ipv6RoutingRplAddress != other.Ipv6RoutingRplAddress) return false;
      if (Ipv6RoutingRplFullAddress != other.Ipv6RoutingRplFullAddress) return false;
      if (Ipv6RoutingSrhFirstSegment != other.Ipv6RoutingSrhFirstSegment) return false;
      if (Ipv6RoutingSrhFlags != other.Ipv6RoutingSrhFlags) return false;
      if (Ipv6RoutingSrhFlagUnused1 != other.Ipv6RoutingSrhFlagUnused1) return false;
      if (Ipv6RoutingSrhFlagP != other.Ipv6RoutingSrhFlagP) return false;
      if (Ipv6RoutingSrhFlagO != other.Ipv6RoutingSrhFlagO) return false;
      if (Ipv6RoutingSrhFlagA != other.Ipv6RoutingSrhFlagA) return false;
      if (Ipv6RoutingSrhFlagH != other.Ipv6RoutingSrhFlagH) return false;
      if (Ipv6RoutingSrhFlagUnused2 != other.Ipv6RoutingSrhFlagUnused2) return false;
      if (Ipv6RoutingSrhReserved != other.Ipv6RoutingSrhReserved) return false;
      if (Ipv6RoutingSrhAddr != other.Ipv6RoutingSrhAddr) return false;
      if (Ipv6FraghdrNxt != other.Ipv6FraghdrNxt) return false;
      if (Ipv6FraghdrReservedOctet != other.Ipv6FraghdrReservedOctet) return false;
      if (Ipv6FraghdrOffset != other.Ipv6FraghdrOffset) return false;
      if (Ipv6FraghdrReservedBits != other.Ipv6FraghdrReservedBits) return false;
      if (Ipv6FraghdrMore != other.Ipv6FraghdrMore) return false;
      if (Ipv6FraghdrIdent != other.Ipv6FraghdrIdent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ipv6Version != 0) hash ^= Ipv6Version.GetHashCode();
      if (Ipv6Tclass != 0) hash ^= Ipv6Tclass.GetHashCode();
      if (Ipv6TclassDscp != 0) hash ^= Ipv6TclassDscp.GetHashCode();
      if (Ipv6TclassEcn != 0) hash ^= Ipv6TclassEcn.GetHashCode();
      if (Ipv6Flow != 0) hash ^= Ipv6Flow.GetHashCode();
      if (Ipv6Plen != 0) hash ^= Ipv6Plen.GetHashCode();
      if (Ipv6Nxt != 0) hash ^= Ipv6Nxt.GetHashCode();
      if (Ipv6Hlim != 0) hash ^= Ipv6Hlim.GetHashCode();
      if (Ipv6Src.Length != 0) hash ^= Ipv6Src.GetHashCode();
      if (Ipv6SrcHost.Length != 0) hash ^= Ipv6SrcHost.GetHashCode();
      if (Ipv6SrcSaMac.Length != 0) hash ^= Ipv6SrcSaMac.GetHashCode();
      if (Ipv6SrcIsatapIpv4.Length != 0) hash ^= Ipv6SrcIsatapIpv4.GetHashCode();
      if (Ipv6Src6To4GwIpv4.Length != 0) hash ^= Ipv6Src6To4GwIpv4.GetHashCode();
      if (Ipv6Src6To4SlaId != 0) hash ^= Ipv6Src6To4SlaId.GetHashCode();
      if (Ipv6SrcTsIpv4.Length != 0) hash ^= Ipv6SrcTsIpv4.GetHashCode();
      if (Ipv6SrcTcPort != 0) hash ^= Ipv6SrcTcPort.GetHashCode();
      if (Ipv6SrcTcIpv4.Length != 0) hash ^= Ipv6SrcTcIpv4.GetHashCode();
      if (Ipv6SrcEmbedIpv4.Length != 0) hash ^= Ipv6SrcEmbedIpv4.GetHashCode();
      if (Ipv6Dst.Length != 0) hash ^= Ipv6Dst.GetHashCode();
      if (Ipv6DstHost.Length != 0) hash ^= Ipv6DstHost.GetHashCode();
      if (Ipv6DstSaMac.Length != 0) hash ^= Ipv6DstSaMac.GetHashCode();
      if (Ipv6DstIsatapIpv4.Length != 0) hash ^= Ipv6DstIsatapIpv4.GetHashCode();
      if (Ipv6Dst6To4GwIpv4.Length != 0) hash ^= Ipv6Dst6To4GwIpv4.GetHashCode();
      if (Ipv6Dst6To4SlaId != 0) hash ^= Ipv6Dst6To4SlaId.GetHashCode();
      if (Ipv6DstTsIpv4.Length != 0) hash ^= Ipv6DstTsIpv4.GetHashCode();
      if (Ipv6DstTcPort != 0) hash ^= Ipv6DstTcPort.GetHashCode();
      if (Ipv6DstTcIpv4.Length != 0) hash ^= Ipv6DstTcIpv4.GetHashCode();
      if (Ipv6DstEmbedIpv4.Length != 0) hash ^= Ipv6DstEmbedIpv4.GetHashCode();
      if (Ipv6Addr.Length != 0) hash ^= Ipv6Addr.GetHashCode();
      if (Ipv6Host.Length != 0) hash ^= Ipv6Host.GetHashCode();
      if (Ipv6SaMac.Length != 0) hash ^= Ipv6SaMac.GetHashCode();
      if (Ipv6IsatapIpv4.Length != 0) hash ^= Ipv6IsatapIpv4.GetHashCode();
      if (Ipv66To4GwIpv4.Length != 0) hash ^= Ipv66To4GwIpv4.GetHashCode();
      if (Ipv66To4SlaId != 0) hash ^= Ipv66To4SlaId.GetHashCode();
      if (Ipv6TsIpv4.Length != 0) hash ^= Ipv6TsIpv4.GetHashCode();
      if (Ipv6TcPort != 0) hash ^= Ipv6TcPort.GetHashCode();
      if (Ipv6TcIpv4.Length != 0) hash ^= Ipv6TcIpv4.GetHashCode();
      if (Ipv6EmbedIpv4.Length != 0) hash ^= Ipv6EmbedIpv4.GetHashCode();
      if (Ipv6GeoipCountry.Length != 0) hash ^= Ipv6GeoipCountry.GetHashCode();
      if (Ipv6GeoipCity.Length != 0) hash ^= Ipv6GeoipCity.GetHashCode();
      if (Ipv6GeoipOrg.Length != 0) hash ^= Ipv6GeoipOrg.GetHashCode();
      if (Ipv6GeoipIsp.Length != 0) hash ^= Ipv6GeoipIsp.GetHashCode();
      if (Ipv6GeoipAsnum.Length != 0) hash ^= Ipv6GeoipAsnum.GetHashCode();
      if (Ipv6GeoipLat != 0D) hash ^= Ipv6GeoipLat.GetHashCode();
      if (Ipv6GeoipLon != 0D) hash ^= Ipv6GeoipLon.GetHashCode();
      if (Ipv6GeoipSrcCountry.Length != 0) hash ^= Ipv6GeoipSrcCountry.GetHashCode();
      if (Ipv6GeoipSrcCity.Length != 0) hash ^= Ipv6GeoipSrcCity.GetHashCode();
      if (Ipv6GeoipSrcOrg.Length != 0) hash ^= Ipv6GeoipSrcOrg.GetHashCode();
      if (Ipv6GeoipSrcIsp.Length != 0) hash ^= Ipv6GeoipSrcIsp.GetHashCode();
      if (Ipv6GeoipSrcAsnum.Length != 0) hash ^= Ipv6GeoipSrcAsnum.GetHashCode();
      if (Ipv6GeoipSrcLat != 0D) hash ^= Ipv6GeoipSrcLat.GetHashCode();
      if (Ipv6GeoipSrcLon != 0D) hash ^= Ipv6GeoipSrcLon.GetHashCode();
      if (Ipv6GeoipDstCountry.Length != 0) hash ^= Ipv6GeoipDstCountry.GetHashCode();
      if (Ipv6GeoipDstCity.Length != 0) hash ^= Ipv6GeoipDstCity.GetHashCode();
      if (Ipv6GeoipDstOrg.Length != 0) hash ^= Ipv6GeoipDstOrg.GetHashCode();
      if (Ipv6GeoipDstIsp.Length != 0) hash ^= Ipv6GeoipDstIsp.GetHashCode();
      if (Ipv6GeoipDstAsnum.Length != 0) hash ^= Ipv6GeoipDstAsnum.GetHashCode();
      if (Ipv6GeoipDstLat != 0D) hash ^= Ipv6GeoipDstLat.GetHashCode();
      if (Ipv6GeoipDstLon != 0D) hash ^= Ipv6GeoipDstLon.GetHashCode();
      if (Ipv6Opt != 0) hash ^= Ipv6Opt.GetHashCode();
      if (Ipv6OptType != 0) hash ^= Ipv6OptType.GetHashCode();
      if (Ipv6OptTypeAction != 0) hash ^= Ipv6OptTypeAction.GetHashCode();
      if (Ipv6OptTypeChange != false) hash ^= Ipv6OptTypeChange.GetHashCode();
      if (Ipv6OptTypeRest != 0) hash ^= Ipv6OptTypeRest.GetHashCode();
      if (Ipv6OptLength != 0) hash ^= Ipv6OptLength.GetHashCode();
      if (Ipv6OptPad1 != 0) hash ^= Ipv6OptPad1.GetHashCode();
      if (Ipv6OptPadn.Length != 0) hash ^= Ipv6OptPadn.GetHashCode();
      if (Ipv6OptRouterAlert != 0) hash ^= Ipv6OptRouterAlert.GetHashCode();
      if (Ipv6OptTel != 0) hash ^= Ipv6OptTel.GetHashCode();
      if (Ipv6OptJumbo != 0) hash ^= Ipv6OptJumbo.GetHashCode();
      if (Ipv6OptCalipsoDoi != 0) hash ^= Ipv6OptCalipsoDoi.GetHashCode();
      if (Ipv6OptCalipsoCmptLength != 0) hash ^= Ipv6OptCalipsoCmptLength.GetHashCode();
      if (Ipv6OptCalipsoSensLevel != 0) hash ^= Ipv6OptCalipsoSensLevel.GetHashCode();
      if (Ipv6OptCalipsoChecksum != 0) hash ^= Ipv6OptCalipsoChecksum.GetHashCode();
      if (Ipv6OptCalipsoCmptBitmap.Length != 0) hash ^= Ipv6OptCalipsoCmptBitmap.GetHashCode();
      if (Ipv6OptSmfDpdHashBit != false) hash ^= Ipv6OptSmfDpdHashBit.GetHashCode();
      if (Ipv6OptSmfDpdTidType != 0) hash ^= Ipv6OptSmfDpdTidType.GetHashCode();
      if (Ipv6OptSmfDpdTidLen != 0) hash ^= Ipv6OptSmfDpdTidLen.GetHashCode();
      if (Ipv6OptSmfDpdTaggerId.Length != 0) hash ^= Ipv6OptSmfDpdTaggerId.GetHashCode();
      if (Ipv6OptSmfDpdIdent.Length != 0) hash ^= Ipv6OptSmfDpdIdent.GetHashCode();
      if (Ipv6OptSmfDpdHav.Length != 0) hash ^= Ipv6OptSmfDpdHav.GetHashCode();
      if (Ipv6OptPdmScaleDtlr != 0) hash ^= Ipv6OptPdmScaleDtlr.GetHashCode();
      if (Ipv6OptPdmScaleDtls != 0) hash ^= Ipv6OptPdmScaleDtls.GetHashCode();
      if (Ipv6OptPdmPsnThisPkt != 0) hash ^= Ipv6OptPdmPsnThisPkt.GetHashCode();
      if (Ipv6OptPdmPsnLastRecv != 0) hash ^= Ipv6OptPdmPsnLastRecv.GetHashCode();
      if (Ipv6OptPdmDeltaLastRecv != 0) hash ^= Ipv6OptPdmDeltaLastRecv.GetHashCode();
      if (Ipv6OptPdmDeltaLastSent != 0) hash ^= Ipv6OptPdmDeltaLastSent.GetHashCode();
      if (Ipv6OptQsFunc != 0) hash ^= Ipv6OptQsFunc.GetHashCode();
      if (Ipv6OptQsRate != 0) hash ^= Ipv6OptQsRate.GetHashCode();
      if (Ipv6OptQsTtl != 0) hash ^= Ipv6OptQsTtl.GetHashCode();
      if (Ipv6OptQsTtlDiff != 0) hash ^= Ipv6OptQsTtlDiff.GetHashCode();
      if (Ipv6OptQsUnused != 0) hash ^= Ipv6OptQsUnused.GetHashCode();
      if (Ipv6OptQsNonce != 0) hash ^= Ipv6OptQsNonce.GetHashCode();
      if (Ipv6OptQsReserved != 0) hash ^= Ipv6OptQsReserved.GetHashCode();
      if (Ipv6OptMipv6HomeAddress.Length != 0) hash ^= Ipv6OptMipv6HomeAddress.GetHashCode();
      if (Ipv6OptRplFlag != 0) hash ^= Ipv6OptRplFlag.GetHashCode();
      if (Ipv6OptRplFlagO != false) hash ^= Ipv6OptRplFlagO.GetHashCode();
      if (Ipv6OptRplFlagR != false) hash ^= Ipv6OptRplFlagR.GetHashCode();
      if (Ipv6OptRplFlagF != false) hash ^= Ipv6OptRplFlagF.GetHashCode();
      if (Ipv6OptRplFlagRsv != 0) hash ^= Ipv6OptRplFlagRsv.GetHashCode();
      if (Ipv6OptRplInstanceId != 0) hash ^= Ipv6OptRplInstanceId.GetHashCode();
      if (Ipv6OptRplSenderRank != 0) hash ^= Ipv6OptRplSenderRank.GetHashCode();
      if (Ipv6OptIlnpNonce.Length != 0) hash ^= Ipv6OptIlnpNonce.GetHashCode();
      if (Ipv6OptLioLength != 0) hash ^= Ipv6OptLioLength.GetHashCode();
      if (Ipv6OptLioLineId.Length != 0) hash ^= Ipv6OptLioLineId.GetHashCode();
      if (Ipv6OptMplFlag != 0) hash ^= Ipv6OptMplFlag.GetHashCode();
      if (Ipv6OptMplFlagS != 0) hash ^= Ipv6OptMplFlagS.GetHashCode();
      if (Ipv6OptMplFlagM != false) hash ^= Ipv6OptMplFlagM.GetHashCode();
      if (Ipv6OptMplFlagV != false) hash ^= Ipv6OptMplFlagV.GetHashCode();
      if (Ipv6OptMplFlagRsv != 0) hash ^= Ipv6OptMplFlagRsv.GetHashCode();
      if (Ipv6OptMplSequence != 0) hash ^= Ipv6OptMplSequence.GetHashCode();
      if (Ipv6OptMplSeedId.Length != 0) hash ^= Ipv6OptMplSeedId.GetHashCode();
      if (Ipv6OptDffFlags != 0) hash ^= Ipv6OptDffFlags.GetHashCode();
      if (Ipv6OptDffFlagVer != 0) hash ^= Ipv6OptDffFlagVer.GetHashCode();
      if (Ipv6OptDffFlagDup != false) hash ^= Ipv6OptDffFlagDup.GetHashCode();
      if (Ipv6OptDffFlagRet != false) hash ^= Ipv6OptDffFlagRet.GetHashCode();
      if (Ipv6OptDffFlagRsv != 0) hash ^= Ipv6OptDffFlagRsv.GetHashCode();
      if (Ipv6OptDffSequenceNumber != 0) hash ^= Ipv6OptDffSequenceNumber.GetHashCode();
      if (Ipv6OptExperimental.Length != 0) hash ^= Ipv6OptExperimental.GetHashCode();
      if (Ipv6OptUnknownData.Length != 0) hash ^= Ipv6OptUnknownData.GetHashCode();
      if (Ipv6OptUnknown.Length != 0) hash ^= Ipv6OptUnknown.GetHashCode();
      if (Ipv6Fragment != 0L) hash ^= Ipv6Fragment.GetHashCode();
      if (Ipv6FragmentOverlap != false) hash ^= Ipv6FragmentOverlap.GetHashCode();
      if (Ipv6FragmentOverlapConflict != false) hash ^= Ipv6FragmentOverlapConflict.GetHashCode();
      if (Ipv6FragmentMultipletails != false) hash ^= Ipv6FragmentMultipletails.GetHashCode();
      if (Ipv6FragmentToolongfragment != false) hash ^= Ipv6FragmentToolongfragment.GetHashCode();
      if (Ipv6FragmentError != 0L) hash ^= Ipv6FragmentError.GetHashCode();
      if (Ipv6FragmentCount != 0) hash ^= Ipv6FragmentCount.GetHashCode();
      if (Ipv6Fragments != 0) hash ^= Ipv6Fragments.GetHashCode();
      if (Ipv6ReassembledIn != 0L) hash ^= Ipv6ReassembledIn.GetHashCode();
      if (Ipv6ReassembledLength != 0) hash ^= Ipv6ReassembledLength.GetHashCode();
      if (Ipv6ReassembledData.Length != 0) hash ^= Ipv6ReassembledData.GetHashCode();
      if (Ipv6HopoptsNxt != 0) hash ^= Ipv6HopoptsNxt.GetHashCode();
      if (Ipv6HopoptsLen != 0) hash ^= Ipv6HopoptsLen.GetHashCode();
      if (Ipv6HopoptsLenOct != 0) hash ^= Ipv6HopoptsLenOct.GetHashCode();
      if (Ipv6DstoptsNxt != 0) hash ^= Ipv6DstoptsNxt.GetHashCode();
      if (Ipv6DstoptsLen != 0) hash ^= Ipv6DstoptsLen.GetHashCode();
      if (Ipv6DstoptsLenOct != 0) hash ^= Ipv6DstoptsLenOct.GetHashCode();
      if (Ipv6RoutingNxt != 0) hash ^= Ipv6RoutingNxt.GetHashCode();
      if (Ipv6RoutingLen != 0) hash ^= Ipv6RoutingLen.GetHashCode();
      if (Ipv6RoutingLenOct != 0) hash ^= Ipv6RoutingLenOct.GetHashCode();
      if (Ipv6RoutingType != 0) hash ^= Ipv6RoutingType.GetHashCode();
      if (Ipv6RoutingSegleft != 0) hash ^= Ipv6RoutingSegleft.GetHashCode();
      if (Ipv6RoutingUnknownData.Length != 0) hash ^= Ipv6RoutingUnknownData.GetHashCode();
      if (Ipv6RoutingSrcReserved.Length != 0) hash ^= Ipv6RoutingSrcReserved.GetHashCode();
      if (Ipv6RoutingSrcAddr.Length != 0) hash ^= Ipv6RoutingSrcAddr.GetHashCode();
      if (Ipv6RoutingMipv6Reserved.Length != 0) hash ^= Ipv6RoutingMipv6Reserved.GetHashCode();
      if (Ipv6RoutingMipv6HomeAddress.Length != 0) hash ^= Ipv6RoutingMipv6HomeAddress.GetHashCode();
      if (Ipv6RoutingRplCmpri != 0) hash ^= Ipv6RoutingRplCmpri.GetHashCode();
      if (Ipv6RoutingRplCmpre != 0) hash ^= Ipv6RoutingRplCmpre.GetHashCode();
      if (Ipv6RoutingRplPad != 0) hash ^= Ipv6RoutingRplPad.GetHashCode();
      if (Ipv6RoutingRplReserved != 0) hash ^= Ipv6RoutingRplReserved.GetHashCode();
      if (Ipv6RoutingRplAddrCount != 0) hash ^= Ipv6RoutingRplAddrCount.GetHashCode();
      if (Ipv6RoutingRplAddress.Length != 0) hash ^= Ipv6RoutingRplAddress.GetHashCode();
      if (Ipv6RoutingRplFullAddress.Length != 0) hash ^= Ipv6RoutingRplFullAddress.GetHashCode();
      if (Ipv6RoutingSrhFirstSegment != 0) hash ^= Ipv6RoutingSrhFirstSegment.GetHashCode();
      if (Ipv6RoutingSrhFlags != 0) hash ^= Ipv6RoutingSrhFlags.GetHashCode();
      if (Ipv6RoutingSrhFlagUnused1 != 0) hash ^= Ipv6RoutingSrhFlagUnused1.GetHashCode();
      if (Ipv6RoutingSrhFlagP != false) hash ^= Ipv6RoutingSrhFlagP.GetHashCode();
      if (Ipv6RoutingSrhFlagO != false) hash ^= Ipv6RoutingSrhFlagO.GetHashCode();
      if (Ipv6RoutingSrhFlagA != false) hash ^= Ipv6RoutingSrhFlagA.GetHashCode();
      if (Ipv6RoutingSrhFlagH != false) hash ^= Ipv6RoutingSrhFlagH.GetHashCode();
      if (Ipv6RoutingSrhFlagUnused2 != 0) hash ^= Ipv6RoutingSrhFlagUnused2.GetHashCode();
      if (Ipv6RoutingSrhReserved.Length != 0) hash ^= Ipv6RoutingSrhReserved.GetHashCode();
      if (Ipv6RoutingSrhAddr.Length != 0) hash ^= Ipv6RoutingSrhAddr.GetHashCode();
      if (Ipv6FraghdrNxt != 0) hash ^= Ipv6FraghdrNxt.GetHashCode();
      if (Ipv6FraghdrReservedOctet != 0) hash ^= Ipv6FraghdrReservedOctet.GetHashCode();
      if (Ipv6FraghdrOffset != 0) hash ^= Ipv6FraghdrOffset.GetHashCode();
      if (Ipv6FraghdrReservedBits != 0) hash ^= Ipv6FraghdrReservedBits.GetHashCode();
      if (Ipv6FraghdrMore != false) hash ^= Ipv6FraghdrMore.GetHashCode();
      if (Ipv6FraghdrIdent != 0) hash ^= Ipv6FraghdrIdent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ipv6Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ipv6Version);
      }
      if (Ipv6Tclass != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ipv6Tclass);
      }
      if (Ipv6TclassDscp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ipv6TclassDscp);
      }
      if (Ipv6TclassEcn != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Ipv6TclassEcn);
      }
      if (Ipv6Flow != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Ipv6Flow);
      }
      if (Ipv6Plen != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ipv6Plen);
      }
      if (Ipv6Nxt != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Ipv6Nxt);
      }
      if (Ipv6Hlim != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Ipv6Hlim);
      }
      if (Ipv6Src.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Ipv6Src);
      }
      if (Ipv6SrcHost.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Ipv6SrcHost);
      }
      if (Ipv6SrcSaMac.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Ipv6SrcSaMac);
      }
      if (Ipv6SrcIsatapIpv4.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(Ipv6SrcIsatapIpv4);
      }
      if (Ipv6Src6To4GwIpv4.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(Ipv6Src6To4GwIpv4);
      }
      if (Ipv6Src6To4SlaId != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Ipv6Src6To4SlaId);
      }
      if (Ipv6SrcTsIpv4.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Ipv6SrcTsIpv4);
      }
      if (Ipv6SrcTcPort != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Ipv6SrcTcPort);
      }
      if (Ipv6SrcTcIpv4.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(Ipv6SrcTcIpv4);
      }
      if (Ipv6SrcEmbedIpv4.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(Ipv6SrcEmbedIpv4);
      }
      if (Ipv6Dst.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(Ipv6Dst);
      }
      if (Ipv6DstHost.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Ipv6DstHost);
      }
      if (Ipv6DstSaMac.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(Ipv6DstSaMac);
      }
      if (Ipv6DstIsatapIpv4.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(Ipv6DstIsatapIpv4);
      }
      if (Ipv6Dst6To4GwIpv4.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(Ipv6Dst6To4GwIpv4);
      }
      if (Ipv6Dst6To4SlaId != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Ipv6Dst6To4SlaId);
      }
      if (Ipv6DstTsIpv4.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(Ipv6DstTsIpv4);
      }
      if (Ipv6DstTcPort != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Ipv6DstTcPort);
      }
      if (Ipv6DstTcIpv4.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteBytes(Ipv6DstTcIpv4);
      }
      if (Ipv6DstEmbedIpv4.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteBytes(Ipv6DstEmbedIpv4);
      }
      if (Ipv6Addr.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteBytes(Ipv6Addr);
      }
      if (Ipv6Host.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Ipv6Host);
      }
      if (Ipv6SaMac.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteBytes(Ipv6SaMac);
      }
      if (Ipv6IsatapIpv4.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteBytes(Ipv6IsatapIpv4);
      }
      if (Ipv66To4GwIpv4.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteBytes(Ipv66To4GwIpv4);
      }
      if (Ipv66To4SlaId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Ipv66To4SlaId);
      }
      if (Ipv6TsIpv4.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteBytes(Ipv6TsIpv4);
      }
      if (Ipv6TcPort != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Ipv6TcPort);
      }
      if (Ipv6TcIpv4.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteBytes(Ipv6TcIpv4);
      }
      if (Ipv6EmbedIpv4.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteBytes(Ipv6EmbedIpv4);
      }
      if (Ipv6GeoipCountry.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(Ipv6GeoipCountry);
      }
      if (Ipv6GeoipCity.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Ipv6GeoipCity);
      }
      if (Ipv6GeoipOrg.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(Ipv6GeoipOrg);
      }
      if (Ipv6GeoipIsp.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Ipv6GeoipIsp);
      }
      if (Ipv6GeoipAsnum.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(Ipv6GeoipAsnum);
      }
      if (Ipv6GeoipLat != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(Ipv6GeoipLat);
      }
      if (Ipv6GeoipLon != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(Ipv6GeoipLon);
      }
      if (Ipv6GeoipSrcCountry.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(Ipv6GeoipSrcCountry);
      }
      if (Ipv6GeoipSrcCity.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Ipv6GeoipSrcCity);
      }
      if (Ipv6GeoipSrcOrg.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Ipv6GeoipSrcOrg);
      }
      if (Ipv6GeoipSrcIsp.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Ipv6GeoipSrcIsp);
      }
      if (Ipv6GeoipSrcAsnum.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Ipv6GeoipSrcAsnum);
      }
      if (Ipv6GeoipSrcLat != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(Ipv6GeoipSrcLat);
      }
      if (Ipv6GeoipSrcLon != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(Ipv6GeoipSrcLon);
      }
      if (Ipv6GeoipDstCountry.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(Ipv6GeoipDstCountry);
      }
      if (Ipv6GeoipDstCity.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Ipv6GeoipDstCity);
      }
      if (Ipv6GeoipDstOrg.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Ipv6GeoipDstOrg);
      }
      if (Ipv6GeoipDstIsp.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Ipv6GeoipDstIsp);
      }
      if (Ipv6GeoipDstAsnum.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Ipv6GeoipDstAsnum);
      }
      if (Ipv6GeoipDstLat != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(Ipv6GeoipDstLat);
      }
      if (Ipv6GeoipDstLon != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(Ipv6GeoipDstLon);
      }
      if (Ipv6Opt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(Ipv6Opt);
      }
      if (Ipv6OptType != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(Ipv6OptType);
      }
      if (Ipv6OptTypeAction != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(Ipv6OptTypeAction);
      }
      if (Ipv6OptTypeChange != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(Ipv6OptTypeChange);
      }
      if (Ipv6OptTypeRest != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(Ipv6OptTypeRest);
      }
      if (Ipv6OptLength != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(Ipv6OptLength);
      }
      if (Ipv6OptPad1 != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(Ipv6OptPad1);
      }
      if (Ipv6OptPadn.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteBytes(Ipv6OptPadn);
      }
      if (Ipv6OptRouterAlert != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(Ipv6OptRouterAlert);
      }
      if (Ipv6OptTel != 0) {
        output.WriteRawTag(168, 4);
        output.WriteUInt32(Ipv6OptTel);
      }
      if (Ipv6OptJumbo != 0) {
        output.WriteRawTag(176, 4);
        output.WriteUInt32(Ipv6OptJumbo);
      }
      if (Ipv6OptCalipsoDoi != 0) {
        output.WriteRawTag(184, 4);
        output.WriteUInt32(Ipv6OptCalipsoDoi);
      }
      if (Ipv6OptCalipsoCmptLength != 0) {
        output.WriteRawTag(192, 4);
        output.WriteUInt32(Ipv6OptCalipsoCmptLength);
      }
      if (Ipv6OptCalipsoSensLevel != 0) {
        output.WriteRawTag(200, 4);
        output.WriteUInt32(Ipv6OptCalipsoSensLevel);
      }
      if (Ipv6OptCalipsoChecksum != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(Ipv6OptCalipsoChecksum);
      }
      if (Ipv6OptCalipsoCmptBitmap.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteBytes(Ipv6OptCalipsoCmptBitmap);
      }
      if (Ipv6OptSmfDpdHashBit != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(Ipv6OptSmfDpdHashBit);
      }
      if (Ipv6OptSmfDpdTidType != 0) {
        output.WriteRawTag(232, 4);
        output.WriteUInt32(Ipv6OptSmfDpdTidType);
      }
      if (Ipv6OptSmfDpdTidLen != 0) {
        output.WriteRawTag(240, 4);
        output.WriteUInt32(Ipv6OptSmfDpdTidLen);
      }
      if (Ipv6OptSmfDpdTaggerId.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteBytes(Ipv6OptSmfDpdTaggerId);
      }
      if (Ipv6OptSmfDpdIdent.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteBytes(Ipv6OptSmfDpdIdent);
      }
      if (Ipv6OptSmfDpdHav.Length != 0) {
        output.WriteRawTag(138, 5);
        output.WriteBytes(Ipv6OptSmfDpdHav);
      }
      if (Ipv6OptPdmScaleDtlr != 0) {
        output.WriteRawTag(144, 5);
        output.WriteUInt32(Ipv6OptPdmScaleDtlr);
      }
      if (Ipv6OptPdmScaleDtls != 0) {
        output.WriteRawTag(152, 5);
        output.WriteUInt32(Ipv6OptPdmScaleDtls);
      }
      if (Ipv6OptPdmPsnThisPkt != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(Ipv6OptPdmPsnThisPkt);
      }
      if (Ipv6OptPdmPsnLastRecv != 0) {
        output.WriteRawTag(168, 5);
        output.WriteUInt32(Ipv6OptPdmPsnLastRecv);
      }
      if (Ipv6OptPdmDeltaLastRecv != 0) {
        output.WriteRawTag(176, 5);
        output.WriteUInt32(Ipv6OptPdmDeltaLastRecv);
      }
      if (Ipv6OptPdmDeltaLastSent != 0) {
        output.WriteRawTag(184, 5);
        output.WriteUInt32(Ipv6OptPdmDeltaLastSent);
      }
      if (Ipv6OptQsFunc != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(Ipv6OptQsFunc);
      }
      if (Ipv6OptQsRate != 0) {
        output.WriteRawTag(200, 5);
        output.WriteUInt32(Ipv6OptQsRate);
      }
      if (Ipv6OptQsTtl != 0) {
        output.WriteRawTag(208, 5);
        output.WriteUInt32(Ipv6OptQsTtl);
      }
      if (Ipv6OptQsTtlDiff != 0) {
        output.WriteRawTag(216, 5);
        output.WriteUInt32(Ipv6OptQsTtlDiff);
      }
      if (Ipv6OptQsUnused != 0) {
        output.WriteRawTag(224, 5);
        output.WriteUInt32(Ipv6OptQsUnused);
      }
      if (Ipv6OptQsNonce != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(Ipv6OptQsNonce);
      }
      if (Ipv6OptQsReserved != 0) {
        output.WriteRawTag(240, 5);
        output.WriteUInt32(Ipv6OptQsReserved);
      }
      if (Ipv6OptMipv6HomeAddress.Length != 0) {
        output.WriteRawTag(250, 5);
        output.WriteBytes(Ipv6OptMipv6HomeAddress);
      }
      if (Ipv6OptRplFlag != 0) {
        output.WriteRawTag(128, 6);
        output.WriteUInt32(Ipv6OptRplFlag);
      }
      if (Ipv6OptRplFlagO != false) {
        output.WriteRawTag(136, 6);
        output.WriteBool(Ipv6OptRplFlagO);
      }
      if (Ipv6OptRplFlagR != false) {
        output.WriteRawTag(144, 6);
        output.WriteBool(Ipv6OptRplFlagR);
      }
      if (Ipv6OptRplFlagF != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(Ipv6OptRplFlagF);
      }
      if (Ipv6OptRplFlagRsv != 0) {
        output.WriteRawTag(160, 6);
        output.WriteUInt32(Ipv6OptRplFlagRsv);
      }
      if (Ipv6OptRplInstanceId != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(Ipv6OptRplInstanceId);
      }
      if (Ipv6OptRplSenderRank != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(Ipv6OptRplSenderRank);
      }
      if (Ipv6OptIlnpNonce.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteBytes(Ipv6OptIlnpNonce);
      }
      if (Ipv6OptLioLength != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(Ipv6OptLioLength);
      }
      if (Ipv6OptLioLineId.Length != 0) {
        output.WriteRawTag(202, 6);
        output.WriteString(Ipv6OptLioLineId);
      }
      if (Ipv6OptMplFlag != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(Ipv6OptMplFlag);
      }
      if (Ipv6OptMplFlagS != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(Ipv6OptMplFlagS);
      }
      if (Ipv6OptMplFlagM != false) {
        output.WriteRawTag(224, 6);
        output.WriteBool(Ipv6OptMplFlagM);
      }
      if (Ipv6OptMplFlagV != false) {
        output.WriteRawTag(232, 6);
        output.WriteBool(Ipv6OptMplFlagV);
      }
      if (Ipv6OptMplFlagRsv != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(Ipv6OptMplFlagRsv);
      }
      if (Ipv6OptMplSequence != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(Ipv6OptMplSequence);
      }
      if (Ipv6OptMplSeedId.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteBytes(Ipv6OptMplSeedId);
      }
      if (Ipv6OptDffFlags != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(Ipv6OptDffFlags);
      }
      if (Ipv6OptDffFlagVer != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Ipv6OptDffFlagVer);
      }
      if (Ipv6OptDffFlagDup != false) {
        output.WriteRawTag(152, 7);
        output.WriteBool(Ipv6OptDffFlagDup);
      }
      if (Ipv6OptDffFlagRet != false) {
        output.WriteRawTag(160, 7);
        output.WriteBool(Ipv6OptDffFlagRet);
      }
      if (Ipv6OptDffFlagRsv != 0) {
        output.WriteRawTag(168, 7);
        output.WriteUInt32(Ipv6OptDffFlagRsv);
      }
      if (Ipv6OptDffSequenceNumber != 0) {
        output.WriteRawTag(176, 7);
        output.WriteUInt32(Ipv6OptDffSequenceNumber);
      }
      if (Ipv6OptExperimental.Length != 0) {
        output.WriteRawTag(186, 7);
        output.WriteBytes(Ipv6OptExperimental);
      }
      if (Ipv6OptUnknownData.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteBytes(Ipv6OptUnknownData);
      }
      if (Ipv6OptUnknown.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteBytes(Ipv6OptUnknown);
      }
      if (Ipv6Fragment != 0L) {
        output.WriteRawTag(208, 7);
        output.WriteInt64(Ipv6Fragment);
      }
      if (Ipv6FragmentOverlap != false) {
        output.WriteRawTag(216, 7);
        output.WriteBool(Ipv6FragmentOverlap);
      }
      if (Ipv6FragmentOverlapConflict != false) {
        output.WriteRawTag(224, 7);
        output.WriteBool(Ipv6FragmentOverlapConflict);
      }
      if (Ipv6FragmentMultipletails != false) {
        output.WriteRawTag(232, 7);
        output.WriteBool(Ipv6FragmentMultipletails);
      }
      if (Ipv6FragmentToolongfragment != false) {
        output.WriteRawTag(240, 7);
        output.WriteBool(Ipv6FragmentToolongfragment);
      }
      if (Ipv6FragmentError != 0L) {
        output.WriteRawTag(248, 7);
        output.WriteInt64(Ipv6FragmentError);
      }
      if (Ipv6FragmentCount != 0) {
        output.WriteRawTag(128, 8);
        output.WriteUInt32(Ipv6FragmentCount);
      }
      if (Ipv6Fragments != 0) {
        output.WriteRawTag(136, 8);
        output.WriteInt32(Ipv6Fragments);
      }
      if (Ipv6ReassembledIn != 0L) {
        output.WriteRawTag(144, 8);
        output.WriteInt64(Ipv6ReassembledIn);
      }
      if (Ipv6ReassembledLength != 0) {
        output.WriteRawTag(152, 8);
        output.WriteUInt32(Ipv6ReassembledLength);
      }
      if (Ipv6ReassembledData.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteBytes(Ipv6ReassembledData);
      }
      if (Ipv6HopoptsNxt != 0) {
        output.WriteRawTag(168, 8);
        output.WriteUInt32(Ipv6HopoptsNxt);
      }
      if (Ipv6HopoptsLen != 0) {
        output.WriteRawTag(176, 8);
        output.WriteUInt32(Ipv6HopoptsLen);
      }
      if (Ipv6HopoptsLenOct != 0) {
        output.WriteRawTag(184, 8);
        output.WriteUInt32(Ipv6HopoptsLenOct);
      }
      if (Ipv6DstoptsNxt != 0) {
        output.WriteRawTag(192, 8);
        output.WriteUInt32(Ipv6DstoptsNxt);
      }
      if (Ipv6DstoptsLen != 0) {
        output.WriteRawTag(200, 8);
        output.WriteUInt32(Ipv6DstoptsLen);
      }
      if (Ipv6DstoptsLenOct != 0) {
        output.WriteRawTag(208, 8);
        output.WriteUInt32(Ipv6DstoptsLenOct);
      }
      if (Ipv6RoutingNxt != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(Ipv6RoutingNxt);
      }
      if (Ipv6RoutingLen != 0) {
        output.WriteRawTag(224, 8);
        output.WriteUInt32(Ipv6RoutingLen);
      }
      if (Ipv6RoutingLenOct != 0) {
        output.WriteRawTag(232, 8);
        output.WriteUInt32(Ipv6RoutingLenOct);
      }
      if (Ipv6RoutingType != 0) {
        output.WriteRawTag(240, 8);
        output.WriteUInt32(Ipv6RoutingType);
      }
      if (Ipv6RoutingSegleft != 0) {
        output.WriteRawTag(248, 8);
        output.WriteUInt32(Ipv6RoutingSegleft);
      }
      if (Ipv6RoutingUnknownData.Length != 0) {
        output.WriteRawTag(130, 9);
        output.WriteBytes(Ipv6RoutingUnknownData);
      }
      if (Ipv6RoutingSrcReserved.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteBytes(Ipv6RoutingSrcReserved);
      }
      if (Ipv6RoutingSrcAddr.Length != 0) {
        output.WriteRawTag(146, 9);
        output.WriteBytes(Ipv6RoutingSrcAddr);
      }
      if (Ipv6RoutingMipv6Reserved.Length != 0) {
        output.WriteRawTag(154, 9);
        output.WriteBytes(Ipv6RoutingMipv6Reserved);
      }
      if (Ipv6RoutingMipv6HomeAddress.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteBytes(Ipv6RoutingMipv6HomeAddress);
      }
      if (Ipv6RoutingRplCmpri != 0) {
        output.WriteRawTag(168, 9);
        output.WriteUInt32(Ipv6RoutingRplCmpri);
      }
      if (Ipv6RoutingRplCmpre != 0) {
        output.WriteRawTag(176, 9);
        output.WriteUInt32(Ipv6RoutingRplCmpre);
      }
      if (Ipv6RoutingRplPad != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(Ipv6RoutingRplPad);
      }
      if (Ipv6RoutingRplReserved != 0) {
        output.WriteRawTag(192, 9);
        output.WriteUInt32(Ipv6RoutingRplReserved);
      }
      if (Ipv6RoutingRplAddrCount != 0) {
        output.WriteRawTag(200, 9);
        output.WriteInt32(Ipv6RoutingRplAddrCount);
      }
      if (Ipv6RoutingRplAddress.Length != 0) {
        output.WriteRawTag(210, 9);
        output.WriteBytes(Ipv6RoutingRplAddress);
      }
      if (Ipv6RoutingRplFullAddress.Length != 0) {
        output.WriteRawTag(218, 9);
        output.WriteBytes(Ipv6RoutingRplFullAddress);
      }
      if (Ipv6RoutingSrhFirstSegment != 0) {
        output.WriteRawTag(224, 9);
        output.WriteUInt32(Ipv6RoutingSrhFirstSegment);
      }
      if (Ipv6RoutingSrhFlags != 0) {
        output.WriteRawTag(232, 9);
        output.WriteUInt32(Ipv6RoutingSrhFlags);
      }
      if (Ipv6RoutingSrhFlagUnused1 != 0) {
        output.WriteRawTag(240, 9);
        output.WriteUInt32(Ipv6RoutingSrhFlagUnused1);
      }
      if (Ipv6RoutingSrhFlagP != false) {
        output.WriteRawTag(248, 9);
        output.WriteBool(Ipv6RoutingSrhFlagP);
      }
      if (Ipv6RoutingSrhFlagO != false) {
        output.WriteRawTag(128, 10);
        output.WriteBool(Ipv6RoutingSrhFlagO);
      }
      if (Ipv6RoutingSrhFlagA != false) {
        output.WriteRawTag(136, 10);
        output.WriteBool(Ipv6RoutingSrhFlagA);
      }
      if (Ipv6RoutingSrhFlagH != false) {
        output.WriteRawTag(144, 10);
        output.WriteBool(Ipv6RoutingSrhFlagH);
      }
      if (Ipv6RoutingSrhFlagUnused2 != 0) {
        output.WriteRawTag(152, 10);
        output.WriteUInt32(Ipv6RoutingSrhFlagUnused2);
      }
      if (Ipv6RoutingSrhReserved.Length != 0) {
        output.WriteRawTag(162, 10);
        output.WriteBytes(Ipv6RoutingSrhReserved);
      }
      if (Ipv6RoutingSrhAddr.Length != 0) {
        output.WriteRawTag(170, 10);
        output.WriteBytes(Ipv6RoutingSrhAddr);
      }
      if (Ipv6FraghdrNxt != 0) {
        output.WriteRawTag(176, 10);
        output.WriteUInt32(Ipv6FraghdrNxt);
      }
      if (Ipv6FraghdrReservedOctet != 0) {
        output.WriteRawTag(184, 10);
        output.WriteUInt32(Ipv6FraghdrReservedOctet);
      }
      if (Ipv6FraghdrOffset != 0) {
        output.WriteRawTag(192, 10);
        output.WriteUInt32(Ipv6FraghdrOffset);
      }
      if (Ipv6FraghdrReservedBits != 0) {
        output.WriteRawTag(200, 10);
        output.WriteUInt32(Ipv6FraghdrReservedBits);
      }
      if (Ipv6FraghdrMore != false) {
        output.WriteRawTag(208, 10);
        output.WriteBool(Ipv6FraghdrMore);
      }
      if (Ipv6FraghdrIdent != 0) {
        output.WriteRawTag(216, 10);
        output.WriteUInt32(Ipv6FraghdrIdent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ipv6Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Version);
      }
      if (Ipv6Tclass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Tclass);
      }
      if (Ipv6TclassDscp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6TclassDscp);
      }
      if (Ipv6TclassEcn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6TclassEcn);
      }
      if (Ipv6Flow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Flow);
      }
      if (Ipv6Plen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Plen);
      }
      if (Ipv6Nxt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Nxt);
      }
      if (Ipv6Hlim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Hlim);
      }
      if (Ipv6Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6Src);
      }
      if (Ipv6SrcHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ipv6SrcHost);
      }
      if (Ipv6SrcSaMac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SrcSaMac);
      }
      if (Ipv6SrcIsatapIpv4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SrcIsatapIpv4);
      }
      if (Ipv6Src6To4GwIpv4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6Src6To4GwIpv4);
      }
      if (Ipv6Src6To4SlaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Src6To4SlaId);
      }
      if (Ipv6SrcTsIpv4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SrcTsIpv4);
      }
      if (Ipv6SrcTcPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6SrcTcPort);
      }
      if (Ipv6SrcTcIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SrcTcIpv4);
      }
      if (Ipv6SrcEmbedIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SrcEmbedIpv4);
      }
      if (Ipv6Dst.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6Dst);
      }
      if (Ipv6DstHost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6DstHost);
      }
      if (Ipv6DstSaMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6DstSaMac);
      }
      if (Ipv6DstIsatapIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6DstIsatapIpv4);
      }
      if (Ipv6Dst6To4GwIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6Dst6To4GwIpv4);
      }
      if (Ipv6Dst6To4SlaId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6Dst6To4SlaId);
      }
      if (Ipv6DstTsIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6DstTsIpv4);
      }
      if (Ipv6DstTcPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6DstTcPort);
      }
      if (Ipv6DstTcIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6DstTcIpv4);
      }
      if (Ipv6DstEmbedIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6DstEmbedIpv4);
      }
      if (Ipv6Addr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6Addr);
      }
      if (Ipv6Host.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6Host);
      }
      if (Ipv6SaMac.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6SaMac);
      }
      if (Ipv6IsatapIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6IsatapIpv4);
      }
      if (Ipv66To4GwIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv66To4GwIpv4);
      }
      if (Ipv66To4SlaId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv66To4SlaId);
      }
      if (Ipv6TsIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6TsIpv4);
      }
      if (Ipv6TcPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6TcPort);
      }
      if (Ipv6TcIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6TcIpv4);
      }
      if (Ipv6EmbedIpv4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6EmbedIpv4);
      }
      if (Ipv6GeoipCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipCountry);
      }
      if (Ipv6GeoipCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipCity);
      }
      if (Ipv6GeoipOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipOrg);
      }
      if (Ipv6GeoipIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipIsp);
      }
      if (Ipv6GeoipAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipAsnum);
      }
      if (Ipv6GeoipLat != 0D) {
        size += 2 + 8;
      }
      if (Ipv6GeoipLon != 0D) {
        size += 2 + 8;
      }
      if (Ipv6GeoipSrcCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipSrcCountry);
      }
      if (Ipv6GeoipSrcCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipSrcCity);
      }
      if (Ipv6GeoipSrcOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipSrcOrg);
      }
      if (Ipv6GeoipSrcIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipSrcIsp);
      }
      if (Ipv6GeoipSrcAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipSrcAsnum);
      }
      if (Ipv6GeoipSrcLat != 0D) {
        size += 2 + 8;
      }
      if (Ipv6GeoipSrcLon != 0D) {
        size += 2 + 8;
      }
      if (Ipv6GeoipDstCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipDstCountry);
      }
      if (Ipv6GeoipDstCity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipDstCity);
      }
      if (Ipv6GeoipDstOrg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipDstOrg);
      }
      if (Ipv6GeoipDstIsp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipDstIsp);
      }
      if (Ipv6GeoipDstAsnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6GeoipDstAsnum);
      }
      if (Ipv6GeoipDstLat != 0D) {
        size += 2 + 8;
      }
      if (Ipv6GeoipDstLon != 0D) {
        size += 2 + 8;
      }
      if (Ipv6Opt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ipv6Opt);
      }
      if (Ipv6OptType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptType);
      }
      if (Ipv6OptTypeAction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptTypeAction);
      }
      if (Ipv6OptTypeChange != false) {
        size += 2 + 1;
      }
      if (Ipv6OptTypeRest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptTypeRest);
      }
      if (Ipv6OptLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptLength);
      }
      if (Ipv6OptPad1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ipv6OptPad1);
      }
      if (Ipv6OptPadn.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptPadn);
      }
      if (Ipv6OptRouterAlert != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptRouterAlert);
      }
      if (Ipv6OptTel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptTel);
      }
      if (Ipv6OptJumbo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptJumbo);
      }
      if (Ipv6OptCalipsoDoi != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptCalipsoDoi);
      }
      if (Ipv6OptCalipsoCmptLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptCalipsoCmptLength);
      }
      if (Ipv6OptCalipsoSensLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptCalipsoSensLevel);
      }
      if (Ipv6OptCalipsoChecksum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptCalipsoChecksum);
      }
      if (Ipv6OptCalipsoCmptBitmap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptCalipsoCmptBitmap);
      }
      if (Ipv6OptSmfDpdHashBit != false) {
        size += 2 + 1;
      }
      if (Ipv6OptSmfDpdTidType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptSmfDpdTidType);
      }
      if (Ipv6OptSmfDpdTidLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptSmfDpdTidLen);
      }
      if (Ipv6OptSmfDpdTaggerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptSmfDpdTaggerId);
      }
      if (Ipv6OptSmfDpdIdent.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptSmfDpdIdent);
      }
      if (Ipv6OptSmfDpdHav.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptSmfDpdHav);
      }
      if (Ipv6OptPdmScaleDtlr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmScaleDtlr);
      }
      if (Ipv6OptPdmScaleDtls != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmScaleDtls);
      }
      if (Ipv6OptPdmPsnThisPkt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmPsnThisPkt);
      }
      if (Ipv6OptPdmPsnLastRecv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmPsnLastRecv);
      }
      if (Ipv6OptPdmDeltaLastRecv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmDeltaLastRecv);
      }
      if (Ipv6OptPdmDeltaLastSent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptPdmDeltaLastSent);
      }
      if (Ipv6OptQsFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsFunc);
      }
      if (Ipv6OptQsRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsRate);
      }
      if (Ipv6OptQsTtl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsTtl);
      }
      if (Ipv6OptQsTtlDiff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsTtlDiff);
      }
      if (Ipv6OptQsUnused != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsUnused);
      }
      if (Ipv6OptQsNonce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsNonce);
      }
      if (Ipv6OptQsReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptQsReserved);
      }
      if (Ipv6OptMipv6HomeAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptMipv6HomeAddress);
      }
      if (Ipv6OptRplFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptRplFlag);
      }
      if (Ipv6OptRplFlagO != false) {
        size += 2 + 1;
      }
      if (Ipv6OptRplFlagR != false) {
        size += 2 + 1;
      }
      if (Ipv6OptRplFlagF != false) {
        size += 2 + 1;
      }
      if (Ipv6OptRplFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptRplFlagRsv);
      }
      if (Ipv6OptRplInstanceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptRplInstanceId);
      }
      if (Ipv6OptRplSenderRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptRplSenderRank);
      }
      if (Ipv6OptIlnpNonce.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptIlnpNonce);
      }
      if (Ipv6OptLioLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptLioLength);
      }
      if (Ipv6OptLioLineId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ipv6OptLioLineId);
      }
      if (Ipv6OptMplFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptMplFlag);
      }
      if (Ipv6OptMplFlagS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptMplFlagS);
      }
      if (Ipv6OptMplFlagM != false) {
        size += 2 + 1;
      }
      if (Ipv6OptMplFlagV != false) {
        size += 2 + 1;
      }
      if (Ipv6OptMplFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptMplFlagRsv);
      }
      if (Ipv6OptMplSequence != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptMplSequence);
      }
      if (Ipv6OptMplSeedId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptMplSeedId);
      }
      if (Ipv6OptDffFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptDffFlags);
      }
      if (Ipv6OptDffFlagVer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptDffFlagVer);
      }
      if (Ipv6OptDffFlagDup != false) {
        size += 2 + 1;
      }
      if (Ipv6OptDffFlagRet != false) {
        size += 2 + 1;
      }
      if (Ipv6OptDffFlagRsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptDffFlagRsv);
      }
      if (Ipv6OptDffSequenceNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6OptDffSequenceNumber);
      }
      if (Ipv6OptExperimental.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptExperimental);
      }
      if (Ipv6OptUnknownData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptUnknownData);
      }
      if (Ipv6OptUnknown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6OptUnknown);
      }
      if (Ipv6Fragment != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ipv6Fragment);
      }
      if (Ipv6FragmentOverlap != false) {
        size += 2 + 1;
      }
      if (Ipv6FragmentOverlapConflict != false) {
        size += 2 + 1;
      }
      if (Ipv6FragmentMultipletails != false) {
        size += 2 + 1;
      }
      if (Ipv6FragmentToolongfragment != false) {
        size += 2 + 1;
      }
      if (Ipv6FragmentError != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ipv6FragmentError);
      }
      if (Ipv6FragmentCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FragmentCount);
      }
      if (Ipv6Fragments != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ipv6Fragments);
      }
      if (Ipv6ReassembledIn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Ipv6ReassembledIn);
      }
      if (Ipv6ReassembledLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6ReassembledLength);
      }
      if (Ipv6ReassembledData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6ReassembledData);
      }
      if (Ipv6HopoptsNxt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6HopoptsNxt);
      }
      if (Ipv6HopoptsLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6HopoptsLen);
      }
      if (Ipv6HopoptsLenOct != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6HopoptsLenOct);
      }
      if (Ipv6DstoptsNxt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6DstoptsNxt);
      }
      if (Ipv6DstoptsLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6DstoptsLen);
      }
      if (Ipv6DstoptsLenOct != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6DstoptsLenOct);
      }
      if (Ipv6RoutingNxt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingNxt);
      }
      if (Ipv6RoutingLen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingLen);
      }
      if (Ipv6RoutingLenOct != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingLenOct);
      }
      if (Ipv6RoutingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingType);
      }
      if (Ipv6RoutingSegleft != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingSegleft);
      }
      if (Ipv6RoutingUnknownData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingUnknownData);
      }
      if (Ipv6RoutingSrcReserved.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingSrcReserved);
      }
      if (Ipv6RoutingSrcAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingSrcAddr);
      }
      if (Ipv6RoutingMipv6Reserved.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingMipv6Reserved);
      }
      if (Ipv6RoutingMipv6HomeAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingMipv6HomeAddress);
      }
      if (Ipv6RoutingRplCmpri != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingRplCmpri);
      }
      if (Ipv6RoutingRplCmpre != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingRplCmpre);
      }
      if (Ipv6RoutingRplPad != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingRplPad);
      }
      if (Ipv6RoutingRplReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingRplReserved);
      }
      if (Ipv6RoutingRplAddrCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ipv6RoutingRplAddrCount);
      }
      if (Ipv6RoutingRplAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingRplAddress);
      }
      if (Ipv6RoutingRplFullAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingRplFullAddress);
      }
      if (Ipv6RoutingSrhFirstSegment != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingSrhFirstSegment);
      }
      if (Ipv6RoutingSrhFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingSrhFlags);
      }
      if (Ipv6RoutingSrhFlagUnused1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingSrhFlagUnused1);
      }
      if (Ipv6RoutingSrhFlagP != false) {
        size += 2 + 1;
      }
      if (Ipv6RoutingSrhFlagO != false) {
        size += 2 + 1;
      }
      if (Ipv6RoutingSrhFlagA != false) {
        size += 2 + 1;
      }
      if (Ipv6RoutingSrhFlagH != false) {
        size += 2 + 1;
      }
      if (Ipv6RoutingSrhFlagUnused2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6RoutingSrhFlagUnused2);
      }
      if (Ipv6RoutingSrhReserved.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingSrhReserved);
      }
      if (Ipv6RoutingSrhAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Ipv6RoutingSrhAddr);
      }
      if (Ipv6FraghdrNxt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FraghdrNxt);
      }
      if (Ipv6FraghdrReservedOctet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FraghdrReservedOctet);
      }
      if (Ipv6FraghdrOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FraghdrOffset);
      }
      if (Ipv6FraghdrReservedBits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FraghdrReservedBits);
      }
      if (Ipv6FraghdrMore != false) {
        size += 2 + 1;
      }
      if (Ipv6FraghdrIdent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ipv6FraghdrIdent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ipv6 other) {
      if (other == null) {
        return;
      }
      if (other.Ipv6Version != 0) {
        Ipv6Version = other.Ipv6Version;
      }
      if (other.Ipv6Tclass != 0) {
        Ipv6Tclass = other.Ipv6Tclass;
      }
      if (other.Ipv6TclassDscp != 0) {
        Ipv6TclassDscp = other.Ipv6TclassDscp;
      }
      if (other.Ipv6TclassEcn != 0) {
        Ipv6TclassEcn = other.Ipv6TclassEcn;
      }
      if (other.Ipv6Flow != 0) {
        Ipv6Flow = other.Ipv6Flow;
      }
      if (other.Ipv6Plen != 0) {
        Ipv6Plen = other.Ipv6Plen;
      }
      if (other.Ipv6Nxt != 0) {
        Ipv6Nxt = other.Ipv6Nxt;
      }
      if (other.Ipv6Hlim != 0) {
        Ipv6Hlim = other.Ipv6Hlim;
      }
      if (other.Ipv6Src.Length != 0) {
        Ipv6Src = other.Ipv6Src;
      }
      if (other.Ipv6SrcHost.Length != 0) {
        Ipv6SrcHost = other.Ipv6SrcHost;
      }
      if (other.Ipv6SrcSaMac.Length != 0) {
        Ipv6SrcSaMac = other.Ipv6SrcSaMac;
      }
      if (other.Ipv6SrcIsatapIpv4.Length != 0) {
        Ipv6SrcIsatapIpv4 = other.Ipv6SrcIsatapIpv4;
      }
      if (other.Ipv6Src6To4GwIpv4.Length != 0) {
        Ipv6Src6To4GwIpv4 = other.Ipv6Src6To4GwIpv4;
      }
      if (other.Ipv6Src6To4SlaId != 0) {
        Ipv6Src6To4SlaId = other.Ipv6Src6To4SlaId;
      }
      if (other.Ipv6SrcTsIpv4.Length != 0) {
        Ipv6SrcTsIpv4 = other.Ipv6SrcTsIpv4;
      }
      if (other.Ipv6SrcTcPort != 0) {
        Ipv6SrcTcPort = other.Ipv6SrcTcPort;
      }
      if (other.Ipv6SrcTcIpv4.Length != 0) {
        Ipv6SrcTcIpv4 = other.Ipv6SrcTcIpv4;
      }
      if (other.Ipv6SrcEmbedIpv4.Length != 0) {
        Ipv6SrcEmbedIpv4 = other.Ipv6SrcEmbedIpv4;
      }
      if (other.Ipv6Dst.Length != 0) {
        Ipv6Dst = other.Ipv6Dst;
      }
      if (other.Ipv6DstHost.Length != 0) {
        Ipv6DstHost = other.Ipv6DstHost;
      }
      if (other.Ipv6DstSaMac.Length != 0) {
        Ipv6DstSaMac = other.Ipv6DstSaMac;
      }
      if (other.Ipv6DstIsatapIpv4.Length != 0) {
        Ipv6DstIsatapIpv4 = other.Ipv6DstIsatapIpv4;
      }
      if (other.Ipv6Dst6To4GwIpv4.Length != 0) {
        Ipv6Dst6To4GwIpv4 = other.Ipv6Dst6To4GwIpv4;
      }
      if (other.Ipv6Dst6To4SlaId != 0) {
        Ipv6Dst6To4SlaId = other.Ipv6Dst6To4SlaId;
      }
      if (other.Ipv6DstTsIpv4.Length != 0) {
        Ipv6DstTsIpv4 = other.Ipv6DstTsIpv4;
      }
      if (other.Ipv6DstTcPort != 0) {
        Ipv6DstTcPort = other.Ipv6DstTcPort;
      }
      if (other.Ipv6DstTcIpv4.Length != 0) {
        Ipv6DstTcIpv4 = other.Ipv6DstTcIpv4;
      }
      if (other.Ipv6DstEmbedIpv4.Length != 0) {
        Ipv6DstEmbedIpv4 = other.Ipv6DstEmbedIpv4;
      }
      if (other.Ipv6Addr.Length != 0) {
        Ipv6Addr = other.Ipv6Addr;
      }
      if (other.Ipv6Host.Length != 0) {
        Ipv6Host = other.Ipv6Host;
      }
      if (other.Ipv6SaMac.Length != 0) {
        Ipv6SaMac = other.Ipv6SaMac;
      }
      if (other.Ipv6IsatapIpv4.Length != 0) {
        Ipv6IsatapIpv4 = other.Ipv6IsatapIpv4;
      }
      if (other.Ipv66To4GwIpv4.Length != 0) {
        Ipv66To4GwIpv4 = other.Ipv66To4GwIpv4;
      }
      if (other.Ipv66To4SlaId != 0) {
        Ipv66To4SlaId = other.Ipv66To4SlaId;
      }
      if (other.Ipv6TsIpv4.Length != 0) {
        Ipv6TsIpv4 = other.Ipv6TsIpv4;
      }
      if (other.Ipv6TcPort != 0) {
        Ipv6TcPort = other.Ipv6TcPort;
      }
      if (other.Ipv6TcIpv4.Length != 0) {
        Ipv6TcIpv4 = other.Ipv6TcIpv4;
      }
      if (other.Ipv6EmbedIpv4.Length != 0) {
        Ipv6EmbedIpv4 = other.Ipv6EmbedIpv4;
      }
      if (other.Ipv6GeoipCountry.Length != 0) {
        Ipv6GeoipCountry = other.Ipv6GeoipCountry;
      }
      if (other.Ipv6GeoipCity.Length != 0) {
        Ipv6GeoipCity = other.Ipv6GeoipCity;
      }
      if (other.Ipv6GeoipOrg.Length != 0) {
        Ipv6GeoipOrg = other.Ipv6GeoipOrg;
      }
      if (other.Ipv6GeoipIsp.Length != 0) {
        Ipv6GeoipIsp = other.Ipv6GeoipIsp;
      }
      if (other.Ipv6GeoipAsnum.Length != 0) {
        Ipv6GeoipAsnum = other.Ipv6GeoipAsnum;
      }
      if (other.Ipv6GeoipLat != 0D) {
        Ipv6GeoipLat = other.Ipv6GeoipLat;
      }
      if (other.Ipv6GeoipLon != 0D) {
        Ipv6GeoipLon = other.Ipv6GeoipLon;
      }
      if (other.Ipv6GeoipSrcCountry.Length != 0) {
        Ipv6GeoipSrcCountry = other.Ipv6GeoipSrcCountry;
      }
      if (other.Ipv6GeoipSrcCity.Length != 0) {
        Ipv6GeoipSrcCity = other.Ipv6GeoipSrcCity;
      }
      if (other.Ipv6GeoipSrcOrg.Length != 0) {
        Ipv6GeoipSrcOrg = other.Ipv6GeoipSrcOrg;
      }
      if (other.Ipv6GeoipSrcIsp.Length != 0) {
        Ipv6GeoipSrcIsp = other.Ipv6GeoipSrcIsp;
      }
      if (other.Ipv6GeoipSrcAsnum.Length != 0) {
        Ipv6GeoipSrcAsnum = other.Ipv6GeoipSrcAsnum;
      }
      if (other.Ipv6GeoipSrcLat != 0D) {
        Ipv6GeoipSrcLat = other.Ipv6GeoipSrcLat;
      }
      if (other.Ipv6GeoipSrcLon != 0D) {
        Ipv6GeoipSrcLon = other.Ipv6GeoipSrcLon;
      }
      if (other.Ipv6GeoipDstCountry.Length != 0) {
        Ipv6GeoipDstCountry = other.Ipv6GeoipDstCountry;
      }
      if (other.Ipv6GeoipDstCity.Length != 0) {
        Ipv6GeoipDstCity = other.Ipv6GeoipDstCity;
      }
      if (other.Ipv6GeoipDstOrg.Length != 0) {
        Ipv6GeoipDstOrg = other.Ipv6GeoipDstOrg;
      }
      if (other.Ipv6GeoipDstIsp.Length != 0) {
        Ipv6GeoipDstIsp = other.Ipv6GeoipDstIsp;
      }
      if (other.Ipv6GeoipDstAsnum.Length != 0) {
        Ipv6GeoipDstAsnum = other.Ipv6GeoipDstAsnum;
      }
      if (other.Ipv6GeoipDstLat != 0D) {
        Ipv6GeoipDstLat = other.Ipv6GeoipDstLat;
      }
      if (other.Ipv6GeoipDstLon != 0D) {
        Ipv6GeoipDstLon = other.Ipv6GeoipDstLon;
      }
      if (other.Ipv6Opt != 0) {
        Ipv6Opt = other.Ipv6Opt;
      }
      if (other.Ipv6OptType != 0) {
        Ipv6OptType = other.Ipv6OptType;
      }
      if (other.Ipv6OptTypeAction != 0) {
        Ipv6OptTypeAction = other.Ipv6OptTypeAction;
      }
      if (other.Ipv6OptTypeChange != false) {
        Ipv6OptTypeChange = other.Ipv6OptTypeChange;
      }
      if (other.Ipv6OptTypeRest != 0) {
        Ipv6OptTypeRest = other.Ipv6OptTypeRest;
      }
      if (other.Ipv6OptLength != 0) {
        Ipv6OptLength = other.Ipv6OptLength;
      }
      if (other.Ipv6OptPad1 != 0) {
        Ipv6OptPad1 = other.Ipv6OptPad1;
      }
      if (other.Ipv6OptPadn.Length != 0) {
        Ipv6OptPadn = other.Ipv6OptPadn;
      }
      if (other.Ipv6OptRouterAlert != 0) {
        Ipv6OptRouterAlert = other.Ipv6OptRouterAlert;
      }
      if (other.Ipv6OptTel != 0) {
        Ipv6OptTel = other.Ipv6OptTel;
      }
      if (other.Ipv6OptJumbo != 0) {
        Ipv6OptJumbo = other.Ipv6OptJumbo;
      }
      if (other.Ipv6OptCalipsoDoi != 0) {
        Ipv6OptCalipsoDoi = other.Ipv6OptCalipsoDoi;
      }
      if (other.Ipv6OptCalipsoCmptLength != 0) {
        Ipv6OptCalipsoCmptLength = other.Ipv6OptCalipsoCmptLength;
      }
      if (other.Ipv6OptCalipsoSensLevel != 0) {
        Ipv6OptCalipsoSensLevel = other.Ipv6OptCalipsoSensLevel;
      }
      if (other.Ipv6OptCalipsoChecksum != 0) {
        Ipv6OptCalipsoChecksum = other.Ipv6OptCalipsoChecksum;
      }
      if (other.Ipv6OptCalipsoCmptBitmap.Length != 0) {
        Ipv6OptCalipsoCmptBitmap = other.Ipv6OptCalipsoCmptBitmap;
      }
      if (other.Ipv6OptSmfDpdHashBit != false) {
        Ipv6OptSmfDpdHashBit = other.Ipv6OptSmfDpdHashBit;
      }
      if (other.Ipv6OptSmfDpdTidType != 0) {
        Ipv6OptSmfDpdTidType = other.Ipv6OptSmfDpdTidType;
      }
      if (other.Ipv6OptSmfDpdTidLen != 0) {
        Ipv6OptSmfDpdTidLen = other.Ipv6OptSmfDpdTidLen;
      }
      if (other.Ipv6OptSmfDpdTaggerId.Length != 0) {
        Ipv6OptSmfDpdTaggerId = other.Ipv6OptSmfDpdTaggerId;
      }
      if (other.Ipv6OptSmfDpdIdent.Length != 0) {
        Ipv6OptSmfDpdIdent = other.Ipv6OptSmfDpdIdent;
      }
      if (other.Ipv6OptSmfDpdHav.Length != 0) {
        Ipv6OptSmfDpdHav = other.Ipv6OptSmfDpdHav;
      }
      if (other.Ipv6OptPdmScaleDtlr != 0) {
        Ipv6OptPdmScaleDtlr = other.Ipv6OptPdmScaleDtlr;
      }
      if (other.Ipv6OptPdmScaleDtls != 0) {
        Ipv6OptPdmScaleDtls = other.Ipv6OptPdmScaleDtls;
      }
      if (other.Ipv6OptPdmPsnThisPkt != 0) {
        Ipv6OptPdmPsnThisPkt = other.Ipv6OptPdmPsnThisPkt;
      }
      if (other.Ipv6OptPdmPsnLastRecv != 0) {
        Ipv6OptPdmPsnLastRecv = other.Ipv6OptPdmPsnLastRecv;
      }
      if (other.Ipv6OptPdmDeltaLastRecv != 0) {
        Ipv6OptPdmDeltaLastRecv = other.Ipv6OptPdmDeltaLastRecv;
      }
      if (other.Ipv6OptPdmDeltaLastSent != 0) {
        Ipv6OptPdmDeltaLastSent = other.Ipv6OptPdmDeltaLastSent;
      }
      if (other.Ipv6OptQsFunc != 0) {
        Ipv6OptQsFunc = other.Ipv6OptQsFunc;
      }
      if (other.Ipv6OptQsRate != 0) {
        Ipv6OptQsRate = other.Ipv6OptQsRate;
      }
      if (other.Ipv6OptQsTtl != 0) {
        Ipv6OptQsTtl = other.Ipv6OptQsTtl;
      }
      if (other.Ipv6OptQsTtlDiff != 0) {
        Ipv6OptQsTtlDiff = other.Ipv6OptQsTtlDiff;
      }
      if (other.Ipv6OptQsUnused != 0) {
        Ipv6OptQsUnused = other.Ipv6OptQsUnused;
      }
      if (other.Ipv6OptQsNonce != 0) {
        Ipv6OptQsNonce = other.Ipv6OptQsNonce;
      }
      if (other.Ipv6OptQsReserved != 0) {
        Ipv6OptQsReserved = other.Ipv6OptQsReserved;
      }
      if (other.Ipv6OptMipv6HomeAddress.Length != 0) {
        Ipv6OptMipv6HomeAddress = other.Ipv6OptMipv6HomeAddress;
      }
      if (other.Ipv6OptRplFlag != 0) {
        Ipv6OptRplFlag = other.Ipv6OptRplFlag;
      }
      if (other.Ipv6OptRplFlagO != false) {
        Ipv6OptRplFlagO = other.Ipv6OptRplFlagO;
      }
      if (other.Ipv6OptRplFlagR != false) {
        Ipv6OptRplFlagR = other.Ipv6OptRplFlagR;
      }
      if (other.Ipv6OptRplFlagF != false) {
        Ipv6OptRplFlagF = other.Ipv6OptRplFlagF;
      }
      if (other.Ipv6OptRplFlagRsv != 0) {
        Ipv6OptRplFlagRsv = other.Ipv6OptRplFlagRsv;
      }
      if (other.Ipv6OptRplInstanceId != 0) {
        Ipv6OptRplInstanceId = other.Ipv6OptRplInstanceId;
      }
      if (other.Ipv6OptRplSenderRank != 0) {
        Ipv6OptRplSenderRank = other.Ipv6OptRplSenderRank;
      }
      if (other.Ipv6OptIlnpNonce.Length != 0) {
        Ipv6OptIlnpNonce = other.Ipv6OptIlnpNonce;
      }
      if (other.Ipv6OptLioLength != 0) {
        Ipv6OptLioLength = other.Ipv6OptLioLength;
      }
      if (other.Ipv6OptLioLineId.Length != 0) {
        Ipv6OptLioLineId = other.Ipv6OptLioLineId;
      }
      if (other.Ipv6OptMplFlag != 0) {
        Ipv6OptMplFlag = other.Ipv6OptMplFlag;
      }
      if (other.Ipv6OptMplFlagS != 0) {
        Ipv6OptMplFlagS = other.Ipv6OptMplFlagS;
      }
      if (other.Ipv6OptMplFlagM != false) {
        Ipv6OptMplFlagM = other.Ipv6OptMplFlagM;
      }
      if (other.Ipv6OptMplFlagV != false) {
        Ipv6OptMplFlagV = other.Ipv6OptMplFlagV;
      }
      if (other.Ipv6OptMplFlagRsv != 0) {
        Ipv6OptMplFlagRsv = other.Ipv6OptMplFlagRsv;
      }
      if (other.Ipv6OptMplSequence != 0) {
        Ipv6OptMplSequence = other.Ipv6OptMplSequence;
      }
      if (other.Ipv6OptMplSeedId.Length != 0) {
        Ipv6OptMplSeedId = other.Ipv6OptMplSeedId;
      }
      if (other.Ipv6OptDffFlags != 0) {
        Ipv6OptDffFlags = other.Ipv6OptDffFlags;
      }
      if (other.Ipv6OptDffFlagVer != 0) {
        Ipv6OptDffFlagVer = other.Ipv6OptDffFlagVer;
      }
      if (other.Ipv6OptDffFlagDup != false) {
        Ipv6OptDffFlagDup = other.Ipv6OptDffFlagDup;
      }
      if (other.Ipv6OptDffFlagRet != false) {
        Ipv6OptDffFlagRet = other.Ipv6OptDffFlagRet;
      }
      if (other.Ipv6OptDffFlagRsv != 0) {
        Ipv6OptDffFlagRsv = other.Ipv6OptDffFlagRsv;
      }
      if (other.Ipv6OptDffSequenceNumber != 0) {
        Ipv6OptDffSequenceNumber = other.Ipv6OptDffSequenceNumber;
      }
      if (other.Ipv6OptExperimental.Length != 0) {
        Ipv6OptExperimental = other.Ipv6OptExperimental;
      }
      if (other.Ipv6OptUnknownData.Length != 0) {
        Ipv6OptUnknownData = other.Ipv6OptUnknownData;
      }
      if (other.Ipv6OptUnknown.Length != 0) {
        Ipv6OptUnknown = other.Ipv6OptUnknown;
      }
      if (other.Ipv6Fragment != 0L) {
        Ipv6Fragment = other.Ipv6Fragment;
      }
      if (other.Ipv6FragmentOverlap != false) {
        Ipv6FragmentOverlap = other.Ipv6FragmentOverlap;
      }
      if (other.Ipv6FragmentOverlapConflict != false) {
        Ipv6FragmentOverlapConflict = other.Ipv6FragmentOverlapConflict;
      }
      if (other.Ipv6FragmentMultipletails != false) {
        Ipv6FragmentMultipletails = other.Ipv6FragmentMultipletails;
      }
      if (other.Ipv6FragmentToolongfragment != false) {
        Ipv6FragmentToolongfragment = other.Ipv6FragmentToolongfragment;
      }
      if (other.Ipv6FragmentError != 0L) {
        Ipv6FragmentError = other.Ipv6FragmentError;
      }
      if (other.Ipv6FragmentCount != 0) {
        Ipv6FragmentCount = other.Ipv6FragmentCount;
      }
      if (other.Ipv6Fragments != 0) {
        Ipv6Fragments = other.Ipv6Fragments;
      }
      if (other.Ipv6ReassembledIn != 0L) {
        Ipv6ReassembledIn = other.Ipv6ReassembledIn;
      }
      if (other.Ipv6ReassembledLength != 0) {
        Ipv6ReassembledLength = other.Ipv6ReassembledLength;
      }
      if (other.Ipv6ReassembledData.Length != 0) {
        Ipv6ReassembledData = other.Ipv6ReassembledData;
      }
      if (other.Ipv6HopoptsNxt != 0) {
        Ipv6HopoptsNxt = other.Ipv6HopoptsNxt;
      }
      if (other.Ipv6HopoptsLen != 0) {
        Ipv6HopoptsLen = other.Ipv6HopoptsLen;
      }
      if (other.Ipv6HopoptsLenOct != 0) {
        Ipv6HopoptsLenOct = other.Ipv6HopoptsLenOct;
      }
      if (other.Ipv6DstoptsNxt != 0) {
        Ipv6DstoptsNxt = other.Ipv6DstoptsNxt;
      }
      if (other.Ipv6DstoptsLen != 0) {
        Ipv6DstoptsLen = other.Ipv6DstoptsLen;
      }
      if (other.Ipv6DstoptsLenOct != 0) {
        Ipv6DstoptsLenOct = other.Ipv6DstoptsLenOct;
      }
      if (other.Ipv6RoutingNxt != 0) {
        Ipv6RoutingNxt = other.Ipv6RoutingNxt;
      }
      if (other.Ipv6RoutingLen != 0) {
        Ipv6RoutingLen = other.Ipv6RoutingLen;
      }
      if (other.Ipv6RoutingLenOct != 0) {
        Ipv6RoutingLenOct = other.Ipv6RoutingLenOct;
      }
      if (other.Ipv6RoutingType != 0) {
        Ipv6RoutingType = other.Ipv6RoutingType;
      }
      if (other.Ipv6RoutingSegleft != 0) {
        Ipv6RoutingSegleft = other.Ipv6RoutingSegleft;
      }
      if (other.Ipv6RoutingUnknownData.Length != 0) {
        Ipv6RoutingUnknownData = other.Ipv6RoutingUnknownData;
      }
      if (other.Ipv6RoutingSrcReserved.Length != 0) {
        Ipv6RoutingSrcReserved = other.Ipv6RoutingSrcReserved;
      }
      if (other.Ipv6RoutingSrcAddr.Length != 0) {
        Ipv6RoutingSrcAddr = other.Ipv6RoutingSrcAddr;
      }
      if (other.Ipv6RoutingMipv6Reserved.Length != 0) {
        Ipv6RoutingMipv6Reserved = other.Ipv6RoutingMipv6Reserved;
      }
      if (other.Ipv6RoutingMipv6HomeAddress.Length != 0) {
        Ipv6RoutingMipv6HomeAddress = other.Ipv6RoutingMipv6HomeAddress;
      }
      if (other.Ipv6RoutingRplCmpri != 0) {
        Ipv6RoutingRplCmpri = other.Ipv6RoutingRplCmpri;
      }
      if (other.Ipv6RoutingRplCmpre != 0) {
        Ipv6RoutingRplCmpre = other.Ipv6RoutingRplCmpre;
      }
      if (other.Ipv6RoutingRplPad != 0) {
        Ipv6RoutingRplPad = other.Ipv6RoutingRplPad;
      }
      if (other.Ipv6RoutingRplReserved != 0) {
        Ipv6RoutingRplReserved = other.Ipv6RoutingRplReserved;
      }
      if (other.Ipv6RoutingRplAddrCount != 0) {
        Ipv6RoutingRplAddrCount = other.Ipv6RoutingRplAddrCount;
      }
      if (other.Ipv6RoutingRplAddress.Length != 0) {
        Ipv6RoutingRplAddress = other.Ipv6RoutingRplAddress;
      }
      if (other.Ipv6RoutingRplFullAddress.Length != 0) {
        Ipv6RoutingRplFullAddress = other.Ipv6RoutingRplFullAddress;
      }
      if (other.Ipv6RoutingSrhFirstSegment != 0) {
        Ipv6RoutingSrhFirstSegment = other.Ipv6RoutingSrhFirstSegment;
      }
      if (other.Ipv6RoutingSrhFlags != 0) {
        Ipv6RoutingSrhFlags = other.Ipv6RoutingSrhFlags;
      }
      if (other.Ipv6RoutingSrhFlagUnused1 != 0) {
        Ipv6RoutingSrhFlagUnused1 = other.Ipv6RoutingSrhFlagUnused1;
      }
      if (other.Ipv6RoutingSrhFlagP != false) {
        Ipv6RoutingSrhFlagP = other.Ipv6RoutingSrhFlagP;
      }
      if (other.Ipv6RoutingSrhFlagO != false) {
        Ipv6RoutingSrhFlagO = other.Ipv6RoutingSrhFlagO;
      }
      if (other.Ipv6RoutingSrhFlagA != false) {
        Ipv6RoutingSrhFlagA = other.Ipv6RoutingSrhFlagA;
      }
      if (other.Ipv6RoutingSrhFlagH != false) {
        Ipv6RoutingSrhFlagH = other.Ipv6RoutingSrhFlagH;
      }
      if (other.Ipv6RoutingSrhFlagUnused2 != 0) {
        Ipv6RoutingSrhFlagUnused2 = other.Ipv6RoutingSrhFlagUnused2;
      }
      if (other.Ipv6RoutingSrhReserved.Length != 0) {
        Ipv6RoutingSrhReserved = other.Ipv6RoutingSrhReserved;
      }
      if (other.Ipv6RoutingSrhAddr.Length != 0) {
        Ipv6RoutingSrhAddr = other.Ipv6RoutingSrhAddr;
      }
      if (other.Ipv6FraghdrNxt != 0) {
        Ipv6FraghdrNxt = other.Ipv6FraghdrNxt;
      }
      if (other.Ipv6FraghdrReservedOctet != 0) {
        Ipv6FraghdrReservedOctet = other.Ipv6FraghdrReservedOctet;
      }
      if (other.Ipv6FraghdrOffset != 0) {
        Ipv6FraghdrOffset = other.Ipv6FraghdrOffset;
      }
      if (other.Ipv6FraghdrReservedBits != 0) {
        Ipv6FraghdrReservedBits = other.Ipv6FraghdrReservedBits;
      }
      if (other.Ipv6FraghdrMore != false) {
        Ipv6FraghdrMore = other.Ipv6FraghdrMore;
      }
      if (other.Ipv6FraghdrIdent != 0) {
        Ipv6FraghdrIdent = other.Ipv6FraghdrIdent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ipv6Version = input.ReadUInt32();
            break;
          }
          case 16: {
            Ipv6Tclass = input.ReadUInt32();
            break;
          }
          case 24: {
            Ipv6TclassDscp = input.ReadUInt32();
            break;
          }
          case 32: {
            Ipv6TclassEcn = input.ReadUInt32();
            break;
          }
          case 40: {
            Ipv6Flow = input.ReadUInt32();
            break;
          }
          case 48: {
            Ipv6Plen = input.ReadUInt32();
            break;
          }
          case 56: {
            Ipv6Nxt = input.ReadUInt32();
            break;
          }
          case 64: {
            Ipv6Hlim = input.ReadUInt32();
            break;
          }
          case 74: {
            Ipv6Src = input.ReadBytes();
            break;
          }
          case 82: {
            Ipv6SrcHost = input.ReadString();
            break;
          }
          case 90: {
            Ipv6SrcSaMac = input.ReadBytes();
            break;
          }
          case 98: {
            Ipv6SrcIsatapIpv4 = input.ReadBytes();
            break;
          }
          case 106: {
            Ipv6Src6To4GwIpv4 = input.ReadBytes();
            break;
          }
          case 112: {
            Ipv6Src6To4SlaId = input.ReadUInt32();
            break;
          }
          case 122: {
            Ipv6SrcTsIpv4 = input.ReadBytes();
            break;
          }
          case 128: {
            Ipv6SrcTcPort = input.ReadUInt32();
            break;
          }
          case 138: {
            Ipv6SrcTcIpv4 = input.ReadBytes();
            break;
          }
          case 146: {
            Ipv6SrcEmbedIpv4 = input.ReadBytes();
            break;
          }
          case 154: {
            Ipv6Dst = input.ReadBytes();
            break;
          }
          case 162: {
            Ipv6DstHost = input.ReadString();
            break;
          }
          case 170: {
            Ipv6DstSaMac = input.ReadBytes();
            break;
          }
          case 178: {
            Ipv6DstIsatapIpv4 = input.ReadBytes();
            break;
          }
          case 186: {
            Ipv6Dst6To4GwIpv4 = input.ReadBytes();
            break;
          }
          case 192: {
            Ipv6Dst6To4SlaId = input.ReadUInt32();
            break;
          }
          case 202: {
            Ipv6DstTsIpv4 = input.ReadBytes();
            break;
          }
          case 208: {
            Ipv6DstTcPort = input.ReadUInt32();
            break;
          }
          case 218: {
            Ipv6DstTcIpv4 = input.ReadBytes();
            break;
          }
          case 226: {
            Ipv6DstEmbedIpv4 = input.ReadBytes();
            break;
          }
          case 234: {
            Ipv6Addr = input.ReadBytes();
            break;
          }
          case 242: {
            Ipv6Host = input.ReadString();
            break;
          }
          case 250: {
            Ipv6SaMac = input.ReadBytes();
            break;
          }
          case 258: {
            Ipv6IsatapIpv4 = input.ReadBytes();
            break;
          }
          case 266: {
            Ipv66To4GwIpv4 = input.ReadBytes();
            break;
          }
          case 272: {
            Ipv66To4SlaId = input.ReadUInt32();
            break;
          }
          case 282: {
            Ipv6TsIpv4 = input.ReadBytes();
            break;
          }
          case 288: {
            Ipv6TcPort = input.ReadUInt32();
            break;
          }
          case 298: {
            Ipv6TcIpv4 = input.ReadBytes();
            break;
          }
          case 306: {
            Ipv6EmbedIpv4 = input.ReadBytes();
            break;
          }
          case 314: {
            Ipv6GeoipCountry = input.ReadString();
            break;
          }
          case 322: {
            Ipv6GeoipCity = input.ReadString();
            break;
          }
          case 330: {
            Ipv6GeoipOrg = input.ReadString();
            break;
          }
          case 338: {
            Ipv6GeoipIsp = input.ReadString();
            break;
          }
          case 346: {
            Ipv6GeoipAsnum = input.ReadString();
            break;
          }
          case 353: {
            Ipv6GeoipLat = input.ReadDouble();
            break;
          }
          case 361: {
            Ipv6GeoipLon = input.ReadDouble();
            break;
          }
          case 370: {
            Ipv6GeoipSrcCountry = input.ReadString();
            break;
          }
          case 378: {
            Ipv6GeoipSrcCity = input.ReadString();
            break;
          }
          case 386: {
            Ipv6GeoipSrcOrg = input.ReadString();
            break;
          }
          case 394: {
            Ipv6GeoipSrcIsp = input.ReadString();
            break;
          }
          case 402: {
            Ipv6GeoipSrcAsnum = input.ReadString();
            break;
          }
          case 409: {
            Ipv6GeoipSrcLat = input.ReadDouble();
            break;
          }
          case 417: {
            Ipv6GeoipSrcLon = input.ReadDouble();
            break;
          }
          case 426: {
            Ipv6GeoipDstCountry = input.ReadString();
            break;
          }
          case 434: {
            Ipv6GeoipDstCity = input.ReadString();
            break;
          }
          case 442: {
            Ipv6GeoipDstOrg = input.ReadString();
            break;
          }
          case 450: {
            Ipv6GeoipDstIsp = input.ReadString();
            break;
          }
          case 458: {
            Ipv6GeoipDstAsnum = input.ReadString();
            break;
          }
          case 465: {
            Ipv6GeoipDstLat = input.ReadDouble();
            break;
          }
          case 473: {
            Ipv6GeoipDstLon = input.ReadDouble();
            break;
          }
          case 480: {
            Ipv6Opt = input.ReadInt32();
            break;
          }
          case 488: {
            Ipv6OptType = input.ReadUInt32();
            break;
          }
          case 496: {
            Ipv6OptTypeAction = input.ReadUInt32();
            break;
          }
          case 504: {
            Ipv6OptTypeChange = input.ReadBool();
            break;
          }
          case 512: {
            Ipv6OptTypeRest = input.ReadUInt32();
            break;
          }
          case 520: {
            Ipv6OptLength = input.ReadUInt32();
            break;
          }
          case 528: {
            Ipv6OptPad1 = input.ReadInt32();
            break;
          }
          case 538: {
            Ipv6OptPadn = input.ReadBytes();
            break;
          }
          case 544: {
            Ipv6OptRouterAlert = input.ReadUInt32();
            break;
          }
          case 552: {
            Ipv6OptTel = input.ReadUInt32();
            break;
          }
          case 560: {
            Ipv6OptJumbo = input.ReadUInt32();
            break;
          }
          case 568: {
            Ipv6OptCalipsoDoi = input.ReadUInt32();
            break;
          }
          case 576: {
            Ipv6OptCalipsoCmptLength = input.ReadUInt32();
            break;
          }
          case 584: {
            Ipv6OptCalipsoSensLevel = input.ReadUInt32();
            break;
          }
          case 592: {
            Ipv6OptCalipsoChecksum = input.ReadUInt32();
            break;
          }
          case 602: {
            Ipv6OptCalipsoCmptBitmap = input.ReadBytes();
            break;
          }
          case 608: {
            Ipv6OptSmfDpdHashBit = input.ReadBool();
            break;
          }
          case 616: {
            Ipv6OptSmfDpdTidType = input.ReadUInt32();
            break;
          }
          case 624: {
            Ipv6OptSmfDpdTidLen = input.ReadUInt32();
            break;
          }
          case 634: {
            Ipv6OptSmfDpdTaggerId = input.ReadBytes();
            break;
          }
          case 642: {
            Ipv6OptSmfDpdIdent = input.ReadBytes();
            break;
          }
          case 650: {
            Ipv6OptSmfDpdHav = input.ReadBytes();
            break;
          }
          case 656: {
            Ipv6OptPdmScaleDtlr = input.ReadUInt32();
            break;
          }
          case 664: {
            Ipv6OptPdmScaleDtls = input.ReadUInt32();
            break;
          }
          case 672: {
            Ipv6OptPdmPsnThisPkt = input.ReadUInt32();
            break;
          }
          case 680: {
            Ipv6OptPdmPsnLastRecv = input.ReadUInt32();
            break;
          }
          case 688: {
            Ipv6OptPdmDeltaLastRecv = input.ReadUInt32();
            break;
          }
          case 696: {
            Ipv6OptPdmDeltaLastSent = input.ReadUInt32();
            break;
          }
          case 704: {
            Ipv6OptQsFunc = input.ReadUInt32();
            break;
          }
          case 712: {
            Ipv6OptQsRate = input.ReadUInt32();
            break;
          }
          case 720: {
            Ipv6OptQsTtl = input.ReadUInt32();
            break;
          }
          case 728: {
            Ipv6OptQsTtlDiff = input.ReadUInt32();
            break;
          }
          case 736: {
            Ipv6OptQsUnused = input.ReadUInt32();
            break;
          }
          case 744: {
            Ipv6OptQsNonce = input.ReadUInt32();
            break;
          }
          case 752: {
            Ipv6OptQsReserved = input.ReadUInt32();
            break;
          }
          case 762: {
            Ipv6OptMipv6HomeAddress = input.ReadBytes();
            break;
          }
          case 768: {
            Ipv6OptRplFlag = input.ReadUInt32();
            break;
          }
          case 776: {
            Ipv6OptRplFlagO = input.ReadBool();
            break;
          }
          case 784: {
            Ipv6OptRplFlagR = input.ReadBool();
            break;
          }
          case 792: {
            Ipv6OptRplFlagF = input.ReadBool();
            break;
          }
          case 800: {
            Ipv6OptRplFlagRsv = input.ReadUInt32();
            break;
          }
          case 808: {
            Ipv6OptRplInstanceId = input.ReadUInt32();
            break;
          }
          case 816: {
            Ipv6OptRplSenderRank = input.ReadUInt32();
            break;
          }
          case 826: {
            Ipv6OptIlnpNonce = input.ReadBytes();
            break;
          }
          case 832: {
            Ipv6OptLioLength = input.ReadUInt32();
            break;
          }
          case 842: {
            Ipv6OptLioLineId = input.ReadString();
            break;
          }
          case 848: {
            Ipv6OptMplFlag = input.ReadUInt32();
            break;
          }
          case 856: {
            Ipv6OptMplFlagS = input.ReadUInt32();
            break;
          }
          case 864: {
            Ipv6OptMplFlagM = input.ReadBool();
            break;
          }
          case 872: {
            Ipv6OptMplFlagV = input.ReadBool();
            break;
          }
          case 880: {
            Ipv6OptMplFlagRsv = input.ReadUInt32();
            break;
          }
          case 888: {
            Ipv6OptMplSequence = input.ReadUInt32();
            break;
          }
          case 898: {
            Ipv6OptMplSeedId = input.ReadBytes();
            break;
          }
          case 904: {
            Ipv6OptDffFlags = input.ReadUInt32();
            break;
          }
          case 912: {
            Ipv6OptDffFlagVer = input.ReadUInt32();
            break;
          }
          case 920: {
            Ipv6OptDffFlagDup = input.ReadBool();
            break;
          }
          case 928: {
            Ipv6OptDffFlagRet = input.ReadBool();
            break;
          }
          case 936: {
            Ipv6OptDffFlagRsv = input.ReadUInt32();
            break;
          }
          case 944: {
            Ipv6OptDffSequenceNumber = input.ReadUInt32();
            break;
          }
          case 954: {
            Ipv6OptExperimental = input.ReadBytes();
            break;
          }
          case 962: {
            Ipv6OptUnknownData = input.ReadBytes();
            break;
          }
          case 970: {
            Ipv6OptUnknown = input.ReadBytes();
            break;
          }
          case 976: {
            Ipv6Fragment = input.ReadInt64();
            break;
          }
          case 984: {
            Ipv6FragmentOverlap = input.ReadBool();
            break;
          }
          case 992: {
            Ipv6FragmentOverlapConflict = input.ReadBool();
            break;
          }
          case 1000: {
            Ipv6FragmentMultipletails = input.ReadBool();
            break;
          }
          case 1008: {
            Ipv6FragmentToolongfragment = input.ReadBool();
            break;
          }
          case 1016: {
            Ipv6FragmentError = input.ReadInt64();
            break;
          }
          case 1024: {
            Ipv6FragmentCount = input.ReadUInt32();
            break;
          }
          case 1032: {
            Ipv6Fragments = input.ReadInt32();
            break;
          }
          case 1040: {
            Ipv6ReassembledIn = input.ReadInt64();
            break;
          }
          case 1048: {
            Ipv6ReassembledLength = input.ReadUInt32();
            break;
          }
          case 1058: {
            Ipv6ReassembledData = input.ReadBytes();
            break;
          }
          case 1064: {
            Ipv6HopoptsNxt = input.ReadUInt32();
            break;
          }
          case 1072: {
            Ipv6HopoptsLen = input.ReadUInt32();
            break;
          }
          case 1080: {
            Ipv6HopoptsLenOct = input.ReadUInt32();
            break;
          }
          case 1088: {
            Ipv6DstoptsNxt = input.ReadUInt32();
            break;
          }
          case 1096: {
            Ipv6DstoptsLen = input.ReadUInt32();
            break;
          }
          case 1104: {
            Ipv6DstoptsLenOct = input.ReadUInt32();
            break;
          }
          case 1112: {
            Ipv6RoutingNxt = input.ReadUInt32();
            break;
          }
          case 1120: {
            Ipv6RoutingLen = input.ReadUInt32();
            break;
          }
          case 1128: {
            Ipv6RoutingLenOct = input.ReadUInt32();
            break;
          }
          case 1136: {
            Ipv6RoutingType = input.ReadUInt32();
            break;
          }
          case 1144: {
            Ipv6RoutingSegleft = input.ReadUInt32();
            break;
          }
          case 1154: {
            Ipv6RoutingUnknownData = input.ReadBytes();
            break;
          }
          case 1162: {
            Ipv6RoutingSrcReserved = input.ReadBytes();
            break;
          }
          case 1170: {
            Ipv6RoutingSrcAddr = input.ReadBytes();
            break;
          }
          case 1178: {
            Ipv6RoutingMipv6Reserved = input.ReadBytes();
            break;
          }
          case 1186: {
            Ipv6RoutingMipv6HomeAddress = input.ReadBytes();
            break;
          }
          case 1192: {
            Ipv6RoutingRplCmpri = input.ReadUInt32();
            break;
          }
          case 1200: {
            Ipv6RoutingRplCmpre = input.ReadUInt32();
            break;
          }
          case 1208: {
            Ipv6RoutingRplPad = input.ReadUInt32();
            break;
          }
          case 1216: {
            Ipv6RoutingRplReserved = input.ReadUInt32();
            break;
          }
          case 1224: {
            Ipv6RoutingRplAddrCount = input.ReadInt32();
            break;
          }
          case 1234: {
            Ipv6RoutingRplAddress = input.ReadBytes();
            break;
          }
          case 1242: {
            Ipv6RoutingRplFullAddress = input.ReadBytes();
            break;
          }
          case 1248: {
            Ipv6RoutingSrhFirstSegment = input.ReadUInt32();
            break;
          }
          case 1256: {
            Ipv6RoutingSrhFlags = input.ReadUInt32();
            break;
          }
          case 1264: {
            Ipv6RoutingSrhFlagUnused1 = input.ReadUInt32();
            break;
          }
          case 1272: {
            Ipv6RoutingSrhFlagP = input.ReadBool();
            break;
          }
          case 1280: {
            Ipv6RoutingSrhFlagO = input.ReadBool();
            break;
          }
          case 1288: {
            Ipv6RoutingSrhFlagA = input.ReadBool();
            break;
          }
          case 1296: {
            Ipv6RoutingSrhFlagH = input.ReadBool();
            break;
          }
          case 1304: {
            Ipv6RoutingSrhFlagUnused2 = input.ReadUInt32();
            break;
          }
          case 1314: {
            Ipv6RoutingSrhReserved = input.ReadBytes();
            break;
          }
          case 1322: {
            Ipv6RoutingSrhAddr = input.ReadBytes();
            break;
          }
          case 1328: {
            Ipv6FraghdrNxt = input.ReadUInt32();
            break;
          }
          case 1336: {
            Ipv6FraghdrReservedOctet = input.ReadUInt32();
            break;
          }
          case 1344: {
            Ipv6FraghdrOffset = input.ReadUInt32();
            break;
          }
          case 1352: {
            Ipv6FraghdrReservedBits = input.ReadUInt32();
            break;
          }
          case 1360: {
            Ipv6FraghdrMore = input.ReadBool();
            break;
          }
          case 1368: {
            Ipv6FraghdrIdent = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
