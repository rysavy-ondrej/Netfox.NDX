// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-frame.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Base {

  /// <summary>Holder for reflection information generated from packet-frame.proto</summary>
  public static partial class PacketFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwYWNrZXQtZnJhbWUucHJvdG8SEU5keC5EZWNvZGVycy5CYXNlInMKBUZy",
            "YW1lEhYKDkZyYW1lRW5jYXBUeXBlGAEgASgFEhMKC0ZyYW1lTnVtYmVyGAIg",
            "ASgNEhAKCEZyYW1lTGVuGAMgASgNEhMKC0ZyYW1lQ2FwTGVuGAQgASgNEhYK",
            "DkZyYW1lUHJvdG9jb2xzGAUgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Base.Frame), global::Ndx.Decoders.Base.Frame.Parser, new[]{ "FrameEncapType", "FrameNumber", "FrameLen", "FrameCapLen", "FrameProtocols" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Base.PacketFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      frameEncapType_ = other.frameEncapType_;
      frameNumber_ = other.frameNumber_;
      frameLen_ = other.frameLen_;
      frameCapLen_ = other.frameCapLen_;
      frameProtocols_ = other.frameProtocols_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "FrameEncapType" field.</summary>
    public const int FrameEncapTypeFieldNumber = 1;
    private int frameEncapType_;
    /// <summary>
    /// Encapsulation type ('frame_frame_encap_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameEncapType {
      get { return frameEncapType_; }
      set {
        frameEncapType_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private uint frameNumber_;
    /// <summary>
    /// Frame Number ('frame_frame_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLen" field.</summary>
    public const int FrameLenFieldNumber = 3;
    private uint frameLen_;
    /// <summary>
    /// Frame length on the wire ('frame_frame_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameLen {
      get { return frameLen_; }
      set {
        frameLen_ = value;
      }
    }

    /// <summary>Field number for the "FrameCapLen" field.</summary>
    public const int FrameCapLenFieldNumber = 4;
    private uint frameCapLen_;
    /// <summary>
    /// Frame length stored into the capture file ('frame_frame_cap_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameCapLen {
      get { return frameCapLen_; }
      set {
        frameCapLen_ = value;
      }
    }

    /// <summary>Field number for the "FrameProtocols" field.</summary>
    public const int FrameProtocolsFieldNumber = 5;
    private string frameProtocols_ = "";
    /// <summary>
    /// Protocols in frame ('frame_frame_protocols')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameProtocols {
      get { return frameProtocols_; }
      set {
        frameProtocols_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameEncapType != other.FrameEncapType) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLen != other.FrameLen) return false;
      if (FrameCapLen != other.FrameCapLen) return false;
      if (FrameProtocols != other.FrameProtocols) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameEncapType != 0) hash ^= FrameEncapType.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLen != 0) hash ^= FrameLen.GetHashCode();
      if (FrameCapLen != 0) hash ^= FrameCapLen.GetHashCode();
      if (FrameProtocols.Length != 0) hash ^= FrameProtocols.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameEncapType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameEncapType);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameNumber);
      }
      if (FrameLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FrameLen);
      }
      if (FrameCapLen != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FrameCapLen);
      }
      if (FrameProtocols.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FrameProtocols);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameEncapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameEncapType);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameNumber);
      }
      if (FrameLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameLen);
      }
      if (FrameCapLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameCapLen);
      }
      if (FrameProtocols.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameProtocols);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.FrameEncapType != 0) {
        FrameEncapType = other.FrameEncapType;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLen != 0) {
        FrameLen = other.FrameLen;
      }
      if (other.FrameCapLen != 0) {
        FrameCapLen = other.FrameCapLen;
      }
      if (other.FrameProtocols.Length != 0) {
        FrameProtocols = other.FrameProtocols;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameEncapType = input.ReadInt32();
            break;
          }
          case 16: {
            FrameNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            FrameLen = input.ReadUInt32();
            break;
          }
          case 32: {
            FrameCapLen = input.ReadUInt32();
            break;
          }
          case 42: {
            FrameProtocols = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
