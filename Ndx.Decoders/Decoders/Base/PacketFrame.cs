// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet-frame.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders.Basic {

  /// <summary>Holder for reflection information generated from packet-frame.proto</summary>
  public static partial class PacketFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for packet-frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwYWNrZXQtZnJhbWUucHJvdG8SEk5keC5EZWNvZGVycy5CYXNpYyLOCAoF",
            "RnJhbWUSEQoJRnJhbWVUaW1lGAEgASgDEhgKEEZyYW1lT2Zmc2V0U2hpZnQY",
            "AiABKAMSFgoORnJhbWVUaW1lRXBvY2gYAyABKAMSFgoORnJhbWVUaW1lRGVs",
            "dGEYBCABKAMSHwoXRnJhbWVUaW1lRGVsdGFEaXNwbGF5ZWQYBSABKAMSGQoR",
            "RnJhbWVUaW1lUmVsYXRpdmUYBiABKAMSFAoMRnJhbWVSZWZUaW1lGAcgASgF",
            "EhMKC0ZyYW1lTnVtYmVyGAggASgNEhAKCEZyYW1lTGVuGAkgASgNEhMKC0Zy",
            "YW1lQ2FwTGVuGAogASgNEhQKDEZyYW1lTWQ1SGFzaBgLIAEoCRITCgtGcmFt",
            "ZVAycERpchgMIAEoBRITCgtGcmFtZUxpbmtOchgNIAEoDRIUCgxGcmFtZUZp",
            "bGVPZmYYDiABKAMSEwoLRnJhbWVNYXJrZWQYDyABKAgSFAoMRnJhbWVJZ25v",
            "cmVkGBAgASgIEhYKDkZyYW1lUHJvdG9jb2xzGBEgASgJEh0KFUZyYW1lQ29s",
            "b3JpbmdSdWxlTmFtZRgSIAEoCRIfChdGcmFtZUNvbG9yaW5nUnVsZVN0cmlu",
            "ZxgTIAEoCRIYChBGcmFtZUludGVyZmFjZUlkGBQgASgNEhoKEkZyYW1lSW50",
            "ZXJmYWNlTmFtZRgVIAEoCRIhChlGcmFtZUludGVyZmFjZURlc2NyaXB0aW9u",
            "GBYgASgJEhgKEEZyYW1lUGFja2V0RmxhZ3MYFyABKA0SIQoZRnJhbWVQYWNr",
            "ZXRGbGFnc0RpcmVjdGlvbhgYIAEoDRIlCh1GcmFtZVBhY2tldEZsYWdzUmVj",
            "ZXB0aW9uVHlwZRgZIAEoDRIhChlGcmFtZVBhY2tldEZsYWdzRmNzTGVuZ3Ro",
            "GBogASgNEiAKGEZyYW1lUGFja2V0RmxhZ3NSZXNlcnZlZBgbIAEoDRIgChhG",
            "cmFtZVBhY2tldEZsYWdzQ3JjRXJyb3IYHCABKAgSJgoeRnJhbWVQYWNrZXRG",
            "bGFnc1BhY2tldFRvb0Vycm9yGB0gASgIEisKI0ZyYW1lUGFja2V0RmxhZ3NQ",
            "YWNrZXRUb29TaG9ydEVycm9yGB4gASgIEi8KJ0ZyYW1lUGFja2V0RmxhZ3NX",
            "cm9uZ0ludGVyRnJhbWVHYXBFcnJvchgfIAEoCBIrCiNGcmFtZVBhY2tldEZs",
            "YWdzVW5hbGlnbmVkRnJhbWVFcnJvchggIAEoCBIwCihGcmFtZVBhY2tldEZs",
            "YWdzU3RhcnRGcmFtZURlbGltaXRlckVycm9yGCEgASgIEiUKHUZyYW1lUGFj",
            "a2V0RmxhZ3NQcmVhbWJsZUVycm9yGCIgASgIEiMKG0ZyYW1lUGFja2V0Rmxh",
            "Z3NTeW1ib2xFcnJvchgjIAEoCBIUCgxGcmFtZUNvbW1lbnQYJCABKAkSFgoO",
            "RnJhbWVFbmNhcFR5cGUYJSABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Basic.Frame), global::Ndx.Decoders.Basic.Frame.Parser, new[]{ "FrameTime", "FrameOffsetShift", "FrameTimeEpoch", "FrameTimeDelta", "FrameTimeDeltaDisplayed", "FrameTimeRelative", "FrameRefTime", "FrameNumber", "FrameLen", "FrameCapLen", "FrameMd5Hash", "FrameP2PDir", "FrameLinkNr", "FrameFileOff", "FrameMarked", "FrameIgnored", "FrameProtocols", "FrameColoringRuleName", "FrameColoringRuleString", "FrameInterfaceId", "FrameInterfaceName", "FrameInterfaceDescription", "FramePacketFlags", "FramePacketFlagsDirection", "FramePacketFlagsReceptionType", "FramePacketFlagsFcsLength", "FramePacketFlagsReserved", "FramePacketFlagsCrcError", "FramePacketFlagsPacketTooError", "FramePacketFlagsPacketTooShortError", "FramePacketFlagsWrongInterFrameGapError", "FramePacketFlagsUnalignedFrameError", "FramePacketFlagsStartFrameDelimiterError", "FramePacketFlagsPreambleError", "FramePacketFlagsSymbolError", "FrameComment", "FrameEncapType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.Basic.PacketFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      frameTime_ = other.frameTime_;
      frameOffsetShift_ = other.frameOffsetShift_;
      frameTimeEpoch_ = other.frameTimeEpoch_;
      frameTimeDelta_ = other.frameTimeDelta_;
      frameTimeDeltaDisplayed_ = other.frameTimeDeltaDisplayed_;
      frameTimeRelative_ = other.frameTimeRelative_;
      frameRefTime_ = other.frameRefTime_;
      frameNumber_ = other.frameNumber_;
      frameLen_ = other.frameLen_;
      frameCapLen_ = other.frameCapLen_;
      frameMd5Hash_ = other.frameMd5Hash_;
      frameP2PDir_ = other.frameP2PDir_;
      frameLinkNr_ = other.frameLinkNr_;
      frameFileOff_ = other.frameFileOff_;
      frameMarked_ = other.frameMarked_;
      frameIgnored_ = other.frameIgnored_;
      frameProtocols_ = other.frameProtocols_;
      frameColoringRuleName_ = other.frameColoringRuleName_;
      frameColoringRuleString_ = other.frameColoringRuleString_;
      frameInterfaceId_ = other.frameInterfaceId_;
      frameInterfaceName_ = other.frameInterfaceName_;
      frameInterfaceDescription_ = other.frameInterfaceDescription_;
      framePacketFlags_ = other.framePacketFlags_;
      framePacketFlagsDirection_ = other.framePacketFlagsDirection_;
      framePacketFlagsReceptionType_ = other.framePacketFlagsReceptionType_;
      framePacketFlagsFcsLength_ = other.framePacketFlagsFcsLength_;
      framePacketFlagsReserved_ = other.framePacketFlagsReserved_;
      framePacketFlagsCrcError_ = other.framePacketFlagsCrcError_;
      framePacketFlagsPacketTooError_ = other.framePacketFlagsPacketTooError_;
      framePacketFlagsPacketTooShortError_ = other.framePacketFlagsPacketTooShortError_;
      framePacketFlagsWrongInterFrameGapError_ = other.framePacketFlagsWrongInterFrameGapError_;
      framePacketFlagsUnalignedFrameError_ = other.framePacketFlagsUnalignedFrameError_;
      framePacketFlagsStartFrameDelimiterError_ = other.framePacketFlagsStartFrameDelimiterError_;
      framePacketFlagsPreambleError_ = other.framePacketFlagsPreambleError_;
      framePacketFlagsSymbolError_ = other.framePacketFlagsSymbolError_;
      frameComment_ = other.frameComment_;
      frameEncapType_ = other.frameEncapType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "FrameTime" field.</summary>
    public const int FrameTimeFieldNumber = 1;
    private long frameTime_;
    /// <summary>
    /// Arrival Time ('frame_frame_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTime {
      get { return frameTime_; }
      set {
        frameTime_ = value;
      }
    }

    /// <summary>Field number for the "FrameOffsetShift" field.</summary>
    public const int FrameOffsetShiftFieldNumber = 2;
    private long frameOffsetShift_;
    /// <summary>
    /// Time shift for this packet ('frame_frame_offset_shift')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameOffsetShift {
      get { return frameOffsetShift_; }
      set {
        frameOffsetShift_ = value;
      }
    }

    /// <summary>Field number for the "FrameTimeEpoch" field.</summary>
    public const int FrameTimeEpochFieldNumber = 3;
    private long frameTimeEpoch_;
    /// <summary>
    /// Epoch Time ('frame_frame_time_epoch')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTimeEpoch {
      get { return frameTimeEpoch_; }
      set {
        frameTimeEpoch_ = value;
      }
    }

    /// <summary>Field number for the "FrameTimeDelta" field.</summary>
    public const int FrameTimeDeltaFieldNumber = 4;
    private long frameTimeDelta_;
    /// <summary>
    /// Time delta from previous captured frame ('frame_frame_time_delta')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTimeDelta {
      get { return frameTimeDelta_; }
      set {
        frameTimeDelta_ = value;
      }
    }

    /// <summary>Field number for the "FrameTimeDeltaDisplayed" field.</summary>
    public const int FrameTimeDeltaDisplayedFieldNumber = 5;
    private long frameTimeDeltaDisplayed_;
    /// <summary>
    /// Time delta from previous displayed frame ('frame_frame_time_delta_displayed')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTimeDeltaDisplayed {
      get { return frameTimeDeltaDisplayed_; }
      set {
        frameTimeDeltaDisplayed_ = value;
      }
    }

    /// <summary>Field number for the "FrameTimeRelative" field.</summary>
    public const int FrameTimeRelativeFieldNumber = 6;
    private long frameTimeRelative_;
    /// <summary>
    /// Time since reference or first frame ('frame_frame_time_relative')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameTimeRelative {
      get { return frameTimeRelative_; }
      set {
        frameTimeRelative_ = value;
      }
    }

    /// <summary>Field number for the "FrameRefTime" field.</summary>
    public const int FrameRefTimeFieldNumber = 7;
    private int frameRefTime_;
    /// <summary>
    /// This is a Time Reference frame ('frame_frame_ref_time')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameRefTime {
      get { return frameRefTime_; }
      set {
        frameRefTime_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 8;
    private uint frameNumber_;
    /// <summary>
    /// Frame Number ('frame_frame_number')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "FrameLen" field.</summary>
    public const int FrameLenFieldNumber = 9;
    private uint frameLen_;
    /// <summary>
    /// Frame length on the wire ('frame_frame_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameLen {
      get { return frameLen_; }
      set {
        frameLen_ = value;
      }
    }

    /// <summary>Field number for the "FrameCapLen" field.</summary>
    public const int FrameCapLenFieldNumber = 10;
    private uint frameCapLen_;
    /// <summary>
    /// Frame length stored into the capture file ('frame_frame_cap_len')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameCapLen {
      get { return frameCapLen_; }
      set {
        frameCapLen_ = value;
      }
    }

    /// <summary>Field number for the "FrameMd5Hash" field.</summary>
    public const int FrameMd5HashFieldNumber = 11;
    private string frameMd5Hash_ = "";
    /// <summary>
    /// Frame MD5 Hash ('frame_frame_md5_hash')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameMd5Hash {
      get { return frameMd5Hash_; }
      set {
        frameMd5Hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameP2pDir" field.</summary>
    public const int FrameP2PDirFieldNumber = 12;
    private int frameP2PDir_;
    /// <summary>
    /// Point-to-Point Direction ('frame_frame_p2p_dir')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameP2PDir {
      get { return frameP2PDir_; }
      set {
        frameP2PDir_ = value;
      }
    }

    /// <summary>Field number for the "FrameLinkNr" field.</summary>
    public const int FrameLinkNrFieldNumber = 13;
    private uint frameLinkNr_;
    /// <summary>
    /// Link Number ('frame_frame_link_nr')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameLinkNr {
      get { return frameLinkNr_; }
      set {
        frameLinkNr_ = value;
      }
    }

    /// <summary>Field number for the "FrameFileOff" field.</summary>
    public const int FrameFileOffFieldNumber = 14;
    private long frameFileOff_;
    /// <summary>
    /// File Offset ('frame_frame_file_off')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrameFileOff {
      get { return frameFileOff_; }
      set {
        frameFileOff_ = value;
      }
    }

    /// <summary>Field number for the "FrameMarked" field.</summary>
    public const int FrameMarkedFieldNumber = 15;
    private bool frameMarked_;
    /// <summary>
    /// Frame is marked ('frame_frame_marked')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrameMarked {
      get { return frameMarked_; }
      set {
        frameMarked_ = value;
      }
    }

    /// <summary>Field number for the "FrameIgnored" field.</summary>
    public const int FrameIgnoredFieldNumber = 16;
    private bool frameIgnored_;
    /// <summary>
    /// Frame is ignored ('frame_frame_ignored')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrameIgnored {
      get { return frameIgnored_; }
      set {
        frameIgnored_ = value;
      }
    }

    /// <summary>Field number for the "FrameProtocols" field.</summary>
    public const int FrameProtocolsFieldNumber = 17;
    private string frameProtocols_ = "";
    /// <summary>
    /// Protocols in frame ('frame_frame_protocols')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameProtocols {
      get { return frameProtocols_; }
      set {
        frameProtocols_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameColoringRuleName" field.</summary>
    public const int FrameColoringRuleNameFieldNumber = 18;
    private string frameColoringRuleName_ = "";
    /// <summary>
    /// Coloring Rule Name ('frame_frame_coloring_rule_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameColoringRuleName {
      get { return frameColoringRuleName_; }
      set {
        frameColoringRuleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameColoringRuleString" field.</summary>
    public const int FrameColoringRuleStringFieldNumber = 19;
    private string frameColoringRuleString_ = "";
    /// <summary>
    /// Coloring Rule String ('frame_frame_coloring_rule_string')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameColoringRuleString {
      get { return frameColoringRuleString_; }
      set {
        frameColoringRuleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameInterfaceId" field.</summary>
    public const int FrameInterfaceIdFieldNumber = 20;
    private uint frameInterfaceId_;
    /// <summary>
    /// Interface id ('frame_frame_interface_id')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameInterfaceId {
      get { return frameInterfaceId_; }
      set {
        frameInterfaceId_ = value;
      }
    }

    /// <summary>Field number for the "FrameInterfaceName" field.</summary>
    public const int FrameInterfaceNameFieldNumber = 21;
    private string frameInterfaceName_ = "";
    /// <summary>
    /// Interface name ('frame_frame_interface_name')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameInterfaceName {
      get { return frameInterfaceName_; }
      set {
        frameInterfaceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameInterfaceDescription" field.</summary>
    public const int FrameInterfaceDescriptionFieldNumber = 22;
    private string frameInterfaceDescription_ = "";
    /// <summary>
    /// Interface description ('frame_frame_interface_description')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameInterfaceDescription {
      get { return frameInterfaceDescription_; }
      set {
        frameInterfaceDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FramePacketFlags" field.</summary>
    public const int FramePacketFlagsFieldNumber = 23;
    private uint framePacketFlags_;
    /// <summary>
    /// Packet flags ('frame_frame_packet_flags')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePacketFlags {
      get { return framePacketFlags_; }
      set {
        framePacketFlags_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsDirection" field.</summary>
    public const int FramePacketFlagsDirectionFieldNumber = 24;
    private uint framePacketFlagsDirection_;
    /// <summary>
    /// Direction ('frame_frame_packet_flags_direction')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePacketFlagsDirection {
      get { return framePacketFlagsDirection_; }
      set {
        framePacketFlagsDirection_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsReceptionType" field.</summary>
    public const int FramePacketFlagsReceptionTypeFieldNumber = 25;
    private uint framePacketFlagsReceptionType_;
    /// <summary>
    /// Reception type ('frame_frame_packet_flags_reception_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePacketFlagsReceptionType {
      get { return framePacketFlagsReceptionType_; }
      set {
        framePacketFlagsReceptionType_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsFcsLength" field.</summary>
    public const int FramePacketFlagsFcsLengthFieldNumber = 26;
    private uint framePacketFlagsFcsLength_;
    /// <summary>
    /// FCS length ('frame_frame_packet_flags_fcs_length')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePacketFlagsFcsLength {
      get { return framePacketFlagsFcsLength_; }
      set {
        framePacketFlagsFcsLength_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsReserved" field.</summary>
    public const int FramePacketFlagsReservedFieldNumber = 27;
    private uint framePacketFlagsReserved_;
    /// <summary>
    /// Reserved ('frame_frame_packet_flags_reserved')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePacketFlagsReserved {
      get { return framePacketFlagsReserved_; }
      set {
        framePacketFlagsReserved_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsCrcError" field.</summary>
    public const int FramePacketFlagsCrcErrorFieldNumber = 28;
    private bool framePacketFlagsCrcError_;
    /// <summary>
    /// CRC error ('frame_frame_packet_flags_crc_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsCrcError {
      get { return framePacketFlagsCrcError_; }
      set {
        framePacketFlagsCrcError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsPacketTooError" field.</summary>
    public const int FramePacketFlagsPacketTooErrorFieldNumber = 29;
    private bool framePacketFlagsPacketTooError_;
    /// <summary>
    /// Packet too long error ('frame_frame_packet_flags_packet_too_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsPacketTooError {
      get { return framePacketFlagsPacketTooError_; }
      set {
        framePacketFlagsPacketTooError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsPacketTooShortError" field.</summary>
    public const int FramePacketFlagsPacketTooShortErrorFieldNumber = 30;
    private bool framePacketFlagsPacketTooShortError_;
    /// <summary>
    /// Packet too short error ('frame_frame_packet_flags_packet_too_short_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsPacketTooShortError {
      get { return framePacketFlagsPacketTooShortError_; }
      set {
        framePacketFlagsPacketTooShortError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsWrongInterFrameGapError" field.</summary>
    public const int FramePacketFlagsWrongInterFrameGapErrorFieldNumber = 31;
    private bool framePacketFlagsWrongInterFrameGapError_;
    /// <summary>
    /// Wrong interframe gap error ('frame_frame_packet_flags_wrong_inter_frame_gap_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsWrongInterFrameGapError {
      get { return framePacketFlagsWrongInterFrameGapError_; }
      set {
        framePacketFlagsWrongInterFrameGapError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsUnalignedFrameError" field.</summary>
    public const int FramePacketFlagsUnalignedFrameErrorFieldNumber = 32;
    private bool framePacketFlagsUnalignedFrameError_;
    /// <summary>
    /// Unaligned frame error ('frame_frame_packet_flags_unaligned_frame_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsUnalignedFrameError {
      get { return framePacketFlagsUnalignedFrameError_; }
      set {
        framePacketFlagsUnalignedFrameError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsStartFrameDelimiterError" field.</summary>
    public const int FramePacketFlagsStartFrameDelimiterErrorFieldNumber = 33;
    private bool framePacketFlagsStartFrameDelimiterError_;
    /// <summary>
    /// Start frame delimiter error ('frame_frame_packet_flags_start_frame_delimiter_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsStartFrameDelimiterError {
      get { return framePacketFlagsStartFrameDelimiterError_; }
      set {
        framePacketFlagsStartFrameDelimiterError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsPreambleError" field.</summary>
    public const int FramePacketFlagsPreambleErrorFieldNumber = 34;
    private bool framePacketFlagsPreambleError_;
    /// <summary>
    /// Preamble error ('frame_frame_packet_flags_preamble_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsPreambleError {
      get { return framePacketFlagsPreambleError_; }
      set {
        framePacketFlagsPreambleError_ = value;
      }
    }

    /// <summary>Field number for the "FramePacketFlagsSymbolError" field.</summary>
    public const int FramePacketFlagsSymbolErrorFieldNumber = 35;
    private bool framePacketFlagsSymbolError_;
    /// <summary>
    /// Symbol error ('frame_frame_packet_flags_symbol_error')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FramePacketFlagsSymbolError {
      get { return framePacketFlagsSymbolError_; }
      set {
        framePacketFlagsSymbolError_ = value;
      }
    }

    /// <summary>Field number for the "FrameComment" field.</summary>
    public const int FrameCommentFieldNumber = 36;
    private string frameComment_ = "";
    /// <summary>
    /// Comment ('frame_frame_comment')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrameComment {
      get { return frameComment_; }
      set {
        frameComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FrameEncapType" field.</summary>
    public const int FrameEncapTypeFieldNumber = 37;
    private int frameEncapType_;
    /// <summary>
    /// Encapsulation type ('frame_frame_encap_type')
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameEncapType {
      get { return frameEncapType_; }
      set {
        frameEncapType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameTime != other.FrameTime) return false;
      if (FrameOffsetShift != other.FrameOffsetShift) return false;
      if (FrameTimeEpoch != other.FrameTimeEpoch) return false;
      if (FrameTimeDelta != other.FrameTimeDelta) return false;
      if (FrameTimeDeltaDisplayed != other.FrameTimeDeltaDisplayed) return false;
      if (FrameTimeRelative != other.FrameTimeRelative) return false;
      if (FrameRefTime != other.FrameRefTime) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (FrameLen != other.FrameLen) return false;
      if (FrameCapLen != other.FrameCapLen) return false;
      if (FrameMd5Hash != other.FrameMd5Hash) return false;
      if (FrameP2PDir != other.FrameP2PDir) return false;
      if (FrameLinkNr != other.FrameLinkNr) return false;
      if (FrameFileOff != other.FrameFileOff) return false;
      if (FrameMarked != other.FrameMarked) return false;
      if (FrameIgnored != other.FrameIgnored) return false;
      if (FrameProtocols != other.FrameProtocols) return false;
      if (FrameColoringRuleName != other.FrameColoringRuleName) return false;
      if (FrameColoringRuleString != other.FrameColoringRuleString) return false;
      if (FrameInterfaceId != other.FrameInterfaceId) return false;
      if (FrameInterfaceName != other.FrameInterfaceName) return false;
      if (FrameInterfaceDescription != other.FrameInterfaceDescription) return false;
      if (FramePacketFlags != other.FramePacketFlags) return false;
      if (FramePacketFlagsDirection != other.FramePacketFlagsDirection) return false;
      if (FramePacketFlagsReceptionType != other.FramePacketFlagsReceptionType) return false;
      if (FramePacketFlagsFcsLength != other.FramePacketFlagsFcsLength) return false;
      if (FramePacketFlagsReserved != other.FramePacketFlagsReserved) return false;
      if (FramePacketFlagsCrcError != other.FramePacketFlagsCrcError) return false;
      if (FramePacketFlagsPacketTooError != other.FramePacketFlagsPacketTooError) return false;
      if (FramePacketFlagsPacketTooShortError != other.FramePacketFlagsPacketTooShortError) return false;
      if (FramePacketFlagsWrongInterFrameGapError != other.FramePacketFlagsWrongInterFrameGapError) return false;
      if (FramePacketFlagsUnalignedFrameError != other.FramePacketFlagsUnalignedFrameError) return false;
      if (FramePacketFlagsStartFrameDelimiterError != other.FramePacketFlagsStartFrameDelimiterError) return false;
      if (FramePacketFlagsPreambleError != other.FramePacketFlagsPreambleError) return false;
      if (FramePacketFlagsSymbolError != other.FramePacketFlagsSymbolError) return false;
      if (FrameComment != other.FrameComment) return false;
      if (FrameEncapType != other.FrameEncapType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameTime != 0L) hash ^= FrameTime.GetHashCode();
      if (FrameOffsetShift != 0L) hash ^= FrameOffsetShift.GetHashCode();
      if (FrameTimeEpoch != 0L) hash ^= FrameTimeEpoch.GetHashCode();
      if (FrameTimeDelta != 0L) hash ^= FrameTimeDelta.GetHashCode();
      if (FrameTimeDeltaDisplayed != 0L) hash ^= FrameTimeDeltaDisplayed.GetHashCode();
      if (FrameTimeRelative != 0L) hash ^= FrameTimeRelative.GetHashCode();
      if (FrameRefTime != 0) hash ^= FrameRefTime.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (FrameLen != 0) hash ^= FrameLen.GetHashCode();
      if (FrameCapLen != 0) hash ^= FrameCapLen.GetHashCode();
      if (FrameMd5Hash.Length != 0) hash ^= FrameMd5Hash.GetHashCode();
      if (FrameP2PDir != 0) hash ^= FrameP2PDir.GetHashCode();
      if (FrameLinkNr != 0) hash ^= FrameLinkNr.GetHashCode();
      if (FrameFileOff != 0L) hash ^= FrameFileOff.GetHashCode();
      if (FrameMarked != false) hash ^= FrameMarked.GetHashCode();
      if (FrameIgnored != false) hash ^= FrameIgnored.GetHashCode();
      if (FrameProtocols.Length != 0) hash ^= FrameProtocols.GetHashCode();
      if (FrameColoringRuleName.Length != 0) hash ^= FrameColoringRuleName.GetHashCode();
      if (FrameColoringRuleString.Length != 0) hash ^= FrameColoringRuleString.GetHashCode();
      if (FrameInterfaceId != 0) hash ^= FrameInterfaceId.GetHashCode();
      if (FrameInterfaceName.Length != 0) hash ^= FrameInterfaceName.GetHashCode();
      if (FrameInterfaceDescription.Length != 0) hash ^= FrameInterfaceDescription.GetHashCode();
      if (FramePacketFlags != 0) hash ^= FramePacketFlags.GetHashCode();
      if (FramePacketFlagsDirection != 0) hash ^= FramePacketFlagsDirection.GetHashCode();
      if (FramePacketFlagsReceptionType != 0) hash ^= FramePacketFlagsReceptionType.GetHashCode();
      if (FramePacketFlagsFcsLength != 0) hash ^= FramePacketFlagsFcsLength.GetHashCode();
      if (FramePacketFlagsReserved != 0) hash ^= FramePacketFlagsReserved.GetHashCode();
      if (FramePacketFlagsCrcError != false) hash ^= FramePacketFlagsCrcError.GetHashCode();
      if (FramePacketFlagsPacketTooError != false) hash ^= FramePacketFlagsPacketTooError.GetHashCode();
      if (FramePacketFlagsPacketTooShortError != false) hash ^= FramePacketFlagsPacketTooShortError.GetHashCode();
      if (FramePacketFlagsWrongInterFrameGapError != false) hash ^= FramePacketFlagsWrongInterFrameGapError.GetHashCode();
      if (FramePacketFlagsUnalignedFrameError != false) hash ^= FramePacketFlagsUnalignedFrameError.GetHashCode();
      if (FramePacketFlagsStartFrameDelimiterError != false) hash ^= FramePacketFlagsStartFrameDelimiterError.GetHashCode();
      if (FramePacketFlagsPreambleError != false) hash ^= FramePacketFlagsPreambleError.GetHashCode();
      if (FramePacketFlagsSymbolError != false) hash ^= FramePacketFlagsSymbolError.GetHashCode();
      if (FrameComment.Length != 0) hash ^= FrameComment.GetHashCode();
      if (FrameEncapType != 0) hash ^= FrameEncapType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FrameTime);
      }
      if (FrameOffsetShift != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FrameOffsetShift);
      }
      if (FrameTimeEpoch != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FrameTimeEpoch);
      }
      if (FrameTimeDelta != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrameTimeDelta);
      }
      if (FrameTimeDeltaDisplayed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FrameTimeDeltaDisplayed);
      }
      if (FrameTimeRelative != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FrameTimeRelative);
      }
      if (FrameRefTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FrameRefTime);
      }
      if (FrameNumber != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FrameNumber);
      }
      if (FrameLen != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FrameLen);
      }
      if (FrameCapLen != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(FrameCapLen);
      }
      if (FrameMd5Hash.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(FrameMd5Hash);
      }
      if (FrameP2PDir != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FrameP2PDir);
      }
      if (FrameLinkNr != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(FrameLinkNr);
      }
      if (FrameFileOff != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(FrameFileOff);
      }
      if (FrameMarked != false) {
        output.WriteRawTag(120);
        output.WriteBool(FrameMarked);
      }
      if (FrameIgnored != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(FrameIgnored);
      }
      if (FrameProtocols.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FrameProtocols);
      }
      if (FrameColoringRuleName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FrameColoringRuleName);
      }
      if (FrameColoringRuleString.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(FrameColoringRuleString);
      }
      if (FrameInterfaceId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(FrameInterfaceId);
      }
      if (FrameInterfaceName.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(FrameInterfaceName);
      }
      if (FrameInterfaceDescription.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(FrameInterfaceDescription);
      }
      if (FramePacketFlags != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(FramePacketFlags);
      }
      if (FramePacketFlagsDirection != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(FramePacketFlagsDirection);
      }
      if (FramePacketFlagsReceptionType != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(FramePacketFlagsReceptionType);
      }
      if (FramePacketFlagsFcsLength != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(FramePacketFlagsFcsLength);
      }
      if (FramePacketFlagsReserved != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(FramePacketFlagsReserved);
      }
      if (FramePacketFlagsCrcError != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(FramePacketFlagsCrcError);
      }
      if (FramePacketFlagsPacketTooError != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(FramePacketFlagsPacketTooError);
      }
      if (FramePacketFlagsPacketTooShortError != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(FramePacketFlagsPacketTooShortError);
      }
      if (FramePacketFlagsWrongInterFrameGapError != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(FramePacketFlagsWrongInterFrameGapError);
      }
      if (FramePacketFlagsUnalignedFrameError != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(FramePacketFlagsUnalignedFrameError);
      }
      if (FramePacketFlagsStartFrameDelimiterError != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(FramePacketFlagsStartFrameDelimiterError);
      }
      if (FramePacketFlagsPreambleError != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(FramePacketFlagsPreambleError);
      }
      if (FramePacketFlagsSymbolError != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FramePacketFlagsSymbolError);
      }
      if (FrameComment.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(FrameComment);
      }
      if (FrameEncapType != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(FrameEncapType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTime);
      }
      if (FrameOffsetShift != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameOffsetShift);
      }
      if (FrameTimeEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTimeEpoch);
      }
      if (FrameTimeDelta != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTimeDelta);
      }
      if (FrameTimeDeltaDisplayed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTimeDeltaDisplayed);
      }
      if (FrameTimeRelative != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameTimeRelative);
      }
      if (FrameRefTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameRefTime);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameNumber);
      }
      if (FrameLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameLen);
      }
      if (FrameCapLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameCapLen);
      }
      if (FrameMd5Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrameMd5Hash);
      }
      if (FrameP2PDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameP2PDir);
      }
      if (FrameLinkNr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameLinkNr);
      }
      if (FrameFileOff != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrameFileOff);
      }
      if (FrameMarked != false) {
        size += 1 + 1;
      }
      if (FrameIgnored != false) {
        size += 2 + 1;
      }
      if (FrameProtocols.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameProtocols);
      }
      if (FrameColoringRuleName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameColoringRuleName);
      }
      if (FrameColoringRuleString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameColoringRuleString);
      }
      if (FrameInterfaceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FrameInterfaceId);
      }
      if (FrameInterfaceName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameInterfaceName);
      }
      if (FrameInterfaceDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameInterfaceDescription);
      }
      if (FramePacketFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FramePacketFlags);
      }
      if (FramePacketFlagsDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FramePacketFlagsDirection);
      }
      if (FramePacketFlagsReceptionType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FramePacketFlagsReceptionType);
      }
      if (FramePacketFlagsFcsLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FramePacketFlagsFcsLength);
      }
      if (FramePacketFlagsReserved != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FramePacketFlagsReserved);
      }
      if (FramePacketFlagsCrcError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsPacketTooError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsPacketTooShortError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsWrongInterFrameGapError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsUnalignedFrameError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsStartFrameDelimiterError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsPreambleError != false) {
        size += 2 + 1;
      }
      if (FramePacketFlagsSymbolError != false) {
        size += 2 + 1;
      }
      if (FrameComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FrameComment);
      }
      if (FrameEncapType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrameEncapType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.FrameTime != 0L) {
        FrameTime = other.FrameTime;
      }
      if (other.FrameOffsetShift != 0L) {
        FrameOffsetShift = other.FrameOffsetShift;
      }
      if (other.FrameTimeEpoch != 0L) {
        FrameTimeEpoch = other.FrameTimeEpoch;
      }
      if (other.FrameTimeDelta != 0L) {
        FrameTimeDelta = other.FrameTimeDelta;
      }
      if (other.FrameTimeDeltaDisplayed != 0L) {
        FrameTimeDeltaDisplayed = other.FrameTimeDeltaDisplayed;
      }
      if (other.FrameTimeRelative != 0L) {
        FrameTimeRelative = other.FrameTimeRelative;
      }
      if (other.FrameRefTime != 0) {
        FrameRefTime = other.FrameRefTime;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.FrameLen != 0) {
        FrameLen = other.FrameLen;
      }
      if (other.FrameCapLen != 0) {
        FrameCapLen = other.FrameCapLen;
      }
      if (other.FrameMd5Hash.Length != 0) {
        FrameMd5Hash = other.FrameMd5Hash;
      }
      if (other.FrameP2PDir != 0) {
        FrameP2PDir = other.FrameP2PDir;
      }
      if (other.FrameLinkNr != 0) {
        FrameLinkNr = other.FrameLinkNr;
      }
      if (other.FrameFileOff != 0L) {
        FrameFileOff = other.FrameFileOff;
      }
      if (other.FrameMarked != false) {
        FrameMarked = other.FrameMarked;
      }
      if (other.FrameIgnored != false) {
        FrameIgnored = other.FrameIgnored;
      }
      if (other.FrameProtocols.Length != 0) {
        FrameProtocols = other.FrameProtocols;
      }
      if (other.FrameColoringRuleName.Length != 0) {
        FrameColoringRuleName = other.FrameColoringRuleName;
      }
      if (other.FrameColoringRuleString.Length != 0) {
        FrameColoringRuleString = other.FrameColoringRuleString;
      }
      if (other.FrameInterfaceId != 0) {
        FrameInterfaceId = other.FrameInterfaceId;
      }
      if (other.FrameInterfaceName.Length != 0) {
        FrameInterfaceName = other.FrameInterfaceName;
      }
      if (other.FrameInterfaceDescription.Length != 0) {
        FrameInterfaceDescription = other.FrameInterfaceDescription;
      }
      if (other.FramePacketFlags != 0) {
        FramePacketFlags = other.FramePacketFlags;
      }
      if (other.FramePacketFlagsDirection != 0) {
        FramePacketFlagsDirection = other.FramePacketFlagsDirection;
      }
      if (other.FramePacketFlagsReceptionType != 0) {
        FramePacketFlagsReceptionType = other.FramePacketFlagsReceptionType;
      }
      if (other.FramePacketFlagsFcsLength != 0) {
        FramePacketFlagsFcsLength = other.FramePacketFlagsFcsLength;
      }
      if (other.FramePacketFlagsReserved != 0) {
        FramePacketFlagsReserved = other.FramePacketFlagsReserved;
      }
      if (other.FramePacketFlagsCrcError != false) {
        FramePacketFlagsCrcError = other.FramePacketFlagsCrcError;
      }
      if (other.FramePacketFlagsPacketTooError != false) {
        FramePacketFlagsPacketTooError = other.FramePacketFlagsPacketTooError;
      }
      if (other.FramePacketFlagsPacketTooShortError != false) {
        FramePacketFlagsPacketTooShortError = other.FramePacketFlagsPacketTooShortError;
      }
      if (other.FramePacketFlagsWrongInterFrameGapError != false) {
        FramePacketFlagsWrongInterFrameGapError = other.FramePacketFlagsWrongInterFrameGapError;
      }
      if (other.FramePacketFlagsUnalignedFrameError != false) {
        FramePacketFlagsUnalignedFrameError = other.FramePacketFlagsUnalignedFrameError;
      }
      if (other.FramePacketFlagsStartFrameDelimiterError != false) {
        FramePacketFlagsStartFrameDelimiterError = other.FramePacketFlagsStartFrameDelimiterError;
      }
      if (other.FramePacketFlagsPreambleError != false) {
        FramePacketFlagsPreambleError = other.FramePacketFlagsPreambleError;
      }
      if (other.FramePacketFlagsSymbolError != false) {
        FramePacketFlagsSymbolError = other.FramePacketFlagsSymbolError;
      }
      if (other.FrameComment.Length != 0) {
        FrameComment = other.FrameComment;
      }
      if (other.FrameEncapType != 0) {
        FrameEncapType = other.FrameEncapType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameTime = input.ReadInt64();
            break;
          }
          case 16: {
            FrameOffsetShift = input.ReadInt64();
            break;
          }
          case 24: {
            FrameTimeEpoch = input.ReadInt64();
            break;
          }
          case 32: {
            FrameTimeDelta = input.ReadInt64();
            break;
          }
          case 40: {
            FrameTimeDeltaDisplayed = input.ReadInt64();
            break;
          }
          case 48: {
            FrameTimeRelative = input.ReadInt64();
            break;
          }
          case 56: {
            FrameRefTime = input.ReadInt32();
            break;
          }
          case 64: {
            FrameNumber = input.ReadUInt32();
            break;
          }
          case 72: {
            FrameLen = input.ReadUInt32();
            break;
          }
          case 80: {
            FrameCapLen = input.ReadUInt32();
            break;
          }
          case 90: {
            FrameMd5Hash = input.ReadString();
            break;
          }
          case 96: {
            FrameP2PDir = input.ReadInt32();
            break;
          }
          case 104: {
            FrameLinkNr = input.ReadUInt32();
            break;
          }
          case 112: {
            FrameFileOff = input.ReadInt64();
            break;
          }
          case 120: {
            FrameMarked = input.ReadBool();
            break;
          }
          case 128: {
            FrameIgnored = input.ReadBool();
            break;
          }
          case 138: {
            FrameProtocols = input.ReadString();
            break;
          }
          case 146: {
            FrameColoringRuleName = input.ReadString();
            break;
          }
          case 154: {
            FrameColoringRuleString = input.ReadString();
            break;
          }
          case 160: {
            FrameInterfaceId = input.ReadUInt32();
            break;
          }
          case 170: {
            FrameInterfaceName = input.ReadString();
            break;
          }
          case 178: {
            FrameInterfaceDescription = input.ReadString();
            break;
          }
          case 184: {
            FramePacketFlags = input.ReadUInt32();
            break;
          }
          case 192: {
            FramePacketFlagsDirection = input.ReadUInt32();
            break;
          }
          case 200: {
            FramePacketFlagsReceptionType = input.ReadUInt32();
            break;
          }
          case 208: {
            FramePacketFlagsFcsLength = input.ReadUInt32();
            break;
          }
          case 216: {
            FramePacketFlagsReserved = input.ReadUInt32();
            break;
          }
          case 224: {
            FramePacketFlagsCrcError = input.ReadBool();
            break;
          }
          case 232: {
            FramePacketFlagsPacketTooError = input.ReadBool();
            break;
          }
          case 240: {
            FramePacketFlagsPacketTooShortError = input.ReadBool();
            break;
          }
          case 248: {
            FramePacketFlagsWrongInterFrameGapError = input.ReadBool();
            break;
          }
          case 256: {
            FramePacketFlagsUnalignedFrameError = input.ReadBool();
            break;
          }
          case 264: {
            FramePacketFlagsStartFrameDelimiterError = input.ReadBool();
            break;
          }
          case 272: {
            FramePacketFlagsPreambleError = input.ReadBool();
            break;
          }
          case 280: {
            FramePacketFlagsSymbolError = input.ReadBool();
            break;
          }
          case 290: {
            FrameComment = input.ReadString();
            break;
          }
          case 296: {
            FrameEncapType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
