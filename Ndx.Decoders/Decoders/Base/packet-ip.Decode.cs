// This is file was generated by netdx on (2017-11-24 12:34:05 PM.
using System;
using Google.Protobuf;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
namespace Ndx.Decoders.Base
{
  public sealed partial class Ip
  {
    public static Ip DecodeJson(string jsonLine)
    {
      var jsonObject = JToken.Parse(jsonLine);
      return DecodeJson(jsonObject);
    }
    public static Ip DecodeJson(JToken token)
    {
      var obj = new Ip();
      {
        var val = token["ip_ip_version"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpVersion = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_hdr_len"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpHdrLen = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_dsfield"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpDsfield = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ip_dsfield_ip_dsfield_dscp"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpDsfieldDscp = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_dsfield_ip_dsfield_ecn"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpDsfieldEcn = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_tos"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTos = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_tos_ip_tos_precedence"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTosPrecedence = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_tos_ip_tos_delay"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTosDelay = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_tos_ip_tos_throughput"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTosThroughput = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_tos_ip_tos_reliability"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTosReliability = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_tos_ip_tos_cost"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTosCost = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_ip_len"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpLen = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_id"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpId = default(UInt32); }
      }
      {
        var val = token["ip_ip_dst"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpDst = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["ip_ip_dst_host"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpDstHost = propValue; }
      }
      {
        var val = token["ip_ip_src"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpSrc = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["ip_ip_src_host"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpSrcHost = propValue; }
      }
      {
        var val = token["ip_ip_addr"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpAddr = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); }
      }
      {
        var val = token["ip_ip_flags"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFlags = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ip_flags_ip_flags_sf"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFlagsSf = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_flags_ip_flags_rb"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFlagsRb = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_flags_ip_flags_df"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFlagsDf = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_flags_ip_flags_mf"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFlagsMf = Convert.ToInt32(propValue, 10) != 0; }
      }
      {
        var val = token["ip_ip_frag_offset"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpFragOffset = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_ttl"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpTtl = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_proto"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpProto = Convert.ToUInt32(propValue, 10); }
      }
      {
        var val = token["ip_ip_checksum"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpChecksum = Convert.ToUInt32(propValue, 16); }
      }
      {
        var val = token["ip_checksum_ip_checksum_status"];
        if (val != null) { var propValue = val.Value<string>(); obj.IpChecksumStatus = default(UInt32); }
      }
      return obj;
    }
    public static Ip DecodeJson(JsonTextReader reader)                        
    {                                                                                     
        if (reader.TokenType != JsonToken.StartObject) return null;                       
        var obj = new Ip();                                                   
int openObjects = 0;
                    while (reader.TokenType != JsonToken.None)
                    {
                        if (reader.TokenType == JsonToken.StartObject)
                        {
                            openObjects++;
                        }
                        if (reader.TokenType == JsonToken.EndObject)
                        {
                            openObjects--;
                            if (openObjects == 0) break;
                        }
                        if (reader.TokenType == JsonToken.PropertyName)
                        {
                            string propName = (string)reader.Value;
                            reader.Read();
                            if (reader.TokenType != JsonToken.String) { continue; }
                            string propValue = (string)reader.Value;
                            SetField(obj, propName, propValue);
                        }

                        reader.Read();
                    }
                    reader.Read();
                    return obj;
                    }
                    
    static void SetField(Ip obj, string propName, string propValue)           
    {                                                                                     
      switch (propName)                                                                   
      {                                                                                   
      case "ip_ip_version": obj.IpVersion = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_hdr_len": obj.IpHdrLen = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_dsfield": obj.IpDsfield = Convert.ToUInt32(propValue, 16); break;
      case "ip_dsfield_ip_dsfield_dscp": obj.IpDsfieldDscp = Convert.ToUInt32(propValue, 10); break;
      case "ip_dsfield_ip_dsfield_ecn": obj.IpDsfieldEcn = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_tos": obj.IpTos = Convert.ToUInt32(propValue, 10); break;
      case "ip_tos_ip_tos_precedence": obj.IpTosPrecedence = Convert.ToUInt32(propValue, 10); break;
      case "ip_tos_ip_tos_delay": obj.IpTosDelay = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_tos_ip_tos_throughput": obj.IpTosThroughput = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_tos_ip_tos_reliability": obj.IpTosReliability = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_tos_ip_tos_cost": obj.IpTosCost = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_ip_len": obj.IpLen = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_id": obj.IpId = default(UInt32); break;
      case "ip_ip_dst": obj.IpDst = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "ip_ip_dst_host": obj.IpDstHost = propValue; break;
      case "ip_ip_src": obj.IpSrc = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "ip_ip_src_host": obj.IpSrcHost = propValue; break;
      case "ip_ip_addr": obj.IpAddr = Google.Protobuf.ByteString.CopyFrom(System.Net.IPAddress.Parse(propValue).GetAddressBytes()); break;
      case "ip_ip_flags": obj.IpFlags = Convert.ToUInt32(propValue, 16); break;
      case "ip_flags_ip_flags_sf": obj.IpFlagsSf = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_flags_ip_flags_rb": obj.IpFlagsRb = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_flags_ip_flags_df": obj.IpFlagsDf = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_flags_ip_flags_mf": obj.IpFlagsMf = Convert.ToInt32(propValue, 10) != 0; break;
      case "ip_ip_frag_offset": obj.IpFragOffset = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_ttl": obj.IpTtl = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_proto": obj.IpProto = Convert.ToUInt32(propValue, 10); break;
      case "ip_ip_checksum": obj.IpChecksum = Convert.ToUInt32(propValue, 16); break;
      case "ip_checksum_ip_checksum_status": obj.IpChecksumStatus = default(UInt32); break;
      }
    }
    public static Google.Protobuf.ByteString StringToBytes(string str)        
    {                                                                         
      var bstrArr = str.Split(':');                                           
      var byteArray = new byte[bstrArr.Length];                               
      for (int i = 0; i < bstrArr.Length; i++)                                
      {                                                                       
        byteArray[i] = Convert.ToByte(bstrArr[i], 16);                        
      }                                                                       
      return Google.Protobuf.ByteString.CopyFrom( byteArray );                
    }                                                                         

  }
}
