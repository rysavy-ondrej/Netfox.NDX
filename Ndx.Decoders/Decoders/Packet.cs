// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders {

  /// <summary>Holder for reflection information generated from Packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQYWNrZXQucHJvdG8SDG5keC5kZWNvZGVycxoQcGFja2V0LWV0aC5wcm90",
            "bxoScGFja2V0LWZyYW1lLnByb3RvGhZwYWNrZXQtaWVlZTgwMjExLnByb3Rv",
            "Gg9wYWNrZXQtaXAucHJvdG8aEXBhY2tldC1pcHY2LnByb3RvGhBwYWNrZXQt",
            "bGxjLnByb3RvGhBwYWNrZXQtdGNwLnByb3RvGhBwYWNrZXQtdWRwLnByb3Rv",
            "GhBwYWNrZXQtYXJwLnByb3RvGhBwYWNrZXQtYXRtLnByb3RvGhBwYWNrZXQt",
            "ZG5zLnByb3RvGhFwYWNrZXQtaHR0cC5wcm90bxoScGFja2V0LWh0dHAyLnBy",
            "b3RvGhFwYWNrZXQtaWNtcC5wcm90bxoTcGFja2V0LWljbXB2Ni5wcm90bxoR",
            "cGFja2V0LWlnbXAucHJvdG8aEnBhY2tldC1pcHNlYy5wcm90bxoQcGFja2V0",
            "LWlweC5wcm90bxoScGFja2V0LW5iaXB4LnByb3RvGhBwYWNrZXQtbmJ0LnBy",
            "b3RvGhRwYWNrZXQtbmV0Ymlvcy5wcm90bxoQcGFja2V0LXBwcC5wcm90bxoZ",
            "Z29vZ2xlL3Byb3RvYnVmL2FueS5wcm90byL0BwoGUGFja2V0EhEKCVRpbWVT",
            "dGFtcBgBIAEoAxIwCglQcm90b2NvbHMYCiADKAsyHS5uZHguZGVjb2RlcnMu",
            "UGFja2V0LlByb3RvY29sGqQHCghQcm90b2NvbBIlCgVPdGhlchgBIAEoCzIU",
            "Lmdvb2dsZS5wcm90b2J1Zi5BbnlIABIpCgVGcmFtZRgCIAEoCzIYLk5keC5E",
            "ZWNvZGVycy5CYXNlLkZyYW1lSAASJQoDRXRoGAMgASgLMhYuTmR4LkRlY29k",
            "ZXJzLkJhc2UuRXRoSAASMQoJSWVlZTgwMjExGAQgASgLMhwuTmR4LkRlY29k",
            "ZXJzLkJhc2UuSWVlZTgwMjExSAASIwoCSXAYBSABKAsyFS5OZHguRGVjb2Rl",
            "cnMuQmFzZS5JcEgAEicKBElwdjYYBiABKAsyFy5OZHguRGVjb2RlcnMuQmFz",
            "ZS5JcHY2SAASJQoDVGNwGAcgASgLMhYuTmR4LkRlY29kZXJzLkJhc2UuVGNw",
            "SAASJQoDVWRwGAggASgLMhYuTmR4LkRlY29kZXJzLkJhc2UuVWRwSAASJQoD",
            "QXJwGGUgASgLMhYuTmR4LkRlY29kZXJzLkNvcmUuQXJwSAASJQoDQXRtGGYg",
            "ASgLMhYuTmR4LkRlY29kZXJzLkNvcmUuQXRtSAASJQoDRG5zGGcgASgLMhYu",
            "TmR4LkRlY29kZXJzLkNvcmUuRG5zSAASJwoESHR0cBhoIAEoCzIXLk5keC5E",
            "ZWNvZGVycy5Db3JlLkh0dHBIABIpCgVIdHRwMhhpIAEoCzIYLk5keC5EZWNv",
            "ZGVycy5Db3JlLkh0dHAySAASJwoESWNtcBhqIAEoCzIXLk5keC5EZWNvZGVy",
            "cy5Db3JlLkljbXBIABIrCgZJY21wdjYYayABKAsyGS5OZHguRGVjb2RlcnMu",
            "Q29yZS5JY21wdjZIABInCgRJZ21wGGwgASgLMhcuTmR4LkRlY29kZXJzLkNv",
            "cmUuSWdtcEgAEikKBUlwc2VjGG0gASgLMhguTmR4LkRlY29kZXJzLkNvcmUu",
            "SXBzZWNIABIlCgNJcHgYbiABKAsyFi5OZHguRGVjb2RlcnMuQ29yZS5JcHhI",
            "ABIpCgVOYmlweBhvIAEoCzIYLk5keC5EZWNvZGVycy5Db3JlLk5iaXB4SAAS",
            "JQoDTmJ0GHAgASgLMhYuTmR4LkRlY29kZXJzLkNvcmUuTmJ0SAASLQoHTmV0",
            "YmlvcxhxIAEoCzIaLk5keC5EZWNvZGVycy5Db3JlLk5ldGJpb3NIABIlCgNQ",
            "cHAYciABKAsyFi5OZHguRGVjb2RlcnMuQ29yZS5QcHBIAEIOCgxQcm90b2Nv",
            "bFR5cGVCEgoQb3JnLm5keC5kZWNvZGVyc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Decoders.Base.PacketEthReflection.Descriptor, global::Ndx.Decoders.Base.PacketFrameReflection.Descriptor, global::Ndx.Decoders.Base.PacketIeee80211Reflection.Descriptor, global::Ndx.Decoders.Base.PacketIpReflection.Descriptor, global::Ndx.Decoders.Base.PacketIpv6Reflection.Descriptor, global::Ndx.Decoders.Base.PacketLlcReflection.Descriptor, global::Ndx.Decoders.Base.PacketTcpReflection.Descriptor, global::Ndx.Decoders.Base.PacketUdpReflection.Descriptor, global::Ndx.Decoders.Core.PacketArpReflection.Descriptor, global::Ndx.Decoders.Core.PacketAtmReflection.Descriptor, global::Ndx.Decoders.Core.PacketDnsReflection.Descriptor, global::Ndx.Decoders.Core.PacketHttpReflection.Descriptor, global::Ndx.Decoders.Core.PacketHttp2Reflection.Descriptor, global::Ndx.Decoders.Core.PacketIcmpReflection.Descriptor, global::Ndx.Decoders.Core.PacketIcmpv6Reflection.Descriptor, global::Ndx.Decoders.Core.PacketIgmpReflection.Descriptor, global::Ndx.Decoders.Core.PacketIpsecReflection.Descriptor, global::Ndx.Decoders.Core.PacketIpxReflection.Descriptor, global::Ndx.Decoders.Core.PacketNbipxReflection.Descriptor, global::Ndx.Decoders.Core.PacketNbtReflection.Descriptor, global::Ndx.Decoders.Core.PacketNetbiosReflection.Descriptor, global::Ndx.Decoders.Core.PacketPppReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Packet), global::Ndx.Decoders.Packet.Parser, new[]{ "TimeStamp", "Protocols" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Packet.Types.Protocol), global::Ndx.Decoders.Packet.Types.Protocol.Parser, new[]{ "Other", "Frame", "Eth", "Ieee80211", "Ip", "Ipv6", "Tcp", "Udp", "Arp", "Atm", "Dns", "Http", "Http2", "Icmp", "Icmpv6", "Igmp", "Ipsec", "Ipx", "Nbipx", "Nbt", "Netbios", "Ppp" }, new[]{ "ProtocolType" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      timeStamp_ = other.timeStamp_;
      protocols_ = other.protocols_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "Protocols" field.</summary>
    public const int ProtocolsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Ndx.Decoders.Packet.Types.Protocol> _repeated_protocols_codec
        = pb::FieldCodec.ForMessage(82, global::Ndx.Decoders.Packet.Types.Protocol.Parser);
    private readonly pbc::RepeatedField<global::Ndx.Decoders.Packet.Types.Protocol> protocols_ = new pbc::RepeatedField<global::Ndx.Decoders.Packet.Types.Protocol>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ndx.Decoders.Packet.Types.Protocol> Protocols {
      get { return protocols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if(!protocols_.Equals(other.protocols_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      hash ^= protocols_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeStamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimeStamp);
      }
      protocols_.WriteTo(output, _repeated_protocols_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      size += protocols_.CalculateSize(_repeated_protocols_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      protocols_.Add(other.protocols_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 82: {
            protocols_.AddEntriesFrom(input, _repeated_protocols_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Packet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Protocol : pb::IMessage<Protocol> {
        private static readonly pb::MessageParser<Protocol> _parser = new pb::MessageParser<Protocol>(() => new Protocol());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Protocol> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Ndx.Decoders.Packet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Protocol() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Protocol(Protocol other) : this() {
          switch (other.ProtocolTypeCase) {
            case ProtocolTypeOneofCase.Other:
              Other = other.Other.Clone();
              break;
            case ProtocolTypeOneofCase.Frame:
              Frame = other.Frame.Clone();
              break;
            case ProtocolTypeOneofCase.Eth:
              Eth = other.Eth.Clone();
              break;
            case ProtocolTypeOneofCase.Ieee80211:
              Ieee80211 = other.Ieee80211.Clone();
              break;
            case ProtocolTypeOneofCase.Ip:
              Ip = other.Ip.Clone();
              break;
            case ProtocolTypeOneofCase.Ipv6:
              Ipv6 = other.Ipv6.Clone();
              break;
            case ProtocolTypeOneofCase.Tcp:
              Tcp = other.Tcp.Clone();
              break;
            case ProtocolTypeOneofCase.Udp:
              Udp = other.Udp.Clone();
              break;
            case ProtocolTypeOneofCase.Arp:
              Arp = other.Arp.Clone();
              break;
            case ProtocolTypeOneofCase.Atm:
              Atm = other.Atm.Clone();
              break;
            case ProtocolTypeOneofCase.Dns:
              Dns = other.Dns.Clone();
              break;
            case ProtocolTypeOneofCase.Http:
              Http = other.Http.Clone();
              break;
            case ProtocolTypeOneofCase.Http2:
              Http2 = other.Http2.Clone();
              break;
            case ProtocolTypeOneofCase.Icmp:
              Icmp = other.Icmp.Clone();
              break;
            case ProtocolTypeOneofCase.Icmpv6:
              Icmpv6 = other.Icmpv6.Clone();
              break;
            case ProtocolTypeOneofCase.Igmp:
              Igmp = other.Igmp.Clone();
              break;
            case ProtocolTypeOneofCase.Ipsec:
              Ipsec = other.Ipsec.Clone();
              break;
            case ProtocolTypeOneofCase.Ipx:
              Ipx = other.Ipx.Clone();
              break;
            case ProtocolTypeOneofCase.Nbipx:
              Nbipx = other.Nbipx.Clone();
              break;
            case ProtocolTypeOneofCase.Nbt:
              Nbt = other.Nbt.Clone();
              break;
            case ProtocolTypeOneofCase.Netbios:
              Netbios = other.Netbios.Clone();
              break;
            case ProtocolTypeOneofCase.Ppp:
              Ppp = other.Ppp.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Protocol Clone() {
          return new Protocol(this);
        }

        /// <summary>Field number for the "Other" field.</summary>
        public const int OtherFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Any Other {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Other ? (global::Google.Protobuf.WellKnownTypes.Any) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Other;
          }
        }

        /// <summary>Field number for the "Frame" field.</summary>
        public const int FrameFieldNumber = 2;
        /// <summary>
        /// BASE:
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Frame Frame {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Frame ? (global::Ndx.Decoders.Base.Frame) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Frame;
          }
        }

        /// <summary>Field number for the "Eth" field.</summary>
        public const int EthFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Eth Eth {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Eth ? (global::Ndx.Decoders.Base.Eth) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Eth;
          }
        }

        /// <summary>Field number for the "Ieee80211" field.</summary>
        public const int Ieee80211FieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Ieee80211 Ieee80211 {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ieee80211 ? (global::Ndx.Decoders.Base.Ieee80211) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ieee80211;
          }
        }

        /// <summary>Field number for the "Ip" field.</summary>
        public const int IpFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Ip Ip {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ip ? (global::Ndx.Decoders.Base.Ip) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ip;
          }
        }

        /// <summary>Field number for the "Ipv6" field.</summary>
        public const int Ipv6FieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Ipv6 Ipv6 {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ipv6 ? (global::Ndx.Decoders.Base.Ipv6) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ipv6;
          }
        }

        /// <summary>Field number for the "Tcp" field.</summary>
        public const int TcpFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Tcp Tcp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Tcp ? (global::Ndx.Decoders.Base.Tcp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Tcp;
          }
        }

        /// <summary>Field number for the "Udp" field.</summary>
        public const int UdpFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Base.Udp Udp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Udp ? (global::Ndx.Decoders.Base.Udp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Udp;
          }
        }

        /// <summary>Field number for the "Arp" field.</summary>
        public const int ArpFieldNumber = 101;
        /// <summary>
        /// CORE:
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Arp Arp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Arp ? (global::Ndx.Decoders.Core.Arp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Arp;
          }
        }

        /// <summary>Field number for the "Atm" field.</summary>
        public const int AtmFieldNumber = 102;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Atm Atm {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Atm ? (global::Ndx.Decoders.Core.Atm) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Atm;
          }
        }

        /// <summary>Field number for the "Dns" field.</summary>
        public const int DnsFieldNumber = 103;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Dns Dns {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Dns ? (global::Ndx.Decoders.Core.Dns) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Dns;
          }
        }

        /// <summary>Field number for the "Http" field.</summary>
        public const int HttpFieldNumber = 104;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Http Http {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Http ? (global::Ndx.Decoders.Core.Http) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Http;
          }
        }

        /// <summary>Field number for the "Http2" field.</summary>
        public const int Http2FieldNumber = 105;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Http2 Http2 {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Http2 ? (global::Ndx.Decoders.Core.Http2) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Http2;
          }
        }

        /// <summary>Field number for the "Icmp" field.</summary>
        public const int IcmpFieldNumber = 106;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Icmp Icmp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Icmp ? (global::Ndx.Decoders.Core.Icmp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Icmp;
          }
        }

        /// <summary>Field number for the "Icmpv6" field.</summary>
        public const int Icmpv6FieldNumber = 107;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Icmpv6 Icmpv6 {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Icmpv6 ? (global::Ndx.Decoders.Core.Icmpv6) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Icmpv6;
          }
        }

        /// <summary>Field number for the "Igmp" field.</summary>
        public const int IgmpFieldNumber = 108;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Igmp Igmp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Igmp ? (global::Ndx.Decoders.Core.Igmp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Igmp;
          }
        }

        /// <summary>Field number for the "Ipsec" field.</summary>
        public const int IpsecFieldNumber = 109;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Ipsec Ipsec {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ipsec ? (global::Ndx.Decoders.Core.Ipsec) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ipsec;
          }
        }

        /// <summary>Field number for the "Ipx" field.</summary>
        public const int IpxFieldNumber = 110;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Ipx Ipx {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ipx ? (global::Ndx.Decoders.Core.Ipx) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ipx;
          }
        }

        /// <summary>Field number for the "Nbipx" field.</summary>
        public const int NbipxFieldNumber = 111;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Nbipx Nbipx {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Nbipx ? (global::Ndx.Decoders.Core.Nbipx) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Nbipx;
          }
        }

        /// <summary>Field number for the "Nbt" field.</summary>
        public const int NbtFieldNumber = 112;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Nbt Nbt {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Nbt ? (global::Ndx.Decoders.Core.Nbt) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Nbt;
          }
        }

        /// <summary>Field number for the "Netbios" field.</summary>
        public const int NetbiosFieldNumber = 113;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Netbios Netbios {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Netbios ? (global::Ndx.Decoders.Core.Netbios) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Netbios;
          }
        }

        /// <summary>Field number for the "Ppp" field.</summary>
        public const int PppFieldNumber = 114;
        /// <summary>
        /// COMMON:
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Ndx.Decoders.Core.Ppp Ppp {
          get { return protocolTypeCase_ == ProtocolTypeOneofCase.Ppp ? (global::Ndx.Decoders.Core.Ppp) protocolType_ : null; }
          set {
            protocolType_ = value;
            protocolTypeCase_ = value == null ? ProtocolTypeOneofCase.None : ProtocolTypeOneofCase.Ppp;
          }
        }

        private object protocolType_;
        /// <summary>Enum of possible cases for the "ProtocolType" oneof.</summary>
        public enum ProtocolTypeOneofCase {
          None = 0,
          Other = 1,
          Frame = 2,
          Eth = 3,
          Ieee80211 = 4,
          Ip = 5,
          Ipv6 = 6,
          Tcp = 7,
          Udp = 8,
          Arp = 101,
          Atm = 102,
          Dns = 103,
          Http = 104,
          Http2 = 105,
          Icmp = 106,
          Icmpv6 = 107,
          Igmp = 108,
          Ipsec = 109,
          Ipx = 110,
          Nbipx = 111,
          Nbt = 112,
          Netbios = 113,
          Ppp = 114,
        }
        private ProtocolTypeOneofCase protocolTypeCase_ = ProtocolTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtocolTypeOneofCase ProtocolTypeCase {
          get { return protocolTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProtocolType() {
          protocolTypeCase_ = ProtocolTypeOneofCase.None;
          protocolType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Protocol);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Protocol other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Other, other.Other)) return false;
          if (!object.Equals(Frame, other.Frame)) return false;
          if (!object.Equals(Eth, other.Eth)) return false;
          if (!object.Equals(Ieee80211, other.Ieee80211)) return false;
          if (!object.Equals(Ip, other.Ip)) return false;
          if (!object.Equals(Ipv6, other.Ipv6)) return false;
          if (!object.Equals(Tcp, other.Tcp)) return false;
          if (!object.Equals(Udp, other.Udp)) return false;
          if (!object.Equals(Arp, other.Arp)) return false;
          if (!object.Equals(Atm, other.Atm)) return false;
          if (!object.Equals(Dns, other.Dns)) return false;
          if (!object.Equals(Http, other.Http)) return false;
          if (!object.Equals(Http2, other.Http2)) return false;
          if (!object.Equals(Icmp, other.Icmp)) return false;
          if (!object.Equals(Icmpv6, other.Icmpv6)) return false;
          if (!object.Equals(Igmp, other.Igmp)) return false;
          if (!object.Equals(Ipsec, other.Ipsec)) return false;
          if (!object.Equals(Ipx, other.Ipx)) return false;
          if (!object.Equals(Nbipx, other.Nbipx)) return false;
          if (!object.Equals(Nbt, other.Nbt)) return false;
          if (!object.Equals(Netbios, other.Netbios)) return false;
          if (!object.Equals(Ppp, other.Ppp)) return false;
          if (ProtocolTypeCase != other.ProtocolTypeCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Other) hash ^= Other.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Frame) hash ^= Frame.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Eth) hash ^= Eth.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ieee80211) hash ^= Ieee80211.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ip) hash ^= Ip.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipv6) hash ^= Ipv6.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Tcp) hash ^= Tcp.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Udp) hash ^= Udp.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Arp) hash ^= Arp.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Atm) hash ^= Atm.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Dns) hash ^= Dns.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http) hash ^= Http.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http2) hash ^= Http2.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmp) hash ^= Icmp.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmpv6) hash ^= Icmpv6.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Igmp) hash ^= Igmp.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipsec) hash ^= Ipsec.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipx) hash ^= Ipx.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbipx) hash ^= Nbipx.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbt) hash ^= Nbt.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Netbios) hash ^= Netbios.GetHashCode();
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ppp) hash ^= Ppp.GetHashCode();
          hash ^= (int) protocolTypeCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Other) {
            output.WriteRawTag(10);
            output.WriteMessage(Other);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Frame) {
            output.WriteRawTag(18);
            output.WriteMessage(Frame);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Eth) {
            output.WriteRawTag(26);
            output.WriteMessage(Eth);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ieee80211) {
            output.WriteRawTag(34);
            output.WriteMessage(Ieee80211);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ip) {
            output.WriteRawTag(42);
            output.WriteMessage(Ip);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipv6) {
            output.WriteRawTag(50);
            output.WriteMessage(Ipv6);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Tcp) {
            output.WriteRawTag(58);
            output.WriteMessage(Tcp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Udp) {
            output.WriteRawTag(66);
            output.WriteMessage(Udp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Arp) {
            output.WriteRawTag(170, 6);
            output.WriteMessage(Arp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Atm) {
            output.WriteRawTag(178, 6);
            output.WriteMessage(Atm);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Dns) {
            output.WriteRawTag(186, 6);
            output.WriteMessage(Dns);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http) {
            output.WriteRawTag(194, 6);
            output.WriteMessage(Http);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http2) {
            output.WriteRawTag(202, 6);
            output.WriteMessage(Http2);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmp) {
            output.WriteRawTag(210, 6);
            output.WriteMessage(Icmp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmpv6) {
            output.WriteRawTag(218, 6);
            output.WriteMessage(Icmpv6);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Igmp) {
            output.WriteRawTag(226, 6);
            output.WriteMessage(Igmp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipsec) {
            output.WriteRawTag(234, 6);
            output.WriteMessage(Ipsec);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipx) {
            output.WriteRawTag(242, 6);
            output.WriteMessage(Ipx);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbipx) {
            output.WriteRawTag(250, 6);
            output.WriteMessage(Nbipx);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbt) {
            output.WriteRawTag(130, 7);
            output.WriteMessage(Nbt);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Netbios) {
            output.WriteRawTag(138, 7);
            output.WriteMessage(Netbios);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ppp) {
            output.WriteRawTag(146, 7);
            output.WriteMessage(Ppp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Other) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Frame) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Eth) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Eth);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ieee80211) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ieee80211);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ip) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipv6) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipv6);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Tcp) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tcp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Udp) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Udp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Arp) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Arp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Atm) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Atm);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Dns) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dns);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Http);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Http2) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Http2);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmp) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Icmp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmpv6) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Icmpv6);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Igmp) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Igmp);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipsec) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ipsec);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipx) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ipx);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbipx) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nbipx);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbt) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nbt);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Netbios) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Netbios);
          }
          if (protocolTypeCase_ == ProtocolTypeOneofCase.Ppp) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ppp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Protocol other) {
          if (other == null) {
            return;
          }
          switch (other.ProtocolTypeCase) {
            case ProtocolTypeOneofCase.Other:
              Other = other.Other;
              break;
            case ProtocolTypeOneofCase.Frame:
              Frame = other.Frame;
              break;
            case ProtocolTypeOneofCase.Eth:
              Eth = other.Eth;
              break;
            case ProtocolTypeOneofCase.Ieee80211:
              Ieee80211 = other.Ieee80211;
              break;
            case ProtocolTypeOneofCase.Ip:
              Ip = other.Ip;
              break;
            case ProtocolTypeOneofCase.Ipv6:
              Ipv6 = other.Ipv6;
              break;
            case ProtocolTypeOneofCase.Tcp:
              Tcp = other.Tcp;
              break;
            case ProtocolTypeOneofCase.Udp:
              Udp = other.Udp;
              break;
            case ProtocolTypeOneofCase.Arp:
              Arp = other.Arp;
              break;
            case ProtocolTypeOneofCase.Atm:
              Atm = other.Atm;
              break;
            case ProtocolTypeOneofCase.Dns:
              Dns = other.Dns;
              break;
            case ProtocolTypeOneofCase.Http:
              Http = other.Http;
              break;
            case ProtocolTypeOneofCase.Http2:
              Http2 = other.Http2;
              break;
            case ProtocolTypeOneofCase.Icmp:
              Icmp = other.Icmp;
              break;
            case ProtocolTypeOneofCase.Icmpv6:
              Icmpv6 = other.Icmpv6;
              break;
            case ProtocolTypeOneofCase.Igmp:
              Igmp = other.Igmp;
              break;
            case ProtocolTypeOneofCase.Ipsec:
              Ipsec = other.Ipsec;
              break;
            case ProtocolTypeOneofCase.Ipx:
              Ipx = other.Ipx;
              break;
            case ProtocolTypeOneofCase.Nbipx:
              Nbipx = other.Nbipx;
              break;
            case ProtocolTypeOneofCase.Nbt:
              Nbt = other.Nbt;
              break;
            case ProtocolTypeOneofCase.Netbios:
              Netbios = other.Netbios;
              break;
            case ProtocolTypeOneofCase.Ppp:
              Ppp = other.Ppp;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Other) {
                  subBuilder.MergeFrom(Other);
                }
                input.ReadMessage(subBuilder);
                Other = subBuilder;
                break;
              }
              case 18: {
                global::Ndx.Decoders.Base.Frame subBuilder = new global::Ndx.Decoders.Base.Frame();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Frame) {
                  subBuilder.MergeFrom(Frame);
                }
                input.ReadMessage(subBuilder);
                Frame = subBuilder;
                break;
              }
              case 26: {
                global::Ndx.Decoders.Base.Eth subBuilder = new global::Ndx.Decoders.Base.Eth();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Eth) {
                  subBuilder.MergeFrom(Eth);
                }
                input.ReadMessage(subBuilder);
                Eth = subBuilder;
                break;
              }
              case 34: {
                global::Ndx.Decoders.Base.Ieee80211 subBuilder = new global::Ndx.Decoders.Base.Ieee80211();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ieee80211) {
                  subBuilder.MergeFrom(Ieee80211);
                }
                input.ReadMessage(subBuilder);
                Ieee80211 = subBuilder;
                break;
              }
              case 42: {
                global::Ndx.Decoders.Base.Ip subBuilder = new global::Ndx.Decoders.Base.Ip();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ip) {
                  subBuilder.MergeFrom(Ip);
                }
                input.ReadMessage(subBuilder);
                Ip = subBuilder;
                break;
              }
              case 50: {
                global::Ndx.Decoders.Base.Ipv6 subBuilder = new global::Ndx.Decoders.Base.Ipv6();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipv6) {
                  subBuilder.MergeFrom(Ipv6);
                }
                input.ReadMessage(subBuilder);
                Ipv6 = subBuilder;
                break;
              }
              case 58: {
                global::Ndx.Decoders.Base.Tcp subBuilder = new global::Ndx.Decoders.Base.Tcp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Tcp) {
                  subBuilder.MergeFrom(Tcp);
                }
                input.ReadMessage(subBuilder);
                Tcp = subBuilder;
                break;
              }
              case 66: {
                global::Ndx.Decoders.Base.Udp subBuilder = new global::Ndx.Decoders.Base.Udp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Udp) {
                  subBuilder.MergeFrom(Udp);
                }
                input.ReadMessage(subBuilder);
                Udp = subBuilder;
                break;
              }
              case 810: {
                global::Ndx.Decoders.Core.Arp subBuilder = new global::Ndx.Decoders.Core.Arp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Arp) {
                  subBuilder.MergeFrom(Arp);
                }
                input.ReadMessage(subBuilder);
                Arp = subBuilder;
                break;
              }
              case 818: {
                global::Ndx.Decoders.Core.Atm subBuilder = new global::Ndx.Decoders.Core.Atm();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Atm) {
                  subBuilder.MergeFrom(Atm);
                }
                input.ReadMessage(subBuilder);
                Atm = subBuilder;
                break;
              }
              case 826: {
                global::Ndx.Decoders.Core.Dns subBuilder = new global::Ndx.Decoders.Core.Dns();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Dns) {
                  subBuilder.MergeFrom(Dns);
                }
                input.ReadMessage(subBuilder);
                Dns = subBuilder;
                break;
              }
              case 834: {
                global::Ndx.Decoders.Core.Http subBuilder = new global::Ndx.Decoders.Core.Http();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Http) {
                  subBuilder.MergeFrom(Http);
                }
                input.ReadMessage(subBuilder);
                Http = subBuilder;
                break;
              }
              case 842: {
                global::Ndx.Decoders.Core.Http2 subBuilder = new global::Ndx.Decoders.Core.Http2();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Http2) {
                  subBuilder.MergeFrom(Http2);
                }
                input.ReadMessage(subBuilder);
                Http2 = subBuilder;
                break;
              }
              case 850: {
                global::Ndx.Decoders.Core.Icmp subBuilder = new global::Ndx.Decoders.Core.Icmp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmp) {
                  subBuilder.MergeFrom(Icmp);
                }
                input.ReadMessage(subBuilder);
                Icmp = subBuilder;
                break;
              }
              case 858: {
                global::Ndx.Decoders.Core.Icmpv6 subBuilder = new global::Ndx.Decoders.Core.Icmpv6();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Icmpv6) {
                  subBuilder.MergeFrom(Icmpv6);
                }
                input.ReadMessage(subBuilder);
                Icmpv6 = subBuilder;
                break;
              }
              case 866: {
                global::Ndx.Decoders.Core.Igmp subBuilder = new global::Ndx.Decoders.Core.Igmp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Igmp) {
                  subBuilder.MergeFrom(Igmp);
                }
                input.ReadMessage(subBuilder);
                Igmp = subBuilder;
                break;
              }
              case 874: {
                global::Ndx.Decoders.Core.Ipsec subBuilder = new global::Ndx.Decoders.Core.Ipsec();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipsec) {
                  subBuilder.MergeFrom(Ipsec);
                }
                input.ReadMessage(subBuilder);
                Ipsec = subBuilder;
                break;
              }
              case 882: {
                global::Ndx.Decoders.Core.Ipx subBuilder = new global::Ndx.Decoders.Core.Ipx();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ipx) {
                  subBuilder.MergeFrom(Ipx);
                }
                input.ReadMessage(subBuilder);
                Ipx = subBuilder;
                break;
              }
              case 890: {
                global::Ndx.Decoders.Core.Nbipx subBuilder = new global::Ndx.Decoders.Core.Nbipx();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbipx) {
                  subBuilder.MergeFrom(Nbipx);
                }
                input.ReadMessage(subBuilder);
                Nbipx = subBuilder;
                break;
              }
              case 898: {
                global::Ndx.Decoders.Core.Nbt subBuilder = new global::Ndx.Decoders.Core.Nbt();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Nbt) {
                  subBuilder.MergeFrom(Nbt);
                }
                input.ReadMessage(subBuilder);
                Nbt = subBuilder;
                break;
              }
              case 906: {
                global::Ndx.Decoders.Core.Netbios subBuilder = new global::Ndx.Decoders.Core.Netbios();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Netbios) {
                  subBuilder.MergeFrom(Netbios);
                }
                input.ReadMessage(subBuilder);
                Netbios = subBuilder;
                break;
              }
              case 914: {
                global::Ndx.Decoders.Core.Ppp subBuilder = new global::Ndx.Decoders.Core.Ppp();
                if (protocolTypeCase_ == ProtocolTypeOneofCase.Ppp) {
                  subBuilder.MergeFrom(Ppp);
                }
                input.ReadMessage(subBuilder);
                Ppp = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
