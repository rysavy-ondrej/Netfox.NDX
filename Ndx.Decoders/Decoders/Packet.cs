// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ndx.Decoders {

  /// <summary>Holder for reflection information generated from Packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQYWNrZXQucHJvdG8SDG5keC5kZWNvZGVycxoQcGFja2V0LWV0aC5wcm90",
            "bxoScGFja2V0LWZyYW1lLnByb3RvGhZwYWNrZXQtaWVlZTgwMjExLnByb3Rv",
            "Gg9wYWNrZXQtaXAucHJvdG8aEXBhY2tldC1pcHY2LnByb3RvGhBwYWNrZXQt",
            "bGxjLnByb3RvGhBwYWNrZXQtdGNwLnByb3RvGhBwYWNrZXQtdWRwLnByb3Rv",
            "InQKCkxpbmtQYWNrZXQSKwoIRXRoZXJuZXQYASABKAsyFy5OZHguRGVjb2Rl",
            "cnMuQmFzaWMuRXRoSAASMQoIV2lyZWxlc3MYCSABKAsyHS5OZHguRGVjb2Rl",
            "cnMuQmFzaWMuSWVlZTgwMjExSABCBgoETGluayJnCg5JbnRlcm5ldFBhY2tl",
            "dBIkCgJJcBgBIAEoCzIWLk5keC5EZWNvZGVycy5CYXNpYy5JcEgAEigKBElw",
            "djYYAiABKAsyGC5OZHguRGVjb2RlcnMuQmFzaWMuSXB2NkgAQgUKA05ldCJu",
            "Cg9UcmFuc3BvcnRQYWNrZXQSJgoDVGNwGAEgASgLMhcuTmR4LkRlY29kZXJz",
            "LkJhc2ljLlRjcEgAEiYKA1VkcBgCIAEoCzIXLk5keC5EZWNvZGVycy5CYXNp",
            "Yy5VZHBIAEILCglUcmFuc3BvcnQiEwoRQXBwbGljYXRpb25QYWNrZXQi7wEK",
            "BlBhY2tldBIRCglUaW1lU3RhbXAYBSABKAMSEwoLRnJhbWVOdW1iZXIYAiAB",
            "KAUSJgoETGluaxgKIAEoCzIYLm5keC5kZWNvZGVycy5MaW5rUGFja2V0Ei0K",
            "B05ldHdvcmsYFCABKAsyHC5uZHguZGVjb2RlcnMuSW50ZXJuZXRQYWNrZXQS",
            "MAoJVHJhbnNwb3J0GB4gASgLMh0ubmR4LmRlY29kZXJzLlRyYW5zcG9ydFBh",
            "Y2tldBI0CgtBcHBsaWNhdGlvbhgoIAEoCzIfLm5keC5kZWNvZGVycy5BcHBs",
            "aWNhdGlvblBhY2tldEISChBvcmcubmR4LmRlY29kZXJzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ndx.Decoders.Basic.PacketEthReflection.Descriptor, global::Ndx.Decoders.Basic.PacketFrameReflection.Descriptor, global::Ndx.Decoders.Basic.PacketIeee80211Reflection.Descriptor, global::Ndx.Decoders.Basic.PacketIpReflection.Descriptor, global::Ndx.Decoders.Basic.PacketIpv6Reflection.Descriptor, global::Ndx.Decoders.Basic.PacketLlcReflection.Descriptor, global::Ndx.Decoders.Basic.PacketTcpReflection.Descriptor, global::Ndx.Decoders.Basic.PacketUdpReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.LinkPacket), global::Ndx.Decoders.LinkPacket.Parser, new[]{ "Ethernet", "Wireless" }, new[]{ "Link" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.InternetPacket), global::Ndx.Decoders.InternetPacket.Parser, new[]{ "Ip", "Ipv6" }, new[]{ "Net" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.TransportPacket), global::Ndx.Decoders.TransportPacket.Parser, new[]{ "Tcp", "Udp" }, new[]{ "Transport" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.ApplicationPacket), global::Ndx.Decoders.ApplicationPacket.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ndx.Decoders.Packet), global::Ndx.Decoders.Packet.Parser, new[]{ "TimeStamp", "FrameNumber", "Link", "Network", "Transport", "Application" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LinkPacket : pb::IMessage<LinkPacket> {
    private static readonly pb::MessageParser<LinkPacket> _parser = new pb::MessageParser<LinkPacket>(() => new LinkPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkPacket(LinkPacket other) : this() {
      switch (other.LinkCase) {
        case LinkOneofCase.Ethernet:
          Ethernet = other.Ethernet.Clone();
          break;
        case LinkOneofCase.Wireless:
          Wireless = other.Wireless.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkPacket Clone() {
      return new LinkPacket(this);
    }

    /// <summary>Field number for the "Ethernet" field.</summary>
    public const int EthernetFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Eth Ethernet {
      get { return linkCase_ == LinkOneofCase.Ethernet ? (global::Ndx.Decoders.Basic.Eth) link_ : null; }
      set {
        link_ = value;
        linkCase_ = value == null ? LinkOneofCase.None : LinkOneofCase.Ethernet;
      }
    }

    /// <summary>Field number for the "Wireless" field.</summary>
    public const int WirelessFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Ieee80211 Wireless {
      get { return linkCase_ == LinkOneofCase.Wireless ? (global::Ndx.Decoders.Basic.Ieee80211) link_ : null; }
      set {
        link_ = value;
        linkCase_ = value == null ? LinkOneofCase.None : LinkOneofCase.Wireless;
      }
    }

    private object link_;
    /// <summary>Enum of possible cases for the "Link" oneof.</summary>
    public enum LinkOneofCase {
      None = 0,
      Ethernet = 1,
      Wireless = 9,
    }
    private LinkOneofCase linkCase_ = LinkOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkOneofCase LinkCase {
      get { return linkCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLink() {
      linkCase_ = LinkOneofCase.None;
      link_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ethernet, other.Ethernet)) return false;
      if (!object.Equals(Wireless, other.Wireless)) return false;
      if (LinkCase != other.LinkCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (linkCase_ == LinkOneofCase.Ethernet) hash ^= Ethernet.GetHashCode();
      if (linkCase_ == LinkOneofCase.Wireless) hash ^= Wireless.GetHashCode();
      hash ^= (int) linkCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (linkCase_ == LinkOneofCase.Ethernet) {
        output.WriteRawTag(10);
        output.WriteMessage(Ethernet);
      }
      if (linkCase_ == LinkOneofCase.Wireless) {
        output.WriteRawTag(74);
        output.WriteMessage(Wireless);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (linkCase_ == LinkOneofCase.Ethernet) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ethernet);
      }
      if (linkCase_ == LinkOneofCase.Wireless) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wireless);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkPacket other) {
      if (other == null) {
        return;
      }
      switch (other.LinkCase) {
        case LinkOneofCase.Ethernet:
          Ethernet = other.Ethernet;
          break;
        case LinkOneofCase.Wireless:
          Wireless = other.Wireless;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ndx.Decoders.Basic.Eth subBuilder = new global::Ndx.Decoders.Basic.Eth();
            if (linkCase_ == LinkOneofCase.Ethernet) {
              subBuilder.MergeFrom(Ethernet);
            }
            input.ReadMessage(subBuilder);
            Ethernet = subBuilder;
            break;
          }
          case 74: {
            global::Ndx.Decoders.Basic.Ieee80211 subBuilder = new global::Ndx.Decoders.Basic.Ieee80211();
            if (linkCase_ == LinkOneofCase.Wireless) {
              subBuilder.MergeFrom(Wireless);
            }
            input.ReadMessage(subBuilder);
            Wireless = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class InternetPacket : pb::IMessage<InternetPacket> {
    private static readonly pb::MessageParser<InternetPacket> _parser = new pb::MessageParser<InternetPacket>(() => new InternetPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternetPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternetPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternetPacket(InternetPacket other) : this() {
      switch (other.NetCase) {
        case NetOneofCase.Ip:
          Ip = other.Ip.Clone();
          break;
        case NetOneofCase.Ipv6:
          Ipv6 = other.Ipv6.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternetPacket Clone() {
      return new InternetPacket(this);
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Ip Ip {
      get { return netCase_ == NetOneofCase.Ip ? (global::Ndx.Decoders.Basic.Ip) net_ : null; }
      set {
        net_ = value;
        netCase_ = value == null ? NetOneofCase.None : NetOneofCase.Ip;
      }
    }

    /// <summary>Field number for the "Ipv6" field.</summary>
    public const int Ipv6FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Ipv6 Ipv6 {
      get { return netCase_ == NetOneofCase.Ipv6 ? (global::Ndx.Decoders.Basic.Ipv6) net_ : null; }
      set {
        net_ = value;
        netCase_ = value == null ? NetOneofCase.None : NetOneofCase.Ipv6;
      }
    }

    private object net_;
    /// <summary>Enum of possible cases for the "Net" oneof.</summary>
    public enum NetOneofCase {
      None = 0,
      Ip = 1,
      Ipv6 = 2,
    }
    private NetOneofCase netCase_ = NetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetOneofCase NetCase {
      get { return netCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNet() {
      netCase_ = NetOneofCase.None;
      net_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternetPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternetPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ip, other.Ip)) return false;
      if (!object.Equals(Ipv6, other.Ipv6)) return false;
      if (NetCase != other.NetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (netCase_ == NetOneofCase.Ip) hash ^= Ip.GetHashCode();
      if (netCase_ == NetOneofCase.Ipv6) hash ^= Ipv6.GetHashCode();
      hash ^= (int) netCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (netCase_ == NetOneofCase.Ip) {
        output.WriteRawTag(10);
        output.WriteMessage(Ip);
      }
      if (netCase_ == NetOneofCase.Ipv6) {
        output.WriteRawTag(18);
        output.WriteMessage(Ipv6);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (netCase_ == NetOneofCase.Ip) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip);
      }
      if (netCase_ == NetOneofCase.Ipv6) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ipv6);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternetPacket other) {
      if (other == null) {
        return;
      }
      switch (other.NetCase) {
        case NetOneofCase.Ip:
          Ip = other.Ip;
          break;
        case NetOneofCase.Ipv6:
          Ipv6 = other.Ipv6;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ndx.Decoders.Basic.Ip subBuilder = new global::Ndx.Decoders.Basic.Ip();
            if (netCase_ == NetOneofCase.Ip) {
              subBuilder.MergeFrom(Ip);
            }
            input.ReadMessage(subBuilder);
            Ip = subBuilder;
            break;
          }
          case 18: {
            global::Ndx.Decoders.Basic.Ipv6 subBuilder = new global::Ndx.Decoders.Basic.Ipv6();
            if (netCase_ == NetOneofCase.Ipv6) {
              subBuilder.MergeFrom(Ipv6);
            }
            input.ReadMessage(subBuilder);
            Ipv6 = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransportPacket : pb::IMessage<TransportPacket> {
    private static readonly pb::MessageParser<TransportPacket> _parser = new pb::MessageParser<TransportPacket>(() => new TransportPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransportPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacket(TransportPacket other) : this() {
      switch (other.TransportCase) {
        case TransportOneofCase.Tcp:
          Tcp = other.Tcp.Clone();
          break;
        case TransportOneofCase.Udp:
          Udp = other.Udp.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportPacket Clone() {
      return new TransportPacket(this);
    }

    /// <summary>Field number for the "Tcp" field.</summary>
    public const int TcpFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Tcp Tcp {
      get { return transportCase_ == TransportOneofCase.Tcp ? (global::Ndx.Decoders.Basic.Tcp) transport_ : null; }
      set {
        transport_ = value;
        transportCase_ = value == null ? TransportOneofCase.None : TransportOneofCase.Tcp;
      }
    }

    /// <summary>Field number for the "Udp" field.</summary>
    public const int UdpFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.Basic.Udp Udp {
      get { return transportCase_ == TransportOneofCase.Udp ? (global::Ndx.Decoders.Basic.Udp) transport_ : null; }
      set {
        transport_ = value;
        transportCase_ = value == null ? TransportOneofCase.None : TransportOneofCase.Udp;
      }
    }

    private object transport_;
    /// <summary>Enum of possible cases for the "Transport" oneof.</summary>
    public enum TransportOneofCase {
      None = 0,
      Tcp = 1,
      Udp = 2,
    }
    private TransportOneofCase transportCase_ = TransportOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransportOneofCase TransportCase {
      get { return transportCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransport() {
      transportCase_ = TransportOneofCase.None;
      transport_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransportPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransportPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tcp, other.Tcp)) return false;
      if (!object.Equals(Udp, other.Udp)) return false;
      if (TransportCase != other.TransportCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transportCase_ == TransportOneofCase.Tcp) hash ^= Tcp.GetHashCode();
      if (transportCase_ == TransportOneofCase.Udp) hash ^= Udp.GetHashCode();
      hash ^= (int) transportCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transportCase_ == TransportOneofCase.Tcp) {
        output.WriteRawTag(10);
        output.WriteMessage(Tcp);
      }
      if (transportCase_ == TransportOneofCase.Udp) {
        output.WriteRawTag(18);
        output.WriteMessage(Udp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transportCase_ == TransportOneofCase.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tcp);
      }
      if (transportCase_ == TransportOneofCase.Udp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Udp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransportPacket other) {
      if (other == null) {
        return;
      }
      switch (other.TransportCase) {
        case TransportOneofCase.Tcp:
          Tcp = other.Tcp;
          break;
        case TransportOneofCase.Udp:
          Udp = other.Udp;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Ndx.Decoders.Basic.Tcp subBuilder = new global::Ndx.Decoders.Basic.Tcp();
            if (transportCase_ == TransportOneofCase.Tcp) {
              subBuilder.MergeFrom(Tcp);
            }
            input.ReadMessage(subBuilder);
            Tcp = subBuilder;
            break;
          }
          case 18: {
            global::Ndx.Decoders.Basic.Udp subBuilder = new global::Ndx.Decoders.Basic.Udp();
            if (transportCase_ == TransportOneofCase.Udp) {
              subBuilder.MergeFrom(Udp);
            }
            input.ReadMessage(subBuilder);
            Udp = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplicationPacket : pb::IMessage<ApplicationPacket> {
    private static readonly pb::MessageParser<ApplicationPacket> _parser = new pb::MessageParser<ApplicationPacket>(() => new ApplicationPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacket(ApplicationPacket other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationPacket Clone() {
      return new ApplicationPacket(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationPacket other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ndx.Decoders.PacketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      timeStamp_ = other.timeStamp_;
      frameNumber_ = other.frameNumber_;
      Link = other.link_ != null ? other.Link.Clone() : null;
      Network = other.network_ != null ? other.Network.Clone() : null;
      Transport = other.transport_ != null ? other.Transport.Clone() : null;
      Application = other.application_ != null ? other.Application.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "FrameNumber" field.</summary>
    public const int FrameNumberFieldNumber = 2;
    private int frameNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "Link" field.</summary>
    public const int LinkFieldNumber = 10;
    private global::Ndx.Decoders.LinkPacket link_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.LinkPacket Link {
      get { return link_; }
      set {
        link_ = value;
      }
    }

    /// <summary>Field number for the "Network" field.</summary>
    public const int NetworkFieldNumber = 20;
    private global::Ndx.Decoders.InternetPacket network_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.InternetPacket Network {
      get { return network_; }
      set {
        network_ = value;
      }
    }

    /// <summary>Field number for the "Transport" field.</summary>
    public const int TransportFieldNumber = 30;
    private global::Ndx.Decoders.TransportPacket transport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.TransportPacket Transport {
      get { return transport_; }
      set {
        transport_ = value;
      }
    }

    /// <summary>Field number for the "Application" field.</summary>
    public const int ApplicationFieldNumber = 40;
    private global::Ndx.Decoders.ApplicationPacket application_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ndx.Decoders.ApplicationPacket Application {
      get { return application_; }
      set {
        application_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeStamp != other.TimeStamp) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (!object.Equals(Link, other.Link)) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (!object.Equals(Transport, other.Transport)) return false;
      if (!object.Equals(Application, other.Application)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
      if (link_ != null) hash ^= Link.GetHashCode();
      if (network_ != null) hash ^= Network.GetHashCode();
      if (transport_ != null) hash ^= Transport.GetHashCode();
      if (application_ != null) hash ^= Application.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameNumber);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (link_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Link);
      }
      if (network_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Network);
      }
      if (transport_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Transport);
      }
      if (application_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(Application);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (FrameNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameNumber);
      }
      if (link_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
      }
      if (network_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (transport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Transport);
      }
      if (application_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Application);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.FrameNumber != 0) {
        FrameNumber = other.FrameNumber;
      }
      if (other.link_ != null) {
        if (link_ == null) {
          link_ = new global::Ndx.Decoders.LinkPacket();
        }
        Link.MergeFrom(other.Link);
      }
      if (other.network_ != null) {
        if (network_ == null) {
          network_ = new global::Ndx.Decoders.InternetPacket();
        }
        Network.MergeFrom(other.Network);
      }
      if (other.transport_ != null) {
        if (transport_ == null) {
          transport_ = new global::Ndx.Decoders.TransportPacket();
        }
        Transport.MergeFrom(other.Transport);
      }
      if (other.application_ != null) {
        if (application_ == null) {
          application_ = new global::Ndx.Decoders.ApplicationPacket();
        }
        Application.MergeFrom(other.Application);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            FrameNumber = input.ReadInt32();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 82: {
            if (link_ == null) {
              link_ = new global::Ndx.Decoders.LinkPacket();
            }
            input.ReadMessage(link_);
            break;
          }
          case 162: {
            if (network_ == null) {
              network_ = new global::Ndx.Decoders.InternetPacket();
            }
            input.ReadMessage(network_);
            break;
          }
          case 242: {
            if (transport_ == null) {
              transport_ = new global::Ndx.Decoders.TransportPacket();
            }
            input.ReadMessage(transport_);
            break;
          }
          case 322: {
            if (application_ == null) {
              application_ = new global::Ndx.Decoders.ApplicationPacket();
            }
            input.ReadMessage(application_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
