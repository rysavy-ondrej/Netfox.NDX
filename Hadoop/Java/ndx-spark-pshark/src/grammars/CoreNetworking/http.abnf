#------------------------------------------------------------------------
# HTTP
#------------------------------------------------------------------------
#
# The ABNF definition of HTTP as defined by RFC 2616.
#
#------------------------------------------------------------------------

Message        =  Request / Response ;    

Request        =  Request-Line 
                  *(Header-Line CRLF) 
                  CRLF
                  [ Message-Body ]          
               ;

Request-Line   =  Request-Method SP Request-Uri SP HTTP-Version CRLF;

Request-Method =  "OPTIONS"               
               /  "GET"                   
               /  "HEAD"                  
               /  "POST"                  
               /  "PUT"                   
               /  "DELETE"                
               /  "TRACE"                 
               /  "CONNECT"               
               /  token
               ;

HTTP-Version   =  "HTTP" "/" 1*DIGIT "." 1*DIGIT;

Request-Uri    =  *TEXT_NOSP;

Header-Line    =  Field-Name ":" [ Field-Value ];
Field-Name     =  token;
Field-Value    =  *TEXT_NOCRLF;

Response       =  Status-Line        
                  *( Header-Line  CRLF) 
                  CRLF
                  [ Message-Body ]         
               ;

Status-Line    =  HTTP-Version SP Status-Code SP Reason-Phrase CRLF;
Status-Code    =  3DIGIT;
Reason-Phrase  =  *TEXT_NOCRLF;

Message-Body   =  $rule("HttpMessageBody") ;
chunk-line     =  mid-chunk / last-chunk;
mid-chunk      =  chunk-size  CRLF;
chunk-size     =  1*HEX;
last-chunk     =  1*("0")  CRLF;

OCTET          =  %x00-FF;               # <any 8-bit sequence of data>
CHAR           =  %x01-7F;               # <any US-ASCII character (octets 0 - 127)>
UPALPHA        =  %x41-5A;               # <any US-ASCII uppercase letter "A".."Z">
LOALPHA        =  %x61-7A;               # <any US-ASCII lowercase letter "a".."z">
ALPHA          =  UPALPHA / LOALPHA;
DIGIT          =  %x30-39;               # <any US-ASCII digit "0".."9">
CTL            =  %x0-20 / %x7F;         # <any US-ASCII control character (octets 0 - 31) and DEL (127)>
CR             =  %x0D;                  # <US-ASCII CR, carriage return (13)>
LF             =  %x0A;                  # <US-ASCII LF, linefeed (10)>
SP             =  %x20;                  # <US-ASCII SP, space (32)>
HT             =  %x09;                  # <US-ASCII HT, horizontal-tab (9)>
CRLF           =  CR LF; 
LWS            =  [CRLF] 1*( SP / HT );
TEXT_NOCRLF    =  %x20-7e / %x80-FF;    
TEXT_NOSP      =  %x21-7e;                      # <any printable character except Space>
TEXT           =  %x20-7e / %x80-FF / LWS;      # <any OCTET except CTLs, but including LWS>
HEX            =  "A" / "B" / "C" / "D" / "E" / "F" / "a" / "b" / "c" / "d" / "e" / "f" / DIGIT;
token          =  1*(DIGIT / ALPHA / ";" / "^" / "_" / "`" / "|" / "~"/ "-" );    # <any CHAR except CTLs or separators>
#separators    =  "(" / ")" / "<" / ">" / "@" / "," / "#" / ":" / "\\" / "\"" / "/" / "[" / "]" / "?" / "=" / "{" / "}" / SP / HT;
comment        =  "(" *( ctext / quoted-pair / comment ) ")";
ctext          =  %x20-27 / %x2a-7e / %x80-FF;                       # <any TEXT excluding "(" and ")">
quoted-string  =  ( %x22 *(qdtext / quoted-pair ) %x22 );
qdtext         =  %x20-3b / %x3d / %x3f-7e / %x80-ff;                # <any TEXT except <">>
quoted-pair    =  "\" CHAR;